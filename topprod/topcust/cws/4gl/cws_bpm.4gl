#-------------------------------------------------------------------------------
# File: cws_bpm.4gl
# GENERATED BY fglwsdl 112734
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


IMPORT FGL WSHelper
IMPORT com
IMPORT xml


GLOBALS "./cws_bpm.inc"



#-------------------------------------------------------------------------------
# Service: PLMIntegrationEFGPService
# Port:    PLMIntegrationEFGP
# Server:  http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP
#-------------------------------------------------------------------------------

PRIVATE DEFINE custCreateFormHTTPReq     com.HTTPRequest
PRIVATE DEFINE custCreateFormHTTPResp    com.HTTPResponse

PRIVATE DEFINE custGetApproveLogHTTPReq     com.HTTPRequest
PRIVATE DEFINE custGetApproveLogHTTPResp    com.HTTPResponse

PRIVATE DEFINE getProcessPackageHTTPReq     com.HTTPRequest
PRIVATE DEFINE getProcessPackageHTTPResp    com.HTTPResponse

PRIVATE DEFINE removeAbsenceRecordHTTPReq     com.HTTPRequest
PRIVATE DEFINE removeAbsenceRecordHTTPResp    com.HTTPResponse

PRIVATE DEFINE updateDefaultSubstituteHTTPReq     com.HTTPRequest
PRIVATE DEFINE updateDefaultSubstituteHTTPResp    com.HTTPResponse

PRIVATE DEFINE getProjectsWithOrganizationIdHTTPReq     com.HTTPRequest
PRIVATE DEFINE getProjectsWithOrganizationIdHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchOrgUnitOfUserIdHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchOrgUnitOfUserIdHTTPResp    com.HTTPResponse

PRIVATE DEFINE completeWorkItemHTTPReq     com.HTTPRequest
PRIVATE DEFINE completeWorkItemHTTPResp    com.HTTPResponse

PRIVATE DEFINE updateFormValueBySerialNemberHTTPReq     com.HTTPRequest
PRIVATE DEFINE updateFormValueBySerialNemberHTTPResp    com.HTTPResponse

PRIVATE DEFINE abortProcessForSerialNoHTTPReq     com.HTTPRequest
PRIVATE DEFINE abortProcessForSerialNoHTTPResp    com.HTTPResponse

PRIVATE DEFINE terminatedProcessForSerialNoHTTPReq     com.HTTPRequest
PRIVATE DEFINE terminatedProcessForSerialNoHTTPResp    com.HTTPResponse

PRIVATE DEFINE assignRelevantDataBySerialNoHTTPReq     com.HTTPRequest
PRIVATE DEFINE assignRelevantDataBySerialNoHTTPResp    com.HTTPResponse

PRIVATE DEFINE reexecuteActivityHTTPReq     com.HTTPRequest
PRIVATE DEFINE reexecuteActivityHTTPResp    com.HTTPResponse

PRIVATE DEFINE managementChangeWorkItemOwnerHTTPReq     com.HTTPRequest
PRIVATE DEFINE managementChangeWorkItemOwnerHTTPResp    com.HTTPResponse

PRIVATE DEFINE managementReassignWorkItemHTTPReq     com.HTTPRequest
PRIVATE DEFINE managementReassignWorkItemHTTPResp    com.HTTPResponse

PRIVATE DEFINE addCustomParallelActivityHTTPReq     com.HTTPRequest
PRIVATE DEFINE addCustomParallelActivityHTTPResp    com.HTTPResponse

PRIVATE DEFINE addCloneSerialActivityHTTPReq     com.HTTPRequest
PRIVATE DEFINE addCloneSerialActivityHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchFullProcInstanceWithSerialNoHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchFullProcInstanceWithSerialNoHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchUniFormatFormInstanceWithProcOIDHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchUniFormatFormInstanceWithProcOIDHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchProcSNMatchCurrtentPerformerHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchProcSNMatchCurrtentPerformerHTTPResp    com.HTTPResponse

PRIVATE DEFINE increaseViewTimesOfWorkAssignmentHTTPReq     com.HTTPRequest
PRIVATE DEFINE increaseViewTimesOfWorkAssignmentHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchUniFormatFormInstanceWithProcSerlNoHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchUniFormatFormInstanceWithProcSerlNoHTTPResp    com.HTTPResponse

PRIVATE DEFINE countWorkingTimeHTTPReq     com.HTTPRequest
PRIVATE DEFINE countWorkingTimeHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchDueDateHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchDueDateHTTPResp    com.HTTPResponse

PRIVATE DEFINE findManagerByAppLvlHTTPReq     com.HTTPRequest
PRIVATE DEFINE findManagerByAppLvlHTTPResp    com.HTTPResponse

PRIVATE DEFINE reserveNoCmDocumentHTTPReq     com.HTTPRequest
PRIVATE DEFINE reserveNoCmDocumentHTTPResp    com.HTTPResponse

PRIVATE DEFINE addCustomParallelAndSerialActivityHTTPReq     com.HTTPRequest
PRIVATE DEFINE addCustomParallelAndSerialActivityHTTPResp    com.HTTPResponse

PRIVATE DEFINE addCustomParallelAndSerialActivity1HTTPReq     com.HTTPRequest
PRIVATE DEFINE addCustomParallelAndSerialActivity1HTTPResp    com.HTTPResponse

PRIVATE DEFINE getSysintegrationServerHTTPReq     com.HTTPRequest
PRIVATE DEFINE getSysintegrationServerHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchDefaultSubstituteInfoHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchDefaultSubstituteInfoHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchDefaultSubstituteInfo1HTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchDefaultSubstituteInfo1HTTPResp    com.HTTPResponse

PRIVATE DEFINE getSubstituteStateHTTPReq     com.HTTPRequest
PRIVATE DEFINE getSubstituteStateHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchFormInstanceWithProcSerlNoHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchFormInstanceWithProcSerlNoHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchCanTraceProcSNHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchCanTraceProcSNHTTPResp    com.HTTPResponse

PRIVATE DEFINE isPerformerOfProcessInstanceHTTPReq     com.HTTPRequest
PRIVATE DEFINE isPerformerOfProcessInstanceHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchProcInstanceWithSerialNoHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchProcInstanceWithSerialNoHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchToDoWorkItemHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchToDoWorkItemHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchProcInstancesHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchProcInstancesHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchClosedProcInstancesHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchClosedProcInstancesHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchFullProcInstanceWithOIDHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchFullProcInstanceWithOIDHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchProcInstanceWithOIDHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchProcInstanceWithOIDHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchFormInstanceWithProcOIDHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchFormInstanceWithProcOIDHTTPResp    com.HTTPResponse

PRIVATE DEFINE addCustomActivityHTTPReq     com.HTTPRequest
PRIVATE DEFINE addCustomActivityHTTPResp    com.HTTPResponse

PRIVATE DEFINE countWorkingDaysHTTPReq     com.HTTPRequest
PRIVATE DEFINE countWorkingDaysHTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcessHTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcessHTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcess1HTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcess1HTTPResp    com.HTTPResponse

PRIVATE DEFINE bypassActivityHTTPReq     com.HTTPRequest
PRIVATE DEFINE bypassActivityHTTPResp    com.HTTPResponse

PRIVATE DEFINE acceptWorkItemHTTPReq     com.HTTPRequest
PRIVATE DEFINE acceptWorkItemHTTPResp    com.HTTPResponse

PRIVATE DEFINE findFormOIDsOfProcessHTTPReq     com.HTTPRequest
PRIVATE DEFINE findFormOIDsOfProcessHTTPResp    com.HTTPResponse

PRIVATE DEFINE addUserAbsenceHTTPReq     com.HTTPRequest
PRIVATE DEFINE addUserAbsenceHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchProcessAbortOrTerminateCommentHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchProcessAbortOrTerminateCommentHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchProcessContextVariableHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchProcessContextVariableHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchProcessContextVariable1HTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchProcessContextVariable1HTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcessByParameterByOrgHTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcessByParameterByOrgHTTPResp    com.HTTPResponse

PRIVATE DEFINE removeLabelFromNoticeWorkItemHTTPReq     com.HTTPRequest
PRIVATE DEFINE removeLabelFromNoticeWorkItemHTTPResp    com.HTTPResponse

PRIVATE DEFINE getFormFieldTemplateHTTPReq     com.HTTPRequest
PRIVATE DEFINE getFormFieldTemplateHTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcessByOrgHTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcessByOrgHTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcessByOrg1HTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcessByOrg1HTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcessAndAddCustActHTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcessAndAddCustActHTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcessAndAddCustActByOrgHTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcessAndAddCustActByOrgHTTPResp    com.HTTPResponse

PRIVATE DEFINE invokeProcessByParameterHTTPReq     com.HTTPRequest
PRIVATE DEFINE invokeProcessByParameterHTTPResp    com.HTTPResponse

PRIVATE DEFINE importOrganizationDataHTTPReq     com.HTTPRequest
PRIVATE DEFINE importOrganizationDataHTTPResp    com.HTTPResponse

PRIVATE DEFINE assigneeReassignWorkItemHTTPReq     com.HTTPRequest
PRIVATE DEFINE assigneeReassignWorkItemHTTPResp    com.HTTPResponse

PRIVATE DEFINE checkWorkItemStateHTTPReq     com.HTTPRequest
PRIVATE DEFINE checkWorkItemStateHTTPResp    com.HTTPResponse

PRIVATE DEFINE addLabelToNoticeWorkItemHTTPReq     com.HTTPRequest
PRIVATE DEFINE addLabelToNoticeWorkItemHTTPResp    com.HTTPResponse

PRIVATE DEFINE fetchWorkItemCountHTTPReq     com.HTTPRequest
PRIVATE DEFINE fetchWorkItemCountHTTPResp    com.HTTPResponse

#-------------------------------------------------------------------------------

#
# Operation: custCreateForm
#

#
# FUNCTION: custCreateForm
#
FUNCTION custCreateForm(p_pRequestXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pRequestXML		STRING

  LET custCreateFormRequest.pRequestXML = p_pRequestXML

  LET soapStatus = custCreateForm_g()

  RETURN soapStatus, custCreateFormResponse.custCreateFormReturn
END FUNCTION

#
# FUNCTION: custCreateForm_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL custCreateFormRequest
#   OUTPUT: GLOBAL custCreateFormResponse
#
FUNCTION custCreateForm_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(custCreateFormRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,custCreateFormResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION custCreateFormRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF custCreateFormHTTPReq IS NOT NULL AND custCreateFormHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET custCreateFormHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL custCreateFormHTTPReq.setMethod("POST")
    CALL custCreateFormHTTPReq.setCharset("UTF-8")
    CALL custCreateFormHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL custCreateFormHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL custCreateFormHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL custCreateFormHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL custCreateFormHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET custCreateFormHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(custCreateFormRequest,body)

      # Send SOAP envelope
      CALL custCreateFormHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET custCreateFormHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET custCreateFormHTTPResp = custCreateFormHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET custCreateFormHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION custCreateFormResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF custCreateFormHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF custCreateFormHTTPResp IS NULL THEN
      # Still no response, try again
      LET custCreateFormHTTPResp = custCreateFormHTTPReq.getAsyncResponse()
    END IF

    IF custCreateFormHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = custCreateFormHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE custCreateFormHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = custCreateFormHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = custCreateFormHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,custCreateFormResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||custCreateFormHTTPResp.getStatusCode()||" ("||custCreateFormHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET custCreateFormHTTPReq = NULL
  LET custCreateFormHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: custGetApproveLog
#

#
# FUNCTION: custGetApproveLog
#
FUNCTION custGetApproveLog(p_pRequestXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pRequestXML		STRING

  LET custGetApproveLogRequest.pRequestXML = p_pRequestXML

  LET soapStatus = custGetApproveLog_g()

  RETURN soapStatus, custGetApproveLogResponse.custGetApproveLogReturn
END FUNCTION

#
# FUNCTION: custGetApproveLog_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL custGetApproveLogRequest
#   OUTPUT: GLOBAL custGetApproveLogResponse
#
FUNCTION custGetApproveLog_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(custGetApproveLogRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,custGetApproveLogResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION custGetApproveLogRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF custGetApproveLogHTTPReq IS NOT NULL AND custGetApproveLogHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET custGetApproveLogHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL custGetApproveLogHTTPReq.setMethod("POST")
    CALL custGetApproveLogHTTPReq.setCharset("UTF-8")
    CALL custGetApproveLogHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL custGetApproveLogHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL custGetApproveLogHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL custGetApproveLogHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL custGetApproveLogHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET custGetApproveLogHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(custGetApproveLogRequest,body)

      # Send SOAP envelope
      CALL custGetApproveLogHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET custGetApproveLogHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET custGetApproveLogHTTPResp = custGetApproveLogHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET custGetApproveLogHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION custGetApproveLogResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF custGetApproveLogHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF custGetApproveLogHTTPResp IS NULL THEN
      # Still no response, try again
      LET custGetApproveLogHTTPResp = custGetApproveLogHTTPReq.getAsyncResponse()
    END IF

    IF custGetApproveLogHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = custGetApproveLogHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE custGetApproveLogHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = custGetApproveLogHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = custGetApproveLogHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,custGetApproveLogResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||custGetApproveLogHTTPResp.getStatusCode()||" ("||custGetApproveLogHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET custGetApproveLogHTTPReq = NULL
  LET custGetApproveLogHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: getProcessPackage
#

#
# FUNCTION: getProcessPackage
#
FUNCTION getProcessPackage(p_pProcessPackageId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING

  LET getProcessPackageRequest.pProcessPackageId = p_pProcessPackageId

  LET soapStatus = getProcessPackage_g()

  RETURN soapStatus, getProcessPackageResponse.getProcessPackageReturn
END FUNCTION

#
# FUNCTION: getProcessPackage_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL getProcessPackageRequest
#   OUTPUT: GLOBAL getProcessPackageResponse
#
FUNCTION getProcessPackage_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getProcessPackageRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getProcessPackageResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION getProcessPackageRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getProcessPackageHTTPReq IS NOT NULL AND getProcessPackageHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getProcessPackageHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL getProcessPackageHTTPReq.setMethod("POST")
    CALL getProcessPackageHTTPReq.setCharset("UTF-8")
    CALL getProcessPackageHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL getProcessPackageHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL getProcessPackageHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL getProcessPackageHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL getProcessPackageHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getProcessPackageHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getProcessPackageRequest,body)

      # Send SOAP envelope
      CALL getProcessPackageHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getProcessPackageHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getProcessPackageHTTPResp = getProcessPackageHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getProcessPackageHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION getProcessPackageResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF getProcessPackageHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getProcessPackageHTTPResp IS NULL THEN
      # Still no response, try again
      LET getProcessPackageHTTPResp = getProcessPackageHTTPReq.getAsyncResponse()
    END IF

    IF getProcessPackageHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = getProcessPackageHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE getProcessPackageHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getProcessPackageHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getProcessPackageHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getProcessPackageResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getProcessPackageHTTPResp.getStatusCode()||" ("||getProcessPackageHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getProcessPackageHTTPReq = NULL
  LET getProcessPackageHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: removeAbsenceRecord
#

#
# FUNCTION: removeAbsenceRecord
#
FUNCTION removeAbsenceRecord(p_pUserId, p_pStartDateTime, p_pEndDateTime)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pStartDateTime		STRING
  DEFINE	p_pEndDateTime		STRING

  LET removeAbsenceRecordRequest.pUserId = p_pUserId
  LET removeAbsenceRecordRequest.pStartDateTime = p_pStartDateTime
  LET removeAbsenceRecordRequest.pEndDateTime = p_pEndDateTime

  LET soapStatus = removeAbsenceRecord_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: removeAbsenceRecord_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL removeAbsenceRecordRequest
#   OUTPUT: NONE
#
FUNCTION removeAbsenceRecord_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(removeAbsenceRecordRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="removeAbsenceRecordResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION removeAbsenceRecordRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF removeAbsenceRecordHTTPReq IS NOT NULL AND removeAbsenceRecordHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET removeAbsenceRecordHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL removeAbsenceRecordHTTPReq.setMethod("POST")
    CALL removeAbsenceRecordHTTPReq.setCharset("UTF-8")
    CALL removeAbsenceRecordHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL removeAbsenceRecordHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL removeAbsenceRecordHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL removeAbsenceRecordHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL removeAbsenceRecordHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET removeAbsenceRecordHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(removeAbsenceRecordRequest,body)

      # Send SOAP envelope
      CALL removeAbsenceRecordHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET removeAbsenceRecordHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET removeAbsenceRecordHTTPResp = removeAbsenceRecordHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET removeAbsenceRecordHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION removeAbsenceRecordResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF removeAbsenceRecordHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF removeAbsenceRecordHTTPResp IS NULL THEN
      # Still no response, try again
      LET removeAbsenceRecordHTTPResp = removeAbsenceRecordHTTPReq.getAsyncResponse()
    END IF

    IF removeAbsenceRecordHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = removeAbsenceRecordHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE removeAbsenceRecordHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = removeAbsenceRecordHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = removeAbsenceRecordHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="removeAbsenceRecordResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||removeAbsenceRecordHTTPResp.getStatusCode()||" ("||removeAbsenceRecordHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET removeAbsenceRecordHTTPReq = NULL
  LET removeAbsenceRecordHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: updateDefaultSubstitute
#

#
# FUNCTION: updateDefaultSubstitute
#
FUNCTION updateDefaultSubstitute(p_pUserId, p_pDefaultSubstitutesId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pDefaultSubstitutesId		STRING

  LET updateDefaultSubstituteRequest.pUserId = p_pUserId
  LET updateDefaultSubstituteRequest.pDefaultSubstitutesId = p_pDefaultSubstitutesId

  LET soapStatus = updateDefaultSubstitute_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: updateDefaultSubstitute_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL updateDefaultSubstituteRequest
#   OUTPUT: NONE
#
FUNCTION updateDefaultSubstitute_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(updateDefaultSubstituteRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="updateDefaultSubstituteResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION updateDefaultSubstituteRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF updateDefaultSubstituteHTTPReq IS NOT NULL AND updateDefaultSubstituteHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET updateDefaultSubstituteHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL updateDefaultSubstituteHTTPReq.setMethod("POST")
    CALL updateDefaultSubstituteHTTPReq.setCharset("UTF-8")
    CALL updateDefaultSubstituteHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL updateDefaultSubstituteHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL updateDefaultSubstituteHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL updateDefaultSubstituteHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL updateDefaultSubstituteHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET updateDefaultSubstituteHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(updateDefaultSubstituteRequest,body)

      # Send SOAP envelope
      CALL updateDefaultSubstituteHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET updateDefaultSubstituteHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET updateDefaultSubstituteHTTPResp = updateDefaultSubstituteHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET updateDefaultSubstituteHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION updateDefaultSubstituteResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF updateDefaultSubstituteHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF updateDefaultSubstituteHTTPResp IS NULL THEN
      # Still no response, try again
      LET updateDefaultSubstituteHTTPResp = updateDefaultSubstituteHTTPReq.getAsyncResponse()
    END IF

    IF updateDefaultSubstituteHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = updateDefaultSubstituteHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE updateDefaultSubstituteHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = updateDefaultSubstituteHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = updateDefaultSubstituteHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="updateDefaultSubstituteResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||updateDefaultSubstituteHTTPResp.getStatusCode()||" ("||updateDefaultSubstituteHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET updateDefaultSubstituteHTTPReq = NULL
  LET updateDefaultSubstituteHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: getProjectsWithOrganizationId
#

#
# FUNCTION: getProjectsWithOrganizationId
#
FUNCTION getProjectsWithOrganizationId(p_pOrganizationId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pOrganizationId		STRING

  LET getProjectsWithOrganizationIdRequest.pOrganizationId = p_pOrganizationId

  LET soapStatus = getProjectsWithOrganizationId_g()

  RETURN soapStatus, getProjectsWithOrganizationIdResponse.getProjectsWithOrganizationIdReturn
END FUNCTION

#
# FUNCTION: getProjectsWithOrganizationId_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL getProjectsWithOrganizationIdRequest
#   OUTPUT: GLOBAL getProjectsWithOrganizationIdResponse
#
FUNCTION getProjectsWithOrganizationId_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getProjectsWithOrganizationIdRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getProjectsWithOrganizationIdResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION getProjectsWithOrganizationIdRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getProjectsWithOrganizationIdHTTPReq IS NOT NULL AND getProjectsWithOrganizationIdHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getProjectsWithOrganizationIdHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL getProjectsWithOrganizationIdHTTPReq.setMethod("POST")
    CALL getProjectsWithOrganizationIdHTTPReq.setCharset("UTF-8")
    CALL getProjectsWithOrganizationIdHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL getProjectsWithOrganizationIdHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL getProjectsWithOrganizationIdHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL getProjectsWithOrganizationIdHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL getProjectsWithOrganizationIdHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getProjectsWithOrganizationIdHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getProjectsWithOrganizationIdRequest,body)

      # Send SOAP envelope
      CALL getProjectsWithOrganizationIdHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getProjectsWithOrganizationIdHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getProjectsWithOrganizationIdHTTPResp = getProjectsWithOrganizationIdHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getProjectsWithOrganizationIdHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION getProjectsWithOrganizationIdResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF getProjectsWithOrganizationIdHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getProjectsWithOrganizationIdHTTPResp IS NULL THEN
      # Still no response, try again
      LET getProjectsWithOrganizationIdHTTPResp = getProjectsWithOrganizationIdHTTPReq.getAsyncResponse()
    END IF

    IF getProjectsWithOrganizationIdHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = getProjectsWithOrganizationIdHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE getProjectsWithOrganizationIdHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getProjectsWithOrganizationIdHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getProjectsWithOrganizationIdHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getProjectsWithOrganizationIdResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getProjectsWithOrganizationIdHTTPResp.getStatusCode()||" ("||getProjectsWithOrganizationIdHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getProjectsWithOrganizationIdHTTPReq = NULL
  LET getProjectsWithOrganizationIdHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchOrgUnitOfUserId
#

#
# FUNCTION: fetchOrgUnitOfUserId
#
FUNCTION fetchOrgUnitOfUserId(p_pUserId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING

  LET fetchOrgUnitOfUserIdRequest.pUserId = p_pUserId

  LET soapStatus = fetchOrgUnitOfUserId_g()

  RETURN soapStatus, fetchOrgUnitOfUserIdResponse.fetchOrgUnitOfUserIdReturn
END FUNCTION

#
# FUNCTION: fetchOrgUnitOfUserId_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchOrgUnitOfUserIdRequest
#   OUTPUT: GLOBAL fetchOrgUnitOfUserIdResponse
#
FUNCTION fetchOrgUnitOfUserId_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer) 
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body) 
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchOrgUnitOfUserIdRequest,body) 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchOrgUnitOfUserIdResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchOrgUnitOfUserIdRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchOrgUnitOfUserIdHTTPReq IS NOT NULL AND fetchOrgUnitOfUserIdHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchOrgUnitOfUserIdHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchOrgUnitOfUserIdHTTPReq.setMethod("POST")
    CALL fetchOrgUnitOfUserIdHTTPReq.setCharset("UTF-8")
    CALL fetchOrgUnitOfUserIdHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchOrgUnitOfUserIdHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchOrgUnitOfUserIdHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchOrgUnitOfUserIdHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchOrgUnitOfUserIdHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchOrgUnitOfUserIdHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchOrgUnitOfUserIdRequest,body)

      # Send SOAP envelope
      CALL fetchOrgUnitOfUserIdHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchOrgUnitOfUserIdHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchOrgUnitOfUserIdHTTPResp = fetchOrgUnitOfUserIdHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchOrgUnitOfUserIdHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchOrgUnitOfUserIdResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchOrgUnitOfUserIdHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchOrgUnitOfUserIdHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchOrgUnitOfUserIdHTTPResp = fetchOrgUnitOfUserIdHTTPReq.getAsyncResponse()
    END IF

    IF fetchOrgUnitOfUserIdHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchOrgUnitOfUserIdHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchOrgUnitOfUserIdHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchOrgUnitOfUserIdHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchOrgUnitOfUserIdHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchOrgUnitOfUserIdResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchOrgUnitOfUserIdHTTPResp.getStatusCode()||" ("||fetchOrgUnitOfUserIdHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchOrgUnitOfUserIdHTTPReq = NULL
  LET fetchOrgUnitOfUserIdHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: completeWorkItem
#

#
# FUNCTION: completeWorkItem
#
FUNCTION completeWorkItem(p_pWorkItemOID, p_pUserId, p_pComment)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItemOID		STRING
  DEFINE	p_pUserId		STRING
  DEFINE	p_pComment		STRING

  LET completeWorkItemRequest.pWorkItemOID = p_pWorkItemOID
  LET completeWorkItemRequest.pUserId = p_pUserId
  LET completeWorkItemRequest.pComment = p_pComment

  LET soapStatus = completeWorkItem_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: completeWorkItem_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL completeWorkItemRequest
#   OUTPUT: NONE
#
FUNCTION completeWorkItem_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(completeWorkItemRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="completeWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION completeWorkItemRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF completeWorkItemHTTPReq IS NOT NULL AND completeWorkItemHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET completeWorkItemHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL completeWorkItemHTTPReq.setMethod("POST")
    CALL completeWorkItemHTTPReq.setCharset("UTF-8")
    CALL completeWorkItemHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL completeWorkItemHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL completeWorkItemHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL completeWorkItemHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL completeWorkItemHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET completeWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(completeWorkItemRequest,body)

      # Send SOAP envelope
      CALL completeWorkItemHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET completeWorkItemHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET completeWorkItemHTTPResp = completeWorkItemHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET completeWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION completeWorkItemResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF completeWorkItemHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF completeWorkItemHTTPResp IS NULL THEN
      # Still no response, try again
      LET completeWorkItemHTTPResp = completeWorkItemHTTPReq.getAsyncResponse()
    END IF

    IF completeWorkItemHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = completeWorkItemHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE completeWorkItemHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = completeWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = completeWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="completeWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||completeWorkItemHTTPResp.getStatusCode()||" ("||completeWorkItemHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET completeWorkItemHTTPReq = NULL
  LET completeWorkItemHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: updateFormValueBySerialNember
#

#
# FUNCTION: updateFormValueBySerialNember
#
FUNCTION updateFormValueBySerialNember(p_serialNumber, p_pFormValue)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_serialNumber		STRING
  DEFINE	p_pFormValue		STRING

  LET updateFormValueBySerialNemberRequest.serialNumber = p_serialNumber
  LET updateFormValueBySerialNemberRequest.pFormValue = p_pFormValue

  LET soapStatus = updateFormValueBySerialNember_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: updateFormValueBySerialNember_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL updateFormValueBySerialNemberRequest
#   OUTPUT: NONE
#
FUNCTION updateFormValueBySerialNember_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(updateFormValueBySerialNemberRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="updateFormValueBySerialNemberResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION updateFormValueBySerialNemberRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF updateFormValueBySerialNemberHTTPReq IS NOT NULL AND updateFormValueBySerialNemberHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET updateFormValueBySerialNemberHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL updateFormValueBySerialNemberHTTPReq.setMethod("POST")
    CALL updateFormValueBySerialNemberHTTPReq.setCharset("UTF-8")
    CALL updateFormValueBySerialNemberHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL updateFormValueBySerialNemberHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL updateFormValueBySerialNemberHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL updateFormValueBySerialNemberHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL updateFormValueBySerialNemberHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET updateFormValueBySerialNemberHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(updateFormValueBySerialNemberRequest,body)

      # Send SOAP envelope
      CALL updateFormValueBySerialNemberHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET updateFormValueBySerialNemberHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET updateFormValueBySerialNemberHTTPResp = updateFormValueBySerialNemberHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET updateFormValueBySerialNemberHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION updateFormValueBySerialNemberResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF updateFormValueBySerialNemberHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF updateFormValueBySerialNemberHTTPResp IS NULL THEN
      # Still no response, try again
      LET updateFormValueBySerialNemberHTTPResp = updateFormValueBySerialNemberHTTPReq.getAsyncResponse()
    END IF

    IF updateFormValueBySerialNemberHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = updateFormValueBySerialNemberHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE updateFormValueBySerialNemberHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = updateFormValueBySerialNemberHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = updateFormValueBySerialNemberHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="updateFormValueBySerialNemberResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||updateFormValueBySerialNemberHTTPResp.getStatusCode()||" ("||updateFormValueBySerialNemberHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET updateFormValueBySerialNemberHTTPReq = NULL
  LET updateFormValueBySerialNemberHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: abortProcessForSerialNo
#

#
# FUNCTION: abortProcessForSerialNo
#
FUNCTION abortProcessForSerialNo(p_pProcessInstanceSerialNo, p_pAbortComment)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING
  DEFINE	p_pAbortComment		STRING

  LET abortProcessForSerialNoRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo
  LET abortProcessForSerialNoRequest.pAbortComment = p_pAbortComment

  LET soapStatus = abortProcessForSerialNo_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: abortProcessForSerialNo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL abortProcessForSerialNoRequest
#   OUTPUT: NONE
#
FUNCTION abortProcessForSerialNo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(abortProcessForSerialNoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="abortProcessForSerialNoResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION abortProcessForSerialNoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF abortProcessForSerialNoHTTPReq IS NOT NULL AND abortProcessForSerialNoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET abortProcessForSerialNoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL abortProcessForSerialNoHTTPReq.setMethod("POST")
    CALL abortProcessForSerialNoHTTPReq.setCharset("UTF-8")
    CALL abortProcessForSerialNoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL abortProcessForSerialNoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL abortProcessForSerialNoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL abortProcessForSerialNoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL abortProcessForSerialNoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET abortProcessForSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(abortProcessForSerialNoRequest,body)

      # Send SOAP envelope
      CALL abortProcessForSerialNoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET abortProcessForSerialNoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET abortProcessForSerialNoHTTPResp = abortProcessForSerialNoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET abortProcessForSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION abortProcessForSerialNoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF abortProcessForSerialNoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF abortProcessForSerialNoHTTPResp IS NULL THEN
      # Still no response, try again
      LET abortProcessForSerialNoHTTPResp = abortProcessForSerialNoHTTPReq.getAsyncResponse()
    END IF

    IF abortProcessForSerialNoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = abortProcessForSerialNoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE abortProcessForSerialNoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = abortProcessForSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = abortProcessForSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="abortProcessForSerialNoResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||abortProcessForSerialNoHTTPResp.getStatusCode()||" ("||abortProcessForSerialNoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET abortProcessForSerialNoHTTPReq = NULL
  LET abortProcessForSerialNoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: terminatedProcessForSerialNo
#

#
# FUNCTION: terminatedProcessForSerialNo
#
FUNCTION terminatedProcessForSerialNo(p_pProcessInstanceSerialNo, p_pUserId, p_pTerminatedComment)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING
  DEFINE	p_pUserId		STRING
  DEFINE	p_pTerminatedComment		STRING

  LET terminatedProcessForSerialNoRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo
  LET terminatedProcessForSerialNoRequest.pUserId = p_pUserId
  LET terminatedProcessForSerialNoRequest.pTerminatedComment = p_pTerminatedComment

  LET soapStatus = terminatedProcessForSerialNo_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: terminatedProcessForSerialNo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL terminatedProcessForSerialNoRequest
#   OUTPUT: NONE
#
FUNCTION terminatedProcessForSerialNo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(terminatedProcessForSerialNoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="terminatedProcessForSerialNoResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION terminatedProcessForSerialNoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF terminatedProcessForSerialNoHTTPReq IS NOT NULL AND terminatedProcessForSerialNoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET terminatedProcessForSerialNoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL terminatedProcessForSerialNoHTTPReq.setMethod("POST")
    CALL terminatedProcessForSerialNoHTTPReq.setCharset("UTF-8")
    CALL terminatedProcessForSerialNoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL terminatedProcessForSerialNoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL terminatedProcessForSerialNoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL terminatedProcessForSerialNoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL terminatedProcessForSerialNoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET terminatedProcessForSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(terminatedProcessForSerialNoRequest,body)

      # Send SOAP envelope
      CALL terminatedProcessForSerialNoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET terminatedProcessForSerialNoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET terminatedProcessForSerialNoHTTPResp = terminatedProcessForSerialNoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET terminatedProcessForSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION terminatedProcessForSerialNoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF terminatedProcessForSerialNoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF terminatedProcessForSerialNoHTTPResp IS NULL THEN
      # Still no response, try again
      LET terminatedProcessForSerialNoHTTPResp = terminatedProcessForSerialNoHTTPReq.getAsyncResponse()
    END IF

    IF terminatedProcessForSerialNoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = terminatedProcessForSerialNoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE terminatedProcessForSerialNoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = terminatedProcessForSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = terminatedProcessForSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="terminatedProcessForSerialNoResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||terminatedProcessForSerialNoHTTPResp.getStatusCode()||" ("||terminatedProcessForSerialNoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET terminatedProcessForSerialNoHTTPReq = NULL
  LET terminatedProcessForSerialNoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: assignRelevantDataBySerialNo
#

#
# FUNCTION: assignRelevantDataBySerialNo
#
FUNCTION assignRelevantDataBySerialNo(p_pProcessInstanceSerialNo, p_pRelevantDataId, p_pRelevantDataValue)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING
  DEFINE	p_pRelevantDataId		STRING
  DEFINE	p_pRelevantDataValue		STRING

  LET assignRelevantDataBySerialNoRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo
  LET assignRelevantDataBySerialNoRequest.pRelevantDataId = p_pRelevantDataId
  LET assignRelevantDataBySerialNoRequest.pRelevantDataValue = p_pRelevantDataValue

  LET soapStatus = assignRelevantDataBySerialNo_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: assignRelevantDataBySerialNo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL assignRelevantDataBySerialNoRequest
#   OUTPUT: NONE
#
FUNCTION assignRelevantDataBySerialNo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(assignRelevantDataBySerialNoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="assignRelevantDataBySerialNoResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION assignRelevantDataBySerialNoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF assignRelevantDataBySerialNoHTTPReq IS NOT NULL AND assignRelevantDataBySerialNoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET assignRelevantDataBySerialNoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL assignRelevantDataBySerialNoHTTPReq.setMethod("POST")
    CALL assignRelevantDataBySerialNoHTTPReq.setCharset("UTF-8")
    CALL assignRelevantDataBySerialNoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL assignRelevantDataBySerialNoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL assignRelevantDataBySerialNoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL assignRelevantDataBySerialNoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL assignRelevantDataBySerialNoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET assignRelevantDataBySerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(assignRelevantDataBySerialNoRequest,body)

      # Send SOAP envelope
      CALL assignRelevantDataBySerialNoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET assignRelevantDataBySerialNoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET assignRelevantDataBySerialNoHTTPResp = assignRelevantDataBySerialNoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET assignRelevantDataBySerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION assignRelevantDataBySerialNoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF assignRelevantDataBySerialNoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF assignRelevantDataBySerialNoHTTPResp IS NULL THEN
      # Still no response, try again
      LET assignRelevantDataBySerialNoHTTPResp = assignRelevantDataBySerialNoHTTPReq.getAsyncResponse()
    END IF

    IF assignRelevantDataBySerialNoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = assignRelevantDataBySerialNoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE assignRelevantDataBySerialNoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = assignRelevantDataBySerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = assignRelevantDataBySerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="assignRelevantDataBySerialNoResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||assignRelevantDataBySerialNoHTTPResp.getStatusCode()||" ("||assignRelevantDataBySerialNoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET assignRelevantDataBySerialNoHTTPReq = NULL
  LET assignRelevantDataBySerialNoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: reexecuteActivity
#

#
# FUNCTION: reexecuteActivity
#
FUNCTION reexecuteActivity(p_pProcessSerialNo, p_pAskReexecuteUserId, p_pReexecuteActivityId, p_pReexecuteComment)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessSerialNo		STRING
  DEFINE	p_pAskReexecuteUserId		STRING
  DEFINE	p_pReexecuteActivityId		STRING
  DEFINE	p_pReexecuteComment		STRING

  LET reexecuteActivityRequest.pProcessSerialNo = p_pProcessSerialNo
  LET reexecuteActivityRequest.pAskReexecuteUserId = p_pAskReexecuteUserId
  LET reexecuteActivityRequest.pReexecuteActivityId = p_pReexecuteActivityId
  LET reexecuteActivityRequest.pReexecuteComment = p_pReexecuteComment

  LET soapStatus = reexecuteActivity_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: reexecuteActivity_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL reexecuteActivityRequest
#   OUTPUT: NONE
#
FUNCTION reexecuteActivity_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(reexecuteActivityRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="reexecuteActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION reexecuteActivityRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF reexecuteActivityHTTPReq IS NOT NULL AND reexecuteActivityHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET reexecuteActivityHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL reexecuteActivityHTTPReq.setMethod("POST")
    CALL reexecuteActivityHTTPReq.setCharset("UTF-8")
    CALL reexecuteActivityHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL reexecuteActivityHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL reexecuteActivityHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL reexecuteActivityHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL reexecuteActivityHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET reexecuteActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(reexecuteActivityRequest,body)

      # Send SOAP envelope
      CALL reexecuteActivityHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET reexecuteActivityHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET reexecuteActivityHTTPResp = reexecuteActivityHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET reexecuteActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION reexecuteActivityResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF reexecuteActivityHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF reexecuteActivityHTTPResp IS NULL THEN
      # Still no response, try again
      LET reexecuteActivityHTTPResp = reexecuteActivityHTTPReq.getAsyncResponse()
    END IF

    IF reexecuteActivityHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = reexecuteActivityHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE reexecuteActivityHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = reexecuteActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = reexecuteActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="reexecuteActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||reexecuteActivityHTTPResp.getStatusCode()||" ("||reexecuteActivityHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET reexecuteActivityHTTPReq = NULL
  LET reexecuteActivityHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: managementChangeWorkItemOwner
#

#
# FUNCTION: managementChangeWorkItemOwner
#
FUNCTION managementChangeWorkItemOwner(p_pAcceptorOID, p_pWorkItemOID, p_pReassignComment)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pAcceptorOID		STRING
  DEFINE	p_pWorkItemOID		STRING
  DEFINE	p_pReassignComment		STRING

  LET managementChangeWorkItemOwnerRequest.pAcceptorOID = p_pAcceptorOID
  LET managementChangeWorkItemOwnerRequest.pWorkItemOID = p_pWorkItemOID
  LET managementChangeWorkItemOwnerRequest.pReassignComment = p_pReassignComment

  LET soapStatus = managementChangeWorkItemOwner_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: managementChangeWorkItemOwner_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL managementChangeWorkItemOwnerRequest
#   OUTPUT: NONE
#
FUNCTION managementChangeWorkItemOwner_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(managementChangeWorkItemOwnerRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="managementChangeWorkItemOwnerResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION managementChangeWorkItemOwnerRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF managementChangeWorkItemOwnerHTTPReq IS NOT NULL AND managementChangeWorkItemOwnerHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET managementChangeWorkItemOwnerHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL managementChangeWorkItemOwnerHTTPReq.setMethod("POST")
    CALL managementChangeWorkItemOwnerHTTPReq.setCharset("UTF-8")
    CALL managementChangeWorkItemOwnerHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL managementChangeWorkItemOwnerHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL managementChangeWorkItemOwnerHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL managementChangeWorkItemOwnerHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL managementChangeWorkItemOwnerHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET managementChangeWorkItemOwnerHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(managementChangeWorkItemOwnerRequest,body)

      # Send SOAP envelope
      CALL managementChangeWorkItemOwnerHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET managementChangeWorkItemOwnerHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET managementChangeWorkItemOwnerHTTPResp = managementChangeWorkItemOwnerHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET managementChangeWorkItemOwnerHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION managementChangeWorkItemOwnerResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF managementChangeWorkItemOwnerHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF managementChangeWorkItemOwnerHTTPResp IS NULL THEN
      # Still no response, try again
      LET managementChangeWorkItemOwnerHTTPResp = managementChangeWorkItemOwnerHTTPReq.getAsyncResponse()
    END IF

    IF managementChangeWorkItemOwnerHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = managementChangeWorkItemOwnerHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE managementChangeWorkItemOwnerHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = managementChangeWorkItemOwnerHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = managementChangeWorkItemOwnerHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="managementChangeWorkItemOwnerResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||managementChangeWorkItemOwnerHTTPResp.getStatusCode()||" ("||managementChangeWorkItemOwnerHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET managementChangeWorkItemOwnerHTTPReq = NULL
  LET managementChangeWorkItemOwnerHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: managementReassignWorkItem
#

#
# FUNCTION: managementReassignWorkItem
#
FUNCTION managementReassignWorkItem(p_pAcceptorOID, p_pWorkItemOID, p_pReassignComment)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pAcceptorOID		STRING
  DEFINE	p_pWorkItemOID		STRING
  DEFINE	p_pReassignComment		STRING

  LET managementReassignWorkItemRequest.pAcceptorOID = p_pAcceptorOID
  LET managementReassignWorkItemRequest.pWorkItemOID = p_pWorkItemOID
  LET managementReassignWorkItemRequest.pReassignComment = p_pReassignComment

  LET soapStatus = managementReassignWorkItem_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: managementReassignWorkItem_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL managementReassignWorkItemRequest
#   OUTPUT: NONE
#
FUNCTION managementReassignWorkItem_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(managementReassignWorkItemRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="managementReassignWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION managementReassignWorkItemRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF managementReassignWorkItemHTTPReq IS NOT NULL AND managementReassignWorkItemHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET managementReassignWorkItemHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL managementReassignWorkItemHTTPReq.setMethod("POST")
    CALL managementReassignWorkItemHTTPReq.setCharset("UTF-8")
    CALL managementReassignWorkItemHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL managementReassignWorkItemHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL managementReassignWorkItemHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL managementReassignWorkItemHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL managementReassignWorkItemHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET managementReassignWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(managementReassignWorkItemRequest,body)

      # Send SOAP envelope
      CALL managementReassignWorkItemHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET managementReassignWorkItemHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET managementReassignWorkItemHTTPResp = managementReassignWorkItemHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET managementReassignWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION managementReassignWorkItemResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF managementReassignWorkItemHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF managementReassignWorkItemHTTPResp IS NULL THEN
      # Still no response, try again
      LET managementReassignWorkItemHTTPResp = managementReassignWorkItemHTTPReq.getAsyncResponse()
    END IF

    IF managementReassignWorkItemHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = managementReassignWorkItemHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE managementReassignWorkItemHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = managementReassignWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = managementReassignWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="managementReassignWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||managementReassignWorkItemHTTPResp.getStatusCode()||" ("||managementReassignWorkItemHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET managementReassignWorkItemHTTPReq = NULL
  LET managementReassignWorkItemHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: addCustomParallelActivity
#

#
# FUNCTION: addCustomParallelActivity
#
FUNCTION addCustomParallelActivity(p_pWorkItmeOID, p_pPostParallelActDefsAsXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItmeOID		STRING
  DEFINE	p_pPostParallelActDefsAsXML		STRING

  LET addCustomParallelActivityRequest.pWorkItmeOID = p_pWorkItmeOID
  LET addCustomParallelActivityRequest.pPostParallelActDefsAsXML = p_pPostParallelActDefsAsXML

  LET soapStatus = addCustomParallelActivity_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: addCustomParallelActivity_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL addCustomParallelActivityRequest
#   OUTPUT: NONE
#
FUNCTION addCustomParallelActivity_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomParallelActivityRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomParallelActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION addCustomParallelActivityRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomParallelActivityHTTPReq IS NOT NULL AND addCustomParallelActivityHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET addCustomParallelActivityHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL addCustomParallelActivityHTTPReq.setMethod("POST")
    CALL addCustomParallelActivityHTTPReq.setCharset("UTF-8")
    CALL addCustomParallelActivityHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL addCustomParallelActivityHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL addCustomParallelActivityHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL addCustomParallelActivityHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL addCustomParallelActivityHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET addCustomParallelActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomParallelActivityRequest,body)

      # Send SOAP envelope
      CALL addCustomParallelActivityHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET addCustomParallelActivityHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET addCustomParallelActivityHTTPResp = addCustomParallelActivityHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET addCustomParallelActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION addCustomParallelActivityResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomParallelActivityHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF addCustomParallelActivityHTTPResp IS NULL THEN
      # Still no response, try again
      LET addCustomParallelActivityHTTPResp = addCustomParallelActivityHTTPReq.getAsyncResponse()
    END IF

    IF addCustomParallelActivityHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = addCustomParallelActivityHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE addCustomParallelActivityHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = addCustomParallelActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = addCustomParallelActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomParallelActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||addCustomParallelActivityHTTPResp.getStatusCode()||" ("||addCustomParallelActivityHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET addCustomParallelActivityHTTPReq = NULL
  LET addCustomParallelActivityHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: addCloneSerialActivity
#

#
# FUNCTION: addCloneSerialActivity
#
FUNCTION addCloneSerialActivity(p_pProcessInstanceSN, p_pActId, p_pRefActId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSN		STRING
  DEFINE	p_pActId		STRING
  DEFINE	p_pRefActId		STRING

  LET addCloneSerialActivityRequest.pProcessInstanceSN = p_pProcessInstanceSN
  LET addCloneSerialActivityRequest.pActId = p_pActId
  LET addCloneSerialActivityRequest.pRefActId = p_pRefActId

  LET soapStatus = addCloneSerialActivity_g()

  RETURN soapStatus, addCloneSerialActivityResponse.addCloneSerialActivityReturn
END FUNCTION

#
# FUNCTION: addCloneSerialActivity_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL addCloneSerialActivityRequest
#   OUTPUT: GLOBAL addCloneSerialActivityResponse
#
FUNCTION addCloneSerialActivity_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCloneSerialActivityRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,addCloneSerialActivityResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION addCloneSerialActivityRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF addCloneSerialActivityHTTPReq IS NOT NULL AND addCloneSerialActivityHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET addCloneSerialActivityHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL addCloneSerialActivityHTTPReq.setMethod("POST")
    CALL addCloneSerialActivityHTTPReq.setCharset("UTF-8")
    CALL addCloneSerialActivityHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL addCloneSerialActivityHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL addCloneSerialActivityHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL addCloneSerialActivityHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL addCloneSerialActivityHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET addCloneSerialActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCloneSerialActivityRequest,body)

      # Send SOAP envelope
      CALL addCloneSerialActivityHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET addCloneSerialActivityHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET addCloneSerialActivityHTTPResp = addCloneSerialActivityHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET addCloneSerialActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION addCloneSerialActivityResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF addCloneSerialActivityHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF addCloneSerialActivityHTTPResp IS NULL THEN
      # Still no response, try again
      LET addCloneSerialActivityHTTPResp = addCloneSerialActivityHTTPReq.getAsyncResponse()
    END IF

    IF addCloneSerialActivityHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = addCloneSerialActivityHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE addCloneSerialActivityHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = addCloneSerialActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = addCloneSerialActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,addCloneSerialActivityResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||addCloneSerialActivityHTTPResp.getStatusCode()||" ("||addCloneSerialActivityHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET addCloneSerialActivityHTTPReq = NULL
  LET addCloneSerialActivityHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchFullProcInstanceWithSerialNo
#

#
# FUNCTION: fetchFullProcInstanceWithSerialNo
#
FUNCTION fetchFullProcInstanceWithSerialNo(p_pProcessInstanceSerialNo)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING

  LET fetchFullProcInstanceWithSerialNoRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo

  LET soapStatus = fetchFullProcInstanceWithSerialNo_g()

  RETURN soapStatus, fetchFullProcInstanceWithSerialNoResponse.fetchFullProcInstanceWithSerialNoReturn
END FUNCTION

#
# FUNCTION: fetchFullProcInstanceWithSerialNo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchFullProcInstanceWithSerialNoRequest
#   OUTPUT: GLOBAL fetchFullProcInstanceWithSerialNoResponse
#
FUNCTION fetchFullProcInstanceWithSerialNo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFullProcInstanceWithSerialNoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFullProcInstanceWithSerialNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchFullProcInstanceWithSerialNoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFullProcInstanceWithSerialNoHTTPReq IS NOT NULL AND fetchFullProcInstanceWithSerialNoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchFullProcInstanceWithSerialNoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchFullProcInstanceWithSerialNoHTTPReq.setMethod("POST")
    CALL fetchFullProcInstanceWithSerialNoHTTPReq.setCharset("UTF-8")
    CALL fetchFullProcInstanceWithSerialNoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchFullProcInstanceWithSerialNoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchFullProcInstanceWithSerialNoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchFullProcInstanceWithSerialNoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchFullProcInstanceWithSerialNoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchFullProcInstanceWithSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFullProcInstanceWithSerialNoRequest,body)

      # Send SOAP envelope
      CALL fetchFullProcInstanceWithSerialNoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchFullProcInstanceWithSerialNoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchFullProcInstanceWithSerialNoHTTPResp = fetchFullProcInstanceWithSerialNoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchFullProcInstanceWithSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchFullProcInstanceWithSerialNoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFullProcInstanceWithSerialNoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchFullProcInstanceWithSerialNoHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchFullProcInstanceWithSerialNoHTTPResp = fetchFullProcInstanceWithSerialNoHTTPReq.getAsyncResponse()
    END IF

    IF fetchFullProcInstanceWithSerialNoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchFullProcInstanceWithSerialNoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchFullProcInstanceWithSerialNoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchFullProcInstanceWithSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchFullProcInstanceWithSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFullProcInstanceWithSerialNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchFullProcInstanceWithSerialNoHTTPResp.getStatusCode()||" ("||fetchFullProcInstanceWithSerialNoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchFullProcInstanceWithSerialNoHTTPReq = NULL
  LET fetchFullProcInstanceWithSerialNoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchUniFormatFormInstanceWithProcOID
#

#
# FUNCTION: fetchUniFormatFormInstanceWithProcOID
#
FUNCTION fetchUniFormatFormInstanceWithProcOID(p_pProcessInstanceOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceOID		STRING

  LET fetchUniFormatFormInstanceWithProcOIDRequest.pProcessInstanceOID = p_pProcessInstanceOID

  LET soapStatus = fetchUniFormatFormInstanceWithProcOID_g()

  RETURN soapStatus, fetchUniFormatFormInstanceWithProcOIDResponse.fetchUniFormatFormInstanceWithProcOIDReturn
END FUNCTION

#
# FUNCTION: fetchUniFormatFormInstanceWithProcOID_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchUniFormatFormInstanceWithProcOIDRequest
#   OUTPUT: GLOBAL fetchUniFormatFormInstanceWithProcOIDResponse
#
FUNCTION fetchUniFormatFormInstanceWithProcOID_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchUniFormatFormInstanceWithProcOIDRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchUniFormatFormInstanceWithProcOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchUniFormatFormInstanceWithProcOIDRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchUniFormatFormInstanceWithProcOIDHTTPReq IS NOT NULL AND fetchUniFormatFormInstanceWithProcOIDHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchUniFormatFormInstanceWithProcOIDHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.setMethod("POST")
    CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.setCharset("UTF-8")
    CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchUniFormatFormInstanceWithProcOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchUniFormatFormInstanceWithProcOIDRequest,body)

      # Send SOAP envelope
      CALL fetchUniFormatFormInstanceWithProcOIDHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchUniFormatFormInstanceWithProcOIDHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchUniFormatFormInstanceWithProcOIDHTTPResp = fetchUniFormatFormInstanceWithProcOIDHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchUniFormatFormInstanceWithProcOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchUniFormatFormInstanceWithProcOIDResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchUniFormatFormInstanceWithProcOIDHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchUniFormatFormInstanceWithProcOIDHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchUniFormatFormInstanceWithProcOIDHTTPResp = fetchUniFormatFormInstanceWithProcOIDHTTPReq.getAsyncResponse()
    END IF

    IF fetchUniFormatFormInstanceWithProcOIDHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchUniFormatFormInstanceWithProcOIDHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchUniFormatFormInstanceWithProcOIDHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchUniFormatFormInstanceWithProcOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchUniFormatFormInstanceWithProcOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchUniFormatFormInstanceWithProcOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchUniFormatFormInstanceWithProcOIDHTTPResp.getStatusCode()||" ("||fetchUniFormatFormInstanceWithProcOIDHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchUniFormatFormInstanceWithProcOIDHTTPReq = NULL
  LET fetchUniFormatFormInstanceWithProcOIDHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchProcSNMatchCurrtentPerformer
#

#
# FUNCTION: fetchProcSNMatchCurrtentPerformer
#
FUNCTION fetchProcSNMatchCurrtentPerformer(p_pProcessId, p_pActId, p_pUserId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessId		STRING
  DEFINE	p_pActId		STRING
  DEFINE	p_pUserId		STRING

  LET fetchProcSNMatchCurrtentPerformerRequest.pProcessId = p_pProcessId
  LET fetchProcSNMatchCurrtentPerformerRequest.pActId = p_pActId
  LET fetchProcSNMatchCurrtentPerformerRequest.pUserId = p_pUserId

  LET soapStatus = fetchProcSNMatchCurrtentPerformer_g()

  RETURN soapStatus, fetchProcSNMatchCurrtentPerformerResponse.fetchProcSNMatchCurrtentPerformerReturn
END FUNCTION

#
# FUNCTION: fetchProcSNMatchCurrtentPerformer_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchProcSNMatchCurrtentPerformerRequest
#   OUTPUT: GLOBAL fetchProcSNMatchCurrtentPerformerResponse
#
FUNCTION fetchProcSNMatchCurrtentPerformer_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcSNMatchCurrtentPerformerRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcSNMatchCurrtentPerformerResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchProcSNMatchCurrtentPerformerRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcSNMatchCurrtentPerformerHTTPReq IS NOT NULL AND fetchProcSNMatchCurrtentPerformerHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchProcSNMatchCurrtentPerformerHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchProcSNMatchCurrtentPerformerHTTPReq.setMethod("POST")
    CALL fetchProcSNMatchCurrtentPerformerHTTPReq.setCharset("UTF-8")
    CALL fetchProcSNMatchCurrtentPerformerHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchProcSNMatchCurrtentPerformerHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchProcSNMatchCurrtentPerformerHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchProcSNMatchCurrtentPerformerHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchProcSNMatchCurrtentPerformerHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchProcSNMatchCurrtentPerformerHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcSNMatchCurrtentPerformerRequest,body)

      # Send SOAP envelope
      CALL fetchProcSNMatchCurrtentPerformerHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchProcSNMatchCurrtentPerformerHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchProcSNMatchCurrtentPerformerHTTPResp = fetchProcSNMatchCurrtentPerformerHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchProcSNMatchCurrtentPerformerHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchProcSNMatchCurrtentPerformerResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcSNMatchCurrtentPerformerHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchProcSNMatchCurrtentPerformerHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchProcSNMatchCurrtentPerformerHTTPResp = fetchProcSNMatchCurrtentPerformerHTTPReq.getAsyncResponse()
    END IF

    IF fetchProcSNMatchCurrtentPerformerHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchProcSNMatchCurrtentPerformerHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchProcSNMatchCurrtentPerformerHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchProcSNMatchCurrtentPerformerHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchProcSNMatchCurrtentPerformerHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcSNMatchCurrtentPerformerResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchProcSNMatchCurrtentPerformerHTTPResp.getStatusCode()||" ("||fetchProcSNMatchCurrtentPerformerHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchProcSNMatchCurrtentPerformerHTTPReq = NULL
  LET fetchProcSNMatchCurrtentPerformerHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: increaseViewTimesOfWorkAssignment
#

#
# FUNCTION: increaseViewTimesOfWorkAssignment
#
FUNCTION increaseViewTimesOfWorkAssignment(p_pUserId, p_pWorkItemOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pWorkItemOID		STRING

  LET increaseViewTimesOfWorkAssignmentRequest.pUserId = p_pUserId
  LET increaseViewTimesOfWorkAssignmentRequest.pWorkItemOID = p_pWorkItemOID

  LET soapStatus = increaseViewTimesOfWorkAssignment_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: increaseViewTimesOfWorkAssignment_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL increaseViewTimesOfWorkAssignmentRequest
#   OUTPUT: NONE
#
FUNCTION increaseViewTimesOfWorkAssignment_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(increaseViewTimesOfWorkAssignmentRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="increaseViewTimesOfWorkAssignmentResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION increaseViewTimesOfWorkAssignmentRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF increaseViewTimesOfWorkAssignmentHTTPReq IS NOT NULL AND increaseViewTimesOfWorkAssignmentHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET increaseViewTimesOfWorkAssignmentHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL increaseViewTimesOfWorkAssignmentHTTPReq.setMethod("POST")
    CALL increaseViewTimesOfWorkAssignmentHTTPReq.setCharset("UTF-8")
    CALL increaseViewTimesOfWorkAssignmentHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL increaseViewTimesOfWorkAssignmentHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL increaseViewTimesOfWorkAssignmentHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL increaseViewTimesOfWorkAssignmentHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL increaseViewTimesOfWorkAssignmentHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET increaseViewTimesOfWorkAssignmentHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(increaseViewTimesOfWorkAssignmentRequest,body)

      # Send SOAP envelope
      CALL increaseViewTimesOfWorkAssignmentHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET increaseViewTimesOfWorkAssignmentHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET increaseViewTimesOfWorkAssignmentHTTPResp = increaseViewTimesOfWorkAssignmentHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET increaseViewTimesOfWorkAssignmentHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION increaseViewTimesOfWorkAssignmentResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF increaseViewTimesOfWorkAssignmentHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF increaseViewTimesOfWorkAssignmentHTTPResp IS NULL THEN
      # Still no response, try again
      LET increaseViewTimesOfWorkAssignmentHTTPResp = increaseViewTimesOfWorkAssignmentHTTPReq.getAsyncResponse()
    END IF

    IF increaseViewTimesOfWorkAssignmentHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = increaseViewTimesOfWorkAssignmentHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE increaseViewTimesOfWorkAssignmentHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = increaseViewTimesOfWorkAssignmentHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = increaseViewTimesOfWorkAssignmentHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="increaseViewTimesOfWorkAssignmentResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||increaseViewTimesOfWorkAssignmentHTTPResp.getStatusCode()||" ("||increaseViewTimesOfWorkAssignmentHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET increaseViewTimesOfWorkAssignmentHTTPReq = NULL
  LET increaseViewTimesOfWorkAssignmentHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchUniFormatFormInstanceWithProcSerlNo
#

#
# FUNCTION: fetchUniFormatFormInstanceWithProcSerlNo
#
FUNCTION fetchUniFormatFormInstanceWithProcSerlNo(p_pProcessInstanceSerialNo)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING

  LET fetchUniFormatFormInstanceWithProcSerlNoRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo

  LET soapStatus = fetchUniFormatFormInstanceWithProcSerlNo_g()

  RETURN soapStatus, fetchUniFormatFormInstanceWithProcSerlNoResponse.fetchUniFormatFormInstanceWithProcSerlNoReturn
END FUNCTION

#
# FUNCTION: fetchUniFormatFormInstanceWithProcSerlNo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchUniFormatFormInstanceWithProcSerlNoRequest
#   OUTPUT: GLOBAL fetchUniFormatFormInstanceWithProcSerlNoResponse
#
FUNCTION fetchUniFormatFormInstanceWithProcSerlNo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchUniFormatFormInstanceWithProcSerlNoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchUniFormatFormInstanceWithProcSerlNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchUniFormatFormInstanceWithProcSerlNoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchUniFormatFormInstanceWithProcSerlNoHTTPReq IS NOT NULL AND fetchUniFormatFormInstanceWithProcSerlNoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchUniFormatFormInstanceWithProcSerlNoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.setMethod("POST")
    CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.setCharset("UTF-8")
    CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchUniFormatFormInstanceWithProcSerlNoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchUniFormatFormInstanceWithProcSerlNoRequest,body)

      # Send SOAP envelope
      CALL fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchUniFormatFormInstanceWithProcSerlNoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchUniFormatFormInstanceWithProcSerlNoHTTPResp = fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchUniFormatFormInstanceWithProcSerlNoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchUniFormatFormInstanceWithProcSerlNoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchUniFormatFormInstanceWithProcSerlNoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchUniFormatFormInstanceWithProcSerlNoHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchUniFormatFormInstanceWithProcSerlNoHTTPResp = fetchUniFormatFormInstanceWithProcSerlNoHTTPReq.getAsyncResponse()
    END IF

    IF fetchUniFormatFormInstanceWithProcSerlNoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchUniFormatFormInstanceWithProcSerlNoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchUniFormatFormInstanceWithProcSerlNoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchUniFormatFormInstanceWithProcSerlNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchUniFormatFormInstanceWithProcSerlNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchUniFormatFormInstanceWithProcSerlNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchUniFormatFormInstanceWithProcSerlNoHTTPResp.getStatusCode()||" ("||fetchUniFormatFormInstanceWithProcSerlNoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchUniFormatFormInstanceWithProcSerlNoHTTPReq = NULL
  LET fetchUniFormatFormInstanceWithProcSerlNoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: countWorkingTime
#

#
# FUNCTION: countWorkingTime
#
FUNCTION countWorkingTime(p_pUserId, p_pStartDateTime, p_pEndDateTime, p_pDateFormat)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pStartDateTime		STRING
  DEFINE	p_pEndDateTime		STRING
  DEFINE	p_pDateFormat		STRING

  LET countWorkingTimeRequest.pUserId = p_pUserId
  LET countWorkingTimeRequest.pStartDateTime = p_pStartDateTime
  LET countWorkingTimeRequest.pEndDateTime = p_pEndDateTime
  LET countWorkingTimeRequest.pDateFormat = p_pDateFormat

  LET soapStatus = countWorkingTime_g()

  RETURN soapStatus, countWorkingTimeResponse.countWorkingTimeReturn
END FUNCTION

#
# FUNCTION: countWorkingTime_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL countWorkingTimeRequest
#   OUTPUT: GLOBAL countWorkingTimeResponse
#
FUNCTION countWorkingTime_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(countWorkingTimeRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,countWorkingTimeResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION countWorkingTimeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF countWorkingTimeHTTPReq IS NOT NULL AND countWorkingTimeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET countWorkingTimeHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL countWorkingTimeHTTPReq.setMethod("POST")
    CALL countWorkingTimeHTTPReq.setCharset("UTF-8")
    CALL countWorkingTimeHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL countWorkingTimeHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL countWorkingTimeHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL countWorkingTimeHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL countWorkingTimeHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET countWorkingTimeHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(countWorkingTimeRequest,body)

      # Send SOAP envelope
      CALL countWorkingTimeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET countWorkingTimeHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET countWorkingTimeHTTPResp = countWorkingTimeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET countWorkingTimeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION countWorkingTimeResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF countWorkingTimeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF countWorkingTimeHTTPResp IS NULL THEN
      # Still no response, try again
      LET countWorkingTimeHTTPResp = countWorkingTimeHTTPReq.getAsyncResponse()
    END IF

    IF countWorkingTimeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = countWorkingTimeHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE countWorkingTimeHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = countWorkingTimeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = countWorkingTimeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,countWorkingTimeResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||countWorkingTimeHTTPResp.getStatusCode()||" ("||countWorkingTimeHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET countWorkingTimeHTTPReq = NULL
  LET countWorkingTimeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchDueDate
#

#
# FUNCTION: fetchDueDate
#
FUNCTION fetchDueDate(p_pUserId, p_pBaseDate, p_pDueDays, p_pDateFormat)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pBaseDate		STRING
  DEFINE	p_pDueDays		STRING
  DEFINE	p_pDateFormat		STRING

  LET fetchDueDateRequest.pUserId = p_pUserId
  LET fetchDueDateRequest.pBaseDate = p_pBaseDate
  LET fetchDueDateRequest.pDueDays = p_pDueDays
  LET fetchDueDateRequest.pDateFormat = p_pDateFormat

  LET soapStatus = fetchDueDate_g()

  RETURN soapStatus, fetchDueDateResponse.fetchDueDateReturn
END FUNCTION

#
# FUNCTION: fetchDueDate_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchDueDateRequest
#   OUTPUT: GLOBAL fetchDueDateResponse
#
FUNCTION fetchDueDate_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchDueDateRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchDueDateResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchDueDateRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchDueDateHTTPReq IS NOT NULL AND fetchDueDateHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchDueDateHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchDueDateHTTPReq.setMethod("POST")
    CALL fetchDueDateHTTPReq.setCharset("UTF-8")
    CALL fetchDueDateHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchDueDateHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchDueDateHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchDueDateHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchDueDateHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchDueDateHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchDueDateRequest,body)

      # Send SOAP envelope
      CALL fetchDueDateHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchDueDateHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchDueDateHTTPResp = fetchDueDateHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchDueDateHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchDueDateResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchDueDateHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchDueDateHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchDueDateHTTPResp = fetchDueDateHTTPReq.getAsyncResponse()
    END IF

    IF fetchDueDateHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchDueDateHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchDueDateHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchDueDateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchDueDateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchDueDateResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchDueDateHTTPResp.getStatusCode()||" ("||fetchDueDateHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchDueDateHTTPReq = NULL
  LET fetchDueDateHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: findManagerByAppLvl
#

#
# FUNCTION: findManagerByAppLvl
#
FUNCTION findManagerByAppLvl(p_pUserId, p_pOrgUnitOID, p_pLevelName, p_pApprovalLevelType, p_pIsDeptManager)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pOrgUnitOID		STRING
  DEFINE	p_pLevelName		STRING
  DEFINE	p_pApprovalLevelType		STRING
  DEFINE	p_pIsDeptManager		BOOLEAN

  LET findManagerByAppLvlRequest.pUserId = p_pUserId
  LET findManagerByAppLvlRequest.pOrgUnitOID = p_pOrgUnitOID
  LET findManagerByAppLvlRequest.pLevelName = p_pLevelName
  LET findManagerByAppLvlRequest.pApprovalLevelType = p_pApprovalLevelType
  LET findManagerByAppLvlRequest.pIsDeptManager = p_pIsDeptManager

  LET soapStatus = findManagerByAppLvl_g()

  RETURN soapStatus, findManagerByAppLvlResponse.findManagerByAppLvlReturn
END FUNCTION

#
# FUNCTION: findManagerByAppLvl_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL findManagerByAppLvlRequest
#   OUTPUT: GLOBAL findManagerByAppLvlResponse
#
FUNCTION findManagerByAppLvl_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(findManagerByAppLvlRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,findManagerByAppLvlResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION findManagerByAppLvlRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF findManagerByAppLvlHTTPReq IS NOT NULL AND findManagerByAppLvlHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET findManagerByAppLvlHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL findManagerByAppLvlHTTPReq.setMethod("POST")
    CALL findManagerByAppLvlHTTPReq.setCharset("UTF-8")
    CALL findManagerByAppLvlHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL findManagerByAppLvlHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL findManagerByAppLvlHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL findManagerByAppLvlHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL findManagerByAppLvlHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET findManagerByAppLvlHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(findManagerByAppLvlRequest,body)

      # Send SOAP envelope
      CALL findManagerByAppLvlHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET findManagerByAppLvlHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET findManagerByAppLvlHTTPResp = findManagerByAppLvlHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET findManagerByAppLvlHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION findManagerByAppLvlResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF findManagerByAppLvlHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF findManagerByAppLvlHTTPResp IS NULL THEN
      # Still no response, try again
      LET findManagerByAppLvlHTTPResp = findManagerByAppLvlHTTPReq.getAsyncResponse()
    END IF

    IF findManagerByAppLvlHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = findManagerByAppLvlHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE findManagerByAppLvlHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = findManagerByAppLvlHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = findManagerByAppLvlHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,findManagerByAppLvlResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||findManagerByAppLvlHTTPResp.getStatusCode()||" ("||findManagerByAppLvlHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET findManagerByAppLvlHTTPReq = NULL
  LET findManagerByAppLvlHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: reserveNoCmDocument
#

#
# FUNCTION: reserveNoCmDocument
#
FUNCTION reserveNoCmDocument(p_pOriginalFullFileName)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pOriginalFullFileName		STRING

  LET reserveNoCmDocumentRequest.pOriginalFullFileName = p_pOriginalFullFileName

  LET soapStatus = reserveNoCmDocument_g()

  RETURN soapStatus, reserveNoCmDocumentResponse.reserveNoCmDocumentReturn
END FUNCTION

#
# FUNCTION: reserveNoCmDocument_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL reserveNoCmDocumentRequest
#   OUTPUT: GLOBAL reserveNoCmDocumentResponse
#
FUNCTION reserveNoCmDocument_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(reserveNoCmDocumentRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,reserveNoCmDocumentResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION reserveNoCmDocumentRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF reserveNoCmDocumentHTTPReq IS NOT NULL AND reserveNoCmDocumentHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET reserveNoCmDocumentHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL reserveNoCmDocumentHTTPReq.setMethod("POST")
    CALL reserveNoCmDocumentHTTPReq.setCharset("UTF-8")
    CALL reserveNoCmDocumentHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL reserveNoCmDocumentHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL reserveNoCmDocumentHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL reserveNoCmDocumentHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL reserveNoCmDocumentHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET reserveNoCmDocumentHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(reserveNoCmDocumentRequest,body)

      # Send SOAP envelope
      CALL reserveNoCmDocumentHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET reserveNoCmDocumentHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET reserveNoCmDocumentHTTPResp = reserveNoCmDocumentHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET reserveNoCmDocumentHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION reserveNoCmDocumentResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF reserveNoCmDocumentHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF reserveNoCmDocumentHTTPResp IS NULL THEN
      # Still no response, try again
      LET reserveNoCmDocumentHTTPResp = reserveNoCmDocumentHTTPReq.getAsyncResponse()
    END IF

    IF reserveNoCmDocumentHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = reserveNoCmDocumentHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE reserveNoCmDocumentHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = reserveNoCmDocumentHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = reserveNoCmDocumentHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,reserveNoCmDocumentResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||reserveNoCmDocumentHTTPResp.getStatusCode()||" ("||reserveNoCmDocumentHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET reserveNoCmDocumentHTTPReq = NULL
  LET reserveNoCmDocumentHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: addCustomParallelAndSerialActivity
#

#
# FUNCTION: addCustomParallelAndSerialActivity
#
FUNCTION addCustomParallelAndSerialActivity(p_pWorkItmeOID, p_pPostPSActDefsAsXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItmeOID		STRING
  DEFINE	p_pPostPSActDefsAsXML		STRING

  LET addCustomParallelAndSerialActivityRequest.pWorkItmeOID = p_pWorkItmeOID
  LET addCustomParallelAndSerialActivityRequest.pPostPSActDefsAsXML = p_pPostPSActDefsAsXML

  LET soapStatus = addCustomParallelAndSerialActivity_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: addCustomParallelAndSerialActivity_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL addCustomParallelAndSerialActivityRequest
#   OUTPUT: NONE
#
FUNCTION addCustomParallelAndSerialActivity_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomParallelAndSerialActivityRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomParallelAndSerialActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION addCustomParallelAndSerialActivityRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomParallelAndSerialActivityHTTPReq IS NOT NULL AND addCustomParallelAndSerialActivityHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET addCustomParallelAndSerialActivityHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL addCustomParallelAndSerialActivityHTTPReq.setMethod("POST")
    CALL addCustomParallelAndSerialActivityHTTPReq.setCharset("UTF-8")
    CALL addCustomParallelAndSerialActivityHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL addCustomParallelAndSerialActivityHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL addCustomParallelAndSerialActivityHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL addCustomParallelAndSerialActivityHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL addCustomParallelAndSerialActivityHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET addCustomParallelAndSerialActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomParallelAndSerialActivityRequest,body)

      # Send SOAP envelope
      CALL addCustomParallelAndSerialActivityHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET addCustomParallelAndSerialActivityHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET addCustomParallelAndSerialActivityHTTPResp = addCustomParallelAndSerialActivityHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET addCustomParallelAndSerialActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION addCustomParallelAndSerialActivityResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomParallelAndSerialActivityHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF addCustomParallelAndSerialActivityHTTPResp IS NULL THEN
      # Still no response, try again
      LET addCustomParallelAndSerialActivityHTTPResp = addCustomParallelAndSerialActivityHTTPReq.getAsyncResponse()
    END IF

    IF addCustomParallelAndSerialActivityHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = addCustomParallelAndSerialActivityHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE addCustomParallelAndSerialActivityHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = addCustomParallelAndSerialActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = addCustomParallelAndSerialActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomParallelAndSerialActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||addCustomParallelAndSerialActivityHTTPResp.getStatusCode()||" ("||addCustomParallelAndSerialActivityHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET addCustomParallelAndSerialActivityHTTPReq = NULL
  LET addCustomParallelAndSerialActivityHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: addCustomParallelAndSerialActivity
#

#
# FUNCTION: addCustomParallelAndSerialActivity1
#
FUNCTION addCustomParallelAndSerialActivity1(p_pProcessInstanceSN, p_pActId, p_pRefActId, p_pPostPSActDefsAsXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSN		STRING
  DEFINE	p_pActId		STRING
  DEFINE	p_pRefActId		STRING
  DEFINE	p_pPostPSActDefsAsXML		STRING

  LET addCustomParallelAndSerialActivityRequest1.pProcessInstanceSN = p_pProcessInstanceSN
  LET addCustomParallelAndSerialActivityRequest1.pActId = p_pActId
  LET addCustomParallelAndSerialActivityRequest1.pRefActId = p_pRefActId
  LET addCustomParallelAndSerialActivityRequest1.pPostPSActDefsAsXML = p_pPostPSActDefsAsXML

  LET soapStatus = addCustomParallelAndSerialActivity1_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: addCustomParallelAndSerialActivity1_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL addCustomParallelAndSerialActivityRequest1
#   OUTPUT: NONE
#
FUNCTION addCustomParallelAndSerialActivity1_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomParallelAndSerialActivityRequest1,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomParallelAndSerialActivityResponse1" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION addCustomParallelAndSerialActivity1Request_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomParallelAndSerialActivity1HTTPReq IS NOT NULL AND addCustomParallelAndSerialActivity1HTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET addCustomParallelAndSerialActivity1HTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL addCustomParallelAndSerialActivity1HTTPReq.setMethod("POST")
    CALL addCustomParallelAndSerialActivity1HTTPReq.setCharset("UTF-8")
    CALL addCustomParallelAndSerialActivity1HTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL addCustomParallelAndSerialActivity1HTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL addCustomParallelAndSerialActivity1HTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL addCustomParallelAndSerialActivity1HTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL addCustomParallelAndSerialActivity1HTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET addCustomParallelAndSerialActivity1HTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomParallelAndSerialActivityRequest1,body)

      # Send SOAP envelope
      CALL addCustomParallelAndSerialActivity1HTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET addCustomParallelAndSerialActivity1HTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET addCustomParallelAndSerialActivity1HTTPResp = addCustomParallelAndSerialActivity1HTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET addCustomParallelAndSerialActivity1HTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION addCustomParallelAndSerialActivity1Response_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomParallelAndSerialActivity1HTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF addCustomParallelAndSerialActivity1HTTPResp IS NULL THEN
      # Still no response, try again
      LET addCustomParallelAndSerialActivity1HTTPResp = addCustomParallelAndSerialActivity1HTTPReq.getAsyncResponse()
    END IF

    IF addCustomParallelAndSerialActivity1HTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = addCustomParallelAndSerialActivity1HTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE addCustomParallelAndSerialActivity1HTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = addCustomParallelAndSerialActivity1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = addCustomParallelAndSerialActivity1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomParallelAndSerialActivityResponse1" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||addCustomParallelAndSerialActivity1HTTPResp.getStatusCode()||" ("||addCustomParallelAndSerialActivity1HTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET addCustomParallelAndSerialActivity1HTTPReq = NULL
  LET addCustomParallelAndSerialActivity1HTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: getSysintegrationServer
#

#
# FUNCTION: getSysintegrationServer
#
FUNCTION getSysintegrationServer()
  DEFINE	soapStatus		INTEGER

  LET soapStatus = getSysintegrationServer_g()

  RETURN soapStatus, getSysintegrationServerResponse.getSysintegrationServerReturn
END FUNCTION

#
# FUNCTION: getSysintegrationServer_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: GLOBAL getSysintegrationServerResponse
#
FUNCTION getSysintegrationServer_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      LET node = writer.createElementNS("fjs","getSysintegrationServerRequest","http://webservice.nana.dsc.com/")
      CALL body.appendChild(node)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getSysintegrationServerResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION getSysintegrationServerRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getSysintegrationServerHTTPReq IS NOT NULL AND getSysintegrationServerHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getSysintegrationServerHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL getSysintegrationServerHTTPReq.setMethod("POST")
    CALL getSysintegrationServerHTTPReq.setCharset("UTF-8")
    CALL getSysintegrationServerHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL getSysintegrationServerHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL getSysintegrationServerHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL getSysintegrationServerHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL getSysintegrationServerHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getSysintegrationServerHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      LET node = writer.createElementNS("fjs","getSysintegrationServerRequest","http://webservice.nana.dsc.com/")
      CALL body.appendChild(node)

      # Send SOAP envelope
      CALL getSysintegrationServerHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getSysintegrationServerHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getSysintegrationServerHTTPResp = getSysintegrationServerHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getSysintegrationServerHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION getSysintegrationServerResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF getSysintegrationServerHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getSysintegrationServerHTTPResp IS NULL THEN
      # Still no response, try again
      LET getSysintegrationServerHTTPResp = getSysintegrationServerHTTPReq.getAsyncResponse()
    END IF

    IF getSysintegrationServerHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = getSysintegrationServerHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE getSysintegrationServerHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getSysintegrationServerHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getSysintegrationServerHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getSysintegrationServerResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getSysintegrationServerHTTPResp.getStatusCode()||" ("||getSysintegrationServerHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getSysintegrationServerHTTPReq = NULL
  LET getSysintegrationServerHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchDefaultSubstituteInfo
#

#
# FUNCTION: fetchDefaultSubstituteInfo
#
FUNCTION fetchDefaultSubstituteInfo(p_pUserId, p_pStartSeq, p_pEndSeq, p_pDate)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pStartSeq		INTEGER
  DEFINE	p_pEndSeq		INTEGER
  DEFINE	p_pDate		STRING

  LET fetchDefaultSubstituteInfoRequest.pUserId = p_pUserId
  LET fetchDefaultSubstituteInfoRequest.pStartSeq = p_pStartSeq
  LET fetchDefaultSubstituteInfoRequest.pEndSeq = p_pEndSeq
  LET fetchDefaultSubstituteInfoRequest.pDate = p_pDate

  LET soapStatus = fetchDefaultSubstituteInfo_g()

  RETURN soapStatus, fetchDefaultSubstituteInfoResponse.fetchDefaultSubstituteInfoReturn
END FUNCTION

#
# FUNCTION: fetchDefaultSubstituteInfo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchDefaultSubstituteInfoRequest
#   OUTPUT: GLOBAL fetchDefaultSubstituteInfoResponse
#
FUNCTION fetchDefaultSubstituteInfo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchDefaultSubstituteInfoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchDefaultSubstituteInfoResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchDefaultSubstituteInfoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchDefaultSubstituteInfoHTTPReq IS NOT NULL AND fetchDefaultSubstituteInfoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchDefaultSubstituteInfoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchDefaultSubstituteInfoHTTPReq.setMethod("POST")
    CALL fetchDefaultSubstituteInfoHTTPReq.setCharset("UTF-8")
    CALL fetchDefaultSubstituteInfoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchDefaultSubstituteInfoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchDefaultSubstituteInfoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchDefaultSubstituteInfoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchDefaultSubstituteInfoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchDefaultSubstituteInfoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchDefaultSubstituteInfoRequest,body)

      # Send SOAP envelope
      CALL fetchDefaultSubstituteInfoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchDefaultSubstituteInfoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchDefaultSubstituteInfoHTTPResp = fetchDefaultSubstituteInfoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchDefaultSubstituteInfoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchDefaultSubstituteInfoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchDefaultSubstituteInfoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchDefaultSubstituteInfoHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchDefaultSubstituteInfoHTTPResp = fetchDefaultSubstituteInfoHTTPReq.getAsyncResponse()
    END IF

    IF fetchDefaultSubstituteInfoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchDefaultSubstituteInfoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchDefaultSubstituteInfoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchDefaultSubstituteInfoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchDefaultSubstituteInfoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchDefaultSubstituteInfoResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchDefaultSubstituteInfoHTTPResp.getStatusCode()||" ("||fetchDefaultSubstituteInfoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchDefaultSubstituteInfoHTTPReq = NULL
  LET fetchDefaultSubstituteInfoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchDefaultSubstituteInfo
#

#
# FUNCTION: fetchDefaultSubstituteInfo1
#
FUNCTION fetchDefaultSubstituteInfo1(p_pUserId, p_pStartSeq, p_pEndSeq)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pStartSeq		INTEGER
  DEFINE	p_pEndSeq		INTEGER

  LET fetchDefaultSubstituteInfoRequest1.pUserId = p_pUserId
  LET fetchDefaultSubstituteInfoRequest1.pStartSeq = p_pStartSeq
  LET fetchDefaultSubstituteInfoRequest1.pEndSeq = p_pEndSeq

  LET soapStatus = fetchDefaultSubstituteInfo1_g()

  RETURN soapStatus, fetchDefaultSubstituteInfoResponse1.fetchDefaultSubstituteInfoReturn
END FUNCTION

#
# FUNCTION: fetchDefaultSubstituteInfo1_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchDefaultSubstituteInfoRequest1
#   OUTPUT: GLOBAL fetchDefaultSubstituteInfoResponse1
#
FUNCTION fetchDefaultSubstituteInfo1_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchDefaultSubstituteInfoRequest1,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchDefaultSubstituteInfoResponse1)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchDefaultSubstituteInfo1Request_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchDefaultSubstituteInfo1HTTPReq IS NOT NULL AND fetchDefaultSubstituteInfo1HTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchDefaultSubstituteInfo1HTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchDefaultSubstituteInfo1HTTPReq.setMethod("POST")
    CALL fetchDefaultSubstituteInfo1HTTPReq.setCharset("UTF-8")
    CALL fetchDefaultSubstituteInfo1HTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchDefaultSubstituteInfo1HTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchDefaultSubstituteInfo1HTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchDefaultSubstituteInfo1HTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchDefaultSubstituteInfo1HTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchDefaultSubstituteInfo1HTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchDefaultSubstituteInfoRequest1,body)

      # Send SOAP envelope
      CALL fetchDefaultSubstituteInfo1HTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchDefaultSubstituteInfo1HTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchDefaultSubstituteInfo1HTTPResp = fetchDefaultSubstituteInfo1HTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchDefaultSubstituteInfo1HTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchDefaultSubstituteInfo1Response_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchDefaultSubstituteInfo1HTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchDefaultSubstituteInfo1HTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchDefaultSubstituteInfo1HTTPResp = fetchDefaultSubstituteInfo1HTTPReq.getAsyncResponse()
    END IF

    IF fetchDefaultSubstituteInfo1HTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchDefaultSubstituteInfo1HTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchDefaultSubstituteInfo1HTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchDefaultSubstituteInfo1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchDefaultSubstituteInfo1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchDefaultSubstituteInfoResponse1)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchDefaultSubstituteInfo1HTTPResp.getStatusCode()||" ("||fetchDefaultSubstituteInfo1HTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchDefaultSubstituteInfo1HTTPReq = NULL
  LET fetchDefaultSubstituteInfo1HTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: getSubstituteState
#

#
# FUNCTION: getSubstituteState
#
FUNCTION getSubstituteState(p_pUserId, p_pCheckTime)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pCheckTime		STRING

  LET getSubstituteStateRequest.pUserId = p_pUserId
  LET getSubstituteStateRequest.pCheckTime = p_pCheckTime

  LET soapStatus = getSubstituteState_g()

  RETURN soapStatus, getSubstituteStateResponse.getSubstituteStateReturn
END FUNCTION

#
# FUNCTION: getSubstituteState_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL getSubstituteStateRequest
#   OUTPUT: GLOBAL getSubstituteStateResponse
#
FUNCTION getSubstituteState_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getSubstituteStateRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getSubstituteStateResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION getSubstituteStateRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getSubstituteStateHTTPReq IS NOT NULL AND getSubstituteStateHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getSubstituteStateHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL getSubstituteStateHTTPReq.setMethod("POST")
    CALL getSubstituteStateHTTPReq.setCharset("UTF-8")
    CALL getSubstituteStateHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL getSubstituteStateHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL getSubstituteStateHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL getSubstituteStateHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL getSubstituteStateHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getSubstituteStateHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getSubstituteStateRequest,body)

      # Send SOAP envelope
      CALL getSubstituteStateHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getSubstituteStateHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getSubstituteStateHTTPResp = getSubstituteStateHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getSubstituteStateHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION getSubstituteStateResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF getSubstituteStateHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getSubstituteStateHTTPResp IS NULL THEN
      # Still no response, try again
      LET getSubstituteStateHTTPResp = getSubstituteStateHTTPReq.getAsyncResponse()
    END IF

    IF getSubstituteStateHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = getSubstituteStateHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE getSubstituteStateHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getSubstituteStateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getSubstituteStateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getSubstituteStateResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getSubstituteStateHTTPResp.getStatusCode()||" ("||getSubstituteStateHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getSubstituteStateHTTPReq = NULL
  LET getSubstituteStateHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchFormInstanceWithProcSerlNo
#

#
# FUNCTION: fetchFormInstanceWithProcSerlNo
#
FUNCTION fetchFormInstanceWithProcSerlNo(p_pProcessInstanceSerialNo)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING

  LET fetchFormInstanceWithProcSerlNoRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo

  LET soapStatus = fetchFormInstanceWithProcSerlNo_g()

  RETURN soapStatus, fetchFormInstanceWithProcSerlNoResponse.fetchFormInstanceWithProcSerlNoReturn
END FUNCTION

#
# FUNCTION: fetchFormInstanceWithProcSerlNo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchFormInstanceWithProcSerlNoRequest
#   OUTPUT: GLOBAL fetchFormInstanceWithProcSerlNoResponse
#
FUNCTION fetchFormInstanceWithProcSerlNo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFormInstanceWithProcSerlNoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFormInstanceWithProcSerlNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchFormInstanceWithProcSerlNoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFormInstanceWithProcSerlNoHTTPReq IS NOT NULL AND fetchFormInstanceWithProcSerlNoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchFormInstanceWithProcSerlNoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchFormInstanceWithProcSerlNoHTTPReq.setMethod("POST")
    CALL fetchFormInstanceWithProcSerlNoHTTPReq.setCharset("UTF-8")
    CALL fetchFormInstanceWithProcSerlNoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchFormInstanceWithProcSerlNoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchFormInstanceWithProcSerlNoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchFormInstanceWithProcSerlNoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchFormInstanceWithProcSerlNoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchFormInstanceWithProcSerlNoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFormInstanceWithProcSerlNoRequest,body)

      # Send SOAP envelope
      CALL fetchFormInstanceWithProcSerlNoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchFormInstanceWithProcSerlNoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchFormInstanceWithProcSerlNoHTTPResp = fetchFormInstanceWithProcSerlNoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchFormInstanceWithProcSerlNoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchFormInstanceWithProcSerlNoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFormInstanceWithProcSerlNoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchFormInstanceWithProcSerlNoHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchFormInstanceWithProcSerlNoHTTPResp = fetchFormInstanceWithProcSerlNoHTTPReq.getAsyncResponse()
    END IF

    IF fetchFormInstanceWithProcSerlNoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchFormInstanceWithProcSerlNoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchFormInstanceWithProcSerlNoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchFormInstanceWithProcSerlNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchFormInstanceWithProcSerlNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFormInstanceWithProcSerlNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchFormInstanceWithProcSerlNoHTTPResp.getStatusCode()||" ("||fetchFormInstanceWithProcSerlNoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchFormInstanceWithProcSerlNoHTTPReq = NULL
  LET fetchFormInstanceWithProcSerlNoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchCanTraceProcSN
#

#
# FUNCTION: fetchCanTraceProcSN
#
FUNCTION fetchCanTraceProcSN(p_pProcessIds, p_pUserId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessIds		STRING
  DEFINE	p_pUserId		STRING

  LET fetchCanTraceProcSNRequest.pProcessIds = p_pProcessIds
  LET fetchCanTraceProcSNRequest.pUserId = p_pUserId

  LET soapStatus = fetchCanTraceProcSN_g()

  RETURN soapStatus, fetchCanTraceProcSNResponse.fetchCanTraceProcSNReturn
END FUNCTION

#
# FUNCTION: fetchCanTraceProcSN_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchCanTraceProcSNRequest
#   OUTPUT: GLOBAL fetchCanTraceProcSNResponse
#
FUNCTION fetchCanTraceProcSN_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchCanTraceProcSNRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchCanTraceProcSNResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchCanTraceProcSNRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchCanTraceProcSNHTTPReq IS NOT NULL AND fetchCanTraceProcSNHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchCanTraceProcSNHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchCanTraceProcSNHTTPReq.setMethod("POST")
    CALL fetchCanTraceProcSNHTTPReq.setCharset("UTF-8")
    CALL fetchCanTraceProcSNHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchCanTraceProcSNHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchCanTraceProcSNHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchCanTraceProcSNHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchCanTraceProcSNHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchCanTraceProcSNHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchCanTraceProcSNRequest,body)

      # Send SOAP envelope
      CALL fetchCanTraceProcSNHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchCanTraceProcSNHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchCanTraceProcSNHTTPResp = fetchCanTraceProcSNHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchCanTraceProcSNHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchCanTraceProcSNResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchCanTraceProcSNHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchCanTraceProcSNHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchCanTraceProcSNHTTPResp = fetchCanTraceProcSNHTTPReq.getAsyncResponse()
    END IF

    IF fetchCanTraceProcSNHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchCanTraceProcSNHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchCanTraceProcSNHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchCanTraceProcSNHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchCanTraceProcSNHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchCanTraceProcSNResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchCanTraceProcSNHTTPResp.getStatusCode()||" ("||fetchCanTraceProcSNHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchCanTraceProcSNHTTPReq = NULL
  LET fetchCanTraceProcSNHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: isPerformerOfProcessInstance
#

#
# FUNCTION: isPerformerOfProcessInstance
#
FUNCTION isPerformerOfProcessInstance(p_pUserId, p_pProcessInstanceSerialNo)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pProcessInstanceSerialNo		STRING

  LET isPerformerOfProcessInstanceRequest.pUserId = p_pUserId
  LET isPerformerOfProcessInstanceRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo

  LET soapStatus = isPerformerOfProcessInstance_g()

  RETURN soapStatus, isPerformerOfProcessInstanceResponse.isPerformerOfProcessInstanceReturn
END FUNCTION

#
# FUNCTION: isPerformerOfProcessInstance_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL isPerformerOfProcessInstanceRequest
#   OUTPUT: GLOBAL isPerformerOfProcessInstanceResponse
#
FUNCTION isPerformerOfProcessInstance_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(isPerformerOfProcessInstanceRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,isPerformerOfProcessInstanceResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION isPerformerOfProcessInstanceRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF isPerformerOfProcessInstanceHTTPReq IS NOT NULL AND isPerformerOfProcessInstanceHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET isPerformerOfProcessInstanceHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL isPerformerOfProcessInstanceHTTPReq.setMethod("POST")
    CALL isPerformerOfProcessInstanceHTTPReq.setCharset("UTF-8")
    CALL isPerformerOfProcessInstanceHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL isPerformerOfProcessInstanceHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL isPerformerOfProcessInstanceHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL isPerformerOfProcessInstanceHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL isPerformerOfProcessInstanceHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET isPerformerOfProcessInstanceHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(isPerformerOfProcessInstanceRequest,body)

      # Send SOAP envelope
      CALL isPerformerOfProcessInstanceHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET isPerformerOfProcessInstanceHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET isPerformerOfProcessInstanceHTTPResp = isPerformerOfProcessInstanceHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET isPerformerOfProcessInstanceHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION isPerformerOfProcessInstanceResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF isPerformerOfProcessInstanceHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF isPerformerOfProcessInstanceHTTPResp IS NULL THEN
      # Still no response, try again
      LET isPerformerOfProcessInstanceHTTPResp = isPerformerOfProcessInstanceHTTPReq.getAsyncResponse()
    END IF

    IF isPerformerOfProcessInstanceHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = isPerformerOfProcessInstanceHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE isPerformerOfProcessInstanceHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = isPerformerOfProcessInstanceHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = isPerformerOfProcessInstanceHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,isPerformerOfProcessInstanceResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||isPerformerOfProcessInstanceHTTPResp.getStatusCode()||" ("||isPerformerOfProcessInstanceHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET isPerformerOfProcessInstanceHTTPReq = NULL
  LET isPerformerOfProcessInstanceHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchProcInstanceWithSerialNo
#

#
# FUNCTION: fetchProcInstanceWithSerialNo
#
FUNCTION fetchProcInstanceWithSerialNo(p_pProcessInstanceSerialNo)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING

  LET fetchProcInstanceWithSerialNoRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo

  LET soapStatus = fetchProcInstanceWithSerialNo_g()

  RETURN soapStatus, fetchProcInstanceWithSerialNoResponse.fetchProcInstanceWithSerialNoReturn
END FUNCTION

#
# FUNCTION: fetchProcInstanceWithSerialNo_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchProcInstanceWithSerialNoRequest
#   OUTPUT: GLOBAL fetchProcInstanceWithSerialNoResponse
#
FUNCTION fetchProcInstanceWithSerialNo_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcInstanceWithSerialNoRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcInstanceWithSerialNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchProcInstanceWithSerialNoRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcInstanceWithSerialNoHTTPReq IS NOT NULL AND fetchProcInstanceWithSerialNoHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchProcInstanceWithSerialNoHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchProcInstanceWithSerialNoHTTPReq.setMethod("POST")
    CALL fetchProcInstanceWithSerialNoHTTPReq.setCharset("UTF-8")
    CALL fetchProcInstanceWithSerialNoHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchProcInstanceWithSerialNoHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchProcInstanceWithSerialNoHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchProcInstanceWithSerialNoHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchProcInstanceWithSerialNoHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchProcInstanceWithSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcInstanceWithSerialNoRequest,body)

      # Send SOAP envelope
      CALL fetchProcInstanceWithSerialNoHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchProcInstanceWithSerialNoHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchProcInstanceWithSerialNoHTTPResp = fetchProcInstanceWithSerialNoHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchProcInstanceWithSerialNoHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchProcInstanceWithSerialNoResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcInstanceWithSerialNoHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchProcInstanceWithSerialNoHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchProcInstanceWithSerialNoHTTPResp = fetchProcInstanceWithSerialNoHTTPReq.getAsyncResponse()
    END IF

    IF fetchProcInstanceWithSerialNoHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchProcInstanceWithSerialNoHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchProcInstanceWithSerialNoHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchProcInstanceWithSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchProcInstanceWithSerialNoHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcInstanceWithSerialNoResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchProcInstanceWithSerialNoHTTPResp.getStatusCode()||" ("||fetchProcInstanceWithSerialNoHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchProcInstanceWithSerialNoHTTPReq = NULL
  LET fetchProcInstanceWithSerialNoHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchToDoWorkItem
#

#
# FUNCTION: fetchToDoWorkItem
#
FUNCTION fetchToDoWorkItem(p_pProcessIds, p_pUserId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessIds		STRING
  DEFINE	p_pUserId		STRING

  LET fetchToDoWorkItemRequest.pProcessIds = p_pProcessIds
  LET fetchToDoWorkItemRequest.pUserId = p_pUserId

  LET soapStatus = fetchToDoWorkItem_g()

  RETURN soapStatus, fetchToDoWorkItemResponse.fetchToDoWorkItemReturn
END FUNCTION

#
# FUNCTION: fetchToDoWorkItem_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchToDoWorkItemRequest
#   OUTPUT: GLOBAL fetchToDoWorkItemResponse
#
FUNCTION fetchToDoWorkItem_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchToDoWorkItemRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchToDoWorkItemResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchToDoWorkItemRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchToDoWorkItemHTTPReq IS NOT NULL AND fetchToDoWorkItemHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchToDoWorkItemHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchToDoWorkItemHTTPReq.setMethod("POST")
    CALL fetchToDoWorkItemHTTPReq.setCharset("UTF-8")
    CALL fetchToDoWorkItemHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchToDoWorkItemHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchToDoWorkItemHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchToDoWorkItemHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchToDoWorkItemHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchToDoWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchToDoWorkItemRequest,body)

      # Send SOAP envelope
      CALL fetchToDoWorkItemHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchToDoWorkItemHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchToDoWorkItemHTTPResp = fetchToDoWorkItemHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchToDoWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchToDoWorkItemResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchToDoWorkItemHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchToDoWorkItemHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchToDoWorkItemHTTPResp = fetchToDoWorkItemHTTPReq.getAsyncResponse()
    END IF

    IF fetchToDoWorkItemHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchToDoWorkItemHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchToDoWorkItemHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchToDoWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchToDoWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchToDoWorkItemResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchToDoWorkItemHTTPResp.getStatusCode()||" ("||fetchToDoWorkItemHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchToDoWorkItemHTTPReq = NULL
  LET fetchToDoWorkItemHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchProcInstances
#

#
# FUNCTION: fetchProcInstances
#
FUNCTION fetchProcInstances(p_pProcessId, p_pProcessInitialStartTime, p_pProcessInitialEndTime, p_pProcInstanceState)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessId		STRING
  DEFINE	p_pProcessInitialStartTime		STRING
  DEFINE	p_pProcessInitialEndTime		STRING
  DEFINE	p_pProcInstanceState		STRING

  LET fetchProcInstancesRequest.pProcessId = p_pProcessId
  LET fetchProcInstancesRequest.pProcessInitialStartTime = p_pProcessInitialStartTime
  LET fetchProcInstancesRequest.pProcessInitialEndTime = p_pProcessInitialEndTime
  LET fetchProcInstancesRequest.pProcInstanceState = p_pProcInstanceState

  LET soapStatus = fetchProcInstances_g()

  RETURN soapStatus, fetchProcInstancesResponse.fetchProcInstancesReturn
END FUNCTION

#
# FUNCTION: fetchProcInstances_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchProcInstancesRequest
#   OUTPUT: GLOBAL fetchProcInstancesResponse
#
FUNCTION fetchProcInstances_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcInstancesRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcInstancesResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchProcInstancesRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcInstancesHTTPReq IS NOT NULL AND fetchProcInstancesHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchProcInstancesHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchProcInstancesHTTPReq.setMethod("POST")
    CALL fetchProcInstancesHTTPReq.setCharset("UTF-8")
    CALL fetchProcInstancesHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchProcInstancesHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchProcInstancesHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchProcInstancesHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchProcInstancesHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchProcInstancesHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcInstancesRequest,body)

      # Send SOAP envelope
      CALL fetchProcInstancesHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchProcInstancesHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchProcInstancesHTTPResp = fetchProcInstancesHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchProcInstancesHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchProcInstancesResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcInstancesHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchProcInstancesHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchProcInstancesHTTPResp = fetchProcInstancesHTTPReq.getAsyncResponse()
    END IF

    IF fetchProcInstancesHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchProcInstancesHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchProcInstancesHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchProcInstancesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchProcInstancesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcInstancesResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchProcInstancesHTTPResp.getStatusCode()||" ("||fetchProcInstancesHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchProcInstancesHTTPReq = NULL
  LET fetchProcInstancesHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchClosedProcInstances
#

#
# FUNCTION: fetchClosedProcInstances
#
FUNCTION fetchClosedProcInstances(p_pProcessId, p_pProcessClosedStartTime, p_pProcessClosedEndTime, p_pProcInstanceClosedState)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessId		STRING
  DEFINE	p_pProcessClosedStartTime		STRING
  DEFINE	p_pProcessClosedEndTime		STRING
  DEFINE	p_pProcInstanceClosedState		STRING

  LET fetchClosedProcInstancesRequest.pProcessId = p_pProcessId
  LET fetchClosedProcInstancesRequest.pProcessClosedStartTime = p_pProcessClosedStartTime
  LET fetchClosedProcInstancesRequest.pProcessClosedEndTime = p_pProcessClosedEndTime
  LET fetchClosedProcInstancesRequest.pProcInstanceClosedState = p_pProcInstanceClosedState

  LET soapStatus = fetchClosedProcInstances_g()

  RETURN soapStatus, fetchClosedProcInstancesResponse.fetchClosedProcInstancesReturn
END FUNCTION

#
# FUNCTION: fetchClosedProcInstances_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchClosedProcInstancesRequest
#   OUTPUT: GLOBAL fetchClosedProcInstancesResponse
#
FUNCTION fetchClosedProcInstances_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchClosedProcInstancesRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchClosedProcInstancesResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchClosedProcInstancesRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchClosedProcInstancesHTTPReq IS NOT NULL AND fetchClosedProcInstancesHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchClosedProcInstancesHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchClosedProcInstancesHTTPReq.setMethod("POST")
    CALL fetchClosedProcInstancesHTTPReq.setCharset("UTF-8")
    CALL fetchClosedProcInstancesHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchClosedProcInstancesHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchClosedProcInstancesHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchClosedProcInstancesHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchClosedProcInstancesHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchClosedProcInstancesHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchClosedProcInstancesRequest,body)

      # Send SOAP envelope
      CALL fetchClosedProcInstancesHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchClosedProcInstancesHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchClosedProcInstancesHTTPResp = fetchClosedProcInstancesHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchClosedProcInstancesHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchClosedProcInstancesResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchClosedProcInstancesHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchClosedProcInstancesHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchClosedProcInstancesHTTPResp = fetchClosedProcInstancesHTTPReq.getAsyncResponse()
    END IF

    IF fetchClosedProcInstancesHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchClosedProcInstancesHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchClosedProcInstancesHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchClosedProcInstancesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchClosedProcInstancesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchClosedProcInstancesResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchClosedProcInstancesHTTPResp.getStatusCode()||" ("||fetchClosedProcInstancesHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchClosedProcInstancesHTTPReq = NULL
  LET fetchClosedProcInstancesHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchFullProcInstanceWithOID
#

#
# FUNCTION: fetchFullProcInstanceWithOID
#
FUNCTION fetchFullProcInstanceWithOID(p_pProcessInstanceOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceOID		STRING

  LET fetchFullProcInstanceWithOIDRequest.pProcessInstanceOID = p_pProcessInstanceOID

  LET soapStatus = fetchFullProcInstanceWithOID_g()

  RETURN soapStatus, fetchFullProcInstanceWithOIDResponse.fetchFullProcInstanceWithOIDReturn
END FUNCTION

#
# FUNCTION: fetchFullProcInstanceWithOID_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchFullProcInstanceWithOIDRequest
#   OUTPUT: GLOBAL fetchFullProcInstanceWithOIDResponse
#
FUNCTION fetchFullProcInstanceWithOID_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFullProcInstanceWithOIDRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFullProcInstanceWithOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchFullProcInstanceWithOIDRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFullProcInstanceWithOIDHTTPReq IS NOT NULL AND fetchFullProcInstanceWithOIDHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchFullProcInstanceWithOIDHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchFullProcInstanceWithOIDHTTPReq.setMethod("POST")
    CALL fetchFullProcInstanceWithOIDHTTPReq.setCharset("UTF-8")
    CALL fetchFullProcInstanceWithOIDHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchFullProcInstanceWithOIDHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchFullProcInstanceWithOIDHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchFullProcInstanceWithOIDHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchFullProcInstanceWithOIDHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchFullProcInstanceWithOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFullProcInstanceWithOIDRequest,body)

      # Send SOAP envelope
      CALL fetchFullProcInstanceWithOIDHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchFullProcInstanceWithOIDHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchFullProcInstanceWithOIDHTTPResp = fetchFullProcInstanceWithOIDHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchFullProcInstanceWithOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchFullProcInstanceWithOIDResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFullProcInstanceWithOIDHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchFullProcInstanceWithOIDHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchFullProcInstanceWithOIDHTTPResp = fetchFullProcInstanceWithOIDHTTPReq.getAsyncResponse()
    END IF

    IF fetchFullProcInstanceWithOIDHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchFullProcInstanceWithOIDHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchFullProcInstanceWithOIDHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchFullProcInstanceWithOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchFullProcInstanceWithOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFullProcInstanceWithOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchFullProcInstanceWithOIDHTTPResp.getStatusCode()||" ("||fetchFullProcInstanceWithOIDHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchFullProcInstanceWithOIDHTTPReq = NULL
  LET fetchFullProcInstanceWithOIDHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchProcInstanceWithOID
#

#
# FUNCTION: fetchProcInstanceWithOID
#
FUNCTION fetchProcInstanceWithOID(p_pProcessInstanceOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceOID		STRING

  LET fetchProcInstanceWithOIDRequest.pProcessInstanceOID = p_pProcessInstanceOID

  LET soapStatus = fetchProcInstanceWithOID_g()

  RETURN soapStatus, fetchProcInstanceWithOIDResponse.fetchProcInstanceWithOIDReturn
END FUNCTION

#
# FUNCTION: fetchProcInstanceWithOID_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchProcInstanceWithOIDRequest
#   OUTPUT: GLOBAL fetchProcInstanceWithOIDResponse
#
FUNCTION fetchProcInstanceWithOID_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcInstanceWithOIDRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcInstanceWithOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchProcInstanceWithOIDRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcInstanceWithOIDHTTPReq IS NOT NULL AND fetchProcInstanceWithOIDHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchProcInstanceWithOIDHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchProcInstanceWithOIDHTTPReq.setMethod("POST")
    CALL fetchProcInstanceWithOIDHTTPReq.setCharset("UTF-8")
    CALL fetchProcInstanceWithOIDHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchProcInstanceWithOIDHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchProcInstanceWithOIDHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchProcInstanceWithOIDHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchProcInstanceWithOIDHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchProcInstanceWithOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcInstanceWithOIDRequest,body)

      # Send SOAP envelope
      CALL fetchProcInstanceWithOIDHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchProcInstanceWithOIDHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchProcInstanceWithOIDHTTPResp = fetchProcInstanceWithOIDHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchProcInstanceWithOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchProcInstanceWithOIDResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcInstanceWithOIDHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchProcInstanceWithOIDHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchProcInstanceWithOIDHTTPResp = fetchProcInstanceWithOIDHTTPReq.getAsyncResponse()
    END IF

    IF fetchProcInstanceWithOIDHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchProcInstanceWithOIDHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchProcInstanceWithOIDHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchProcInstanceWithOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchProcInstanceWithOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcInstanceWithOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchProcInstanceWithOIDHTTPResp.getStatusCode()||" ("||fetchProcInstanceWithOIDHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchProcInstanceWithOIDHTTPReq = NULL
  LET fetchProcInstanceWithOIDHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchFormInstanceWithProcOID
#

#
# FUNCTION: fetchFormInstanceWithProcOID
#
FUNCTION fetchFormInstanceWithProcOID(p_pProcessInstanceOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceOID		STRING

  LET fetchFormInstanceWithProcOIDRequest.pProcessInstanceOID = p_pProcessInstanceOID

  LET soapStatus = fetchFormInstanceWithProcOID_g()

  RETURN soapStatus, fetchFormInstanceWithProcOIDResponse.fetchFormInstanceWithProcOIDReturn
END FUNCTION

#
# FUNCTION: fetchFormInstanceWithProcOID_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchFormInstanceWithProcOIDRequest
#   OUTPUT: GLOBAL fetchFormInstanceWithProcOIDResponse
#
FUNCTION fetchFormInstanceWithProcOID_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFormInstanceWithProcOIDRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFormInstanceWithProcOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchFormInstanceWithProcOIDRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFormInstanceWithProcOIDHTTPReq IS NOT NULL AND fetchFormInstanceWithProcOIDHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchFormInstanceWithProcOIDHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchFormInstanceWithProcOIDHTTPReq.setMethod("POST")
    CALL fetchFormInstanceWithProcOIDHTTPReq.setCharset("UTF-8")
    CALL fetchFormInstanceWithProcOIDHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchFormInstanceWithProcOIDHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchFormInstanceWithProcOIDHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchFormInstanceWithProcOIDHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchFormInstanceWithProcOIDHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchFormInstanceWithProcOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFormInstanceWithProcOIDRequest,body)

      # Send SOAP envelope
      CALL fetchFormInstanceWithProcOIDHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchFormInstanceWithProcOIDHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchFormInstanceWithProcOIDHTTPResp = fetchFormInstanceWithProcOIDHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchFormInstanceWithProcOIDHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchFormInstanceWithProcOIDResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFormInstanceWithProcOIDHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchFormInstanceWithProcOIDHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchFormInstanceWithProcOIDHTTPResp = fetchFormInstanceWithProcOIDHTTPReq.getAsyncResponse()
    END IF

    IF fetchFormInstanceWithProcOIDHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchFormInstanceWithProcOIDHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchFormInstanceWithProcOIDHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchFormInstanceWithProcOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchFormInstanceWithProcOIDHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFormInstanceWithProcOIDResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchFormInstanceWithProcOIDHTTPResp.getStatusCode()||" ("||fetchFormInstanceWithProcOIDHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchFormInstanceWithProcOIDHTTPReq = NULL
  LET fetchFormInstanceWithProcOIDHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: addCustomActivity
#

#
# FUNCTION: addCustomActivity
#
FUNCTION addCustomActivity(p_pWorkItmeOID, p_pPostActDefsAsXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItmeOID		STRING
  DEFINE	p_pPostActDefsAsXML		STRING

  LET addCustomActivityRequest.pWorkItmeOID = p_pWorkItmeOID
  LET addCustomActivityRequest.pPostActDefsAsXML = p_pPostActDefsAsXML

  LET soapStatus = addCustomActivity_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: addCustomActivity_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL addCustomActivityRequest
#   OUTPUT: NONE
#
FUNCTION addCustomActivity_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomActivityRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION addCustomActivityRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomActivityHTTPReq IS NOT NULL AND addCustomActivityHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET addCustomActivityHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL addCustomActivityHTTPReq.setMethod("POST")
    CALL addCustomActivityHTTPReq.setCharset("UTF-8")
    CALL addCustomActivityHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL addCustomActivityHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL addCustomActivityHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL addCustomActivityHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL addCustomActivityHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET addCustomActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addCustomActivityRequest,body)

      # Send SOAP envelope
      CALL addCustomActivityHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET addCustomActivityHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET addCustomActivityHTTPResp = addCustomActivityHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET addCustomActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION addCustomActivityResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF addCustomActivityHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF addCustomActivityHTTPResp IS NULL THEN
      # Still no response, try again
      LET addCustomActivityHTTPResp = addCustomActivityHTTPReq.getAsyncResponse()
    END IF

    IF addCustomActivityHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = addCustomActivityHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE addCustomActivityHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = addCustomActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = addCustomActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addCustomActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||addCustomActivityHTTPResp.getStatusCode()||" ("||addCustomActivityHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET addCustomActivityHTTPReq = NULL
  LET addCustomActivityHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: countWorkingDays
#

#
# FUNCTION: countWorkingDays
#
FUNCTION countWorkingDays(p_pUserId, p_pStartDateTime, p_pEndDateTime, p_pDateFormat)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pStartDateTime		STRING
  DEFINE	p_pEndDateTime		STRING
  DEFINE	p_pDateFormat		STRING

  LET countWorkingDaysRequest.pUserId = p_pUserId
  LET countWorkingDaysRequest.pStartDateTime = p_pStartDateTime
  LET countWorkingDaysRequest.pEndDateTime = p_pEndDateTime
  LET countWorkingDaysRequest.pDateFormat = p_pDateFormat

  LET soapStatus = countWorkingDays_g()

  RETURN soapStatus, countWorkingDaysResponse.countWorkingDaysReturn
END FUNCTION

#
# FUNCTION: countWorkingDays_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL countWorkingDaysRequest
#   OUTPUT: GLOBAL countWorkingDaysResponse
#
FUNCTION countWorkingDays_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(countWorkingDaysRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,countWorkingDaysResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION countWorkingDaysRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF countWorkingDaysHTTPReq IS NOT NULL AND countWorkingDaysHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET countWorkingDaysHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL countWorkingDaysHTTPReq.setMethod("POST")
    CALL countWorkingDaysHTTPReq.setCharset("UTF-8")
    CALL countWorkingDaysHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL countWorkingDaysHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL countWorkingDaysHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL countWorkingDaysHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL countWorkingDaysHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET countWorkingDaysHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(countWorkingDaysRequest,body)

      # Send SOAP envelope
      CALL countWorkingDaysHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET countWorkingDaysHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET countWorkingDaysHTTPResp = countWorkingDaysHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET countWorkingDaysHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION countWorkingDaysResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF countWorkingDaysHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF countWorkingDaysHTTPResp IS NULL THEN
      # Still no response, try again
      LET countWorkingDaysHTTPResp = countWorkingDaysHTTPReq.getAsyncResponse()
    END IF

    IF countWorkingDaysHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = countWorkingDaysHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE countWorkingDaysHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = countWorkingDaysHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = countWorkingDaysHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,countWorkingDaysResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||countWorkingDaysHTTPResp.getStatusCode()||" ("||countWorkingDaysHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET countWorkingDaysHTTPReq = NULL
  LET countWorkingDaysHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcess
#

#
# FUNCTION: invokeProcess
#
FUNCTION invokeProcess(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pFormDefOID, p_pFormFieldValue, p_pSubject)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pFormDefOID		STRING
  DEFINE	p_pFormFieldValue		STRING
  DEFINE	p_pSubject		STRING

  LET invokeProcessRequest.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessRequest.pRequesterId = p_pRequesterId
  LET invokeProcessRequest.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessRequest.pFormDefOID = p_pFormDefOID
  LET invokeProcessRequest.pFormFieldValue = p_pFormFieldValue
  LET invokeProcessRequest.pSubject = p_pSubject

  LET soapStatus = invokeProcess_g()

  RETURN soapStatus, invokeProcessResponse.invokeProcessReturn
END FUNCTION

#
# FUNCTION: invokeProcess_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessRequest
#   OUTPUT: GLOBAL invokeProcessResponse
#
FUNCTION invokeProcess_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcessRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessHTTPReq IS NOT NULL AND invokeProcessHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcessHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcessHTTPReq.setMethod("POST")
    CALL invokeProcessHTTPReq.setCharset("UTF-8")
    CALL invokeProcessHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcessHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcessHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcessHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcessHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcessHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessRequest,body)

      # Send SOAP envelope
      CALL invokeProcessHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcessHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcessHTTPResp = invokeProcessHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcessHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcessResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcessHTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcessHTTPResp = invokeProcessHTTPReq.getAsyncResponse()
    END IF

    IF invokeProcessHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcessHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcessHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcessHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcessHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcessHTTPResp.getStatusCode()||" ("||invokeProcessHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcessHTTPReq = NULL
  LET invokeProcessHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcess
#

#
# FUNCTION: invokeProcess1
#
FUNCTION invokeProcess1(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pSubject)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pSubject		STRING

  LET invokeProcessRequest1.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessRequest1.pRequesterId = p_pRequesterId
  LET invokeProcessRequest1.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessRequest1.pSubject = p_pSubject

  LET soapStatus = invokeProcess1_g()

  RETURN soapStatus, invokeProcessResponse1.invokeProcessReturn
END FUNCTION

#
# FUNCTION: invokeProcess1_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessRequest1
#   OUTPUT: GLOBAL invokeProcessResponse1
#
FUNCTION invokeProcess1_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessRequest1,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessResponse1)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcess1Request_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcess1HTTPReq IS NOT NULL AND invokeProcess1HTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcess1HTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcess1HTTPReq.setMethod("POST")
    CALL invokeProcess1HTTPReq.setCharset("UTF-8")
    CALL invokeProcess1HTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcess1HTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcess1HTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcess1HTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcess1HTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcess1HTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessRequest1,body)

      # Send SOAP envelope
      CALL invokeProcess1HTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcess1HTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcess1HTTPResp = invokeProcess1HTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcess1HTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcess1Response_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcess1HTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcess1HTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcess1HTTPResp = invokeProcess1HTTPReq.getAsyncResponse()
    END IF

    IF invokeProcess1HTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcess1HTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcess1HTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcess1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcess1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessResponse1)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcess1HTTPResp.getStatusCode()||" ("||invokeProcess1HTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcess1HTTPReq = NULL
  LET invokeProcess1HTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: bypassActivity
#

#
# FUNCTION: bypassActivity
#
FUNCTION bypassActivity(p_pActivityInstanceOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pActivityInstanceOID		STRING

  LET bypassActivityRequest.pActivityInstanceOID = p_pActivityInstanceOID

  LET soapStatus = bypassActivity_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: bypassActivity_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL bypassActivityRequest
#   OUTPUT: NONE
#
FUNCTION bypassActivity_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(bypassActivityRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="bypassActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION bypassActivityRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF bypassActivityHTTPReq IS NOT NULL AND bypassActivityHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET bypassActivityHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL bypassActivityHTTPReq.setMethod("POST")
    CALL bypassActivityHTTPReq.setCharset("UTF-8")
    CALL bypassActivityHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL bypassActivityHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL bypassActivityHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL bypassActivityHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL bypassActivityHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET bypassActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(bypassActivityRequest,body)

      # Send SOAP envelope
      CALL bypassActivityHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET bypassActivityHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET bypassActivityHTTPResp = bypassActivityHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET bypassActivityHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION bypassActivityResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF bypassActivityHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF bypassActivityHTTPResp IS NULL THEN
      # Still no response, try again
      LET bypassActivityHTTPResp = bypassActivityHTTPReq.getAsyncResponse()
    END IF

    IF bypassActivityHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = bypassActivityHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE bypassActivityHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = bypassActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = bypassActivityHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="bypassActivityResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||bypassActivityHTTPResp.getStatusCode()||" ("||bypassActivityHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET bypassActivityHTTPReq = NULL
  LET bypassActivityHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: acceptWorkItem
#

#
# FUNCTION: acceptWorkItem
#
FUNCTION acceptWorkItem(p_pWorkItemOID, p_pUserId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItemOID		STRING
  DEFINE	p_pUserId		STRING

  LET acceptWorkItemRequest.pWorkItemOID = p_pWorkItemOID
  LET acceptWorkItemRequest.pUserId = p_pUserId

  LET soapStatus = acceptWorkItem_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: acceptWorkItem_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL acceptWorkItemRequest
#   OUTPUT: NONE
#
FUNCTION acceptWorkItem_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(acceptWorkItemRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="acceptWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION acceptWorkItemRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF acceptWorkItemHTTPReq IS NOT NULL AND acceptWorkItemHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET acceptWorkItemHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL acceptWorkItemHTTPReq.setMethod("POST")
    CALL acceptWorkItemHTTPReq.setCharset("UTF-8")
    CALL acceptWorkItemHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL acceptWorkItemHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL acceptWorkItemHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL acceptWorkItemHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL acceptWorkItemHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET acceptWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(acceptWorkItemRequest,body)

      # Send SOAP envelope
      CALL acceptWorkItemHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET acceptWorkItemHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET acceptWorkItemHTTPResp = acceptWorkItemHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET acceptWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION acceptWorkItemResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF acceptWorkItemHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF acceptWorkItemHTTPResp IS NULL THEN
      # Still no response, try again
      LET acceptWorkItemHTTPResp = acceptWorkItemHTTPReq.getAsyncResponse()
    END IF

    IF acceptWorkItemHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = acceptWorkItemHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE acceptWorkItemHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = acceptWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = acceptWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="acceptWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||acceptWorkItemHTTPResp.getStatusCode()||" ("||acceptWorkItemHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET acceptWorkItemHTTPReq = NULL
  LET acceptWorkItemHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: findFormOIDsOfProcess
#

#
# FUNCTION: findFormOIDsOfProcess
#
FUNCTION findFormOIDsOfProcess(p_pProcessPackageId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING

  LET findFormOIDsOfProcessRequest.pProcessPackageId = p_pProcessPackageId

  LET soapStatus = findFormOIDsOfProcess_g()

  RETURN soapStatus, findFormOIDsOfProcessResponse.findFormOIDsOfProcessReturn
END FUNCTION

#
# FUNCTION: findFormOIDsOfProcess_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL findFormOIDsOfProcessRequest
#   OUTPUT: GLOBAL findFormOIDsOfProcessResponse
#
FUNCTION findFormOIDsOfProcess_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(findFormOIDsOfProcessRequest,body)
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,findFormOIDsOfProcessResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION findFormOIDsOfProcessRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF findFormOIDsOfProcessHTTPReq IS NOT NULL AND findFormOIDsOfProcessHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET findFormOIDsOfProcessHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL findFormOIDsOfProcessHTTPReq.setMethod("POST")
    CALL findFormOIDsOfProcessHTTPReq.setCharset("UTF-8")
    CALL findFormOIDsOfProcessHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL findFormOIDsOfProcessHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL findFormOIDsOfProcessHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL findFormOIDsOfProcessHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL findFormOIDsOfProcessHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET findFormOIDsOfProcessHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(findFormOIDsOfProcessRequest,body)

      # Send SOAP envelope
      CALL findFormOIDsOfProcessHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET findFormOIDsOfProcessHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET findFormOIDsOfProcessHTTPResp = findFormOIDsOfProcessHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET findFormOIDsOfProcessHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION findFormOIDsOfProcessResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF findFormOIDsOfProcessHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF findFormOIDsOfProcessHTTPResp IS NULL THEN
      # Still no response, try again
      LET findFormOIDsOfProcessHTTPResp = findFormOIDsOfProcessHTTPReq.getAsyncResponse()
    END IF

    IF findFormOIDsOfProcessHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = findFormOIDsOfProcessHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE findFormOIDsOfProcessHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = findFormOIDsOfProcessHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = findFormOIDsOfProcessHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,findFormOIDsOfProcessResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||findFormOIDsOfProcessHTTPResp.getStatusCode()||" ("||findFormOIDsOfProcessHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET findFormOIDsOfProcessHTTPReq = NULL
  LET findFormOIDsOfProcessHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: addUserAbsence
#

#
# FUNCTION: addUserAbsence
#
FUNCTION addUserAbsence(p_pUserId, p_pStartTime, p_pEndTime)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserId		STRING
  DEFINE	p_pStartTime		STRING
  DEFINE	p_pEndTime		STRING

  LET addUserAbsenceRequest.pUserId = p_pUserId
  LET addUserAbsenceRequest.pStartTime = p_pStartTime
  LET addUserAbsenceRequest.pEndTime = p_pEndTime

  LET soapStatus = addUserAbsence_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: addUserAbsence_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL addUserAbsenceRequest
#   OUTPUT: NONE
#
FUNCTION addUserAbsence_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addUserAbsenceRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addUserAbsenceResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION addUserAbsenceRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF addUserAbsenceHTTPReq IS NOT NULL AND addUserAbsenceHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET addUserAbsenceHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL addUserAbsenceHTTPReq.setMethod("POST")
    CALL addUserAbsenceHTTPReq.setCharset("UTF-8")
    CALL addUserAbsenceHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL addUserAbsenceHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL addUserAbsenceHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL addUserAbsenceHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL addUserAbsenceHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET addUserAbsenceHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addUserAbsenceRequest,body)

      # Send SOAP envelope
      CALL addUserAbsenceHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET addUserAbsenceHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET addUserAbsenceHTTPResp = addUserAbsenceHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET addUserAbsenceHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION addUserAbsenceResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF addUserAbsenceHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF addUserAbsenceHTTPResp IS NULL THEN
      # Still no response, try again
      LET addUserAbsenceHTTPResp = addUserAbsenceHTTPReq.getAsyncResponse()
    END IF

    IF addUserAbsenceHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = addUserAbsenceHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE addUserAbsenceHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = addUserAbsenceHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = addUserAbsenceHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="addUserAbsenceResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||addUserAbsenceHTTPResp.getStatusCode()||" ("||addUserAbsenceHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET addUserAbsenceHTTPReq = NULL
  LET addUserAbsenceHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchFullProcInstanceWithSerialNoShowReferences
#

#
# FUNCTION: fetchFullProcInstanceWithSerialNoShowReferences
#
FUNCTION fetchFullProcInstanceWithSerialNoShowReferences(p_pProcessInstanceSerialNo, p_pShowReferences)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessInstanceSerialNo		STRING
  DEFINE	p_pShowReferences		BOOLEAN

  LET fetchFullProcInstanceWithSerialNoShowReferencesRequest.pProcessInstanceSerialNo = p_pProcessInstanceSerialNo
  LET fetchFullProcInstanceWithSerialNoShowReferencesRequest.pShowReferences = p_pShowReferences

  LET soapStatus = fetchFullProcInstanceWithSerialNoShowReferences_g()

  RETURN soapStatus, fetchFullProcInstanceWithSerialNoShowReferencesResponse.fetchFullProcInstanceWithSerialNoShowReferencesReturn
END FUNCTION

#
# FUNCTION: fetchFullProcInstanceWithSerialNoShowReferences_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchFullProcInstanceWithSerialNoShowReferencesRequest
#   OUTPUT: GLOBAL fetchFullProcInstanceWithSerialNoShowReferencesResponse
#
FUNCTION fetchFullProcInstanceWithSerialNoShowReferences_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFullProcInstanceWithSerialNoShowReferencesRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFullProcInstanceWithSerialNoShowReferencesResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchFullProcInstanceWithSerialNoShowReferencesRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq IS NOT NULL AND fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.setMethod("POST")
    CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.setCharset("UTF-8")
    CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchFullProcInstanceWithSerialNoShowReferencesRequest,body)

      # Send SOAP envelope
      CALL fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp = fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchFullProcInstanceWithSerialNoShowReferencesResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp = fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq.getAsyncResponse()
    END IF

    IF fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchFullProcInstanceWithSerialNoShowReferencesResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp.getStatusCode()||" ("||fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPReq = NULL
  LET fetchFullProcInstanceWithSerialNoShowReferencesHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchProcessAbortOrTerminateComment
#

#
# FUNCTION: fetchProcessAbortOrTerminateComment
#
FUNCTION fetchProcessAbortOrTerminateComment(p_pProcessSerialNo)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessSerialNo		STRING

  LET fetchProcessAbortOrTerminateCommentRequest.pProcessSerialNo = p_pProcessSerialNo

  LET soapStatus = fetchProcessAbortOrTerminateComment_g()

  RETURN soapStatus, fetchProcessAbortOrTerminateCommentResponse.fetchProcessAbortOrTerminateCommentReturn
END FUNCTION

#
# FUNCTION: fetchProcessAbortOrTerminateComment_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchProcessAbortOrTerminateCommentRequest
#   OUTPUT: GLOBAL fetchProcessAbortOrTerminateCommentResponse
#
FUNCTION fetchProcessAbortOrTerminateComment_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcessAbortOrTerminateCommentRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcessAbortOrTerminateCommentResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchProcessAbortOrTerminateCommentRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcessAbortOrTerminateCommentHTTPReq IS NOT NULL AND fetchProcessAbortOrTerminateCommentHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchProcessAbortOrTerminateCommentHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchProcessAbortOrTerminateCommentHTTPReq.setMethod("POST")
    CALL fetchProcessAbortOrTerminateCommentHTTPReq.setCharset("UTF-8")
    CALL fetchProcessAbortOrTerminateCommentHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchProcessAbortOrTerminateCommentHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchProcessAbortOrTerminateCommentHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchProcessAbortOrTerminateCommentHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchProcessAbortOrTerminateCommentHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchProcessAbortOrTerminateCommentHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcessAbortOrTerminateCommentRequest,body)

      # Send SOAP envelope
      CALL fetchProcessAbortOrTerminateCommentHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchProcessAbortOrTerminateCommentHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchProcessAbortOrTerminateCommentHTTPResp = fetchProcessAbortOrTerminateCommentHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchProcessAbortOrTerminateCommentHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchProcessAbortOrTerminateCommentResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcessAbortOrTerminateCommentHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchProcessAbortOrTerminateCommentHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchProcessAbortOrTerminateCommentHTTPResp = fetchProcessAbortOrTerminateCommentHTTPReq.getAsyncResponse()
    END IF

    IF fetchProcessAbortOrTerminateCommentHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchProcessAbortOrTerminateCommentHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchProcessAbortOrTerminateCommentHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchProcessAbortOrTerminateCommentHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchProcessAbortOrTerminateCommentHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcessAbortOrTerminateCommentResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchProcessAbortOrTerminateCommentHTTPResp.getStatusCode()||" ("||fetchProcessAbortOrTerminateCommentHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchProcessAbortOrTerminateCommentHTTPReq = NULL
  LET fetchProcessAbortOrTerminateCommentHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchProcessContextVariable
#

#
# FUNCTION: fetchProcessContextVariable
#
FUNCTION fetchProcessContextVariable(p_pProcessSerialNo, p_pVariableId, p_pOnlyTextValue)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessSerialNo		STRING
  DEFINE	p_pVariableId		STRING
  DEFINE	p_pOnlyTextValue		BOOLEAN

  LET fetchProcessContextVariableRequest.pProcessSerialNo = p_pProcessSerialNo
  LET fetchProcessContextVariableRequest.pVariableId = p_pVariableId
  LET fetchProcessContextVariableRequest.pOnlyTextValue = p_pOnlyTextValue

  LET soapStatus = fetchProcessContextVariable_g()

  RETURN soapStatus, fetchProcessContextVariableResponse.fetchProcessContextVariableReturn
END FUNCTION

#
# FUNCTION: fetchProcessContextVariable_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchProcessContextVariableRequest
#   OUTPUT: GLOBAL fetchProcessContextVariableResponse
#
FUNCTION fetchProcessContextVariable_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcessContextVariableRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcessContextVariableResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchProcessContextVariableRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcessContextVariableHTTPReq IS NOT NULL AND fetchProcessContextVariableHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchProcessContextVariableHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchProcessContextVariableHTTPReq.setMethod("POST")
    CALL fetchProcessContextVariableHTTPReq.setCharset("UTF-8")
    CALL fetchProcessContextVariableHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchProcessContextVariableHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchProcessContextVariableHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchProcessContextVariableHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchProcessContextVariableHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchProcessContextVariableHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcessContextVariableRequest,body)

      # Send SOAP envelope
      CALL fetchProcessContextVariableHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchProcessContextVariableHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchProcessContextVariableHTTPResp = fetchProcessContextVariableHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchProcessContextVariableHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchProcessContextVariableResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcessContextVariableHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchProcessContextVariableHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchProcessContextVariableHTTPResp = fetchProcessContextVariableHTTPReq.getAsyncResponse()
    END IF

    IF fetchProcessContextVariableHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchProcessContextVariableHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchProcessContextVariableHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchProcessContextVariableHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchProcessContextVariableHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcessContextVariableResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchProcessContextVariableHTTPResp.getStatusCode()||" ("||fetchProcessContextVariableHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchProcessContextVariableHTTPReq = NULL
  LET fetchProcessContextVariableHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchProcessContextVariable
#

#
# FUNCTION: fetchProcessContextVariable1
#
FUNCTION fetchProcessContextVariable1(p_pProcessSerialNo, p_pVariableId)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessSerialNo		STRING
  DEFINE	p_pVariableId		STRING

  LET fetchProcessContextVariableRequest1.pProcessSerialNo = p_pProcessSerialNo
  LET fetchProcessContextVariableRequest1.pVariableId = p_pVariableId

  LET soapStatus = fetchProcessContextVariable1_g()

  RETURN soapStatus, fetchProcessContextVariableResponse1.fetchProcessContextVariableReturn
END FUNCTION

#
# FUNCTION: fetchProcessContextVariable1_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchProcessContextVariableRequest1
#   OUTPUT: GLOBAL fetchProcessContextVariableResponse1
#
FUNCTION fetchProcessContextVariable1_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcessContextVariableRequest1,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcessContextVariableResponse1)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchProcessContextVariable1Request_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcessContextVariable1HTTPReq IS NOT NULL AND fetchProcessContextVariable1HTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchProcessContextVariable1HTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchProcessContextVariable1HTTPReq.setMethod("POST")
    CALL fetchProcessContextVariable1HTTPReq.setCharset("UTF-8")
    CALL fetchProcessContextVariable1HTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchProcessContextVariable1HTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchProcessContextVariable1HTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchProcessContextVariable1HTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchProcessContextVariable1HTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchProcessContextVariable1HTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchProcessContextVariableRequest1,body)

      # Send SOAP envelope
      CALL fetchProcessContextVariable1HTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchProcessContextVariable1HTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchProcessContextVariable1HTTPResp = fetchProcessContextVariable1HTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchProcessContextVariable1HTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchProcessContextVariable1Response_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchProcessContextVariable1HTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchProcessContextVariable1HTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchProcessContextVariable1HTTPResp = fetchProcessContextVariable1HTTPReq.getAsyncResponse()
    END IF

    IF fetchProcessContextVariable1HTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchProcessContextVariable1HTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchProcessContextVariable1HTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchProcessContextVariable1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchProcessContextVariable1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchProcessContextVariableResponse1)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchProcessContextVariable1HTTPResp.getStatusCode()||" ("||fetchProcessContextVariable1HTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchProcessContextVariable1HTTPReq = NULL
  LET fetchProcessContextVariable1HTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcessByParameterByOrg
#

#
# FUNCTION: invokeProcessByParameterByOrg
#
FUNCTION invokeProcessByParameterByOrg(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pOrgId, p_pParameterId, p_pInvokeParameter, p_pSubject)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pOrgId		STRING
  DEFINE	p_pParameterId		STRING
  DEFINE	p_pInvokeParameter		STRING
  DEFINE	p_pSubject		STRING

  LET invokeProcessByParameterByOrgRequest.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessByParameterByOrgRequest.pRequesterId = p_pRequesterId
  LET invokeProcessByParameterByOrgRequest.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessByParameterByOrgRequest.pOrgId = p_pOrgId
  LET invokeProcessByParameterByOrgRequest.pParameterId = p_pParameterId
  LET invokeProcessByParameterByOrgRequest.pInvokeParameter = p_pInvokeParameter
  LET invokeProcessByParameterByOrgRequest.pSubject = p_pSubject

  LET soapStatus = invokeProcessByParameterByOrg_g()

  RETURN soapStatus, invokeProcessByParameterByOrgResponse.invokeProcessByParameterByOrgReturn
END FUNCTION

#
# FUNCTION: invokeProcessByParameterByOrg_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessByParameterByOrgRequest
#   OUTPUT: GLOBAL invokeProcessByParameterByOrgResponse
#
FUNCTION invokeProcessByParameterByOrg_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByParameterByOrgRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByParameterByOrgResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcessByParameterByOrgRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByParameterByOrgHTTPReq IS NOT NULL AND invokeProcessByParameterByOrgHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcessByParameterByOrgHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcessByParameterByOrgHTTPReq.setMethod("POST")
    CALL invokeProcessByParameterByOrgHTTPReq.setCharset("UTF-8")
    CALL invokeProcessByParameterByOrgHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcessByParameterByOrgHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcessByParameterByOrgHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcessByParameterByOrgHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcessByParameterByOrgHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcessByParameterByOrgHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByParameterByOrgRequest,body)

      # Send SOAP envelope
      CALL invokeProcessByParameterByOrgHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcessByParameterByOrgHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcessByParameterByOrgHTTPResp = invokeProcessByParameterByOrgHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcessByParameterByOrgHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcessByParameterByOrgResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByParameterByOrgHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcessByParameterByOrgHTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcessByParameterByOrgHTTPResp = invokeProcessByParameterByOrgHTTPReq.getAsyncResponse()
    END IF

    IF invokeProcessByParameterByOrgHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcessByParameterByOrgHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcessByParameterByOrgHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcessByParameterByOrgHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcessByParameterByOrgHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByParameterByOrgResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcessByParameterByOrgHTTPResp.getStatusCode()||" ("||invokeProcessByParameterByOrgHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcessByParameterByOrgHTTPReq = NULL
  LET invokeProcessByParameterByOrgHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: removeLabelFromNoticeWorkItem
#

#
# FUNCTION: removeLabelFromNoticeWorkItem
#
FUNCTION removeLabelFromNoticeWorkItem(p_pWorkItemOID, p_pUserOID, p_pLabelOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItemOID		STRING
  DEFINE	p_pUserOID		STRING
  DEFINE	p_pLabelOID		STRING

  LET removeLabelFromNoticeWorkItemRequest.pWorkItemOID = p_pWorkItemOID
  LET removeLabelFromNoticeWorkItemRequest.pUserOID = p_pUserOID
  LET removeLabelFromNoticeWorkItemRequest.pLabelOID = p_pLabelOID

  LET soapStatus = removeLabelFromNoticeWorkItem_g()

  RETURN soapStatus, removeLabelFromNoticeWorkItemResponse.removeLabelFromNoticeWorkItemReturn
END FUNCTION

#
# FUNCTION: removeLabelFromNoticeWorkItem_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL removeLabelFromNoticeWorkItemRequest
#   OUTPUT: GLOBAL removeLabelFromNoticeWorkItemResponse
#
FUNCTION removeLabelFromNoticeWorkItem_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(removeLabelFromNoticeWorkItemRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,removeLabelFromNoticeWorkItemResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION removeLabelFromNoticeWorkItemRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF removeLabelFromNoticeWorkItemHTTPReq IS NOT NULL AND removeLabelFromNoticeWorkItemHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET removeLabelFromNoticeWorkItemHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL removeLabelFromNoticeWorkItemHTTPReq.setMethod("POST")
    CALL removeLabelFromNoticeWorkItemHTTPReq.setCharset("UTF-8")
    CALL removeLabelFromNoticeWorkItemHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL removeLabelFromNoticeWorkItemHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL removeLabelFromNoticeWorkItemHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL removeLabelFromNoticeWorkItemHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL removeLabelFromNoticeWorkItemHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET removeLabelFromNoticeWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(removeLabelFromNoticeWorkItemRequest,body)

      # Send SOAP envelope
      CALL removeLabelFromNoticeWorkItemHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET removeLabelFromNoticeWorkItemHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET removeLabelFromNoticeWorkItemHTTPResp = removeLabelFromNoticeWorkItemHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET removeLabelFromNoticeWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION removeLabelFromNoticeWorkItemResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF removeLabelFromNoticeWorkItemHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF removeLabelFromNoticeWorkItemHTTPResp IS NULL THEN
      # Still no response, try again
      LET removeLabelFromNoticeWorkItemHTTPResp = removeLabelFromNoticeWorkItemHTTPReq.getAsyncResponse()
    END IF

    IF removeLabelFromNoticeWorkItemHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = removeLabelFromNoticeWorkItemHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE removeLabelFromNoticeWorkItemHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = removeLabelFromNoticeWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = removeLabelFromNoticeWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,removeLabelFromNoticeWorkItemResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||removeLabelFromNoticeWorkItemHTTPResp.getStatusCode()||" ("||removeLabelFromNoticeWorkItemHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET removeLabelFromNoticeWorkItemHTTPReq = NULL
  LET removeLabelFromNoticeWorkItemHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: getFormFieldTemplate
#

#
# FUNCTION: getFormFieldTemplate
#
FUNCTION getFormFieldTemplate(p_pFormDefinitionOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pFormDefinitionOID		STRING

  LET getFormFieldTemplateRequest.pFormDefinitionOID = p_pFormDefinitionOID

  LET soapStatus = getFormFieldTemplate_g()

  RETURN soapStatus, getFormFieldTemplateResponse.getFormFieldTemplateReturn
END FUNCTION

#
# FUNCTION: getFormFieldTemplate_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL getFormFieldTemplateRequest
#   OUTPUT: GLOBAL getFormFieldTemplateResponse
#
FUNCTION getFormFieldTemplate_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getFormFieldTemplateRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getFormFieldTemplateResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION getFormFieldTemplateRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getFormFieldTemplateHTTPReq IS NOT NULL AND getFormFieldTemplateHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getFormFieldTemplateHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL getFormFieldTemplateHTTPReq.setMethod("POST")
    CALL getFormFieldTemplateHTTPReq.setCharset("UTF-8")
    CALL getFormFieldTemplateHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL getFormFieldTemplateHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL getFormFieldTemplateHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL getFormFieldTemplateHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL getFormFieldTemplateHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getFormFieldTemplateHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(getFormFieldTemplateRequest,body)

      # Send SOAP envelope
      CALL getFormFieldTemplateHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getFormFieldTemplateHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getFormFieldTemplateHTTPResp = getFormFieldTemplateHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getFormFieldTemplateHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION getFormFieldTemplateResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF getFormFieldTemplateHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getFormFieldTemplateHTTPResp IS NULL THEN
      # Still no response, try again
      LET getFormFieldTemplateHTTPResp = getFormFieldTemplateHTTPReq.getAsyncResponse()
    END IF

    IF getFormFieldTemplateHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = getFormFieldTemplateHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE getFormFieldTemplateHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getFormFieldTemplateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getFormFieldTemplateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,getFormFieldTemplateResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getFormFieldTemplateHTTPResp.getStatusCode()||" ("||getFormFieldTemplateHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getFormFieldTemplateHTTPReq = NULL
  LET getFormFieldTemplateHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcessByOrg
#

#
# FUNCTION: invokeProcessByOrg
#
FUNCTION invokeProcessByOrg(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pOrgId, p_pSubject)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pOrgId		STRING
  DEFINE	p_pSubject		STRING

  LET invokeProcessByOrgRequest.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessByOrgRequest.pRequesterId = p_pRequesterId
  LET invokeProcessByOrgRequest.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessByOrgRequest.pOrgId = p_pOrgId
  LET invokeProcessByOrgRequest.pSubject = p_pSubject

  LET soapStatus = invokeProcessByOrg_g()

  RETURN soapStatus, invokeProcessByOrgResponse.invokeProcessByOrgReturn
END FUNCTION

#
# FUNCTION: invokeProcessByOrg_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessByOrgRequest
#   OUTPUT: GLOBAL invokeProcessByOrgResponse
#
FUNCTION invokeProcessByOrg_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByOrgRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByOrgResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcessByOrgRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByOrgHTTPReq IS NOT NULL AND invokeProcessByOrgHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcessByOrgHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcessByOrgHTTPReq.setMethod("POST")
    CALL invokeProcessByOrgHTTPReq.setCharset("UTF-8")
    CALL invokeProcessByOrgHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcessByOrgHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcessByOrgHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcessByOrgHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcessByOrgHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcessByOrgHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByOrgRequest,body)

      # Send SOAP envelope
      CALL invokeProcessByOrgHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcessByOrgHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcessByOrgHTTPResp = invokeProcessByOrgHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcessByOrgHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcessByOrgResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByOrgHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcessByOrgHTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcessByOrgHTTPResp = invokeProcessByOrgHTTPReq.getAsyncResponse()
    END IF

    IF invokeProcessByOrgHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcessByOrgHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcessByOrgHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcessByOrgHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcessByOrgHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByOrgResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcessByOrgHTTPResp.getStatusCode()||" ("||invokeProcessByOrgHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcessByOrgHTTPReq = NULL
  LET invokeProcessByOrgHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcessByOrg
#

#
# FUNCTION: invokeProcessByOrg1
#
FUNCTION invokeProcessByOrg1(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pOrgId, p_pFormDefOID, p_pFormFieldValue, p_pSubject)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pOrgId		STRING
  DEFINE	p_pFormDefOID		STRING
  DEFINE	p_pFormFieldValue		STRING
  DEFINE	p_pSubject		STRING

  LET invokeProcessByOrgRequest1.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessByOrgRequest1.pRequesterId = p_pRequesterId
  LET invokeProcessByOrgRequest1.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessByOrgRequest1.pOrgId = p_pOrgId
  LET invokeProcessByOrgRequest1.pFormDefOID = p_pFormDefOID
  LET invokeProcessByOrgRequest1.pFormFieldValue = p_pFormFieldValue
  LET invokeProcessByOrgRequest1.pSubject = p_pSubject

  LET soapStatus = invokeProcessByOrg1_g()

  RETURN soapStatus, invokeProcessByOrgResponse1.invokeProcessByOrgReturn
END FUNCTION

#
# FUNCTION: invokeProcessByOrg1_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessByOrgRequest1
#   OUTPUT: GLOBAL invokeProcessByOrgResponse1
#
FUNCTION invokeProcessByOrg1_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByOrgRequest1,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByOrgResponse1)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcessByOrg1Request_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByOrg1HTTPReq IS NOT NULL AND invokeProcessByOrg1HTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcessByOrg1HTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcessByOrg1HTTPReq.setMethod("POST")
    CALL invokeProcessByOrg1HTTPReq.setCharset("UTF-8")
    CALL invokeProcessByOrg1HTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcessByOrg1HTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcessByOrg1HTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcessByOrg1HTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcessByOrg1HTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcessByOrg1HTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByOrgRequest1,body)

      # Send SOAP envelope
      CALL invokeProcessByOrg1HTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcessByOrg1HTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcessByOrg1HTTPResp = invokeProcessByOrg1HTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcessByOrg1HTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcessByOrg1Response_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByOrg1HTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcessByOrg1HTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcessByOrg1HTTPResp = invokeProcessByOrg1HTTPReq.getAsyncResponse()
    END IF

    IF invokeProcessByOrg1HTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcessByOrg1HTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcessByOrg1HTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcessByOrg1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcessByOrg1HTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByOrgResponse1)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcessByOrg1HTTPResp.getStatusCode()||" ("||invokeProcessByOrg1HTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcessByOrg1HTTPReq = NULL
  LET invokeProcessByOrg1HTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcessAndAddCustAct
#

#
# FUNCTION: invokeProcessAndAddCustAct
#
FUNCTION invokeProcessAndAddCustAct(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pFormDefOID, p_pFormFieldValue, p_pSubject, p_pPostPSActDefsAsXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pFormDefOID		STRING
  DEFINE	p_pFormFieldValue		STRING
  DEFINE	p_pSubject		STRING
  DEFINE	p_pPostPSActDefsAsXML		STRING

  LET invokeProcessAndAddCustActRequest.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessAndAddCustActRequest.pRequesterId = p_pRequesterId
  LET invokeProcessAndAddCustActRequest.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessAndAddCustActRequest.pFormDefOID = p_pFormDefOID
  LET invokeProcessAndAddCustActRequest.pFormFieldValue = p_pFormFieldValue
  LET invokeProcessAndAddCustActRequest.pSubject = p_pSubject
  LET invokeProcessAndAddCustActRequest.pPostPSActDefsAsXML = p_pPostPSActDefsAsXML

  LET soapStatus = invokeProcessAndAddCustAct_g()

  RETURN soapStatus, invokeProcessAndAddCustActResponse.invokeProcessAndAddCustActReturn
END FUNCTION

#
# FUNCTION: invokeProcessAndAddCustAct_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessAndAddCustActRequest
#   OUTPUT: GLOBAL invokeProcessAndAddCustActResponse
#
FUNCTION invokeProcessAndAddCustAct_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessAndAddCustActRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessAndAddCustActResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcessAndAddCustActRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessAndAddCustActHTTPReq IS NOT NULL AND invokeProcessAndAddCustActHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcessAndAddCustActHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcessAndAddCustActHTTPReq.setMethod("POST")
    CALL invokeProcessAndAddCustActHTTPReq.setCharset("UTF-8")
    CALL invokeProcessAndAddCustActHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcessAndAddCustActHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcessAndAddCustActHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcessAndAddCustActHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcessAndAddCustActHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcessAndAddCustActHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessAndAddCustActRequest,body)

      # Send SOAP envelope
      CALL invokeProcessAndAddCustActHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcessAndAddCustActHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcessAndAddCustActHTTPResp = invokeProcessAndAddCustActHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcessAndAddCustActHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcessAndAddCustActResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessAndAddCustActHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcessAndAddCustActHTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcessAndAddCustActHTTPResp = invokeProcessAndAddCustActHTTPReq.getAsyncResponse()
    END IF

    IF invokeProcessAndAddCustActHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcessAndAddCustActHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcessAndAddCustActHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcessAndAddCustActHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcessAndAddCustActHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessAndAddCustActResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcessAndAddCustActHTTPResp.getStatusCode()||" ("||invokeProcessAndAddCustActHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcessAndAddCustActHTTPReq = NULL
  LET invokeProcessAndAddCustActHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcessAndAddCustActByOrg
#

#
# FUNCTION: invokeProcessAndAddCustActByOrg
#
FUNCTION invokeProcessAndAddCustActByOrg(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pOrgId, p_pFormDefOID, p_pFormFieldValue, p_pSubject, p_pPostPSActDefsAsXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pOrgId		STRING
  DEFINE	p_pFormDefOID		STRING
  DEFINE	p_pFormFieldValue		STRING
  DEFINE	p_pSubject		STRING
  DEFINE	p_pPostPSActDefsAsXML		STRING

  LET invokeProcessAndAddCustActByOrgRequest.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessAndAddCustActByOrgRequest.pRequesterId = p_pRequesterId
  LET invokeProcessAndAddCustActByOrgRequest.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessAndAddCustActByOrgRequest.pOrgId = p_pOrgId
  LET invokeProcessAndAddCustActByOrgRequest.pFormDefOID = p_pFormDefOID
  LET invokeProcessAndAddCustActByOrgRequest.pFormFieldValue = p_pFormFieldValue
  LET invokeProcessAndAddCustActByOrgRequest.pSubject = p_pSubject
  LET invokeProcessAndAddCustActByOrgRequest.pPostPSActDefsAsXML = p_pPostPSActDefsAsXML

  LET soapStatus = invokeProcessAndAddCustActByOrg_g()

  RETURN soapStatus, invokeProcessAndAddCustActByOrgResponse.invokeProcessAndAddCustActByOrgReturn
END FUNCTION

#
# FUNCTION: invokeProcessAndAddCustActByOrg_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessAndAddCustActByOrgRequest
#   OUTPUT: GLOBAL invokeProcessAndAddCustActByOrgResponse
#
FUNCTION invokeProcessAndAddCustActByOrg_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessAndAddCustActByOrgRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessAndAddCustActByOrgResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcessAndAddCustActByOrgRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessAndAddCustActByOrgHTTPReq IS NOT NULL AND invokeProcessAndAddCustActByOrgHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcessAndAddCustActByOrgHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcessAndAddCustActByOrgHTTPReq.setMethod("POST")
    CALL invokeProcessAndAddCustActByOrgHTTPReq.setCharset("UTF-8")
    CALL invokeProcessAndAddCustActByOrgHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcessAndAddCustActByOrgHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcessAndAddCustActByOrgHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcessAndAddCustActByOrgHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcessAndAddCustActByOrgHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcessAndAddCustActByOrgHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessAndAddCustActByOrgRequest,body)

      # Send SOAP envelope
      CALL invokeProcessAndAddCustActByOrgHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcessAndAddCustActByOrgHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcessAndAddCustActByOrgHTTPResp = invokeProcessAndAddCustActByOrgHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcessAndAddCustActByOrgHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcessAndAddCustActByOrgResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessAndAddCustActByOrgHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcessAndAddCustActByOrgHTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcessAndAddCustActByOrgHTTPResp = invokeProcessAndAddCustActByOrgHTTPReq.getAsyncResponse()
    END IF

    IF invokeProcessAndAddCustActByOrgHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcessAndAddCustActByOrgHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcessAndAddCustActByOrgHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcessAndAddCustActByOrgHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcessAndAddCustActByOrgHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessAndAddCustActByOrgResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcessAndAddCustActByOrgHTTPResp.getStatusCode()||" ("||invokeProcessAndAddCustActByOrgHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcessAndAddCustActByOrgHTTPReq = NULL
  LET invokeProcessAndAddCustActByOrgHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: invokeProcessByParameter
#

#
# FUNCTION: invokeProcessByParameter
#
FUNCTION invokeProcessByParameter(p_pProcessPackageId, p_pRequesterId, p_pOrgUnitId, p_pParameterId, p_pInvokeParameter, p_pSubject)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pProcessPackageId		STRING
  DEFINE	p_pRequesterId		STRING
  DEFINE	p_pOrgUnitId		STRING
  DEFINE	p_pParameterId		STRING
  DEFINE	p_pInvokeParameter		STRING
  DEFINE	p_pSubject		STRING

  LET invokeProcessByParameterRequest.pProcessPackageId = p_pProcessPackageId
  LET invokeProcessByParameterRequest.pRequesterId = p_pRequesterId
  LET invokeProcessByParameterRequest.pOrgUnitId = p_pOrgUnitId
  LET invokeProcessByParameterRequest.pParameterId = p_pParameterId
  LET invokeProcessByParameterRequest.pInvokeParameter = p_pInvokeParameter
  LET invokeProcessByParameterRequest.pSubject = p_pSubject

  LET soapStatus = invokeProcessByParameter_g()

  RETURN soapStatus, invokeProcessByParameterResponse.invokeProcessByParameterReturn
END FUNCTION

#
# FUNCTION: invokeProcessByParameter_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL invokeProcessByParameterRequest
#   OUTPUT: GLOBAL invokeProcessByParameterResponse
#
FUNCTION invokeProcessByParameter_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByParameterRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByParameterResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION invokeProcessByParameterRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByParameterHTTPReq IS NOT NULL AND invokeProcessByParameterHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET invokeProcessByParameterHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL invokeProcessByParameterHTTPReq.setMethod("POST")
    CALL invokeProcessByParameterHTTPReq.setCharset("UTF-8")
    CALL invokeProcessByParameterHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL invokeProcessByParameterHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL invokeProcessByParameterHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL invokeProcessByParameterHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL invokeProcessByParameterHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET invokeProcessByParameterHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(invokeProcessByParameterRequest,body)

      # Send SOAP envelope
      CALL invokeProcessByParameterHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET invokeProcessByParameterHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET invokeProcessByParameterHTTPResp = invokeProcessByParameterHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET invokeProcessByParameterHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION invokeProcessByParameterResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF invokeProcessByParameterHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF invokeProcessByParameterHTTPResp IS NULL THEN
      # Still no response, try again
      LET invokeProcessByParameterHTTPResp = invokeProcessByParameterHTTPReq.getAsyncResponse()
    END IF

    IF invokeProcessByParameterHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = invokeProcessByParameterHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE invokeProcessByParameterHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = invokeProcessByParameterHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = invokeProcessByParameterHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,invokeProcessByParameterResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||invokeProcessByParameterHTTPResp.getStatusCode()||" ("||invokeProcessByParameterHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET invokeProcessByParameterHTTPReq = NULL
  LET invokeProcessByParameterHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: importOrganizationData
#

#
# FUNCTION: importOrganizationData
#
FUNCTION importOrganizationData(p_pXMLData)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXMLData		STRING

  LET importOrganizationDataRequest.pXMLData = p_pXMLData

  LET soapStatus = importOrganizationData_g()

  RETURN soapStatus, importOrganizationDataResponse.importOrganizationDataReturn
END FUNCTION

#
# FUNCTION: importOrganizationData_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL importOrganizationDataRequest
#   OUTPUT: GLOBAL importOrganizationDataResponse
#
FUNCTION importOrganizationData_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(importOrganizationDataRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,importOrganizationDataResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION importOrganizationDataRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF importOrganizationDataHTTPReq IS NOT NULL AND importOrganizationDataHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET importOrganizationDataHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL importOrganizationDataHTTPReq.setMethod("POST")
    CALL importOrganizationDataHTTPReq.setCharset("UTF-8")
    CALL importOrganizationDataHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL importOrganizationDataHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL importOrganizationDataHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL importOrganizationDataHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL importOrganizationDataHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET importOrganizationDataHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(importOrganizationDataRequest,body)

      # Send SOAP envelope
      CALL importOrganizationDataHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET importOrganizationDataHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET importOrganizationDataHTTPResp = importOrganizationDataHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET importOrganizationDataHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION importOrganizationDataResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF importOrganizationDataHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF importOrganizationDataHTTPResp IS NULL THEN
      # Still no response, try again
      LET importOrganizationDataHTTPResp = importOrganizationDataHTTPReq.getAsyncResponse()
    END IF

    IF importOrganizationDataHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = importOrganizationDataHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE importOrganizationDataHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = importOrganizationDataHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = importOrganizationDataHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,importOrganizationDataResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||importOrganizationDataHTTPResp.getStatusCode()||" ("||importOrganizationDataHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET importOrganizationDataHTTPReq = NULL
  LET importOrganizationDataHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: assigneeReassignWorkItem
#

#
# FUNCTION: assigneeReassignWorkItem
#
FUNCTION assigneeReassignWorkItem(p_pRequesterOID, p_pAcceptorOID, p_pWorkItemOID, p_pReassignComment)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pRequesterOID		STRING
  DEFINE	p_pAcceptorOID		STRING
  DEFINE	p_pWorkItemOID		STRING
  DEFINE	p_pReassignComment		STRING

  LET assigneeReassignWorkItemRequest.pRequesterOID = p_pRequesterOID
  LET assigneeReassignWorkItemRequest.pAcceptorOID = p_pAcceptorOID
  LET assigneeReassignWorkItemRequest.pWorkItemOID = p_pWorkItemOID
  LET assigneeReassignWorkItemRequest.pReassignComment = p_pReassignComment

  LET soapStatus = assigneeReassignWorkItem_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: assigneeReassignWorkItem_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL assigneeReassignWorkItemRequest
#   OUTPUT: NONE
#
FUNCTION assigneeReassignWorkItem_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(assigneeReassignWorkItemRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="assigneeReassignWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION assigneeReassignWorkItemRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF assigneeReassignWorkItemHTTPReq IS NOT NULL AND assigneeReassignWorkItemHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET assigneeReassignWorkItemHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL assigneeReassignWorkItemHTTPReq.setMethod("POST")
    CALL assigneeReassignWorkItemHTTPReq.setCharset("UTF-8")
    CALL assigneeReassignWorkItemHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL assigneeReassignWorkItemHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL assigneeReassignWorkItemHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL assigneeReassignWorkItemHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL assigneeReassignWorkItemHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET assigneeReassignWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(assigneeReassignWorkItemRequest,body)

      # Send SOAP envelope
      CALL assigneeReassignWorkItemHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET assigneeReassignWorkItemHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET assigneeReassignWorkItemHTTPResp = assigneeReassignWorkItemHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET assigneeReassignWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION assigneeReassignWorkItemResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF assigneeReassignWorkItemHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF assigneeReassignWorkItemHTTPResp IS NULL THEN
      # Still no response, try again
      LET assigneeReassignWorkItemHTTPResp = assigneeReassignWorkItemHTTPReq.getAsyncResponse()
    END IF

    IF assigneeReassignWorkItemHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = assigneeReassignWorkItemHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE assigneeReassignWorkItemHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = assigneeReassignWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = assigneeReassignWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="assigneeReassignWorkItemResponse" OR node.getNamespaceURI()!="http://webservice.nana.dsc.com/" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||assigneeReassignWorkItemHTTPResp.getStatusCode()||" ("||assigneeReassignWorkItemHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET assigneeReassignWorkItemHTTPReq = NULL
  LET assigneeReassignWorkItemHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: checkWorkItemState
#

#
# FUNCTION: checkWorkItemState
#
FUNCTION checkWorkItemState(p_pWorkItemOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItemOID		STRING

  LET checkWorkItemStateRequest.pWorkItemOID = p_pWorkItemOID

  LET soapStatus = checkWorkItemState_g()

  RETURN soapStatus, checkWorkItemStateResponse.checkWorkItemStateReturn
END FUNCTION

#
# FUNCTION: checkWorkItemState_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL checkWorkItemStateRequest
#   OUTPUT: GLOBAL checkWorkItemStateResponse
#
FUNCTION checkWorkItemState_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(checkWorkItemStateRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,checkWorkItemStateResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION checkWorkItemStateRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF checkWorkItemStateHTTPReq IS NOT NULL AND checkWorkItemStateHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET checkWorkItemStateHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL checkWorkItemStateHTTPReq.setMethod("POST")
    CALL checkWorkItemStateHTTPReq.setCharset("UTF-8")
    CALL checkWorkItemStateHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL checkWorkItemStateHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL checkWorkItemStateHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL checkWorkItemStateHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL checkWorkItemStateHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET checkWorkItemStateHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(checkWorkItemStateRequest,body)

      # Send SOAP envelope
      CALL checkWorkItemStateHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET checkWorkItemStateHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET checkWorkItemStateHTTPResp = checkWorkItemStateHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET checkWorkItemStateHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION checkWorkItemStateResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF checkWorkItemStateHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF checkWorkItemStateHTTPResp IS NULL THEN
      # Still no response, try again
      LET checkWorkItemStateHTTPResp = checkWorkItemStateHTTPReq.getAsyncResponse()
    END IF

    IF checkWorkItemStateHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = checkWorkItemStateHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE checkWorkItemStateHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = checkWorkItemStateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = checkWorkItemStateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,checkWorkItemStateResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||checkWorkItemStateHTTPResp.getStatusCode()||" ("||checkWorkItemStateHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET checkWorkItemStateHTTPReq = NULL
  LET checkWorkItemStateHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: addLabelToNoticeWorkItem
#

#
# FUNCTION: addLabelToNoticeWorkItem
#
FUNCTION addLabelToNoticeWorkItem(p_pWorkItemOID, p_pUserOID, p_pLabelOID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pWorkItemOID		STRING
  DEFINE	p_pUserOID		STRING
  DEFINE	p_pLabelOID		STRING

  LET addLabelToNoticeWorkItemRequest.pWorkItemOID = p_pWorkItemOID
  LET addLabelToNoticeWorkItemRequest.pUserOID = p_pUserOID
  LET addLabelToNoticeWorkItemRequest.pLabelOID = p_pLabelOID

  LET soapStatus = addLabelToNoticeWorkItem_g()

  RETURN soapStatus, addLabelToNoticeWorkItemResponse.addLabelToNoticeWorkItemReturn
END FUNCTION

#
# FUNCTION: addLabelToNoticeWorkItem_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL addLabelToNoticeWorkItemRequest
#   OUTPUT: GLOBAL addLabelToNoticeWorkItemResponse
#
FUNCTION addLabelToNoticeWorkItem_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addLabelToNoticeWorkItemRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,addLabelToNoticeWorkItemResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION addLabelToNoticeWorkItemRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF addLabelToNoticeWorkItemHTTPReq IS NOT NULL AND addLabelToNoticeWorkItemHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET addLabelToNoticeWorkItemHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL addLabelToNoticeWorkItemHTTPReq.setMethod("POST")
    CALL addLabelToNoticeWorkItemHTTPReq.setCharset("UTF-8")
    CALL addLabelToNoticeWorkItemHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL addLabelToNoticeWorkItemHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL addLabelToNoticeWorkItemHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL addLabelToNoticeWorkItemHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL addLabelToNoticeWorkItemHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET addLabelToNoticeWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(addLabelToNoticeWorkItemRequest,body)

      # Send SOAP envelope
      CALL addLabelToNoticeWorkItemHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET addLabelToNoticeWorkItemHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET addLabelToNoticeWorkItemHTTPResp = addLabelToNoticeWorkItemHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET addLabelToNoticeWorkItemHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION addLabelToNoticeWorkItemResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF addLabelToNoticeWorkItemHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF addLabelToNoticeWorkItemHTTPResp IS NULL THEN
      # Still no response, try again
      LET addLabelToNoticeWorkItemHTTPResp = addLabelToNoticeWorkItemHTTPReq.getAsyncResponse()
    END IF

    IF addLabelToNoticeWorkItemHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = addLabelToNoticeWorkItemHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE addLabelToNoticeWorkItemHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = addLabelToNoticeWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = addLabelToNoticeWorkItemHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,addLabelToNoticeWorkItemResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||addLabelToNoticeWorkItemHTTPResp.getStatusCode()||" ("||addLabelToNoticeWorkItemHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET addLabelToNoticeWorkItemHTTPReq = NULL
  LET addLabelToNoticeWorkItemHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: fetchWorkItemCount
#

#
# FUNCTION: fetchWorkItemCount
#
FUNCTION fetchWorkItemCount(p_pUserID, p_pAccessCondition, p_pViewTimesType)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pUserID		STRING
  DEFINE	p_pAccessCondition		INTEGER
  DEFINE	p_pViewTimesType		STRING

  LET fetchWorkItemCountRequest.pUserID = p_pUserID
  LET fetchWorkItemCountRequest.pAccessCondition = p_pAccessCondition
  LET fetchWorkItemCountRequest.pViewTimesType = p_pViewTimesType

  LET soapStatus = fetchWorkItemCount_g()

  RETURN soapStatus, fetchWorkItemCountResponse.fetchWorkItemCountReturn
END FUNCTION

#
# FUNCTION: fetchWorkItemCount_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL fetchWorkItemCountRequest
#   OUTPUT: GLOBAL fetchWorkItemCountResponse
#
FUNCTION fetchWorkItemCount_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE nb         INTEGER
  DEFINE uri        STRING
  DEFINE setcookie  STRING
  DEFINE mustUnderstand INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")

  IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
    LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL request.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL request.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL request.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL request.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchWorkItemCountRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = response.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchWorkItemCountResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION


FUNCTION fetchWorkItemCountRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchWorkItemCountHTTPReq IS NOT NULL AND fetchWorkItemCountHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri IS NULL THEN
      LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri = "http://192.168.1.45:8086/NaNaWeb/services/PLMIntegrationEFGP"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET fetchWorkItemCountHTTPReq = com.HTTPRequest.Create(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
    CALL fetchWorkItemCountHTTPReq.setMethod("POST")
    CALL fetchWorkItemCountHTTPReq.setCharset("UTF-8")
    CALL fetchWorkItemCountHTTPReq.setHeader("SOAPAction","application/soap+xml;charset=utf-8")
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version IS NOT NULL THEN
      CALL fetchWorkItemCountHTTPReq.setVersion(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Version)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie IS NOT NULL THEN
      CALL fetchWorkItemCountHTTPReq.setHeader("Cookie",PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout <> 0 THEN
      CALL fetchWorkItemCountHTTPReq.setConnectionTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ConnectionTimeout)
    END IF
    IF PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout <> 0 THEN
      CALL fetchWorkItemCountHTTPReq.setTimeout(PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.ReadWriteTimeout)
    END IF
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET fetchWorkItemCountHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      #
      # DOM SOAP REQUEST SERIALIZE
      #
      CALL xml.Serializer.VariableToSoapSection5(fetchWorkItemCountRequest,body)

      # Send SOAP envelope
      CALL fetchWorkItemCountHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET fetchWorkItemCountHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET fetchWorkItemCountHTTPResp = fetchWorkItemCountHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET fetchWorkItemCountHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION


FUNCTION fetchWorkItemCountResponse_g()
  DEFINE wsstatus        INTEGER
  DEFINE nb              INTEGER
  DEFINE uri             STRING
  DEFINE setcookie       STRING
  DEFINE mustUnderstand  INTEGER
  DEFINE reader          xml.DomDocument
  DEFINE envelope        xml.DomNode
  DEFINE header          xml.DomNode
  DEFINE body            xml.DomNode
  DEFINE node            xml.DomNode

  LET wsstatus = -1

  LET uri = com.WebServiceEngine.GetOption("SoapModuleURI")
  #
  # CHECK PREVIOUS CALL  
  #
  IF fetchWorkItemCountHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF fetchWorkItemCountHTTPResp IS NULL THEN
      # Still no response, try again
      LET fetchWorkItemCountHTTPResp = fetchWorkItemCountHTTPReq.getAsyncResponse()
    END IF

    IF fetchWorkItemCountHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      #
      # RETRIEVE SERVICE SESSION COOKIE
      #
      LET setcookie = fetchWorkItemCountHTTPResp.getHeader("Set-Cookie")
      IF setcookie IS NOT NULL THEN
        LET PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Binding.Cookie = WSHelper_ExtractServerCookie(setcookie,PLMIntegrationEFGPService_PLMIntegrationEFGPEndpoint.Address.Uri)
      END IF

      CASE fetchWorkItemCountHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = fetchWorkItemCountHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = fetchWorkItemCountHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_RetrieveSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          # Handle SOAP headers
          IF header IS NOT NULL THEN
            LET node = header.getFirstChildElement()
            LET nb = 0
            WHILE (node IS NOT NULL)
              IF WSHelper_CheckSOAP11HeaderActor(node,uri) THEN
                LET mustUnderstand = WSHelper_GetSOAP11HeaderMustUnderstand(node)
                IF mustUnderstand = -1 THEN
                  CALL WSHelper_FillSOAP11WSError("Client","Invalid mustUnderstand value")
                  EXIT CASE
                END IF
                #
                # DOM SOAP RESPONSE HEADER DESERIALIZE
                #
                IF mustUnderstand THEN
                  CALL WSHelper_FillSOAP11WSError("MustUnderstand","Mandatory header block not understood")
                  EXIT CASE
                ELSE
                  LET node = node.getNextSiblingElement() # Skip header, not mandatory
                END IF
              ELSE
                LET node = node.getNextSiblingElement() # Skip header, not intended to us
              END IF
            END WHILE
            IF nb != 0 THEN
              CALL WSHelper_FillSOAP11WSError("Client","One or more headers are missing")
              EXIT CASE
            END IF
          END IF
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              #
              # DOM SOAP RESPONSE DESERIALIZE
              #
              CALL Xml.Serializer.SoapSection5ToVariable(node,fetchWorkItemCountResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||fetchWorkItemCountHTTPResp.getStatusCode()||" ("||fetchWorkItemCountHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET fetchWorkItemCountHTTPReq = NULL
  LET fetchWorkItemCountHTTPResp = NULL
  RETURN wsstatus
END FUNCTION


