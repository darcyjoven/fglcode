# Prog. Version..: '5.30.06-13.03.12(00000)'     #
#
#-------------------------------------------------------------------------------
# File: aws_spcgw.4gl
# GENERATED BY fglwsdl build-587.103
#-------------------------------------------------------------------------------
# Service: SPCService
# Port:    SPCServiceSoap
# Server:  http://202.39.238.20/SPCService.asmx
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------
#Modify........:No.FUN-720042 Genero 2.0
#Modify........:No.FUN-880046 08/08/12 by Echo Genero 2.11 調整
 
 
IMPORT com
IMPORT xml
 
#DATABASE ds   #No.FUN-720042  #No.FUN-880046
 
GLOBALS "../4gl/aws_spcgw.inc"
 
#-------------------------------------------------------------------------------
DEFINE TipTopToSPCDataHTTPReq     com.HTTPRequest
DEFINE TipTopToSPCDataHTTPResp    com.HTTPResponse
 
#-------------------------------------------------------------------------------
 
#
# Operation: SPCService_TipTopToSPCData
#
 
#
# FUNCTION: SPCService_TipTopToSPCData
#
FUNCTION SPCService_TipTopToSPCData(p_data)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_data		STRING
 
  LET SPCService_TipTopToSPCDataSoapIn.data = p_data
 
  LET soapStatus = SPCService_TipTopToSPCData_g()
 
  RETURN soapStatus, SPCService_TipTopToSPCDataSoapOut.TipTopToSPCDataResult
END FUNCTION
 
#
# FUNCTION: SPCService_TipTopToSPCData_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL SPCService_TipTopToSPCDataSoapIn
#   OUTPUT: GLOBAL SPCService_TipTopToSPCDataSoapOut
#
FUNCTION SPCService_TipTopToSPCData_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.StaxWriter
  DEFINE reader     xml.StaxReader
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF SPCService_soapServerLocation IS NULL THEN
    LET SPCService_soapServerLocation = "http://202.39.238.20/SPCService.asmx"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(SPCService_soapServerLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://tempuri.org/TipTopToSPCData\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # Stax request
    #
    TRY
      LET writer = request.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(SPCService_TipTopToSPCDataSoapIn,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL request.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
 
        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = response.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,SPCService_TipTopToSPCDataSoapOut)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL response.endXmlResponse(reader)
          LET wsstatus = 0
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION SPCService_TipTopToSPCDataRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.StaxWriter
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF TipTopToSPCDataHTTPReq IS NOT NULL AND TipTopToSPCDataHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF SPCService_soapServerLocation IS NULL THEN
      LET SPCService_soapServerLocation = "http://202.39.238.20/SPCService.asmx"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET TipTopToSPCDataHTTPReq = com.HTTPRequest.Create(SPCService_soapServerLocation)
    CALL TipTopToSPCDataHTTPReq.setMethod("POST")
    CALL TipTopToSPCDataHTTPReq.setCharset("UTF-8")
    CALL TipTopToSPCDataHTTPReq.setHeader("SOAPAction","\"http://tempuri.org/TipTopToSPCData\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET TipTopToSPCDataHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # Stax request
    #
    TRY
      LET writer = TipTopToSPCDataHTTPReq.beginXmlRequest()
      CALL WSHelper_WriteStaxSOAP11StartEnvelope(writer)
      CALL WSHelper_WriteStaxSOAP11StartBody(writer)
      CALL xml.Serializer.VariableToStax(SPCService_TipTopToSPCDataSoapIn,writer)
      CALL WSHelper_WriteStaxSOAP11EndBody(writer)
      CALL WSHelper_WriteStaxSOAP11EndEnvelope(writer)
      CALL TipTopToSPCDataHTTPReq.endXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET TipTopToSPCDataHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET TipTopToSPCDataHTTPResp = TipTopToSPCDataHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET TipTopToSPCDataHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION SPCService_TipTopToSPCDataResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.StaxReader
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF TipTopToSPCDataHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF TipTopToSPCDataHTTPResp IS NULL THEN
      # Still no response, try again
      LET TipTopToSPCDataHTTPResp = TipTopToSPCDataHTTPReq.getAsyncResponse()
    END IF
 
    IF TipTopToSPCDataHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE TipTopToSPCDataHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # STAX SOAP FAULT
          #
          LET reader = TipTopToSPCDataHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            CALL reader.nextSibling() # Skip SOAP headers
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11Fault(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL TipTopToSPCDataHTTPResp.endXmlResponse(reader)
 
        WHEN 200 # SOAP Result
          #
          # STAX SOAP RESPONSE
          #
          LET reader = TipTopToSPCDataHTTPResp.beginXmlResponse() # Begin Streaming Response
          IF NOT WSHelper_ReadStaxSOAP11StartEnvelope(reader) THEN
            EXIT CASE
          END IF
          IF WSHelper_CheckStaxSOAP11Header(reader) THEN
            IF NOT reader.isEmptyElement() THEN
              CALL WSHelper_FillSOAP11WSError("Client","No SOAP Header expected")
              EXIT CASE
            ELSE
              CALL reader.nextTag()
            END IF
          END IF
          IF NOT WSHelper_ReadStaxSOAP11StartBody(reader) THEN
            EXIT CASE
          END IF
          # Retrieve SOAP Message taking soap:root attribute into account
          IF NOT WSHelper_RetrieveStaxSOAP11Message(reader) THEN
            EXIT CASE
          END IF
          CALL xml.Serializer.StaxToVariable(reader,SPCService_TipTopToSPCDataSoapOut)
          IF NOT WSHelper_ReadStaxSOAP11EndBody(reader) THEN
            EXIT CASE
          END IF
          IF NOT WSHelper_ReadStaxSOAP11EndEnvelope(reader) THEN
            EXIT CASE
          END IF
          # End Streaming Response
          CALL TipTopToSPCDataHTTPResp.endXmlResponse(reader)
          LET wsstatus = 0
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||TipTopToSPCDataHTTPResp.getStatusCode()||" ("||TipTopToSPCDataHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET TipTopToSPCDataHTTPReq = NULL
  LET TipTopToSPCDataHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
