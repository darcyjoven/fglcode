# Prog. Version..: '5.30.06-13.03.12(00000)'     #
#
#-------------------------------------------------------------------------------
# File: aws_bigw.4gl
# GENERATED BY fglwsdl build-587.103
#-------------------------------------------------------------------------------
# Service: ListenerService
# Port:    ListenerPort
# Server:  http://10.40.16.114:9090/Server.rem
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------
# Modify.........: No.MOD-820048 08/02/14 By alex 標準化GLOBALS路徑
# Modify.........: No.FUN-880046 08/08/12 by Echo Genero 2.11 調整
 
#DATABASE ds               
#FUN-740207 #FUN-760054  新程式  #No.FUN-880046
 
IMPORT com
IMPORT xml
 
 
GLOBALS "../4gl/aws_bigw.inc"
 
#-------------------------------------------------------------------------------
DEFINE ConnectStringHTTPReq     com.HTTPRequest
DEFINE ConnectStringHTTPResp    com.HTTPResponse
 
DEFINE DBTypeHTTPReq     com.HTTPRequest
DEFINE DBTypeHTTPResp    com.HTTPResponse
 
DEFINE GetIDFromProductNameHTTPReq     com.HTTPRequest
DEFINE GetIDFromProductNameHTTPResp    com.HTTPResponse
 
DEFINE GetContactHTTPReq     com.HTTPRequest
DEFINE GetContactHTTPResp    com.HTTPResponse
 
DEFINE isPrivilegeHTTPReq     com.HTTPRequest
DEFINE isPrivilegeHTTPResp    com.HTTPResponse
 
DEFINE isLogonHTTPReq     com.HTTPRequest
DEFINE isLogonHTTPResp    com.HTTPResponse
 
DEFINE AddCoUserHTTPReq     com.HTTPRequest
DEFINE AddCoUserHTTPResp    com.HTTPResponse
 
DEFINE RemoveCoUserHTTPReq     com.HTTPRequest
DEFINE RemoveCoUserHTTPResp    com.HTTPResponse
 
DEFINE RemoveAllCoUserHTTPReq     com.HTTPRequest
DEFINE RemoveAllCoUserHTTPResp    com.HTTPResponse
 
DEFINE GetConCurrentUserListHTTPReq     com.HTTPRequest
DEFINE GetConCurrentUserListHTTPResp    com.HTTPResponse
 
DEFINE ShowVersionHTTPReq     com.HTTPRequest
DEFINE ShowVersionHTTPResp    com.HTTPResponse
 
DEFINE CallDSCRSSSyncHTTPReq     com.HTTPRequest
DEFINE CallDSCRSSSyncHTTPResp    com.HTTPResponse
 
DEFINE GetCatelogReportListHTTPReq     com.HTTPRequest
DEFINE GetCatelogReportListHTTPResp    com.HTTPResponse
 
DEFINE GetCatelog4ReportListHTTPReq     com.HTTPRequest
DEFINE GetCatelog4ReportListHTTPResp    com.HTTPResponse
 
DEFINE GetLogonTokenHTTPReq     com.HTTPRequest
DEFINE GetLogonTokenHTTPResp    com.HTTPResponse
 
DEFINE LogoffByTokenHTTPReq     com.HTTPRequest
DEFINE LogoffByTokenHTTPResp    com.HTTPResponse
 
#-------------------------------------------------------------------------------
 
#
# Operation: BI_ConnectString
#
 
#
# FUNCTION: BI_ConnectString
#
FUNCTION BI_ConnectString()
  DEFINE	soapStatus		INTEGER
 
  LET soapStatus = BI_ConnectString_g()
 
  RETURN soapStatus, BI_Listener_ConnectStringOutput.return
END FUNCTION
 
#
# FUNCTION: BI_ConnectString_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: GLOBAL BI_Listener_ConnectStringOutput
#
FUNCTION BI_ConnectString_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#ConnectString\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_ConnectStringInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_ConnectStringOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_ConnectStringRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF ConnectStringHTTPReq IS NOT NULL AND ConnectStringHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET ConnectStringHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL ConnectStringHTTPReq.setMethod("POST")
    CALL ConnectStringHTTPReq.setCharset("UTF-8")
    CALL ConnectStringHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#ConnectString\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET ConnectStringHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_ConnectStringInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL ConnectStringHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET ConnectStringHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET ConnectStringHTTPResp = ConnectStringHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET ConnectStringHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_ConnectStringResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF ConnectStringHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF ConnectStringHTTPResp IS NULL THEN
      # Still no response, try again
      LET ConnectStringHTTPResp = ConnectStringHTTPReq.getAsyncResponse()
    END IF
 
    IF ConnectStringHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE ConnectStringHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = ConnectStringHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = ConnectStringHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_ConnectStringOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||ConnectStringHTTPResp.getStatusCode()||" ("||ConnectStringHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET ConnectStringHTTPReq = NULL
  LET ConnectStringHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_DBType
#
 
#
# FUNCTION: BI_DBType
#
FUNCTION BI_DBType()
  DEFINE	soapStatus		INTEGER
 
  LET soapStatus = BI_DBType_g()
 
  RETURN soapStatus, BI_Listener_DBTypeOutput.return
END FUNCTION
 
#
# FUNCTION: BI_DBType_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: GLOBAL BI_Listener_DBTypeOutput
#
FUNCTION BI_DBType_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#DBType\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_DBTypeInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_DBTypeOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_DBTypeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF DBTypeHTTPReq IS NOT NULL AND DBTypeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET DBTypeHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL DBTypeHTTPReq.setMethod("POST")
    CALL DBTypeHTTPReq.setCharset("UTF-8")
    CALL DBTypeHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#DBType\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET DBTypeHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_DBTypeInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL DBTypeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET DBTypeHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET DBTypeHTTPResp = DBTypeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET DBTypeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_DBTypeResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF DBTypeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF DBTypeHTTPResp IS NULL THEN
      # Still no response, try again
      LET DBTypeHTTPResp = DBTypeHTTPReq.getAsyncResponse()
    END IF
 
    IF DBTypeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE DBTypeHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = DBTypeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = DBTypeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_DBTypeOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||DBTypeHTTPResp.getStatusCode()||" ("||DBTypeHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET DBTypeHTTPReq = NULL
  LET DBTypeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_GetIDFromProductName
#
 
#
# FUNCTION: BI_GetIDFromProductName
#
FUNCTION BI_GetIDFromProductName(p_ProductName)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_ProductName		STRING
 
  LET BI_Listener_GetIDFromProductNameInput.ProductName = p_ProductName
 
  LET soapStatus = BI_GetIDFromProductName_g()
 
  RETURN soapStatus, BI_Listener_GetIDFromProductNameOutput.return
END FUNCTION
 
#
# FUNCTION: BI_GetIDFromProductName_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_GetIDFromProductNameInput
#   OUTPUT: GLOBAL BI_Listener_GetIDFromProductNameOutput
#
FUNCTION BI_GetIDFromProductName_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetIDFromProductName\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetIDFromProductNameInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetIDFromProductNameOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_GetIDFromProductNameRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetIDFromProductNameHTTPReq IS NOT NULL AND GetIDFromProductNameHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET GetIDFromProductNameHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL GetIDFromProductNameHTTPReq.setMethod("POST")
    CALL GetIDFromProductNameHTTPReq.setCharset("UTF-8")
    CALL GetIDFromProductNameHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetIDFromProductName\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET GetIDFromProductNameHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetIDFromProductNameInput,body)
 
      # Send SOAP envelope
      CALL GetIDFromProductNameHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET GetIDFromProductNameHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET GetIDFromProductNameHTTPResp = GetIDFromProductNameHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET GetIDFromProductNameHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_GetIDFromProductNameResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetIDFromProductNameHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF GetIDFromProductNameHTTPResp IS NULL THEN
      # Still no response, try again
      LET GetIDFromProductNameHTTPResp = GetIDFromProductNameHTTPReq.getAsyncResponse()
    END IF
 
    IF GetIDFromProductNameHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE GetIDFromProductNameHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = GetIDFromProductNameHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = GetIDFromProductNameHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetIDFromProductNameOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||GetIDFromProductNameHTTPResp.getStatusCode()||" ("||GetIDFromProductNameHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET GetIDFromProductNameHTTPReq = NULL
  LET GetIDFromProductNameHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_GetContact
#
 
#
# FUNCTION: BI_GetContact
#
FUNCTION BI_GetContact()
  DEFINE	soapStatus		INTEGER
 
  LET soapStatus = BI_GetContact_g()
 
  RETURN soapStatus, BI_Listener_GetContactOutput.return
END FUNCTION
 
#
# FUNCTION: BI_GetContact_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: GLOBAL BI_Listener_GetContactOutput
#
FUNCTION BI_GetContact_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetContact\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_GetContactInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetContactOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_GetContactRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetContactHTTPReq IS NOT NULL AND GetContactHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET GetContactHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL GetContactHTTPReq.setMethod("POST")
    CALL GetContactHTTPReq.setCharset("UTF-8")
    CALL GetContactHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetContact\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET GetContactHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_GetContactInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL GetContactHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET GetContactHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET GetContactHTTPResp = GetContactHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET GetContactHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_GetContactResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetContactHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF GetContactHTTPResp IS NULL THEN
      # Still no response, try again
      LET GetContactHTTPResp = GetContactHTTPReq.getAsyncResponse()
    END IF
 
    IF GetContactHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE GetContactHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = GetContactHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = GetContactHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetContactOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||GetContactHTTPResp.getStatusCode()||" ("||GetContactHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET GetContactHTTPReq = NULL
  LET GetContactHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_isPrivilege
#
 
#
# FUNCTION: BI_isPrivilege
#
FUNCTION BI_isPrivilege(p_ProductName)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_ProductName		STRING
 
  LET BI_Listener_isPrivilegeInput.ProductName = p_ProductName
 
  LET soapStatus = BI_isPrivilege_g()
 
  RETURN soapStatus, BI_Listener_isPrivilegeOutput.return
END FUNCTION
 
#
# FUNCTION: BI_isPrivilege_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_isPrivilegeInput
#   OUTPUT: GLOBAL BI_Listener_isPrivilegeOutput
#
FUNCTION BI_isPrivilege_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#isPrivilege\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_isPrivilegeInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_isPrivilegeOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_isPrivilegeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF isPrivilegeHTTPReq IS NOT NULL AND isPrivilegeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET isPrivilegeHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL isPrivilegeHTTPReq.setMethod("POST")
    CALL isPrivilegeHTTPReq.setCharset("UTF-8")
    CALL isPrivilegeHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#isPrivilege\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET isPrivilegeHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_isPrivilegeInput,body)
 
      # Send SOAP envelope
      CALL isPrivilegeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET isPrivilegeHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET isPrivilegeHTTPResp = isPrivilegeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET isPrivilegeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_isPrivilegeResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF isPrivilegeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF isPrivilegeHTTPResp IS NULL THEN
      # Still no response, try again
      LET isPrivilegeHTTPResp = isPrivilegeHTTPReq.getAsyncResponse()
    END IF
 
    IF isPrivilegeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE isPrivilegeHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = isPrivilegeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = isPrivilegeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_isPrivilegeOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||isPrivilegeHTTPResp.getStatusCode()||" ("||isPrivilegeHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET isPrivilegeHTTPReq = NULL
  LET isPrivilegeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_isLogon
#
 
#
# FUNCTION: BI_isLogon
#
FUNCTION BI_isLogon(p_ProductName, p_UserName, p_SessionID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_ProductName		STRING
  DEFINE	p_UserName		STRING
  DEFINE	p_SessionID		STRING
 
  LET BI_Listener_isLogonInput.ProductName = p_ProductName
  LET BI_Listener_isLogonInput.UserName = p_UserName
  LET BI_Listener_isLogonInput.SessionID = p_SessionID
 
  LET soapStatus = BI_isLogon_g()
 
  RETURN soapStatus, BI_Listener_isLogonOutput.return
END FUNCTION
 
#
# FUNCTION: BI_isLogon_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_isLogonInput
#   OUTPUT: GLOBAL BI_Listener_isLogonOutput
#
FUNCTION BI_isLogon_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#isLogon\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_isLogonInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_isLogonOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_isLogonRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF isLogonHTTPReq IS NOT NULL AND isLogonHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET isLogonHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL isLogonHTTPReq.setMethod("POST")
    CALL isLogonHTTPReq.setCharset("UTF-8")
    CALL isLogonHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#isLogon\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET isLogonHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_isLogonInput,body)
 
      # Send SOAP envelope
      CALL isLogonHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET isLogonHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET isLogonHTTPResp = isLogonHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET isLogonHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_isLogonResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF isLogonHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF isLogonHTTPResp IS NULL THEN
      # Still no response, try again
      LET isLogonHTTPResp = isLogonHTTPReq.getAsyncResponse()
    END IF
 
    IF isLogonHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE isLogonHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = isLogonHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = isLogonHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_isLogonOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||isLogonHTTPResp.getStatusCode()||" ("||isLogonHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET isLogonHTTPReq = NULL
  LET isLogonHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_AddCoUser
#
 
#
# FUNCTION: BI_AddCoUser
#
FUNCTION BI_AddCoUser(p_ProductName, p_UserName, p_SessionID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_ProductName		STRING
  DEFINE	p_UserName		STRING
  DEFINE	p_SessionID		STRING
 
  LET BI_Listener_AddCoUserInput.ProductName = p_ProductName
  LET BI_Listener_AddCoUserInput.UserName = p_UserName
  LET BI_Listener_AddCoUserInput.SessionID = p_SessionID
 
  LET soapStatus = BI_AddCoUser_g()
 
  RETURN soapStatus, BI_Listener_AddCoUserOutput.return
END FUNCTION
 
#
# FUNCTION: BI_AddCoUser_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_AddCoUserInput
#   OUTPUT: GLOBAL BI_Listener_AddCoUserOutput
#
FUNCTION BI_AddCoUser_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#AddCoUser\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_AddCoUserInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_AddCoUserOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_AddCoUserRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF AddCoUserHTTPReq IS NOT NULL AND AddCoUserHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET AddCoUserHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL AddCoUserHTTPReq.setMethod("POST")
    CALL AddCoUserHTTPReq.setCharset("UTF-8")
    CALL AddCoUserHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#AddCoUser\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET AddCoUserHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_AddCoUserInput,body)
 
      # Send SOAP envelope
      CALL AddCoUserHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET AddCoUserHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET AddCoUserHTTPResp = AddCoUserHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET AddCoUserHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_AddCoUserResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF AddCoUserHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF AddCoUserHTTPResp IS NULL THEN
      # Still no response, try again
      LET AddCoUserHTTPResp = AddCoUserHTTPReq.getAsyncResponse()
    END IF
 
    IF AddCoUserHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE AddCoUserHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = AddCoUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = AddCoUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_AddCoUserOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||AddCoUserHTTPResp.getStatusCode()||" ("||AddCoUserHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET AddCoUserHTTPReq = NULL
  LET AddCoUserHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_RemoveCoUser
#
 
#
# FUNCTION: BI_RemoveCoUser
#
FUNCTION BI_RemoveCoUser(p_ProductName, p_UserName, p_SessionID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_ProductName		STRING
  DEFINE	p_UserName		STRING
  DEFINE	p_SessionID		STRING
 
  LET BI_Listener_RemoveCoUserInput.ProductName = p_ProductName
  LET BI_Listener_RemoveCoUserInput.UserName = p_UserName
  LET BI_Listener_RemoveCoUserInput.SessionID = p_SessionID
 
  LET soapStatus = BI_RemoveCoUser_g()
 
  RETURN soapStatus, BI_Listener_RemoveCoUserOutput.return
END FUNCTION
 
#
# FUNCTION: BI_RemoveCoUser_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_RemoveCoUserInput
#   OUTPUT: GLOBAL BI_Listener_RemoveCoUserOutput
#
FUNCTION BI_RemoveCoUser_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#RemoveCoUser\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_RemoveCoUserInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_RemoveCoUserOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_RemoveCoUserRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF RemoveCoUserHTTPReq IS NOT NULL AND RemoveCoUserHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET RemoveCoUserHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL RemoveCoUserHTTPReq.setMethod("POST")
    CALL RemoveCoUserHTTPReq.setCharset("UTF-8")
    CALL RemoveCoUserHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#RemoveCoUser\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET RemoveCoUserHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_RemoveCoUserInput,body)
 
      # Send SOAP envelope
      CALL RemoveCoUserHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET RemoveCoUserHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET RemoveCoUserHTTPResp = RemoveCoUserHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET RemoveCoUserHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_RemoveCoUserResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF RemoveCoUserHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF RemoveCoUserHTTPResp IS NULL THEN
      # Still no response, try again
      LET RemoveCoUserHTTPResp = RemoveCoUserHTTPReq.getAsyncResponse()
    END IF
 
    IF RemoveCoUserHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE RemoveCoUserHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = RemoveCoUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = RemoveCoUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_RemoveCoUserOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||RemoveCoUserHTTPResp.getStatusCode()||" ("||RemoveCoUserHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET RemoveCoUserHTTPReq = NULL
  LET RemoveCoUserHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_RemoveAllCoUser
#
 
#
# FUNCTION: BI_RemoveAllCoUser
#
FUNCTION BI_RemoveAllCoUser(p_UserName, p_Session)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_UserName		STRING
  DEFINE	p_Session		STRING
 
  LET BI_Listener_RemoveAllCoUserInput.UserName = p_UserName
  LET BI_Listener_RemoveAllCoUserInput.Session = p_Session
 
  LET soapStatus = BI_RemoveAllCoUser_g()
 
  RETURN soapStatus
END FUNCTION
 
#
# FUNCTION: BI_RemoveAllCoUser_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_RemoveAllCoUserInput
#   OUTPUT: NONE
#
FUNCTION BI_RemoveAllCoUser_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#RemoveAllCoUser\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_RemoveAllCoUserInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="Listener.RemoveAllCoUserOutput" OR node.getNamespaceURI()!="http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_RemoveAllCoUserRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF RemoveAllCoUserHTTPReq IS NOT NULL AND RemoveAllCoUserHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET RemoveAllCoUserHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL RemoveAllCoUserHTTPReq.setMethod("POST")
    CALL RemoveAllCoUserHTTPReq.setCharset("UTF-8")
    CALL RemoveAllCoUserHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#RemoveAllCoUser\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET RemoveAllCoUserHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_RemoveAllCoUserInput,body)
 
      # Send SOAP envelope
      CALL RemoveAllCoUserHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET RemoveAllCoUserHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET RemoveAllCoUserHTTPResp = RemoveAllCoUserHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET RemoveAllCoUserHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_RemoveAllCoUserResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF RemoveAllCoUserHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF RemoveAllCoUserHTTPResp IS NULL THEN
      # Still no response, try again
      LET RemoveAllCoUserHTTPResp = RemoveAllCoUserHTTPReq.getAsyncResponse()
    END IF
 
    IF RemoveAllCoUserHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE RemoveAllCoUserHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = RemoveAllCoUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = RemoveAllCoUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="Listener.RemoveAllCoUserOutput" OR node.getNamespaceURI()!="http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||RemoveAllCoUserHTTPResp.getStatusCode()||" ("||RemoveAllCoUserHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET RemoveAllCoUserHTTPReq = NULL
  LET RemoveAllCoUserHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_GetConCurrentUserList
#
 
#
# FUNCTION: BI_GetConCurrentUserList
#
FUNCTION BI_GetConCurrentUserList()
  DEFINE	soapStatus		INTEGER
 
  LET soapStatus = BI_GetConCurrentUserList_g()
 
  RETURN soapStatus, BI_Listener_GetConCurrentUserListOutput.return
END FUNCTION
 
#
# FUNCTION: BI_GetConCurrentUserList_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: GLOBAL BI_Listener_GetConCurrentUserListOutput
#
FUNCTION BI_GetConCurrentUserList_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetConCurrentUserList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_GetConCurrentUserListInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetConCurrentUserListOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_GetConCurrentUserListRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetConCurrentUserListHTTPReq IS NOT NULL AND GetConCurrentUserListHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET GetConCurrentUserListHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL GetConCurrentUserListHTTPReq.setMethod("POST")
    CALL GetConCurrentUserListHTTPReq.setCharset("UTF-8")
    CALL GetConCurrentUserListHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetConCurrentUserList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET GetConCurrentUserListHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_GetConCurrentUserListInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL GetConCurrentUserListHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET GetConCurrentUserListHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET GetConCurrentUserListHTTPResp = GetConCurrentUserListHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET GetConCurrentUserListHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_GetConCurrentUserListResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetConCurrentUserListHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF GetConCurrentUserListHTTPResp IS NULL THEN
      # Still no response, try again
      LET GetConCurrentUserListHTTPResp = GetConCurrentUserListHTTPReq.getAsyncResponse()
    END IF
 
    IF GetConCurrentUserListHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE GetConCurrentUserListHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = GetConCurrentUserListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = GetConCurrentUserListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetConCurrentUserListOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||GetConCurrentUserListHTTPResp.getStatusCode()||" ("||GetConCurrentUserListHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET GetConCurrentUserListHTTPReq = NULL
  LET GetConCurrentUserListHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_ShowVersion
#
 
#
# FUNCTION: BI_ShowVersion
#
FUNCTION BI_ShowVersion()
  DEFINE	soapStatus		INTEGER
 
  LET soapStatus = BI_ShowVersion_g()
 
  RETURN soapStatus, BI_Listener_ShowVersionOutput.return
END FUNCTION
 
#
# FUNCTION: BI_ShowVersion_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: GLOBAL BI_Listener_ShowVersionOutput
#
FUNCTION BI_ShowVersion_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#ShowVersion\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_ShowVersionInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_ShowVersionOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_ShowVersionRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF ShowVersionHTTPReq IS NOT NULL AND ShowVersionHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET ShowVersionHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL ShowVersionHTTPReq.setMethod("POST")
    CALL ShowVersionHTTPReq.setCharset("UTF-8")
    CALL ShowVersionHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#ShowVersion\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET ShowVersionHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_ShowVersionInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL ShowVersionHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET ShowVersionHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET ShowVersionHTTPResp = ShowVersionHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET ShowVersionHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_ShowVersionResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF ShowVersionHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF ShowVersionHTTPResp IS NULL THEN
      # Still no response, try again
      LET ShowVersionHTTPResp = ShowVersionHTTPReq.getAsyncResponse()
    END IF
 
    IF ShowVersionHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE ShowVersionHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = ShowVersionHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = ShowVersionHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_ShowVersionOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||ShowVersionHTTPResp.getStatusCode()||" ("||ShowVersionHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET ShowVersionHTTPReq = NULL
  LET ShowVersionHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_CallDSCRSSSync
#
 
#
# FUNCTION: BI_CallDSCRSSSync
#
FUNCTION BI_CallDSCRSSSync()
  DEFINE	soapStatus		INTEGER
 
  LET soapStatus = BI_CallDSCRSSSync_g()
 
  RETURN soapStatus
END FUNCTION
 
#
# FUNCTION: BI_CallDSCRSSSync_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: NONE
#
FUNCTION BI_CallDSCRSSSync_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#CallDSCRSSSync\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_CallDSCRSSSyncInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="Listener.CallDSCRSSSyncOutput" OR node.getNamespaceURI()!="http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_CallDSCRSSSyncRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CallDSCRSSSyncHTTPReq IS NOT NULL AND CallDSCRSSSyncHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET CallDSCRSSSyncHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL CallDSCRSSSyncHTTPReq.setMethod("POST")
    CALL CallDSCRSSSyncHTTPReq.setCharset("UTF-8")
    CALL CallDSCRSSSyncHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#CallDSCRSSSync\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET CallDSCRSSSyncHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","Listener_CallDSCRSSSyncInput","http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl")
      CALL body.appendChild(node)
 
      # Send SOAP envelope
      CALL CallDSCRSSSyncHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET CallDSCRSSSyncHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET CallDSCRSSSyncHTTPResp = CallDSCRSSSyncHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET CallDSCRSSSyncHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_CallDSCRSSSyncResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CallDSCRSSSyncHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF CallDSCRSSSyncHTTPResp IS NULL THEN
      # Still no response, try again
      LET CallDSCRSSSyncHTTPResp = CallDSCRSSSyncHTTPReq.getAsyncResponse()
    END IF
 
    IF CallDSCRSSSyncHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE CallDSCRSSSyncHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = CallDSCRSSSyncHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = CallDSCRSSSyncHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="Listener.CallDSCRSSSyncOutput" OR node.getNamespaceURI()!="http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||CallDSCRSSSyncHTTPResp.getStatusCode()||" ("||CallDSCRSSSyncHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET CallDSCRSSSyncHTTPReq = NULL
  LET CallDSCRSSSyncHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_GetCatelogReportList
#
 
#
# FUNCTION: BI_GetCatelogReportList
#
FUNCTION BI_GetCatelogReportList(p_User, p_PWD)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_User		STRING
  DEFINE	p_PWD		STRING
 
  LET BI_Listener_GetCatelogReportListInput.User = p_User
  LET BI_Listener_GetCatelogReportListInput.PWD = p_PWD
 
  LET soapStatus = BI_GetCatelogReportList_g()
 
  RETURN soapStatus, BI_Listener_GetCatelogReportListOutput.return
END FUNCTION
 
#
# FUNCTION: BI_GetCatelogReportList_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_GetCatelogReportListInput
#   OUTPUT: GLOBAL BI_Listener_GetCatelogReportListOutput
#
FUNCTION BI_GetCatelogReportList_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetCatelogReportList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetCatelogReportListInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetCatelogReportListOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_GetCatelogReportListRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetCatelogReportListHTTPReq IS NOT NULL AND GetCatelogReportListHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET GetCatelogReportListHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL GetCatelogReportListHTTPReq.setMethod("POST")
    CALL GetCatelogReportListHTTPReq.setCharset("UTF-8")
    CALL GetCatelogReportListHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetCatelogReportList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET GetCatelogReportListHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetCatelogReportListInput,body)
 
      # Send SOAP envelope
      CALL GetCatelogReportListHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET GetCatelogReportListHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET GetCatelogReportListHTTPResp = GetCatelogReportListHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET GetCatelogReportListHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_GetCatelogReportListResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetCatelogReportListHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF GetCatelogReportListHTTPResp IS NULL THEN
      # Still no response, try again
      LET GetCatelogReportListHTTPResp = GetCatelogReportListHTTPReq.getAsyncResponse()
    END IF
 
    IF GetCatelogReportListHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE GetCatelogReportListHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = GetCatelogReportListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = GetCatelogReportListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetCatelogReportListOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||GetCatelogReportListHTTPResp.getStatusCode()||" ("||GetCatelogReportListHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET GetCatelogReportListHTTPReq = NULL
  LET GetCatelogReportListHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_GetCatelog4ReportList
#
 
#
# FUNCTION: BI_GetCatelog4ReportList
#
FUNCTION BI_GetCatelog4ReportList(p_User, p_PWD)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_User		STRING
  DEFINE	p_PWD		STRING
 
  LET BI_Listener_GetCatelog4ReportListInput.User = p_User
  LET BI_Listener_GetCatelog4ReportListInput.PWD = p_PWD
 
  LET soapStatus = BI_GetCatelog4ReportList_g()
 
  RETURN soapStatus, BI_Listener_GetCatelog4ReportListOutput.return
END FUNCTION
 
#
# FUNCTION: BI_GetCatelog4ReportList_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_GetCatelog4ReportListInput
#   OUTPUT: GLOBAL BI_Listener_GetCatelog4ReportListOutput
#
FUNCTION BI_GetCatelog4ReportList_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetCatelog4ReportList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetCatelog4ReportListInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetCatelog4ReportListOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_GetCatelog4ReportListRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetCatelog4ReportListHTTPReq IS NOT NULL AND GetCatelog4ReportListHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET GetCatelog4ReportListHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL GetCatelog4ReportListHTTPReq.setMethod("POST")
    CALL GetCatelog4ReportListHTTPReq.setCharset("UTF-8")
    CALL GetCatelog4ReportListHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetCatelog4ReportList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET GetCatelog4ReportListHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetCatelog4ReportListInput,body)
 
      # Send SOAP envelope
      CALL GetCatelog4ReportListHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET GetCatelog4ReportListHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET GetCatelog4ReportListHTTPResp = GetCatelog4ReportListHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET GetCatelog4ReportListHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_GetCatelog4ReportListResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetCatelog4ReportListHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF GetCatelog4ReportListHTTPResp IS NULL THEN
      # Still no response, try again
      LET GetCatelog4ReportListHTTPResp = GetCatelog4ReportListHTTPReq.getAsyncResponse()
    END IF
 
    IF GetCatelog4ReportListHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE GetCatelog4ReportListHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = GetCatelog4ReportListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = GetCatelog4ReportListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetCatelog4ReportListOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||GetCatelog4ReportListHTTPResp.getStatusCode()||" ("||GetCatelog4ReportListHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET GetCatelog4ReportListHTTPReq = NULL
  LET GetCatelog4ReportListHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_GetLogonToken
#
 
#
# FUNCTION: BI_GetLogonToken
#
FUNCTION BI_GetLogonToken(p_User, p_PWD)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_User		STRING
  DEFINE	p_PWD		STRING
 
  LET BI_Listener_GetLogonTokenInput.User = p_User
  LET BI_Listener_GetLogonTokenInput.PWD = p_PWD
 
  LET soapStatus = BI_GetLogonToken_g()
 
  RETURN soapStatus, BI_Listener_GetLogonTokenOutput.return
END FUNCTION
 
#
# FUNCTION: BI_GetLogonToken_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_GetLogonTokenInput
#   OUTPUT: GLOBAL BI_Listener_GetLogonTokenOutput
#
FUNCTION BI_GetLogonToken_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetLogonToken\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetLogonTokenInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetLogonTokenOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_GetLogonTokenRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetLogonTokenHTTPReq IS NOT NULL AND GetLogonTokenHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET GetLogonTokenHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL GetLogonTokenHTTPReq.setMethod("POST")
    CALL GetLogonTokenHTTPReq.setCharset("UTF-8")
    CALL GetLogonTokenHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#GetLogonToken\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET GetLogonTokenHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_GetLogonTokenInput,body)
 
      # Send SOAP envelope
      CALL GetLogonTokenHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET GetLogonTokenHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET GetLogonTokenHTTPResp = GetLogonTokenHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET GetLogonTokenHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_GetLogonTokenResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF GetLogonTokenHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF GetLogonTokenHTTPResp IS NULL THEN
      # Still no response, try again
      LET GetLogonTokenHTTPResp = GetLogonTokenHTTPReq.getAsyncResponse()
    END IF
 
    IF GetLogonTokenHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE GetLogonTokenHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = GetLogonTokenHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = GetLogonTokenHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,BI_Listener_GetLogonTokenOutput)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||GetLogonTokenHTTPResp.getStatusCode()||" ("||GetLogonTokenHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET GetLogonTokenHTTPReq = NULL
  LET GetLogonTokenHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: BI_LogoffByToken
#
 
#
# FUNCTION: BI_LogoffByToken
#
FUNCTION BI_LogoffByToken(p_token)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_token		STRING
 
  LET BI_Listener_LogoffByTokenInput.token = p_token
 
  LET soapStatus = BI_LogoffByToken_g()
 
  RETURN soapStatus
END FUNCTION
 
#
# FUNCTION: BI_LogoffByToken_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL BI_Listener_LogoffByTokenInput
#   OUTPUT: NONE
#
FUNCTION BI_LogoffByToken_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF BI_ListenerService_ListenerPortLocation IS NULL THEN
    LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#LogoffByToken\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_LogoffByTokenInput,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="Listener.LogoffByTokenOutput" OR node.getNamespaceURI()!="http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
FUNCTION BI_LogoffByTokenRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF LogoffByTokenHTTPReq IS NOT NULL AND LogoffByTokenHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF BI_ListenerService_ListenerPortLocation IS NULL THEN
      LET BI_ListenerService_ListenerPortLocation = "http://10.40.16.114:9090/Server.rem"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET LogoffByTokenHTTPReq = com.HTTPRequest.Create(BI_ListenerService_ListenerPortLocation)
    CALL LogoffByTokenHTTPReq.setMethod("POST")
    CALL LogoffByTokenHTTPReq.setCharset("UTF-8")
    CALL LogoffByTokenHTTPReq.setHeader("SOAPAction","\"http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl#LogoffByToken\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET LogoffByTokenHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(BI_Listener_LogoffByTokenInput,body)
 
      # Send SOAP envelope
      CALL LogoffByTokenHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET LogoffByTokenHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET LogoffByTokenHTTPResp = LogoffByTokenHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET LogoffByTokenHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
FUNCTION BI_LogoffByTokenResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF LogoffByTokenHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF LogoffByTokenHTTPResp IS NULL THEN
      # Still no response, try again
      LET LogoffByTokenHTTPResp = LogoffByTokenHTTPReq.getAsyncResponse()
    END IF
 
    IF LogoffByTokenHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE LogoffByTokenHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = LogoffByTokenHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = LogoffByTokenHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="Listener.LogoffByTokenOutput" OR node.getNamespaceURI()!="http://schemas.microsoft.com/clr/nsassem/LicenseControl.Listener/LicenseControl" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||LogoffByTokenHTTPResp.getStatusCode()||" ("||LogoffByTokenHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET LogoffByTokenHTTPReq = NULL
  LET LogoffByTokenHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
