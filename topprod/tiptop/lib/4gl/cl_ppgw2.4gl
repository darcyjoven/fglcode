# Prog. Version..: '5.30.06-13.03.12(00002)'     #
#
# Program name...: cl_ppgw2.4gl
# Descriptions...: Product Portal 整合 SOAP 連接檔
# Date & Author..: 2008/10/28 by Vicky
# Memo...........:
# Modify.........: No.FUN-8A0096 08/10/28 by Vicky 新建立
# Modify.........: No.FUN-B50181 11/05/31 by Jenjwu 調整函式的註解格式以便P_findfunc正確擷取。
# Modify.........: No:FUN-B90110 11/09/21 by Jay 重新產生

IMPORT FGL WSHelper
IMPORT com
IMPORT xml

DATABASE ds   #FUN-8A0096  #FUN-B90110

#-------------------------------------------------------------------------------
# File: aws_ppgw2.4gl
# GENERATED BY fglwsdl 101601
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------


GLOBALS "../../aws/4gl/aws_ppgw2.inc"



#-------------------------------------------------------------------------------
# Service: PortalWSServiceSoapService
# Port:    Portlet_PortalWS_PortalWSService
# Server:  http://10.40.60.139:8081/WebService/PortalWS
#-------------------------------------------------------------------------------

PRIVATE DEFINE getMessageHTTPReq     com.HTTPRequest
PRIVATE DEFINE getMessageHTTPResp    com.HTTPResponse

PRIVATE DEFINE getRolesHTTPReq     com.HTTPRequest
PRIVATE DEFINE getRolesHTTPResp    com.HTTPResponse

PRIVATE DEFINE loginValidateHTTPReq     com.HTTPRequest
PRIVATE DEFINE loginValidateHTTPResp    com.HTTPResponse

PRIVATE DEFINE getAllUserHTTPReq     com.HTTPRequest
PRIVATE DEFINE getAllUserHTTPResp    com.HTTPResponse

PRIVATE DEFINE getAllUserTotalSizeHTTPReq     com.HTTPRequest
PRIVATE DEFINE getAllUserTotalSizeHTTPResp    com.HTTPResponse

PRIVATE DEFINE sendMessageToPortalHTTPReq     com.HTTPRequest
PRIVATE DEFINE sendMessageToPortalHTTPResp    com.HTTPResponse

PRIVATE DEFINE signatureCompleteHTTPReq     com.HTTPRequest
PRIVATE DEFINE signatureCompleteHTTPResp    com.HTTPResponse

PRIVATE DEFINE testMasterDataHTTPReq     com.HTTPRequest
PRIVATE DEFINE testMasterDataHTTPResp    com.HTTPResponse

PRIVATE DEFINE synchronizeAccoutForBIHTTPReq     com.HTTPRequest
PRIVATE DEFINE synchronizeAccoutForBIHTTPResp    com.HTTPResponse

PRIVATE DEFINE autoAccountMaintainHTTPReq     com.HTTPRequest
PRIVATE DEFINE autoAccountMaintainHTTPResp    com.HTTPResponse

PRIVATE DEFINE getMappingAccountHTTPReq     com.HTTPRequest
PRIVATE DEFINE getMappingAccountHTTPResp    com.HTTPResponse

PRIVATE DEFINE sendTodoListHTTPReq     com.HTTPRequest
PRIVATE DEFINE sendTodoListHTTPResp    com.HTTPResponse

PRIVATE DEFINE getTodoListTotalSizeHTTPReq     com.HTTPRequest
PRIVATE DEFINE getTodoListTotalSizeHTTPResp    com.HTTPResponse

PRIVATE DEFINE getTodoListHTTPReq     com.HTTPRequest
PRIVATE DEFINE getTodoListHTTPResp    com.HTTPResponse

PRIVATE DEFINE getMessageTotalSizeHTTPReq     com.HTTPRequest
PRIVATE DEFINE getMessageTotalSizeHTTPResp    com.HTTPResponse

PRIVATE DEFINE getCalEventTotalSizeHTTPReq     com.HTTPRequest
PRIVATE DEFINE getCalEventTotalSizeHTTPResp    com.HTTPResponse

PRIVATE DEFINE getCalEventHTTPReq     com.HTTPRequest
PRIVATE DEFINE getCalEventHTTPResp    com.HTTPResponse

PRIVATE DEFINE sendCalEventHTTPReq     com.HTTPRequest
PRIVATE DEFINE sendCalEventHTTPResp    com.HTTPResponse

PRIVATE DEFINE getAnnouncementsTotalSizeHTTPReq     com.HTTPRequest
PRIVATE DEFINE getAnnouncementsTotalSizeHTTPResp    com.HTTPResponse

PRIVATE DEFINE getAnnouncementsHTTPReq     com.HTTPRequest
PRIVATE DEFINE getAnnouncementsHTTPResp    com.HTTPResponse

PRIVATE DEFINE testHTTPReq     com.HTTPRequest
PRIVATE DEFINE testHTTPResp    com.HTTPResponse

PRIVATE DEFINE getLiveUserCountHTTPReq     com.HTTPRequest
PRIVATE DEFINE getLiveUserCountHTTPResp    com.HTTPResponse

#-------------------------------------------------------------------------------

#
# Operation: ProductPortal_getMessage
#

#
# FUNCTION: ProductPortal_getMessage
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessage(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getMessageRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getMessage_g()

  RETURN soapStatus, ProductPortal_getMessageResponse.getMessageReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getMessage_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getMessageRequest
#   OUTPUT: GLOBAL ProductPortal_getMessageResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessage_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getMessageRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getMessageResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessageRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getMessageHTTPReq IS NOT NULL AND getMessageHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getMessageHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getMessageHTTPReq.setMethod("POST")
    CALL getMessageHTTPReq.setCharset("UTF-8")
    CALL getMessageHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getMessageHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getMessageRequest,body)

      # Send SOAP envelope
      CALL getMessageHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getMessageHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getMessageHTTPResp = getMessageHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getMessageHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessageResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getMessageHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getMessageHTTPResp IS NULL THEN
      # Still no response, try again
      LET getMessageHTTPResp = getMessageHTTPReq.getAsyncResponse()
    END IF

    IF getMessageHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getMessageHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getMessageHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getMessageHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getMessageResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getMessageHTTPResp.getStatusCode()||" ("||getMessageHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getMessageHTTPReq = NULL
  LET getMessageHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getRoles
#

#
# FUNCTION: ProductPortal_getRoles
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getRoles(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getRolesRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getRoles_g()

  RETURN soapStatus, ProductPortal_getRolesResponse.getRolesReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getRoles_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getRolesRequest
#   OUTPUT: GLOBAL ProductPortal_getRolesResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getRoles_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getRolesRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getRolesResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getRolesRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getRolesHTTPReq IS NOT NULL AND getRolesHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getRolesHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getRolesHTTPReq.setMethod("POST")
    CALL getRolesHTTPReq.setCharset("UTF-8")
    CALL getRolesHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getRolesHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getRolesRequest,body)

      # Send SOAP envelope
      CALL getRolesHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getRolesHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getRolesHTTPResp = getRolesHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getRolesHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getRolesResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getRolesHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getRolesHTTPResp IS NULL THEN
      # Still no response, try again
      LET getRolesHTTPResp = getRolesHTTPReq.getAsyncResponse()
    END IF

    IF getRolesHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getRolesHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getRolesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getRolesHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getRolesResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getRolesHTTPResp.getStatusCode()||" ("||getRolesHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getRolesHTTPReq = NULL
  LET getRolesHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_loginValidate
#

#
# FUNCTION: ProductPortal_loginValidate
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_loginValidate(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_loginValidateRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_loginValidate_g()

  RETURN soapStatus, ProductPortal_loginValidateResponse.loginValidateReturn
END FUNCTION

#
# FUNCTION: ProductPortal_loginValidate_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_loginValidateRequest
#   OUTPUT: GLOBAL ProductPortal_loginValidateResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_loginValidate_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_loginValidateRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_loginValidateResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_loginValidateRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF loginValidateHTTPReq IS NOT NULL AND loginValidateHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET loginValidateHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL loginValidateHTTPReq.setMethod("POST")
    CALL loginValidateHTTPReq.setCharset("UTF-8")
    CALL loginValidateHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET loginValidateHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_loginValidateRequest,body)

      # Send SOAP envelope
      CALL loginValidateHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET loginValidateHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET loginValidateHTTPResp = loginValidateHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET loginValidateHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_loginValidateResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF loginValidateHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF loginValidateHTTPResp IS NULL THEN
      # Still no response, try again
      LET loginValidateHTTPResp = loginValidateHTTPReq.getAsyncResponse()
    END IF

    IF loginValidateHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE loginValidateHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = loginValidateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = loginValidateHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_loginValidateResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||loginValidateHTTPResp.getStatusCode()||" ("||loginValidateHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET loginValidateHTTPReq = NULL
  LET loginValidateHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getAllUser
#

#
# FUNCTION: ProductPortal_getAllUser
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUser(p_pMessageXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pMessageXML		STRING

  LET ProductPortal_getAllUserRequest.pMessageXML = p_pMessageXML

  LET soapStatus = ProductPortal_getAllUser_g()

  RETURN soapStatus, ProductPortal_getAllUserResponse.getAllUserReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getAllUser_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getAllUserRequest
#   OUTPUT: GLOBAL ProductPortal_getAllUserResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUser_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAllUserRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAllUserResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUserRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAllUserHTTPReq IS NOT NULL AND getAllUserHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getAllUserHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getAllUserHTTPReq.setMethod("POST")
    CALL getAllUserHTTPReq.setCharset("UTF-8")
    CALL getAllUserHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getAllUserHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAllUserRequest,body)

      # Send SOAP envelope
      CALL getAllUserHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getAllUserHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getAllUserHTTPResp = getAllUserHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getAllUserHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUserResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAllUserHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getAllUserHTTPResp IS NULL THEN
      # Still no response, try again
      LET getAllUserHTTPResp = getAllUserHTTPReq.getAsyncResponse()
    END IF

    IF getAllUserHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getAllUserHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getAllUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getAllUserHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAllUserResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getAllUserHTTPResp.getStatusCode()||" ("||getAllUserHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getAllUserHTTPReq = NULL
  LET getAllUserHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getAllUserTotalSize
#

#
# FUNCTION: ProductPortal_getAllUserTotalSize
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUserTotalSize(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getAllUserTotalSizeRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getAllUserTotalSize_g()

  RETURN soapStatus, ProductPortal_getAllUserTotalSizeResponse.getAllUserTotalSizeReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getAllUserTotalSize_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getAllUserTotalSizeRequest
#   OUTPUT: GLOBAL ProductPortal_getAllUserTotalSizeResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUserTotalSize_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAllUserTotalSizeRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAllUserTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUserTotalSizeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAllUserTotalSizeHTTPReq IS NOT NULL AND getAllUserTotalSizeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getAllUserTotalSizeHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getAllUserTotalSizeHTTPReq.setMethod("POST")
    CALL getAllUserTotalSizeHTTPReq.setCharset("UTF-8")
    CALL getAllUserTotalSizeHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getAllUserTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAllUserTotalSizeRequest,body)

      # Send SOAP envelope
      CALL getAllUserTotalSizeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getAllUserTotalSizeHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getAllUserTotalSizeHTTPResp = getAllUserTotalSizeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getAllUserTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAllUserTotalSizeResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAllUserTotalSizeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getAllUserTotalSizeHTTPResp IS NULL THEN
      # Still no response, try again
      LET getAllUserTotalSizeHTTPResp = getAllUserTotalSizeHTTPReq.getAsyncResponse()
    END IF

    IF getAllUserTotalSizeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getAllUserTotalSizeHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getAllUserTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getAllUserTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAllUserTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getAllUserTotalSizeHTTPResp.getStatusCode()||" ("||getAllUserTotalSizeHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getAllUserTotalSizeHTTPReq = NULL
  LET getAllUserTotalSizeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_sendMessageToPortal
#

#
# FUNCTION: ProductPortal_sendMessageToPortal
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendMessageToPortal(p_pMessageXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pMessageXML		STRING

  LET ProductPortal_sendMessageToPortalRequest.pMessageXML = p_pMessageXML

  LET soapStatus = ProductPortal_sendMessageToPortal_g()

  RETURN soapStatus, ProductPortal_sendMessageToPortalResponse.sendMessageToPortalReturn
END FUNCTION

#
# FUNCTION: ProductPortal_sendMessageToPortal_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_sendMessageToPortalRequest
#   OUTPUT: GLOBAL ProductPortal_sendMessageToPortalResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendMessageToPortal_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_sendMessageToPortalRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_sendMessageToPortalResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendMessageToPortalRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF sendMessageToPortalHTTPReq IS NOT NULL AND sendMessageToPortalHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET sendMessageToPortalHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL sendMessageToPortalHTTPReq.setMethod("POST")
    CALL sendMessageToPortalHTTPReq.setCharset("UTF-8")
    CALL sendMessageToPortalHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET sendMessageToPortalHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_sendMessageToPortalRequest,body)

      # Send SOAP envelope
      CALL sendMessageToPortalHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET sendMessageToPortalHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET sendMessageToPortalHTTPResp = sendMessageToPortalHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET sendMessageToPortalHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendMessageToPortalResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF sendMessageToPortalHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF sendMessageToPortalHTTPResp IS NULL THEN
      # Still no response, try again
      LET sendMessageToPortalHTTPResp = sendMessageToPortalHTTPReq.getAsyncResponse()
    END IF

    IF sendMessageToPortalHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE sendMessageToPortalHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = sendMessageToPortalHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = sendMessageToPortalHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_sendMessageToPortalResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||sendMessageToPortalHTTPResp.getStatusCode()||" ("||sendMessageToPortalHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET sendMessageToPortalHTTPReq = NULL
  LET sendMessageToPortalHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_signatureComplete
#

#
# FUNCTION: ProductPortal_signatureComplete
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_signatureComplete(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_signatureCompleteRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_signatureComplete_g()

  RETURN soapStatus, ProductPortal_signatureCompleteResponse.signatureCompleteReturn
END FUNCTION

#
# FUNCTION: ProductPortal_signatureComplete_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_signatureCompleteRequest
#   OUTPUT: GLOBAL ProductPortal_signatureCompleteResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_signatureComplete_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_signatureCompleteRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_signatureCompleteResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_signatureCompleteRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF signatureCompleteHTTPReq IS NOT NULL AND signatureCompleteHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET signatureCompleteHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL signatureCompleteHTTPReq.setMethod("POST")
    CALL signatureCompleteHTTPReq.setCharset("UTF-8")
    CALL signatureCompleteHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET signatureCompleteHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_signatureCompleteRequest,body)

      # Send SOAP envelope
      CALL signatureCompleteHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET signatureCompleteHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET signatureCompleteHTTPResp = signatureCompleteHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET signatureCompleteHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_signatureCompleteResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF signatureCompleteHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF signatureCompleteHTTPResp IS NULL THEN
      # Still no response, try again
      LET signatureCompleteHTTPResp = signatureCompleteHTTPReq.getAsyncResponse()
    END IF

    IF signatureCompleteHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE signatureCompleteHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = signatureCompleteHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = signatureCompleteHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_signatureCompleteResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||signatureCompleteHTTPResp.getStatusCode()||" ("||signatureCompleteHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET signatureCompleteHTTPReq = NULL
  LET signatureCompleteHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_testMasterData
#

#
# FUNCTION: ProductPortal_testMasterData
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_testMasterData(p_strInput)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_strInput		STRING

  LET ProductPortal_testMasterDataRequest.strInput = p_strInput

  LET soapStatus = ProductPortal_testMasterData_g()

  RETURN soapStatus, ProductPortal_testMasterDataResponse.testMasterDataReturn
END FUNCTION

#
# FUNCTION: ProductPortal_testMasterData_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_testMasterDataRequest
#   OUTPUT: GLOBAL ProductPortal_testMasterDataResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_testMasterData_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_testMasterDataRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_testMasterDataResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_testMasterDataRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF testMasterDataHTTPReq IS NOT NULL AND testMasterDataHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET testMasterDataHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL testMasterDataHTTPReq.setMethod("POST")
    CALL testMasterDataHTTPReq.setCharset("UTF-8")
    CALL testMasterDataHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET testMasterDataHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_testMasterDataRequest,body)

      # Send SOAP envelope
      CALL testMasterDataHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET testMasterDataHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET testMasterDataHTTPResp = testMasterDataHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET testMasterDataHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_testMasterDataResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF testMasterDataHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF testMasterDataHTTPResp IS NULL THEN
      # Still no response, try again
      LET testMasterDataHTTPResp = testMasterDataHTTPReq.getAsyncResponse()
    END IF

    IF testMasterDataHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE testMasterDataHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = testMasterDataHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = testMasterDataHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_testMasterDataResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||testMasterDataHTTPResp.getStatusCode()||" ("||testMasterDataHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET testMasterDataHTTPReq = NULL
  LET testMasterDataHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_synchronizeAccoutForBI
#

#
# FUNCTION: ProductPortal_synchronizeAccoutForBI
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_synchronizeAccoutForBI(p_account, p_encryptpassword)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_account		STRING
  DEFINE	p_encryptpassword		STRING

  LET ProductPortal_synchronizeAccoutForBIRequest.account = p_account
  LET ProductPortal_synchronizeAccoutForBIRequest.encryptpassword = p_encryptpassword

  LET soapStatus = ProductPortal_synchronizeAccoutForBI_g()

  RETURN soapStatus
END FUNCTION

#
# FUNCTION: ProductPortal_synchronizeAccoutForBI_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_synchronizeAccoutForBIRequest
#   OUTPUT: NONE
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_synchronizeAccoutForBI_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_synchronizeAccoutForBIRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="synchronizeAccoutForBIResponse" OR node.getNamespaceURI()!="urn:http.service.ws.portlet.dsc.com" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_synchronizeAccoutForBIRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF synchronizeAccoutForBIHTTPReq IS NOT NULL AND synchronizeAccoutForBIHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET synchronizeAccoutForBIHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL synchronizeAccoutForBIHTTPReq.setMethod("POST")
    CALL synchronizeAccoutForBIHTTPReq.setCharset("UTF-8")
    CALL synchronizeAccoutForBIHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET synchronizeAccoutForBIHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_synchronizeAccoutForBIRequest,body)

      # Send SOAP envelope
      CALL synchronizeAccoutForBIHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET synchronizeAccoutForBIHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET synchronizeAccoutForBIHTTPResp = synchronizeAccoutForBIHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET synchronizeAccoutForBIHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_synchronizeAccoutForBIResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF synchronizeAccoutForBIHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF synchronizeAccoutForBIHTTPResp IS NULL THEN
      # Still no response, try again
      LET synchronizeAccoutForBIHTTPResp = synchronizeAccoutForBIHTTPReq.getAsyncResponse()
    END IF

    IF synchronizeAccoutForBIHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE synchronizeAccoutForBIHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = synchronizeAccoutForBIHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = synchronizeAccoutForBIHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              IF node.getLocalName()!="synchronizeAccoutForBIResponse" OR node.getNamespaceURI()!="urn:http.service.ws.portlet.dsc.com" THEN
                CALL WSHelper_FillSOAP11WSError("Client","Bad Response Message")
                EXIT CASE
              END IF
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||synchronizeAccoutForBIHTTPResp.getStatusCode()||" ("||synchronizeAccoutForBIHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET synchronizeAccoutForBIHTTPReq = NULL
  LET synchronizeAccoutForBIHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_autoAccountMaintain
#

#
# FUNCTION: ProductPortal_autoAccountMaintain
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_autoAccountMaintain(p_pAccount, p_pTargetSID)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pAccount		STRING
  DEFINE	p_pTargetSID		STRING

  LET ProductPortal_autoAccountMaintainRequest.pAccount = p_pAccount
  LET ProductPortal_autoAccountMaintainRequest.pTargetSID = p_pTargetSID

  LET soapStatus = ProductPortal_autoAccountMaintain_g()

  RETURN soapStatus, ProductPortal_autoAccountMaintainResponse.autoAccountMaintainReturn
END FUNCTION

#
# FUNCTION: ProductPortal_autoAccountMaintain_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_autoAccountMaintainRequest
#   OUTPUT: GLOBAL ProductPortal_autoAccountMaintainResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_autoAccountMaintain_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_autoAccountMaintainRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_autoAccountMaintainResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_autoAccountMaintainRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF autoAccountMaintainHTTPReq IS NOT NULL AND autoAccountMaintainHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET autoAccountMaintainHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL autoAccountMaintainHTTPReq.setMethod("POST")
    CALL autoAccountMaintainHTTPReq.setCharset("UTF-8")
    CALL autoAccountMaintainHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET autoAccountMaintainHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_autoAccountMaintainRequest,body)

      # Send SOAP envelope
      CALL autoAccountMaintainHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET autoAccountMaintainHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET autoAccountMaintainHTTPResp = autoAccountMaintainHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET autoAccountMaintainHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_autoAccountMaintainResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF autoAccountMaintainHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF autoAccountMaintainHTTPResp IS NULL THEN
      # Still no response, try again
      LET autoAccountMaintainHTTPResp = autoAccountMaintainHTTPReq.getAsyncResponse()
    END IF

    IF autoAccountMaintainHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE autoAccountMaintainHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = autoAccountMaintainHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = autoAccountMaintainHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_autoAccountMaintainResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||autoAccountMaintainHTTPResp.getStatusCode()||" ("||autoAccountMaintainHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET autoAccountMaintainHTTPReq = NULL
  LET autoAccountMaintainHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getMappingAccount
#

#
# FUNCTION: ProductPortal_getMappingAccount
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMappingAccount(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getMappingAccountRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getMappingAccount_g()

  RETURN soapStatus, ProductPortal_getMappingAccountResponse.getMappingAccountReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getMappingAccount_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getMappingAccountRequest
#   OUTPUT: GLOBAL ProductPortal_getMappingAccountResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMappingAccount_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getMappingAccountRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getMappingAccountResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMappingAccountRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getMappingAccountHTTPReq IS NOT NULL AND getMappingAccountHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getMappingAccountHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getMappingAccountHTTPReq.setMethod("POST")
    CALL getMappingAccountHTTPReq.setCharset("UTF-8")
    CALL getMappingAccountHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getMappingAccountHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getMappingAccountRequest,body)

      # Send SOAP envelope
      CALL getMappingAccountHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getMappingAccountHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getMappingAccountHTTPResp = getMappingAccountHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getMappingAccountHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMappingAccountResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getMappingAccountHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getMappingAccountHTTPResp IS NULL THEN
      # Still no response, try again
      LET getMappingAccountHTTPResp = getMappingAccountHTTPReq.getAsyncResponse()
    END IF

    IF getMappingAccountHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getMappingAccountHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getMappingAccountHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getMappingAccountHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getMappingAccountResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getMappingAccountHTTPResp.getStatusCode()||" ("||getMappingAccountHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getMappingAccountHTTPReq = NULL
  LET getMappingAccountHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_sendTodoList
#

#
# FUNCTION: ProductPortal_sendTodoList
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendTodoList(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_sendTodoListRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_sendTodoList_g()

  RETURN soapStatus, ProductPortal_sendTodoListResponse.sendTodoListReturn
END FUNCTION

#
# FUNCTION: ProductPortal_sendTodoList_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_sendTodoListRequest
#   OUTPUT: GLOBAL ProductPortal_sendTodoListResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendTodoList_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_sendTodoListRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_sendTodoListResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendTodoListRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF sendTodoListHTTPReq IS NOT NULL AND sendTodoListHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET sendTodoListHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL sendTodoListHTTPReq.setMethod("POST")
    CALL sendTodoListHTTPReq.setCharset("UTF-8")
    CALL sendTodoListHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET sendTodoListHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_sendTodoListRequest,body)

      # Send SOAP envelope
      CALL sendTodoListHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET sendTodoListHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET sendTodoListHTTPResp = sendTodoListHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET sendTodoListHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendTodoListResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF sendTodoListHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF sendTodoListHTTPResp IS NULL THEN
      # Still no response, try again
      LET sendTodoListHTTPResp = sendTodoListHTTPReq.getAsyncResponse()
    END IF

    IF sendTodoListHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE sendTodoListHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = sendTodoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = sendTodoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_sendTodoListResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||sendTodoListHTTPResp.getStatusCode()||" ("||sendTodoListHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET sendTodoListHTTPReq = NULL
  LET sendTodoListHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getTodoListTotalSize
#

#
# FUNCTION: ProductPortal_getTodoListTotalSize
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoListTotalSize(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getTodoListTotalSizeRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getTodoListTotalSize_g()

  RETURN soapStatus, ProductPortal_getTodoListTotalSizeResponse.getTodoListTotalSizeReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getTodoListTotalSize_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getTodoListTotalSizeRequest
#   OUTPUT: GLOBAL ProductPortal_getTodoListTotalSizeResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoListTotalSize_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getTodoListTotalSizeRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getTodoListTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoListTotalSizeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getTodoListTotalSizeHTTPReq IS NOT NULL AND getTodoListTotalSizeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getTodoListTotalSizeHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getTodoListTotalSizeHTTPReq.setMethod("POST")
    CALL getTodoListTotalSizeHTTPReq.setCharset("UTF-8")
    CALL getTodoListTotalSizeHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getTodoListTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getTodoListTotalSizeRequest,body)

      # Send SOAP envelope
      CALL getTodoListTotalSizeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getTodoListTotalSizeHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getTodoListTotalSizeHTTPResp = getTodoListTotalSizeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getTodoListTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoListTotalSizeResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getTodoListTotalSizeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getTodoListTotalSizeHTTPResp IS NULL THEN
      # Still no response, try again
      LET getTodoListTotalSizeHTTPResp = getTodoListTotalSizeHTTPReq.getAsyncResponse()
    END IF

    IF getTodoListTotalSizeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getTodoListTotalSizeHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getTodoListTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getTodoListTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getTodoListTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getTodoListTotalSizeHTTPResp.getStatusCode()||" ("||getTodoListTotalSizeHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getTodoListTotalSizeHTTPReq = NULL
  LET getTodoListTotalSizeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getTodoList
#

#
# FUNCTION: ProductPortal_getTodoList
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoList(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getTodoListRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getTodoList_g()

  RETURN soapStatus, ProductPortal_getTodoListResponse.getTodoListReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getTodoList_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getTodoListRequest
#   OUTPUT: GLOBAL ProductPortal_getTodoListResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoList_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getTodoListRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getTodoListResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoListRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getTodoListHTTPReq IS NOT NULL AND getTodoListHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getTodoListHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getTodoListHTTPReq.setMethod("POST")
    CALL getTodoListHTTPReq.setCharset("UTF-8")
    CALL getTodoListHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getTodoListHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getTodoListRequest,body)

      # Send SOAP envelope
      CALL getTodoListHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getTodoListHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getTodoListHTTPResp = getTodoListHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getTodoListHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getTodoListResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getTodoListHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getTodoListHTTPResp IS NULL THEN
      # Still no response, try again
      LET getTodoListHTTPResp = getTodoListHTTPReq.getAsyncResponse()
    END IF

    IF getTodoListHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getTodoListHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getTodoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getTodoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getTodoListResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getTodoListHTTPResp.getStatusCode()||" ("||getTodoListHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getTodoListHTTPReq = NULL
  LET getTodoListHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getMessageTotalSize
#

#
# FUNCTION: ProductPortal_getMessageTotalSize
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessageTotalSize(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getMessageTotalSizeRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getMessageTotalSize_g()

  RETURN soapStatus, ProductPortal_getMessageTotalSizeResponse.getMessageTotalSizeReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getMessageTotalSize_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getMessageTotalSizeRequest
#   OUTPUT: GLOBAL ProductPortal_getMessageTotalSizeResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessageTotalSize_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getMessageTotalSizeRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getMessageTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessageTotalSizeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getMessageTotalSizeHTTPReq IS NOT NULL AND getMessageTotalSizeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getMessageTotalSizeHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getMessageTotalSizeHTTPReq.setMethod("POST")
    CALL getMessageTotalSizeHTTPReq.setCharset("UTF-8")
    CALL getMessageTotalSizeHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getMessageTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getMessageTotalSizeRequest,body)

      # Send SOAP envelope
      CALL getMessageTotalSizeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getMessageTotalSizeHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getMessageTotalSizeHTTPResp = getMessageTotalSizeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getMessageTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getMessageTotalSizeResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getMessageTotalSizeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getMessageTotalSizeHTTPResp IS NULL THEN
      # Still no response, try again
      LET getMessageTotalSizeHTTPResp = getMessageTotalSizeHTTPReq.getAsyncResponse()
    END IF

    IF getMessageTotalSizeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getMessageTotalSizeHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getMessageTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getMessageTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getMessageTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getMessageTotalSizeHTTPResp.getStatusCode()||" ("||getMessageTotalSizeHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getMessageTotalSizeHTTPReq = NULL
  LET getMessageTotalSizeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getCalEventTotalSize
#

#
# FUNCTION: ProductPortal_getCalEventTotalSize
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEventTotalSize(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getCalEventTotalSizeRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getCalEventTotalSize_g()

  RETURN soapStatus, ProductPortal_getCalEventTotalSizeResponse.getCalEventTotalSizeReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getCalEventTotalSize_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getCalEventTotalSizeRequest
#   OUTPUT: GLOBAL ProductPortal_getCalEventTotalSizeResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEventTotalSize_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getCalEventTotalSizeRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getCalEventTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEventTotalSizeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getCalEventTotalSizeHTTPReq IS NOT NULL AND getCalEventTotalSizeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getCalEventTotalSizeHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getCalEventTotalSizeHTTPReq.setMethod("POST")
    CALL getCalEventTotalSizeHTTPReq.setCharset("UTF-8")
    CALL getCalEventTotalSizeHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getCalEventTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getCalEventTotalSizeRequest,body)

      # Send SOAP envelope
      CALL getCalEventTotalSizeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getCalEventTotalSizeHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getCalEventTotalSizeHTTPResp = getCalEventTotalSizeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getCalEventTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEventTotalSizeResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getCalEventTotalSizeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getCalEventTotalSizeHTTPResp IS NULL THEN
      # Still no response, try again
      LET getCalEventTotalSizeHTTPResp = getCalEventTotalSizeHTTPReq.getAsyncResponse()
    END IF

    IF getCalEventTotalSizeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getCalEventTotalSizeHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getCalEventTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getCalEventTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getCalEventTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getCalEventTotalSizeHTTPResp.getStatusCode()||" ("||getCalEventTotalSizeHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getCalEventTotalSizeHTTPReq = NULL
  LET getCalEventTotalSizeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getCalEvent
#

#
# FUNCTION: ProductPortal_getCalEvent
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEvent(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getCalEventRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getCalEvent_g()

  RETURN soapStatus, ProductPortal_getCalEventResponse.getCalEventReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getCalEvent_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getCalEventRequest
#   OUTPUT: GLOBAL ProductPortal_getCalEventResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEvent_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getCalEventRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getCalEventResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEventRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getCalEventHTTPReq IS NOT NULL AND getCalEventHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getCalEventHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getCalEventHTTPReq.setMethod("POST")
    CALL getCalEventHTTPReq.setCharset("UTF-8")
    CALL getCalEventHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getCalEventHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getCalEventRequest,body)

      # Send SOAP envelope
      CALL getCalEventHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getCalEventHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getCalEventHTTPResp = getCalEventHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getCalEventHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getCalEventResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getCalEventHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getCalEventHTTPResp IS NULL THEN
      # Still no response, try again
      LET getCalEventHTTPResp = getCalEventHTTPReq.getAsyncResponse()
    END IF

    IF getCalEventHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getCalEventHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getCalEventHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getCalEventHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getCalEventResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getCalEventHTTPResp.getStatusCode()||" ("||getCalEventHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getCalEventHTTPReq = NULL
  LET getCalEventHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_sendCalEvent
#

#
# FUNCTION: ProductPortal_sendCalEvent
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendCalEvent(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_sendCalEventRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_sendCalEvent_g()

  RETURN soapStatus, ProductPortal_sendCalEventResponse.sendCalEventReturn
END FUNCTION

#
# FUNCTION: ProductPortal_sendCalEvent_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_sendCalEventRequest
#   OUTPUT: GLOBAL ProductPortal_sendCalEventResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendCalEvent_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_sendCalEventRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_sendCalEventResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendCalEventRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF sendCalEventHTTPReq IS NOT NULL AND sendCalEventHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET sendCalEventHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL sendCalEventHTTPReq.setMethod("POST")
    CALL sendCalEventHTTPReq.setCharset("UTF-8")
    CALL sendCalEventHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET sendCalEventHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_sendCalEventRequest,body)

      # Send SOAP envelope
      CALL sendCalEventHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET sendCalEventHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET sendCalEventHTTPResp = sendCalEventHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET sendCalEventHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_sendCalEventResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF sendCalEventHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF sendCalEventHTTPResp IS NULL THEN
      # Still no response, try again
      LET sendCalEventHTTPResp = sendCalEventHTTPReq.getAsyncResponse()
    END IF

    IF sendCalEventHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE sendCalEventHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = sendCalEventHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = sendCalEventHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_sendCalEventResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||sendCalEventHTTPResp.getStatusCode()||" ("||sendCalEventHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET sendCalEventHTTPReq = NULL
  LET sendCalEventHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getAnnouncementsTotalSize
#

#
# FUNCTION: ProductPortal_getAnnouncementsTotalSize
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncementsTotalSize(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getAnnouncementsTotalSizeRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getAnnouncementsTotalSize_g()

  RETURN soapStatus, ProductPortal_getAnnouncementsTotalSizeResponse.getAnnouncementsTotalSizeReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getAnnouncementsTotalSize_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getAnnouncementsTotalSizeRequest
#   OUTPUT: GLOBAL ProductPortal_getAnnouncementsTotalSizeResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncementsTotalSize_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAnnouncementsTotalSizeRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAnnouncementsTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncementsTotalSizeRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAnnouncementsTotalSizeHTTPReq IS NOT NULL AND getAnnouncementsTotalSizeHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getAnnouncementsTotalSizeHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getAnnouncementsTotalSizeHTTPReq.setMethod("POST")
    CALL getAnnouncementsTotalSizeHTTPReq.setCharset("UTF-8")
    CALL getAnnouncementsTotalSizeHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getAnnouncementsTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAnnouncementsTotalSizeRequest,body)

      # Send SOAP envelope
      CALL getAnnouncementsTotalSizeHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getAnnouncementsTotalSizeHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getAnnouncementsTotalSizeHTTPResp = getAnnouncementsTotalSizeHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getAnnouncementsTotalSizeHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncementsTotalSizeResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAnnouncementsTotalSizeHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getAnnouncementsTotalSizeHTTPResp IS NULL THEN
      # Still no response, try again
      LET getAnnouncementsTotalSizeHTTPResp = getAnnouncementsTotalSizeHTTPReq.getAsyncResponse()
    END IF

    IF getAnnouncementsTotalSizeHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getAnnouncementsTotalSizeHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getAnnouncementsTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getAnnouncementsTotalSizeHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAnnouncementsTotalSizeResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getAnnouncementsTotalSizeHTTPResp.getStatusCode()||" ("||getAnnouncementsTotalSizeHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getAnnouncementsTotalSizeHTTPReq = NULL
  LET getAnnouncementsTotalSizeHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getAnnouncements
#

#
# FUNCTION: ProductPortal_getAnnouncements
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncements(p_pXML)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pXML		STRING

  LET ProductPortal_getAnnouncementsRequest.pXML = p_pXML

  LET soapStatus = ProductPortal_getAnnouncements_g()

  RETURN soapStatus, ProductPortal_getAnnouncementsResponse.getAnnouncementsReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getAnnouncements_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_getAnnouncementsRequest
#   OUTPUT: GLOBAL ProductPortal_getAnnouncementsResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncements_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAnnouncementsRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAnnouncementsResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncementsRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAnnouncementsHTTPReq IS NOT NULL AND getAnnouncementsHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getAnnouncementsHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getAnnouncementsHTTPReq.setMethod("POST")
    CALL getAnnouncementsHTTPReq.setCharset("UTF-8")
    CALL getAnnouncementsHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getAnnouncementsHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_getAnnouncementsRequest,body)

      # Send SOAP envelope
      CALL getAnnouncementsHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getAnnouncementsHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getAnnouncementsHTTPResp = getAnnouncementsHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getAnnouncementsHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getAnnouncementsResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getAnnouncementsHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getAnnouncementsHTTPResp IS NULL THEN
      # Still no response, try again
      LET getAnnouncementsHTTPResp = getAnnouncementsHTTPReq.getAsyncResponse()
    END IF

    IF getAnnouncementsHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getAnnouncementsHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getAnnouncementsHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getAnnouncementsHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getAnnouncementsResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getAnnouncementsHTTPResp.getStatusCode()||" ("||getAnnouncementsHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getAnnouncementsHTTPReq = NULL
  LET getAnnouncementsHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_test
#

#
# FUNCTION: ProductPortal_test
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_test(p_pTestString)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_pTestString		STRING

  LET ProductPortal_testRequest.pTestString = p_pTestString

  LET soapStatus = ProductPortal_test_g()

  RETURN soapStatus, ProductPortal_testResponse.testReturn
END FUNCTION

#
# FUNCTION: ProductPortal_test_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_testRequest
#   OUTPUT: GLOBAL ProductPortal_testResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_test_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_testRequest,body)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_testResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_testRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF testHTTPReq IS NOT NULL AND testHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET testHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL testHTTPReq.setMethod("POST")
    CALL testHTTPReq.setCharset("UTF-8")
    CALL testHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET testHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_testRequest,body)

      # Send SOAP envelope
      CALL testHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET testHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET testHTTPResp = testHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET testHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_testResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF testHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF testHTTPResp IS NULL THEN
      # Still no response, try again
      LET testHTTPResp = testHTTPReq.getAsyncResponse()
    END IF

    IF testHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE testHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = testHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = testHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_testResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||testHTTPResp.getStatusCode()||" ("||testHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET testHTTPReq = NULL
  LET testHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



#
# Operation: ProductPortal_getLiveUserCount
#

#
# FUNCTION: ProductPortal_getLiveUserCount
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getLiveUserCount()
  DEFINE	soapStatus		INTEGER

  LET soapStatus = ProductPortal_getLiveUserCount_g()

  RETURN soapStatus, ProductPortal_getLiveUserCountResponse.getLiveUserCountReturn
END FUNCTION

#
# FUNCTION: ProductPortal_getLiveUserCount_g
#   RETURNING: soapStatus
#   INPUT: NONE
#   OUTPUT: GLOBAL ProductPortal_getLiveUserCountResponse
#
#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getLiveUserCount_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE

  IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
    LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY

  # START LOOP
  WHILE retry
    LET retry = FALSE

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","getLiveUserCountRequest","urn:http.service.ws.portlet.dsc.com")
      CALL body.appendChild(node)

      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()

      CASE response.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getLiveUserCountResponse)
              LET wsstatus = 0
            END IF
          END IF

        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF

        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY

  # END LOOP
  END WHILE

  RETURN wsstatus

END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getLiveUserCountRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  #
  # CHECK PREVIOUS CALL  
  #
  IF getLiveUserCountHTTPReq IS NOT NULL AND getLiveUserCountHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation IS NULL THEN
      LET ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation = "http://10.40.60.139:8081/WebService/PortalWS"
    END IF
  END IF

  #
  # CREATE REQUEST
  #
  TRY
    LET getLiveUserCountHTTPReq = com.HTTPRequest.Create(ProductPortal_PortalWSServiceSoapService_Portlet_PortalWS_PortalWSServiceLocation)
    CALL getLiveUserCountHTTPReq.setMethod("POST")
    CALL getLiveUserCountHTTPReq.setCharset("UTF-8")
    CALL getLiveUserCountHTTPReq.setHeader("SOAPAction","\"\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET getLiveUserCountHTTPReq = NULL
    RETURN wsstatus
  END TRY

    #
    # DOM Request
    #

    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      LET node = writer.createElementNS("fjs","getLiveUserCountRequest","urn:http.service.ws.portlet.dsc.com")
      CALL body.appendChild(node)

      # Send SOAP envelope
      CALL getLiveUserCountHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET getLiveUserCountHTTPReq = NULL
      RETURN wsstatus
    END TRY

  #
  # PROCESS RESPONSE
  #
  TRY
    LET getLiveUserCountHTTPResp = getLiveUserCountHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET getLiveUserCountHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION

#FUN-B50181 add
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_getLiveUserCountResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode

  LET wsstatus = -1

  #
  # CHECK PREVIOUS CALL  
  #
  IF getLiveUserCountHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF

  TRY
    #
    # PROCESS RESPONSE
    #
    IF getLiveUserCountHTTPResp IS NULL THEN
      # Still no response, try again
      LET getLiveUserCountHTTPResp = getLiveUserCountHTTPReq.getAsyncResponse()
    END IF

    IF getLiveUserCountHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF

      CASE getLiveUserCountHTTPResp.getStatusCode()

        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = getLiveUserCountHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())

        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = getLiveUserCountHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          # Retrieve body
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_getLiveUserCountResponse)
              LET wsstatus = 0
            END IF
          END IF

        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||getLiveUserCountHTTPResp.getStatusCode()||" ("||getLiveUserCountHTTPResp.getStatusDescription()||")")

      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY

  #
  # RESET VARIABLES
  #
  LET getLiveUserCountHTTPReq = NULL
  LET getLiveUserCountHTTPResp = NULL
  RETURN wsstatus
END FUNCTION



