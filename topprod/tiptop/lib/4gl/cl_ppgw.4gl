# Prog. Version..: '5.30.06-13.03.12(00000)'     #
 
# Program name...: cl_ppgw.4gl
# Descriptions...: Product Portal 整合 SOAP 連接檔
# Date & Author..: 2007/03/21 by Brendan
# Memo...........:
# Modify.........: No.FUN-6B0036 07/03/21 by Brendan 新建立
# Modify.........: No.FUN-760054 07/06/21 by Brendan GWS 2.0.2 調整
# Modify.........: No.FUN-7C0057 07/12/19 by Brendan 註解調整(for p_findfunc)
# Modify.........: No.FUN-880046 08/08/12 by Echo Genero 2.11 調整
 
#-- No.FUN-6B0036 新建立 -------------------------------------------------------
#-- No.FUN-7C0057 --------------------------------------------------------------
#-------------------------------------------------------------------------------
# File: aws_ppgw.4gl
# GENERATED BY fglwsdl build-587.103
#-------------------------------------------------------------------------------
# Service: Service
# Port:    ServiceSoap
# Server:  http://10.40.16.242/WebService/Service.asmx
#-------------------------------------------------------------------------------
# THIS FILE WAS GENERATED. DO NOT MODIFY.
#-------------------------------------------------------------------------------
 
 
IMPORT com
IMPORT xml
 
DATABASE ds
#-- No.FUN-880046 --------------------------------------------------------------
 
GLOBALS "../../aws/4gl/aws_ppgw.inc"
 
#-------------------------------------------------------------------------------
DEFINE VerifySOKHTTPReq     com.HTTPRequest
DEFINE VerifySOKHTTPResp    com.HTTPResponse
 
DEFINE CreateToDoListHTTPReq     com.HTTPRequest
DEFINE CreateToDoListHTTPResp    com.HTTPResponse
 
DEFINE CloseToDoListHTTPReq     com.HTTPRequest
DEFINE CloseToDoListHTTPResp    com.HTTPResponse
 
DEFINE CreateBulletinHTTPReq     com.HTTPRequest
DEFINE CreateBulletinHTTPResp    com.HTTPResponse
 
#-------------------------------------------------------------------------------
 
#
# Operation: ProductPortal_VerifySOK
#
 
#
# FUNCTION: ProductPortal_VerifySOK
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_VerifySOK(p_XMLData)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_XMLData		STRING
 
  LET ProductPortal_VerifySOKSoapIn.XMLData = p_XMLData
 
  LET soapStatus = ProductPortal_VerifySOK_g()
 
  RETURN soapStatus, ProductPortal_VerifySOKSoapOut.VerifySOKResult
END FUNCTION
 
#
# FUNCTION: ProductPortal_VerifySOK_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_VerifySOKSoapIn
#   OUTPUT: GLOBAL ProductPortal_VerifySOKSoapOut
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_VerifySOK_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF ProductPortal_soapServerLocation IS NULL THEN
    LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://www.dsc.com.tw/VerifySOK\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_VerifySOKSoapIn,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_VerifySOKSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_VerifySOKRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF VerifySOKHTTPReq IS NOT NULL AND VerifySOKHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_soapServerLocation IS NULL THEN
      LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET VerifySOKHTTPReq = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL VerifySOKHTTPReq.setMethod("POST")
    CALL VerifySOKHTTPReq.setCharset("UTF-8")
    CALL VerifySOKHTTPReq.setHeader("SOAPAction","\"http://www.dsc.com.tw/VerifySOK\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET VerifySOKHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_VerifySOKSoapIn,body)
 
      # Send SOAP envelope
      CALL VerifySOKHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET VerifySOKHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET VerifySOKHTTPResp = VerifySOKHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET VerifySOKHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_VerifySOKResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF VerifySOKHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF VerifySOKHTTPResp IS NULL THEN
      # Still no response, try again
      LET VerifySOKHTTPResp = VerifySOKHTTPReq.getAsyncResponse()
    END IF
 
    IF VerifySOKHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE VerifySOKHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = VerifySOKHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = VerifySOKHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_VerifySOKSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||VerifySOKHTTPResp.getStatusCode()||" ("||VerifySOKHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET VerifySOKHTTPReq = NULL
  LET VerifySOKHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: ProductPortal_CreateToDoList
#
 
#
# FUNCTION: ProductPortal_CreateToDoList
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateToDoList(p_XMLData)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_XMLData		STRING
 
  LET ProductPortal_CreateToDoListSoapIn.XMLData = p_XMLData
 
  LET soapStatus = ProductPortal_CreateToDoList_g()
 
  RETURN soapStatus, ProductPortal_CreateToDoListSoapOut.CreateToDoListResult
END FUNCTION
 
#
# FUNCTION: ProductPortal_CreateToDoList_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_CreateToDoListSoapIn
#   OUTPUT: GLOBAL ProductPortal_CreateToDoListSoapOut
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateToDoList_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF ProductPortal_soapServerLocation IS NULL THEN
    LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://www.dsc.com.tw/CreateToDoList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_CreateToDoListSoapIn,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_CreateToDoListSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateToDoListRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CreateToDoListHTTPReq IS NOT NULL AND CreateToDoListHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_soapServerLocation IS NULL THEN
      LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET CreateToDoListHTTPReq = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL CreateToDoListHTTPReq.setMethod("POST")
    CALL CreateToDoListHTTPReq.setCharset("UTF-8")
    CALL CreateToDoListHTTPReq.setHeader("SOAPAction","\"http://www.dsc.com.tw/CreateToDoList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET CreateToDoListHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_CreateToDoListSoapIn,body)
 
      # Send SOAP envelope
      CALL CreateToDoListHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET CreateToDoListHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET CreateToDoListHTTPResp = CreateToDoListHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET CreateToDoListHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateToDoListResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CreateToDoListHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF CreateToDoListHTTPResp IS NULL THEN
      # Still no response, try again
      LET CreateToDoListHTTPResp = CreateToDoListHTTPReq.getAsyncResponse()
    END IF
 
    IF CreateToDoListHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE CreateToDoListHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = CreateToDoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = CreateToDoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_CreateToDoListSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||CreateToDoListHTTPResp.getStatusCode()||" ("||CreateToDoListHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET CreateToDoListHTTPReq = NULL
  LET CreateToDoListHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: ProductPortal_CloseToDoList
#
 
#
# FUNCTION: ProductPortal_CloseToDoList
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CloseToDoList(p_XMLData)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_XMLData		STRING
 
  LET ProductPortal_CloseToDoListSoapIn.XMLData = p_XMLData
 
  LET soapStatus = ProductPortal_CloseToDoList_g()
 
  RETURN soapStatus, ProductPortal_CloseToDoListSoapOut.CloseToDoListResult
END FUNCTION
 
#
# FUNCTION: ProductPortal_CloseToDoList_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_CloseToDoListSoapIn
#   OUTPUT: GLOBAL ProductPortal_CloseToDoListSoapOut
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CloseToDoList_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF ProductPortal_soapServerLocation IS NULL THEN
    LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://www.dsc.com.tw/CloseToDoList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_CloseToDoListSoapIn,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_CloseToDoListSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CloseToDoListRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CloseToDoListHTTPReq IS NOT NULL AND CloseToDoListHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_soapServerLocation IS NULL THEN
      LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET CloseToDoListHTTPReq = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL CloseToDoListHTTPReq.setMethod("POST")
    CALL CloseToDoListHTTPReq.setCharset("UTF-8")
    CALL CloseToDoListHTTPReq.setHeader("SOAPAction","\"http://www.dsc.com.tw/CloseToDoList\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET CloseToDoListHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_CloseToDoListSoapIn,body)
 
      # Send SOAP envelope
      CALL CloseToDoListHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET CloseToDoListHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET CloseToDoListHTTPResp = CloseToDoListHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET CloseToDoListHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CloseToDoListResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CloseToDoListHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF CloseToDoListHTTPResp IS NULL THEN
      # Still no response, try again
      LET CloseToDoListHTTPResp = CloseToDoListHTTPReq.getAsyncResponse()
    END IF
 
    IF CloseToDoListHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE CloseToDoListHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = CloseToDoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = CloseToDoListHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_CloseToDoListSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||CloseToDoListHTTPResp.getStatusCode()||" ("||CloseToDoListHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET CloseToDoListHTTPReq = NULL
  LET CloseToDoListHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
 
#
# Operation: ProductPortal_CreateBulletin
#
 
#
# FUNCTION: ProductPortal_CreateBulletin
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateBulletin(p_XMLData)
  DEFINE	soapStatus		INTEGER
  DEFINE	p_XMLData		STRING
 
  LET ProductPortal_CreateBulletinSoapIn.XMLData = p_XMLData
 
  LET soapStatus = ProductPortal_CreateBulletin_g()
 
  RETURN soapStatus, ProductPortal_CreateBulletinSoapOut.CreateBulletinResult
END FUNCTION
 
#
# FUNCTION: ProductPortal_CreateBulletin_g
#   RETURNING: soapStatus
#   INPUT: GLOBAL ProductPortal_CreateBulletinSoapIn
#   OUTPUT: GLOBAL ProductPortal_CreateBulletinSoapOut
#
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateBulletin_g()
  DEFINE wsstatus   INTEGER
  DEFINE retryAuth  INTEGER
  DEFINE retryProxy INTEGER
  DEFINE retry      INTEGER
  DEFINE request    com.HTTPRequest
  DEFINE response   com.HTTPResponse
  DEFINE writer     xml.DomDocument
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # INIT VARIABLES
  #
  LET wsstatus = -1
  LET retryAuth = FALSE
  LET retryProxy = FALSE
  LET retry = TRUE
 
  IF ProductPortal_soapServerLocation IS NULL THEN
    LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET request = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL request.setMethod("POST")
    CALL request.setCharset("UTF-8")
    CALL request.setHeader("SOAPAction","\"http://www.dsc.com.tw/CreateBulletin\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    RETURN wsstatus
  END TRY
 
  # START LOOP
  WHILE retry
    LET retry = FALSE
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_CreateBulletinSoapIn,body)
 
      # Send SOAP envelope
      CALL request.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
    #
    # PROCESS RESPONSE
    #
    TRY
      LET response = request.getResponse()
 
      CASE response.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = response.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_CreateBulletinSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        WHEN 401 # HTTP Authentication
          IF retryAuth THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 401 ("||response.getStatusDescription()||")")
          ELSE
            LET retryAuth = TRUE
            LET retry = TRUE
          END IF
 
        WHEN 407 # Proxy Authentication
          IF retryProxy THEN
            CALL WSHelper_FillSOAP11WSError("Server","HTTP Error 407 ("||response.getStatusDescription()||")")
          ELSE
            LET retryProxy = TRUE
            LET retry = TRUE
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||response.getStatusCode()||" ("||response.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
      RETURN wsstatus
    END TRY
 
  # END LOOP
  END WHILE
 
  RETURN wsstatus
 
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateBulletinRequest_g()
  DEFINE wsstatus   INTEGER
  DEFINE writer     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CreateBulletinHTTPReq IS NOT NULL AND CreateBulletinHTTPResp IS NULL THEN
    # Request was sent but there was no response yet
    CALL WSHelper_FillSOAP11WSError("Client","Cannot issue a new request until previous response was received")
    RETURN -2 # waiting for the response
  ELSE
    IF ProductPortal_soapServerLocation IS NULL THEN
      LET ProductPortal_soapServerLocation = "http://10.40.16.242/WebService/Service.asmx"
    END IF
  END IF
 
  #
  # CREATE REQUEST
  #
  TRY
    LET CreateBulletinHTTPReq = com.HTTPRequest.Create(ProductPortal_soapServerLocation)
    CALL CreateBulletinHTTPReq.setMethod("POST")
    CALL CreateBulletinHTTPReq.setCharset("UTF-8")
    CALL CreateBulletinHTTPReq.setHeader("SOAPAction","\"http://www.dsc.com.tw/CreateBulletin\"")
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Client","Cannot create HTTPRequest")
    LET CreateBulletinHTTPReq = NULL
    RETURN wsstatus
  END TRY
 
    #
    # DOM Request
    #
 
    TRY
      # Building SOAP1.1 envelope
      LET writer = xml.DomDocument.Create()
      LET envelope = WSHelper_BuildSOAP11Envelope(writer)
      CALL writer.appendDocumentNode(envelope)
      LET body = WSHelper_BuildSOAP11Body(writer)
      CALL envelope.appendChild(body)
      CALL xml.Serializer.VariableToSoapSection5(ProductPortal_CreateBulletinSoapIn,body)
 
      # Send SOAP envelope
      CALL CreateBulletinHTTPReq.doXmlRequest(writer)
    CATCH
      LET wsstatus = STATUS
      CALL WSHelper_FillSOAP11WSError("Client",SQLCA.SQLERRM)
      LET CreateBulletinHTTPReq = NULL
      RETURN wsstatus
    END TRY
 
  #
  # PROCESS RESPONSE
  #
  TRY
    LET CreateBulletinHTTPResp = CreateBulletinHTTPReq.getAsyncResponse()
    RETURN 0 # SUCCESS
  CATCH
    LET wsstatus = STATUS
    CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    LET CreateBulletinHTTPReq = NULL
    RETURN wsstatus
  END TRY
END FUNCTION
 
 
##################################################
# Private Func...: TRUE
##################################################
FUNCTION ProductPortal_CreateBulletinResponse_g()
  DEFINE wsstatus   INTEGER
  DEFINE reader     xml.DomDocument
  DEFINE envelope   xml.DomNode
  DEFINE header     xml.DomNode
  DEFINE body       xml.DomNode
  DEFINE node       xml.DomNode
 
  LET wsstatus = -1
 
  #
  # CHECK PREVIOUS CALL  
  #
  IF CreateBulletinHTTPReq IS NULL THEN
    # No request was sent
    CALL WSHelper_FillSOAP11WSError("Client","No request has been sent")
    RETURN -1
  END IF
 
  TRY
    #
    # PROCESS RESPONSE
    #
    IF CreateBulletinHTTPResp IS NULL THEN
      # Still no response, try again
      LET CreateBulletinHTTPResp = CreateBulletinHTTPReq.getAsyncResponse()
    END IF
 
    IF CreateBulletinHTTPResp IS NULL THEN
      # We got no response, still waiting for
      CALL WSHelper_FillSOAP11WSError("Client","Response was not yet received")
      RETURN -2
    END IF
 
      CASE CreateBulletinHTTPResp.getStatusCode()
 
        WHEN 500 # SOAP Fault
          #
          # DOM SOAP FAULT
          #
          LET reader = CreateBulletinHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NULL THEN
            EXIT CASE
          END IF
          CALL WSHelper_CheckSOAP11Fault(body.getFirstChildElement())
 
        WHEN 200 # SOAP Result
          #
          # DOM SOAP RESPONSE
          #
          LET reader = CreateBulletinHTTPResp.getXmlResponse()
          LET envelope = WSHelper_RetrieveSOAP11Envelope(reader)
          IF envelope IS NULL THEN
            EXIT CASE
          END IF
          # Skip headers
          LET header = WSHelper_CheckSOAP11Header(envelope)
          LET body = WSHelper_RetrieveSOAP11Body(envelope,header)
          IF body IS NOT NULL THEN
            # Check message
            LET node = WSHelper_RetrieveSOAP11Message(body)
            IF node IS NOT NULL THEN
              CALL Xml.Serializer.SoapSection5ToVariable(node,ProductPortal_CreateBulletinSoapOut)
              LET wsstatus = 0
            END IF
          END IF
 
        OTHERWISE
          CALL WSHelper_FillSOAP11WSError("Server","HTTP Error "||CreateBulletinHTTPResp.getStatusCode()||" ("||CreateBulletinHTTPResp.getStatusDescription()||")")
 
      END CASE
    CATCH
      LET wsstatus = status
      CALL WSHelper_FillSOAP11WSError("Server",SQLCA.SQLERRM)
    END TRY
 
  #
  # RESET VARIABLES
  #
  LET CreateBulletinHTTPReq = NULL
  LET CreateBulletinHTTPResp = NULL
  RETURN wsstatus
END FUNCTION
 
 
