# Prog. Version..: '5.30.06-13.04.22(00010)'     #
#
# Pattern name...: p_zta.4gl
# Descriptions...: 檔案架構修整記錄維護作業
# Date & Author..: 03/09/16 By qazzaq
# Modify.........: No.MOD-470041 04/07/20 By Wiky 修改INSERT INTO...
# Modify.........: No.TQC-640008 06/05/18 By Echo sql指令內有tab時須過瀘
# Modify.........: No.FUN-660014 06/06/08 By Sarah p_zta_exp2excel()增加"額外說明"
# Modify.........: No.FUN-660081 06/06/15 By Carrier cl_err-->cl_err3
# Modify.........: No.FUN-660025 06/06/22 By Nicola INSERT gaq_file時，寫入gaq06='N'
# Modify.........: No.TQC-680020 06/08/07 By Echo 將「程式產生器」(gen_program) 此 action 隱藏，因為此功能未完成。
# Modify.........: No.FUN-680135 06/08/31 By Hellen  欄位類型修改
# Modify.........: No.FUN-6A0052 06/10/17 By Sarah 匯入SQL之後，直接針對aooi901裡是ERP資料庫(azp053='Y')的所有資料庫進行異動
# Modify.........: No.TQC-6A0036 06/10/23 By saki 修改切換工廠按下取消時會關閉程式
# Modify.........: No.FUN-6A0096 06/10/26 By johnray l_time轉g_time
# Modify.........: No.MOD-6C0061 06/12/12 By Smapmin 修改字串長度
# Modify.........: No.TQC-690091 06/12/14 By Echo zs_file記錄的版號不正確
# Modify.........: No.TQC-6C0116 06/12/14 By alexstar sr RECORD 的 command 欄位不能定義成STRING, STRING 格式會導至 4JS 的報表暫存table發生錯誤。
# Modify.........: No.TQC-6C0129 06/12/20 By Smapmin 修改開窗查詢
# Modify.........: No.TQC-710034 07/01/09 By Echo 調整匯入CREATE的SQL檔時的額外說明判斷
# Modify.........: No.TQC-710089 07/01/25 By Echo 「資料庫查詢」欄位數由200放大400個
# Modify.........: No.TQC-6B0105 07/03/08 By carrier 連續兩次查詢,第二次查不到資料,做修改等操作會將當前筆停在上次查詢到的資料上
# Modify.........: No.TQC-730109 07/03/29 By Echo 將判斷 mod 改為 modify, dop 改為 drop
# Modify.........: No.FUN-730016 07/03/29 By Echo 加上 Constraint 功能
# Modify.........: No.FUN-770027 07/07/10 By alex 加上 MSV 系統部份程式碼
# Modify.........: No.TQC-770082 07/07/16 By Echo 將蟲號的快速鍵(tab) 改成 controlb
# Modify.........: No.TQC-790092 07/09/17 By rainy 修正Primary Key後, 程式判斷錯誤訊息時必須改變做法
# Modify.........: No.FUN-660178 07/09/29 By Echo Synonym 同步功能
# Modify.........: No.FUN-7A0029 07/10/16 By Echo 1.屬性增加「s:軟代」 2.客戶端，新增修改欄位需依客製命名原則...
# Modify.........: No.MOD-7B0054 07/11/07 By Echo "建立Table"產生的 .src 檔缺少 grant 語法
# Modify.........: No.MOD-7B0029 07/11/15 By Echo 選擇「資料庫查詢」功能會出現 lib-356 錯誤
# Modify.........: No.TQC-7C0051 07/12/07 By Echo 列印輸出至excel，檔案內容錯誤
# Modify.........: No.TQC-7C0167 07/12/26 By alexstar  SQL記錄語法錯誤
# Modify.........: No.TQC-810014 08/01/08 By Echo DATE 型態，若設定預設值時在informix 環境無顯示
# Modify.........: No.FUN-810041 08/01/16 By Echo 調整程式抓取 table name 處理的相關程式段
# Modify.........: No.TQC-820004 08/02/13 By alexstar 所有數字型態的欄位，預設值皆不用加左右單引號
# Modify.........: No.CHI-840045 08/04/23 By Echo 新增一個客製欄位的時候，就會在ztb04 和 ztb03之間跑無窮回圈。
# Modify.........: No.FUN-850004 08/05/15 By alex 修正 set windows title
# Modify.........: No.TQC-860017 08/06/09 By Jerry 修改程式控制區間內,缺乏ON IDLE的部份
# Modify.........: No.MOD-840661 08/05/08 By Echo informix 欄位為 integer，若設w為not null時，無設定default值時不能預設為 DEFAULT ''
# Modify.........: No.FUN-830143 08/09/04 By Vicky 調整「資料庫查詢」可輸入大寫, g_tcp_servername VARCHAR(15) => VARCHAR(30)
# Modify.........: No.MOD-890209 08/09/22 By alexstar 修正excel檔案格式
# Modify.........: No.FUN-8C0055 08/12/10 By Echo ORACLE WEB登入時增加提供dba權限
# Modify.........: No.FUN-720026 08/12/25 By Echo 資料庫查詢，調整匯出EXCEL時欄位格式
# Modify.........: No.FUN-850112 08/12/26 By Echo ALTER 語法裡若有英文字不應改為小寫
# Modify.........: No.TQC-860023 09/01/05 By Echo Default 單一空白' '時，產生的 sch 檔或 sch.src 皆變成 ''
# Modify.........: No.CHI-910011 09/02/05 By Vicky 調整「資料庫查詢」SQL語法轉換問題
# Modify.........: No.CHI-920043 09/03/30 By Vicky 調整匯出Excel時"額外說明"被截斷的問題(改 CALL cl_export_to_excel)
# Modify.........: No.CHI-910066 09/03/31 By Vicky 調整資料庫查詢時，若SQL語法下 max(xxxx) 指令，欄位資料被截斷的問題
# Modify.........: No.FUN-950079 09/05/22 By Echo  (1) drop pk時一併刪除 index. (2) alter add_file 異常
# Modify.........: No.FUN-940108 09/05/26 By Echo 還原匯出Excel 格式，改為橫式
# Modify.........: No.CHI-960098 09/07/03 By Vicky 調整資料庫查詢功能，若SQL中含有中文字所抓出的資料不正確
# Modify.........: No.FUN-980014 09/08/04 By rainy GP5.2 新增抓取 g_legal 值
# Modify.........: No.FUN-980059 09/08/28 By douzh GP5.2新增檔案類型匯入.sql時寫入gat07
# Modify.........: No.FUN-980030 09/08/31 By Hiko 加上GP5.2的相關設定
# Modify.........: No.FUN-990050 09/09/15 By douzh GP5.2新增檔案類型匯入.sql時寫入gat07過單到正式區
# Modify.........: No.FUN-990043 09/09/16 By Echo GP 5.2版本要在alter table之後同步處理view
# Modify.........: No.FUN-980020 09/09/28 By douzh GP5.2集團架構調整,DB相關處理
# Modify.........: No.FUN-9A0039 09/10/16 By Echo  將 p_zta 的"資料查詢"功能獨立出來至 p_dbqry
# Modify.........: No:FUN-9A0024 09/10/13 By destiny display xxx.*改为display对应栏位
# Modify.........: No.FUN-9A0064 09/10/21 By Echo GP5.2 調整 SQL rowid 寫法
# Modify.........: No.FUN-9A0077 09/10/27 By Echo GP5.2 報表- 調整資料庫 ods 建立 view/synonym
# Modify.........: No.FUN-9B0011 09/11/10 By Echo 1. 將 grant to public 調整為 tiptopgp
#                                                 2. 增加功能:比對view的設定與實際建立的落差     
# Modify.........: No.FUN-9C0036 09/12/11 By Echo 1 .切換工廠或整批修改，調整以"資料庫"為主.  
#                                                 2. 判斷 DBA 權限，改以輸入帳號密碼驗證。 
#                                                 3. for p_create_shcme 需求: 調整可背景執行"zta資料建立"功能
#                                                 4. 建立新table時需一併grant select及index 權限給 ods 資料庫
#                                                 5. 增加查看 view 功能
#                                                 6. 增加判斷控制若有財務DB, 財務模組的 Table 必須 synonym 至財務 DB. 
# Modify.........: No.FUN-A60050 09/06/18 By Echo 1.模組別及檔案類別分別改以 zta03 及 zta09 為主，但還是會同步資料至 gat06 及 gat07 欄位，因此不會影響現有程式功能.
#                                                 2.欄位類別新增一項目:「Z:系統檔」，表示在所有 DB 的這個檔案皆是 synonym ds.
#                                                 3.新增「多語系檔案」(zta18) checkbox 欄位設定，表示此檔案為多語系table.
# Modify.........: NO:FUN-9C0175 10/06/28 By Jay 增加field名稱流水號之預設,如:tc_XXX01
# Modify.........: NO:CHI-9C0041 10/06/28 By Jay 增加zta01命名規則之判斷(_file)
# Modify.........: No.FUN-A60085 10/06/28 By Jay 呼叫cl_query_prt_getlength()只做一次CREATE TEMP TABLE
# Modify.........: NO:FUN-A50004 10/06/29 By Jay 不產生PK之Index於.sch檔
# Modify.........: No.FUN-A60022 10/06/30 By Echo GP5.2 SQL Server 移植-p_zta 工具調整(含集團架構)
# Modify.........: No.FUN-A80029 10/08/09 By Echo 調整 MSV - alter時的異常問題
# Modify.........: No.FUN-A90062 10/09/27 By Echo 調整 MSV - alter field 時發生 constraint 與 field 相依問題
# Modify.........; No.FUN-B30176 11/03/25 By xianghui 使用iconv須區分為FOR UNIX& FOR Windows,批量去除$TOP
# Modify.........; No.FUN-B50010 11/05/04 By jenjwu 調整無法將 index grant 給 role 的問題
# Modify.........: No.FUN-B50065 11/05/18 By xianghui BUG修改，刪除時提取資料報400錯誤
# Modify.........: No.CHI-B30014 11/06/21 By jenjwu 調整p_gzl修改檔案時，無法開啟p_zta的錯誤
# Modify.........: No.MOD-B70006 11/07/01 By suncx  匯入alter table SQL時判斷是否是客制字段的BUG修正
# Modify.........: No.TQC-B70185 11/07/06 By yinhy 執行匯入alter sql 語句的時候會無法執行
# Modify.........: No.FUN-B80091 11/08/09 By Ernest 按下產生資料庫手冊Action時程式會當掉, 5.1不會,5.25才會有此錯誤 
# Modify.........: No.FUN-BA0082 11/10/24 By Hiko 移除[資料庫查詢]功能,以避免使用者[選擇資料庫]選擇其他資料庫後,會對應不出營運中心,產生p_dbqry畫面還是舊資料庫的誤解.
# Modify.........: NO:TQC-BB0049 11/11/07 By ka0132 修正列印-table排序及table名稱被截斷
# Modify.........: NO:TQC-C20012 12/02/02 By andyhuang 修正使用CallBack機制會在解除Table_Lock時顯示logon denied而退出無法使用
# Modify.........: No.FUN-C10031 12/05/16 By andyhuang p_zta要還原[資料庫查詢]的串查功能
# Modify.........: No.FUN-C60043 12/06/13 By andyhuang 查看索引時會看到SYS_之INDEX，必需排除
# Modify.........: No:FUN-C80070 12/08/28 By LeoChang 調整excel活頁簿名稱改為抓取系統預設的方式
# Modify.........: No:FUN-D30034 13/04/18 By xumm 修改單身新增時按下放棄鍵未執行AFTER INSERT的問題

IMPORT os                     #No.FUN-A60022

DATABASE ds
 
GLOBALS "../../config/top.global"

#FUN-9B0011  -- start --
GLOBALS
DEFINE
     g_MODNO              LIKE zs_file.zs08,     #zs08(MODNO)
     g_tiptop_ver         LIKE zs_file.zs12,     #No.FUN-680135 VARCHAR(7)
     g_date               LIKE type_file.dat     #No.FUN-680135 DATE
END GLOBALS
#FUN-9B0011  -- end --

DEFINE
    g_key1,g_key2         LIKE zta_file.zta01,
    g_zta                 RECORD LIKE zta_file.*,
    g_zta_t               RECORD LIKE zta_file.*,
    g_zta_o               RECORD LIKE zta_file.*,
    g_zta01_t             LIKE zta_file.zta01,
    g_lockmode            LIKE type_file.chr1,    #No.FUN-680135 VARCHAR(1)
    g_gat03               LIKE gat_file.gat03,
    g_gat04               LIKE gat_file.gat04,
    g_gat06               LIKE gat_file.gat06,
    g_gat07               LIKE gat_file.gat07,
    g_gat07_t             LIKE gat_file.gat07,    #No.FUN-990043
    g_gat06_t             LIKE gat_file.gat06,    #No.FUN-9C0036
    g_wc                  LIKE type_file.chr1000, #No.FUN-680135 VARCHAR(1000)
    g_chapter             LIKE type_file.chr1,    #No.FUN-680135 VARCHAR(1)
    g_str,g_cmd,g_sql     STRING,
    g_ztb            DYNAMIC ARRAY of RECORD
                          ztb03     LIKE  ztb_file.ztb03,
                          ztb04     LIKE  ztb_file.ztb04,
                          ztb08     LIKE  ztb_file.ztb08,
                          ztb06     LIKE  ztb_file.ztb06,
                          ztb07     LIKE  ztb_file.ztb07,
                          ztb09     LIKE  ztb_file.ztb09,
                          ztb11     LIKE  ztb_file.ztb11,
                          ztb05     LIKE  ztb_file.ztb05,
                          gaq03     LIKE  gaq_file.gaq03,
                          gaq05     LIKE  gaq_file.gaq05
                     END RECORD,
    g_ztb_t          RECORD
                          ztb03     LIKE  ztb_file.ztb03,
                          ztb04     LIKE  ztb_file.ztb04,
                          ztb08     LIKE  ztb_file.ztb08,
                          ztb06     LIKE  ztb_file.ztb06,
                          ztb07     LIKE  ztb_file.ztb07,
                          ztb09     LIKE  ztb_file.ztb09,
                          ztb11     LIKE  ztb_file.ztb11,
                          ztb05     LIKE  ztb_file.ztb05,
                          gaq03     LIKE  gaq_file.gaq03,
                          gaq05     LIKE  gaq_file.gaq05
                     END RECORD,
    g_ztb_o          RECORD
                          ztb03     LIKE  ztb_file.ztb03,
                          ztb04     LIKE  ztb_file.ztb04,
                          ztb08     LIKE  ztb_file.ztb08,
                          ztb06     LIKE  ztb_file.ztb06,
                          ztb07     LIKE  ztb_file.ztb07,
                          ztb09     LIKE  ztb_file.ztb09,
                          ztb11     LIKE  ztb_file.ztb11,
                          ztb05     LIKE  ztb_file.ztb05,
                          gaq03     LIKE  gaq_file.gaq03,
                          gaq05     LIKE  gaq_file.gaq05
                     END RECORD,
    g_ztc            DYNAMIC ARRAY of RECORD
                          ztc06     LIKE  ztc_file.ztc06,
                          ztc03     LIKE  ztc_file.ztc03,
                          ztc04     LIKE  ztc_file.ztc04,
                          ztc05     LIKE  ztc_file.ztc05
                     END RECORD,
    g_ztc_t          RECORD
                          ztc06     LIKE  ztc_file.ztc06,
                          ztc03     LIKE  ztc_file.ztc03,
                          ztc04     LIKE  ztc_file.ztc04,
                          ztc05     LIKE  ztc_file.ztc05
                     END RECORD,
    g_ztc_o          RECORD
                          ztc06     LIKE  ztc_file.ztc06,
                          ztc03     LIKE  ztc_file.ztc03,
                          ztc04     LIKE  ztc_file.ztc04,
                          ztc05     LIKE  ztc_file.ztc05
                     END RECORD,
    #FUN-730016
    g_ztd            DYNAMIC ARRAY of RECORD
                          ztd03     LIKE ztd_file.ztd03,
                          ztd04     LIKE ztd_file.ztd04,
                          ztd05     LIKE ztd_file.ztd05,
                          ztd06     LIKE ztd_file.ztd06,
                          ztd07     LIKE ztd_file.ztd07,
                          ztd08     LIKE ztd_file.ztd08,
                          ztd09     LIKE ztd_file.ztd09,
                          ztd10     LIKE ztd_file.ztd10,
                          ztd11     LIKE ztd_file.ztd11,
                          ztd12     LIKE ztd_file.ztd12,
                          ztd13     LIKE ztd_file.ztd13,
                          ztd14     LIKE ztd_file.ztd14,
                          ztd15     LIKE ztd_file.ztd15,
                          ztd16     LIKE ztd_file.ztd16,
                          ztd17     LIKE ztd_file.ztd17
                     END RECORD,
    g_ztd_t          RECORD
                          ztd03     LIKE ztd_file.ztd03,
                          ztd04     LIKE ztd_file.ztd04,
                          ztd05     LIKE ztd_file.ztd05,
                          ztd06     LIKE ztd_file.ztd06,
                          ztd07     LIKE ztd_file.ztd07,
                          ztd08     LIKE ztd_file.ztd08,
                          ztd09     LIKE ztd_file.ztd09,
                          ztd10     LIKE ztd_file.ztd10,
                          ztd11     LIKE ztd_file.ztd11,
                          ztd12     LIKE ztd_file.ztd12,
                          ztd13     LIKE ztd_file.ztd13,
                          ztd14     LIKE ztd_file.ztd14,
                          ztd15     LIKE ztd_file.ztd15,
                          ztd16     LIKE ztd_file.ztd16,
                          ztd17     LIKE ztd_file.ztd17
                     END RECORD,
    g_ztd_o          RECORD
                          ztd03     LIKE ztd_file.ztd03,
                          ztd04     LIKE ztd_file.ztd04,
                          ztd05     LIKE ztd_file.ztd05,
                          ztd06     LIKE ztd_file.ztd06,
                          ztd07     LIKE ztd_file.ztd07,
                          ztd08     LIKE ztd_file.ztd08,
                          ztd09     LIKE ztd_file.ztd09,
                          ztd10     LIKE ztd_file.ztd10,
                          ztd11     LIKE ztd_file.ztd11,
                          ztd12     LIKE ztd_file.ztd12,
                          ztd13     LIKE ztd_file.ztd13,
                          ztd14     LIKE ztd_file.ztd14,
                          ztd15     LIKE ztd_file.ztd15,
                          ztd16     LIKE ztd_file.ztd16,
                          ztd17     LIKE ztd_file.ztd17
                     END RECORD,
    g_ztd_fk         DYNAMIC ARRAY of RECORD
                          rposition STRING,
                          colname   STRING,
                          rzad06    STRING,
                          rzad07    STRING,
                          rtabname  STRING,
                          rcolname  STRING
                     END RECORD,
    #END FUN-730016
    g_sysidx         DYNAMIC ARRAY of RECORD
                          idxname   LIKE type_file.chr50,   #No.FUN-680135 VARCHAR(50)
                          tabid     LIKE type_file.num10,   #No.FUN-680135 INTEGER 
                          idxtype   LIKE type_file.chr1,    #No.FUN-680135 VARCHAR(1)
                          part1     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part2     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part3     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part4     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part5     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part6     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part7     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part8     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part9     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part10    LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part11    LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part12    LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part13    LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part14    LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part15    LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          part16    LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                          dbname    LIKE type_file.chr20    #No.FUN-680135 VARCHAR(20)
                     END RECORD,
     g_rec_b              LIKE type_file.num5,   #單身筆數  #No.FUN-680135 SMALLINT
     g_rec_d              LIKE type_file.num5,   #單身筆數  #No.FUN-680135 SMALLINT
     g_rec_c              LIKE type_file.num5,   #單身筆數  #No.FUN-730016
     g_dbqry_rec_b        LIKE type_file.num5,   #dbqry單身筆數 #No.FUN-680135 SMALLINT
     g_err_channel        base.channel,          #錯誤訊息的channel
     g_folder             LIKE type_file.num5,   #No.FUN-680135 SMALLINT #page no
     g_std_server         LIKE type_file.chr20,  #No.FUN-680135 VARCHAR(10) #正式區資料庫名稱
     g_edition            LIKE type_file.chr1,   #No.FUN-680135 VARCHAR(1)  #SERVER OR CLIENT
     l_ac                 LIKE type_file.num5,   #No.FUN-680135 SMALLINT #目前處理的ARRAY CNT 
     l_ac_ztc             LIKE type_file.num5,   #No.FUN-680135 SMALLINT #目前處理的ARRAY CNT
     g_db_type            LIKE type_file.chr3,   #No.FUN-680135 VARCHAR(3)
     g_err                STRING,
     g_err1               STRING,                #No.FUN-660081
     g_lang_arr           DYNAMIC ARRAY OF LIKE type_file.chr1,          #No.FUN-680135 DYNAMIC ARRAY OF VARCHAR(1)
     g_dir        RECORD
                  top     STRING,
                  tempdir STRING
                          END RECORD,
     g_pid                STRING,
     g_chr                LIKE type_file.chr1,   #No.FUN-680135 VARCHAR(1)
     g_cnt                LIKE type_file.num10,  #No.FUN-680135 INTEGER
     g_cnt1               LIKE type_file.num10,  #No.FUN-680135 INTEGER   #FUN-6A0052 add
     g_i                  LIKE type_file.num5,   #count/index for any purpose #No.FUN-680135 SMALLINT
     g_msg                LIKE type_file.chr1000,#No.FUN-680135 VARCHAR(72)
     g_forupd_sql         STRING,                #SELECT ... FOR UPDATE SQL
     g_before_input_done  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
     g_tcp_servername     LIKE type_file.chr30,  #FUN-830143:CHAR(15) => VARCHAR(30)   #No.FUN-680135 VARCHAR(15)
     g_curs_index         LIKE type_file.num10,  #No.FUN-680135 INTEGER
     g_row_count          LIKE type_file.num10,  #No.FUN-680135 INTEGER
     g_jump               LIKE type_file.num10,  #No.FUN-680135 INTEGER
     mi_no_ask            LIKE type_file.num5,   #No.FUN-680135 SMALLINT
     g_dff        RECORD
                  dff03   LIKE dff_file.dff03,   #No.FUN-680135 VARCHAR(20)
                  dff04   LIKE dff_file.dff04    #No.FUN-680135 VARCHAR(20)
                          END RECORD,
     g_dba_priv           LIKE type_file.chr1,   #No.FUN-680135 VARCHAR(1)
     g_azp        DYNAMIC ARRAY OF RECORD        #FUN-6A0052 add
                  select  LIKE type_file.chr1,     # 選擇
                  azp01   LIKE azp_file.azp01,     # 營運中心代碼
                  azp02   LIKE azp_file.azp02,     # 營運中心名稱
                  azp03   LIKE azp_file.azp03      # 資料庫代碼
                  END RECORD,
     g_azp1       DYNAMIC ARRAY OF RECORD        #FUN-6A0052 add
                  select  LIKE type_file.chr1,     # 選擇
                  azp01   LIKE azp_file.azp01,     # 營運中心代碼
                  azp02   LIKE azp_file.azp02,     # 營運中心名稱
                  azp03   LIKE azp_file.azp03,     # 資料庫代碼
                  tab_syn LIKE zta_file.zta07,     # T/S建議 (Table/Synonym)
                  syn_db  LIKE zta_file.zta17      # Synonym DB
                  END RECORD,
     g_plant_o    LIKE type_file.chr18,          #FUN-6A0052 add
     g_dbs_o      LIKE type_file.chr21,          #FUN-6A0052 add
     g_dbs_t      LIKE type_file.chr21,          #FUN-9A0077
     g_sys_cnt    LIKE type_file.num5,           #FUN-9A0077
     g_zta_cnt    LIKE type_file.num5,           #FUN-9A0077
     g_ods_end    LIKE type_file.num10,          #FUN-9A0077
     g_zta01_d_o  LIKE zta_file.zta01,           #FUN-6A0052 add
     g_errmsg     STRING                         #TQC-710048 add
#FUN-660178
DEFINE g_syn      RECORD
                    azp03 LIKE azp_file.azp03,
                    gat01 LIKE gat_file.gat01
                  END RECORD
#END FUN-660178
 
 
CONSTANT GI_MAX_COLUMN_COUNT INTEGER = 400,                #TQC-710089
         GI_COLUMN_WIDTH     INTEGER = 10
#TQC-710089
DEFINE   ga_table_data DYNAMIC ARRAY OF RECORD
            field001, field002, field003, field004, field005,
            field006, field007, field008, field009, field010,
            field011, field012, field013, field014, field015,
            field016, field017, field018, field019, field020,
            field021, field022, field023, field024, field025,
            field026, field027, field028, field029, field030,
            field031, field032, field033, field034, field035,
            field036, field037, field038, field039, field040,
            field041, field042, field043, field044, field045,
            field046, field047, field048, field049, field050,
            field051, field052, field053, field054, field055,
            field056, field057, field058, field059, field060,
            field061, field062, field063, field064, field065,
            field066, field067, field068, field069, field070,
            field071, field072, field073, field074, field075,
            field076, field077, field078, field079, field080,
            field081, field082, field083, field084, field085,
            field086, field087, field088, field089, field090,
            field091, field092, field093, field094, field095,
            field096, field097, field098, field099, field100,
            field101, field102, field103, field104, field105,
            field106, field107, field108, field109, field110,
            field111, field112, field113, field114, field115,
            field116, field117, field118, field119, field120,
            field121, field122, field123, field124, field125,
            field126, field127, field128, field129, field130,
            field131, field132, field133, field134, field135,
            field136, field137, field138, field139, field140,
            field141, field142, field143, field144, field145,
            field146, field147, field148, field149, field150,
            field151, field152, field153, field154, field155,
            field156, field157, field158, field159, field160,
            field161, field162, field163, field164, field165,
            field166, field167, field168, field169, field170,
            field171, field172, field173, field174, field175,
            field176, field177, field178, field179, field180,
            field181, field182, field183, field184, field185,
            field186, field187, field188, field189, field190,
            field191, field192, field193, field194, field195,
            field196, field197, field198, field199, field200,
            field201, field202, field203, field204, field205,
            field206, field207, field208, field209, field210,
            field211, field212, field213, field214, field215,
            field216, field217, field218, field219, field220,
            field221, field222, field223, field224, field225,
            field226, field227, field228, field229, field230,
            field231, field232, field233, field234, field235,
            field236, field237, field238, field239, field240,
            field241, field242, field243, field244, field245,
            field246, field247, field248, field249, field250,
            field251, field252, field253, field254, field255,
            field256, field257, field258, field259, field260,
            field261, field262, field263, field264, field265,
            field266, field267, field268, field269, field270,
            field271, field272, field273, field274, field275,
            field276, field277, field278, field279, field280,
            field281, field282, field283, field284, field285,
            field286, field287, field288, field289, field290,
            field291, field292, field293, field294, field295,
            field296, field297, field298, field299, field300,
            field301, field302, field303, field304, field305,
            field306, field307, field308, field309, field310,
            field311, field312, field313, field314, field315,
            field316, field317, field318, field319, field320,
            field321, field322, field323, field324, field325,
            field326, field327, field328, field329, field330,
            field331, field332, field333, field334, field335,
            field336, field337, field338, field339, field340,
            field341, field342, field343, field344, field345,
            field346, field347, field348, field349, field350,
            field351, field352, field353, field354, field355,
            field356, field357, field358, field359, field360,
            field361, field362, field363, field364, field365,
            field366, field367, field368, field369, field370,
            field371, field372, field373, field374, field375,
            field376, field377, field378, field379, field380,
            field381, field382, field383, field384, field385,
            field386, field387, field388, field389, field390,
            field391, field392, field393, field394, field395,
            field396, field397, field398, field399, field400 LIKE gaq_file.gaq03
#END TQC-710089
                  END RECORD
 
#FUN-730016
DEFINE g_constraint_sql      STRING
DEFINE g_page_choice         STRING                       
DEFINE g_constraint_choice   STRING                       
DEFINE g_array_change        LIKE type_file.num5,
       l_ac_ztd              LIKE type_file.num5   #目前處理的ARRAY CNT
DEFINE g_ztd_c               RECORD
                             ztd03   LIKE ztd_file.ztd03,
                             ztd04   LIKE ztd_file.ztd04,
                             ztd05   LIKE ztd_file.ztd05,
                             ztd06   LIKE ztd_file.ztd06,
                             ztd08   LIKE ztd_file.ztd08,
                             ztd09   LIKE ztd_file.ztd09,
                             ztd10   LIKE ztd_file.ztd10,
                             ztd11   LIKE ztd_file.ztd11,
                             ztd17   LIKE ztd_file.ztd17
                             END RECORD
DEFINE g_ztd_c_t             RECORD
                             ztd03   LIKE ztd_file.ztd03,
                             ztd04   LIKE ztd_file.ztd04,
                             ztd05   LIKE ztd_file.ztd05,
                             ztd06   LIKE ztd_file.ztd06,
                             ztd08   LIKE ztd_file.ztd08,
                             ztd09   LIKE ztd_file.ztd09,
                             ztd10   LIKE ztd_file.ztd10,
                             ztd11   LIKE ztd_file.ztd11,
                             ztd17   LIKE ztd_file.ztd17
                             END RECORD
DEFINE g_tcol                DYNAMIC ARRAY OF RECORD
                             tcol01  LIKE ztb_file.ztb03
                             END RECORD
DEFINE g_trcol               DYNAMIC ARRAY OF RECORD
                             trcol01  LIKE ztb_file.ztb03
                             END RECORD
DEFINE g_kcol                DYNAMIC ARRAY OF RECORD
                             kcol01  LIKE ztb_file.ztb03
                             END RECORD
DEFINE g_rcol                DYNAMIC ARRAY OF RECORD
                             rcol01  LIKE ztb_file.ztb03
                             END RECORD
DEFINE g_tcol_rec_b          LIKE type_file.num5
DEFINE g_trcol_rec_b         LIKE type_file.num5
DEFINE g_kcol_rec_b          LIKE type_file.num5
DEFINE g_rcol_rec_b          LIKE type_file.num5
DEFINE l_tcol_ac             LIKE type_file.num5
DEFINE l_kcol_ac             LIKE type_file.num5
DEFINE l_trcol_ac            LIKE type_file.num5
DEFINE l_rcol_ac             LIKE type_file.num5
#END FUN-730016
DEFINE g_plant_status        LIKE type_file.num5        #No.FUN-990043
DEFINE g_cr_zta07            LIKE zta_file.zta07        #No.FUN-9A0077
DEFINE g_cr_zta17            LIKE zta_file.zta17        #No.FUN-9A0077
DEFINE g_argv2               STRING                     #執行的功能            #FUN-9C0036
DEFINE g_argv3               STRING                     #資料庫                #FUN-9C0036
DEFINE g_argv4               STRING                     #選項                  #FUN-9C0036
DEFINE g_financial_module    STRING                     #財務模組清單          #FUN-9C0036
DEFINE g_view_no_in          STRING                     #不是View的模組清單的not in條件          #FUN-9C0036
DEFINE g_azw06               LIKE azw_file.azw06        #登入資料庫            #FUN-9C0036
DEFINE g_create_module       LIKE gat_file.gat06        #建立的模組            #FUN-9C0036
DEFINE g_mssqlarea           STRING                     #區分MSV環境區域       #No.FUN-A60022
DEFINE g_zta03_str           STRING                     #模組別清單            #No.FUN-A60050
DEFINE g_table_type          STRING                     #檔案類型              #No.FUN-A60050
DEFINE g_sheet               STRING                     #sheetname             #FUN-C80070


MAIN
#     DEFINEl_time     LIKE type_file.chr8              #No.FUN-6A0096
DEFINE p_row,p_col     LIKE type_file.num5,             #No.FUN-680135 SMALLINT 
       l_gat06         LIKE gat_file.gat06,
       l_gat06_t       STRING,
       l_i             LIKE type_file.num5              #No.FUN-680135 SMALLINT
DEFINE l_ver           LIKE type_file.chr1,             #TQC-690091
       ls_str          STRING                           #TQC-690091
DEFINE lch_cmd         base.Channel,                    #No.FUN-A60022---add
       l_str           STRING                           #No.FUN-A60022---add
DEFINE l_zta03         LIKE zta_file.zta03              #No.FUN-A60050
 
    OPTIONS
        INPUT NO WRAP
    DEFER INTERRUPT
    WHENEVER ERROR CALL cl_err_msg_log
 
    #FUN-9C0036 -- start --
    LET g_bgjob = ARG_VAL(1)
    LET g_argv2 = ARG_VAL(2)
    LET g_argv3 = ARG_VAL(3)
    LET g_argv4 = ARG_VAL(4)

    LET g_MODNO=ARG_VAL(1)     #FUN-A60022

    #MSV版本rd2 時會自動加上 2>&1 參數
    IF g_bgjob = '2' THEN
       LET g_bgjob = NULL
       LET g_MODNO = NULL
    END IF 

    IF g_bgjob='Y' THEN
       display "g_bgjob:",g_bgjob 
       display "g_argv2:",g_argv2 
       display "g_argv3:",g_argv3 
       display "g_argv4:",g_argv4 
    END IF

    #背景執行時，FGLGUI 為 0
    IF g_bgjob = 'Y' THEN
       CALL FGL_SETENV("FGLGUI",0)             
    END IF
    #FUN-9C0036 -- start --

    LET g_db_type=cl_db_get_database_type()
    LET g_mssqlarea=FGL_GETENV("MSSQLAREA")       #No.FUN-A60022---add

    IF (NOT cl_user()) THEN
       EXIT PROGRAM
    END IF
 
    IF (NOT cl_setup("AZZ")) THEN
       EXIT PROGRAM
    END IF
 
    #  將ora和ifx的判斷分開,因ifx是一個db判斷一次dba
    IF g_db_type="ORA" THEN
       #FUN-8C0055
       IF NOT cl_null(FGL_GETENV("TOPLINK")) THEN
          RUN "groups|grep dba" RETURNING g_dba_priv
       ELSE
          LET ls_str = "groups ",g_user CLIPPED," 2>/dev/null |grep dba" #No.FUN-850112
          RUN ls_str RETURNING g_dba_priv
 
       END IF
       #END FUN-8C0055
 
       IF g_dba_priv = '0' THEN
          LET g_dba_priv='1'
       END IF
    END IF
 
#    CALL cl_used("p_zta",l_time,1) RETURNING l_time     #No.FUN-6A0096
    CALL cl_used("p_zta", g_time, 1) RETURNING g_time  #No.FUN-6A0096
 
    INITIALIZE g_zta.* TO NULL
    INITIALIZE g_zta_t.* TO NULL
    #TQC-690091
    #SELECT max(zl09) INTO g_tiptop_ver FROM zl_file
    LET ls_str = FGL_GETENV("TOPLINK")
    CASE ls_str
       WHEN "Shipment"    LET l_ver = "1"
       WHEN "Beta"        LET l_ver = "2"
       WHEN "Development" LET l_ver = "3"
       OTHERWISE
          IF g_gui_type MATCHES "[23]" THEN
             LET l_ver = "1"
          ELSE
             LET l_ver = ""
          END IF
    END CASE
    IF NOT cl_null(l_ver) THEN
       SELECT zlw03 INTO g_tiptop_ver FROM zlw_file WHERE zlw01=l_ver
    END IF
    #END TQC-690091
    LET g_folder=1
    LET g_date=TODAY USING "yymmdd"
    LET g_pid= FGL_GETPID()
    LET g_dir.top=fgl_getenv("TOP")
    LET g_dir.tempdir=fgl_getenv("TEMPDIR")
    display "g_dir.top=",g_dir.top
    display "g_dir.tempdir=",g_dir.tempdir
    LET g_ods_end = TRUE                                  #FUN-9A0077
    LET g_sys_cnt = NULL                                  #FUN-9A0077
    LET g_zta_cnt = NULL                                  #FUN-9A0077  
    LET g_financial_module = cl_get_finance_in()          #FUN-9C0036
    LET g_view_no_in = cl_get_view_not_in()               #FUN-9C0036

--  抓取所有的語言別
    DECLARE lang_arr CURSOR FOR
     SELECT UNIQUE gay01 FROM gay_file ORDER BY gay01
    LET l_i=1
    FOREACH lang_arr INTO g_lang_arr[l_i]
       IF sqlca.sqlcode THEN
          CONTINUE FOREACH
       END IF
       LET l_i=l_i+1
    END FOREACH
    FREE lang_arr
    CALL g_lang_arr.deleteElement(l_i)

    #FUN-9C0036 -- start --
    IF g_bgjob !='Y' OR g_bgjob IS NULL THEN              #CHI-B30014 

       #選擇資料庫
       CALL p_zta_select_db("close")   #No.TQC-6A0036
  
       LET p_row = 3 LET p_col = 16
       OPEN WINDOW p_zta_w AT p_row,p_col
         WITH FORM "azz/42f/p_zta" ATTRIBUTE(STYLE=g_win_style)
    
       #FUN-730016
       #IF g_db_type="IFX" THEN
       CASE g_db_type 
         WHEN "IFX"
          CALL cl_set_combo_items("ztb04","char,integer,smallint,date,datetime,decimal,serial,byte","char,integer,smallint,date,datetime,decimal,serial,byte")
         WHEN "ORA"
          CALL cl_set_combo_items("ztb04","varchar2,number,date,blob","varchar2,number,date,blob")
         WHEN "MSV"  #FUN-770027
          CALL cl_set_combo_items("ztb04","nvarchar,integer,smallint,datetime,decimal,text,image","nvarchar,integer,smallint,datetime,decimal,text,image")  #FUN-A60022
       END CASE
       #END FUN-730016
    
       CALL cl_ui_init()
    
       #No.FUN-A60050 -- start --
       #-----指定combo gat06的值-------------#
       #DECLARE p_gat06_cur CURSOR FOR SELECT gao01 FROM gao_file ORDER BY gao01
       #FOREACH p_gat06_cur INTO l_gat06
       #   IF cl_null(l_gat06_t) THEN
       #      LET l_gat06_t=l_gat06 CLIPPED
       #   ELSE
       #      LET l_gat06_t=l_gat06_t CLIPPED,",",l_gat06 CLIPPED
       #   END IF
       #END FOREACH
    
       DECLARE p_gat06_cur CURSOR FOR SELECT gao01 FROM gao_file ORDER BY gao01
       FOREACH p_gat06_cur INTO l_zta03
          IF cl_null(g_zta03_str) THEN
             LET g_zta03_str=l_zta03 CLIPPED
          ELSE
             LET g_zta03_str=g_zta03_str CLIPPED,",",l_zta03 CLIPPED
          END IF
       END FOREACH
    
       CALL cl_set_combo_items("zta03",g_zta03_str,g_zta03_str)
       #-------------------------------------#
       #No.FUN-A60050 -- end --

       #因資料庫轉換, 需更改 window title
       CALL p_zta_set_win_title2()        #FUN-9C0036

       #選擇登入角色:一般使用者或DBA
       CALL p_zta_dba()

    END IF
    #FUN-9C0036 -- start --
 
    IF g_db_type="IFX" THEN
       SELECT COUNT(*) INTO g_dba_priv FROM sysusers
        WHERE usertype='D' and (username=g_user or username='tiptopgp') #No.FUN-9B0011 
       IF g_dba_priv != '0' THEN
          LET g_dba_priv='1'
       END IF
    END IF
 
    IF g_db_type="IFX" AND g_dba_priv='1' THEN
       IF p_zta_check_pagelock() THEN
          IF p_zta_question_msg("zta-028","zta-029")  THEN
             CALL p_zta_alter_lockmode()
          END IF
       END IF
    END IF
 
    CALL p_zta_check_edition()
 
    #FUN-9C0036 -- start --
    IF NOT cl_null(g_argv2) THEN
       CASE g_argv2
            WHEN "ztaimport"
                display "-- ztaimport start --"
                #IF g_dba_priv='1' THEN
                   LET g_dbs   =  g_argv3 CLIPPED        #FUN-9C0036
                   CALL p_zta_set_erpdb()                #連結資料庫  
                   CALL p_zta_imp()
                   display "-- ztaimport end --"
                #ELSE
                #END IF
                EXIT PROGRAM
              
       END CASE
    END IF
    #FUN-9C0036 -- end --

    CALL cl_set_comp_visible("group2,group3,view_key", FALSE)    #No.FUN-730016 #FUN-7A0029
    CALL p_zta_menu()    #中文
 
    CLOSE WINDOW p_zta_w
 
#   CALL cl_used("p_zta",l_time,2) RETURNING l_time     #No.FUN-6A0096
    CALL cl_used("p_zta",g_time,2) RETURNING g_time     #No.FUN-6A0096
END MAIN
 
 
FUNCTION p_zta_check_edition()
DEFINE l_server   LIKE type_file.chr20    #No.FUN-680135 VARCHAR(10)
 
    CALL fgl_getenv("ORACLE_SID_STD") RETURNING g_std_server
    CALL fgl_getenv("ORACLE_SID") RETURNING l_server
 
    IF cl_null(g_std_server) THEN
       LET g_edition='O'   #one因為不知道怎麼命名了-_-"
    ELSE
       IF l_server=g_std_server THEN
          LET g_edition='S'
       ELSE
          LET g_edition='C'
       END IF
    END IF
END FUNCTION
 
 
FUNCTION p_zta_cs(p_wc)
DEFINE p_wc STRING
 
   CLEAR FORM
   CALL g_ztb.clear()
   CALL g_ztc.clear()
   CALL g_ztd.clear()                  #No.FUN-730016
   INITIALIZE g_zta.* TO NULL          #No.FUN-A60022
 
   IF p_wc is null THEN
      #FUN-730016
      #IF g_db_type="IFX" THEN
      CASE g_db_type
        WHEN "IFX" 
           CONSTRUCT g_wc ON
                zta01,zta03,zta09,zta07,zta17,locklevel,zta18,zta10,zta05,zta06,zta11,zta12  #No.FUN-A60050
           FROM zta01,zta03,zta09,zta07,zta17,lockmode,zta18,zta10,zta05,zta06,zta11,zta12   #No.FUN-A60050
           
#                BEFORE FIELD zta01
#                   DISPLAY 'Y' TO zta10
                ON IDLE g_idle_seconds
                   CALL cl_on_idle()
                   CONTINUE CONSTRUCT
           
           END CONSTRUCT
           LET g_wc = g_wc CLIPPED,cl_get_extra_cond(null, null) #FUN-980030

       #WHEN "ORA"  #No.FUN-A60022 mark
        OTHERWISE   #No.FUN-A60022 add
           CONSTRUCT BY NAME g_wc ON
                zta01,zta03,zta07,zta17,zta09,zta18,zta10,zta05,zta06,zta11,zta12   #No.FUN-A60050
           
#                BEFORE FIELD zta01
#                   DISPLAY 'Y' TO zta10
                ON IDLE g_idle_seconds
                   CALL cl_on_idle()
                   CONTINUE CONSTRUCT
           
           END CONSTRUCT
      END CASE
      #END FUN-730016
 
      IF INT_FLAG THEN RETURN END IF
      #資料庫要由"選擇資料庫"來做選擇,查詢也是一樣,所以資料庫直接參考現行
      LET g_wc=g_wc CLIPPED," AND zta02='",g_dbs CLIPPED,"'"
 
      #組合出 SQL 指令
      #FUN-730016
      #IF g_db_type="IFX" THEN
      CASE g_db_type
       WHEN "IFX" 
         LET g_sql="SELECT  zta01,zta02 FROM (zta_file LEFT OUTER JOIN gat_file ",
                   "    ON zta_file.zta01=gat_file.gat01",
                   "   AND gat_file.gat02='",g_lang CLIPPED,"') LEFT OUTER JOIN systables",    #FUN-9C0036
                   "    ON zta_file.zta01=systables.tabname",
                   " WHERE ",g_wc CLIPPED,
                   " ORDER BY zta01,zta02"
       WHEN "ORA" 
         #FUN-9A0064 -- start --
         LET g_sql="SELECT  zta01,zta02 FROM zta_file LEFT OUTER JOIN gat_file ",
                   "    ON zta_file.zta01=gat_file.gat01",
                   "   AND gat_file.gat02='",g_lang CLIPPED,"'",                               #FUN-9C0036
                   " WHERE ",g_wc CLIPPED,
                   " ORDER BY zta01,zta02"
         #FUN-9A0064 -- end --
       WHEN "MSV"  #FUN-770027
        LET g_sql=" SELECT zta01,zta02 FROM (zta_file LEFT OUTER JOIN gat_file ",
                      " ON zta_file.zta01=gat_file.gat01 ",
                     " AND gat_file.gat02='",g_lang CLIPPED,"') LEFT OUTER JOIN sys.objects ",  #FUN-9C0036
                      " ON zta_file.zta01=sys.objects.name ",
                   " WHERE ",g_wc CLIPPED,
                   " ORDER BY zta01,zta02 "
      END CASE
      #END FUN-730016
   ELSE
      #資料庫要由"選擇資料庫"來做選擇,查詢也是一樣,所以資料庫直接參考現行
      LET p_wc="(",p_wc CLIPPED,") AND zta02='",g_dbs CLIPPED,"'"
 
      #組合出 SQL 指令
      LET g_sql="SELECT  zta01,zta02 FROM zta_file ",
                " WHERE ",p_wc CLIPPED,
                " ORDER BY zta01,zta02"
   END IF
   DECLARE p_zta_cs SCROLL CURSOR WITH HOLD FROM g_sql   # SCROLL CURSOR
   IF p_wc is null THEN
      #FUN-730016
      #IF g_db_type="IFX" THEN
      CASE g_db_type
       WHEN "IFX" 
         LET g_sql="SELECT COUNT(*) FROM (zta_file LEFT OUTER JOIN gat_file ",
                   "    ON zta_file.zta01=gat_file.gat01",
                   "   AND gat_file.gat02='",g_lang CLIPPED,"') LEFT OUTER JOIN systables ",   #FUN-9C0036
                   "    ON zta01=tabname",
                   " WHERE ",g_wc CLIPPED
       WHEN "ORA" 
         #FUN-9A0064 -- start --
         LET g_sql="SELECT COUNT(*) FROM zta_file LEFT OUTER JOIN gat_file ",
                   "    ON zta_file.zta01=gat_file.gat01",
                   "   AND gat_file.gat02='",g_lang CLIPPED,"'",                               #FUN-9C0036
                   " WHERE ",g_wc CLIPPED
         #FUN-9A0064 -- end --
       WHEN "MSV"          #FUN-770027
        LET g_sql=" SELECT COUNT(*) FROM (zta_file LEFT OUTER JOIN gat_file ",
                      " ON zta_file.zta01=gat_file.gat01",
                     " AND gat_file.gat02='",g_lang CLIPPED,"') LEFT OUTER JOIN sys.objects ",  #FUN-9C0036
                      " ON zta01 = sys.objects.name",
                   " WHERE ",g_wc CLIPPED
      END CASE
      #END FUN-730016
   ELSE
      LET g_sql="SELECT COUNT(*) FROM zta_file WHERE ",p_wc CLIPPED
   END IF
   DECLARE p_zta_count CURSOR FROM g_sql
 
END FUNCTION
 
#No.FUN-990043 -- start --
FUNCTION p_zta_cl()                             
     LET g_forupd_sql = "SELECT * FROM zta_file WHERE zta01= ? AND zta02= ? FOR UPDATE" #FUN-9A0064
     LET g_forupd_sql = cl_forupd_sql(g_forupd_sql)
     DECLARE p_zta_cl CURSOR FROM g_forupd_sql      # LOCK CURSOR
END FUNCTION 
#No.FUN-990043 -- end --
 
FUNCTION p_zta_menu()
  DEFINE w ui.Window,    #CHI-920043 add
         n om.DomNode    #CHI-920043 add
 
  WHILE TRUE
     #FUN-730016
     CASE g_page_choice 
        WHEN  "index" 
              CALL p_zta_d_bp("G")
        WHEN  "constraint"
              CALL p_zta_c_bp("G")
        OTHERWISE
              CALL p_zta_bp("G")
     END CASE
     #END FUN-730016
 
     CALL p_zta_cl()                             #No.FUN-990043
 
     CASE g_action_choice
        WHEN "exporttoexcel"
           IF cl_chk_act_auth() THEN
              
              #--FUN-940108--start--
              #--CHI-920043--start--
              CALL p_zta_exp2excel()
              #LET w = ui.Window.getCurrent()
              #LET n = w.getNode()
              #CALL cl_export_to_excel(n,base.TypeInfo.create(g_ztb),base.TypeInfo.create(g_ztc),base.TypeInfo.create(g_ztd))
              #--CHI-920043--end--
              #--FUN-940108--end--
           END IF
        WHEN "insert"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_a()
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "query"
           IF cl_chk_act_auth() THEN
                CALL p_zta_q('')
           END IF
        WHEN "modify"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_u()
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "schema_modify_list"
           CALL p_zta_w()
        WHEN "delete"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_r()
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "drop_table"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                #CALL p_zta_drop_table()     #FUN-6A0052 mark
                 CALL p_zta_drop_table_1()   #FUN-6A0052
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "select_db"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              CALL p_zta_select_db("continue")   #No.TQC-6A0036
              CALL p_zta_set_win_title2()        #FUN-9C0036
              IF g_db_type="IFX" THEN
                 SELECT COUNT(*) INTO g_dba_priv FROM sysusers
                  WHERE usertype='D' and (username=g_user or username='tiptopgp') #No.FUN-9B0011
                 IF g_dba_priv != '0' THEN
                    LET g_dba_priv='1'
                 END IF
              END IF
           END IF
        WHEN "field_body"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_b()
                 #FUN-7A0029
                 #CALL p_zta_fetch('C')
                 IF g_zta.zta10='Y' THEN
                     CALL p_zta_bshow()
                 END IF
                 #END FUN-730016
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "index_body"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_d()
                 #FUN-730016
                 IF g_zta.zta10='Y' THEN
                     CALL p_zta_bshow()
                 END IF
                 #END FUN-730016
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
      #FUN-730016
        WHEN "constraint_body"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_c()
                 IF g_zta.zta10='Y' THEN
                    CALL p_zta_bshow()
                 END IF
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
      #END FUN-730016
        WHEN "zta_import"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_imp()
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "generate_database_guide"
           IF cl_chk_act_auth() THEN
              CALL p_zta_out4()
           END IF
        WHEN "generate_single_sqlfile"
           IF cl_chk_act_auth() THEN
              CALL p_zta_gsql('S')
           END IF
        WHEN "generate_batch_sqlfile"
           IF cl_chk_act_auth() THEN
              CALL p_zta_gsql('B')
           END IF
        WHEN "import_alter_sqlfile"
           IF cl_chk_act_auth() THEN
              IF g_dba_priv='1' THEN
                #CALL p_zta_imp_sqlfile()     #FUN-6A0052 mark
                 CALL p_zta_imp_sqlfile_1()   #FUN-6A0052
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "import_create_sqlfile"
           IF cl_chk_act_auth() THEN
              IF g_dba_priv='1' THEN
                #CALL p_zta_imp_create_sqlfile()     #FUN-6A0052 mark
                 CALL p_zta_imp_create_sqlfile_1()   #FUN-6A0052
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        WHEN "create_table"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              IF g_dba_priv='1' THEN
                 LET g_errmsg = ''   #TQC-710048 add
                 CALL p_zta_gensql()
                #start TQC-710048 add
                 IF NOT cl_null(g_errmsg) THEN
                    CALL fgl_winmessage("Info",g_errmsg,"Info")
                 END IF
                #end TQC-710048 add
                 IF g_zta.zta02='ds' THEN
                    #No.FUN-A60022 -- start --
                    IF os.Path.separator() = "/" THEN  
                       ERROR "r.s2 ds"
                       RUN "r.s2 ds" WITHOUT WAITING
                    ELSE
                       ERROR "rs2 ds"
                       RUN "rs2 ds" WITHOUT WAITING
                    END IF
                    #No.FUN-A60022 -- end --
                    CALL p_zta_gsql('S')
                 END IF
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
 
        #FUN-660178
        WHEN "create_synonym"
           IF cl_chk_act_auth() THEN
              IF g_dba_priv='1' THEN
                 CALL p_zta_create_synonym()
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF
        #END FUN-660178
 
        WHEN "diff_database"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              CALL p_zta_dff()
           END IF
        #Begin:FUN-C10031
        #Begin:FUN-BA0082
        WHEN "database_query"
           IF cl_chk_act_auth() AND g_edition!='S' THEN
              #CALL p_zta_dbqry_menu()
              CALL cl_cmdrun_wait("p_dbqry "||g_dbs)        #No.FUN-9A0039,#No.FUN-C10031
           END IF
        #End:FUN-BA0082
        #End:FUN-C10031
#        WHEN "link_database_setup"
#           IF cl_chk_act_auth() AND g_edition!='S' THEN
#              CALL p_zta_link_setup()
#           END IF
        WHEN "maintain_field_description"
           IF cl_chk_act_auth() THEN
              CALL p_zta_fld_desc('')
           END IF
        WHEN "maintain_table_description"
           IF cl_chk_act_auth() THEN
              CALL p_zta_tab_desc()
           END IF
#        WHEN "alter_lockmode"
#           IF g_dba_priv='1' THEN
#              IF g_db_type="IFX" THEN
#                 IF p_zta_check_pagelock() THEN
#                    CALL p_zta_alter_lockmode()
#                 ELSE
#                    CALL fgl_winmessage("Stop","No PageLock Table","stop")
#                 END IF
#              ELSE
#                 CALL fgl_winmessage("Stop","Informix Only","stop")
#              END IF
#           ELSE
#              CALL cl_err('','azz-108',1)
#           END IF
        WHEN "kill_lock"
           IF g_dba_priv='1' THEN
              CALL p_zta_klock()
           ELSE
              CALL cl_err('','azz-108',1)
           END IF
        WHEN "output"
           IF cl_chk_act_auth() THEN
              CALL p_zta_out()
           END IF
        WHEN "gen_program"
           IF cl_chk_act_auth() THEN
              CALL p_zta_gen_program()
           END IF
        WHEN "help"
           CALL showhelp(1)
        WHEN "exit"
           EXIT WHILE
        WHEN "controlg"
           CALL cl_cmdask()
        WHEN "controlb"
           PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
              ON IDLE g_idle_seconds
                 CALL cl_on_idle()
           END PROMPT
#TQC-860017 end  
           display g_MODNO
 
        #FUN-7A0029
        WHEN "view_key"
           IF cl_chk_act_auth() THEN
              CALL p_zta_view_key()
           END IF
        #END FUN-7A0029

        #No.FUN-9B0011 -- start --
        WHEN "diff_views"
           IF cl_chk_act_auth() THEN
              IF g_dba_priv='1' THEN
                 CALL p_dif_views()          #系統設定與虛擬資料庫 views 的差異比對
              ELSE
                 CALL cl_err('','azz-108',1)
              END IF
           END IF 
        #No.FUN-9B0011 -- end --

     END CASE
  END WHILE
  FREE p_zta_cs
END FUNCTION
 
 
FUNCTION p_zta_select_db(ps_str)         #No.TQC-6A0036
DEFINE l_dbs     LIKE type_file.chr50    #No.FUN-680135 VARCHAR(30)
DEFINE l_ch      base.Channel
DEFINE l_aoos901_cmd STRING
DEFINE ps_str    STRING                  #No.TQC-6A0036
 
 
################ for informix synonym ##############
    IF g_db_type="IFX" THEN
DISCONNECT ALL
#呼叫cl_ins_del_sid是要將執行程式時的sid_file資料刪除,但是p_zta並不是要執行ERP程式,所以不需要像一般程式新增sid_file.
DATABASE g_dbs
    END IF
####################################################
 
    #FUN-660178
    IF g_action_choice = "create_synonym" THEN 
       IF g_db_type="ORA" OR g_db_type="MSV" THEN   #No.FUN-A60022
         CLOSE DATABASE
         DATABASE g_dbs
       END IF
    ELSE
       #FUN-9C0036 -- start --
       #LET l_aoos901_cmd="aoos901 '",ps_str,"' '",g_pid CLIPPED,"'"         #No.TQC-6A0036
       #display "l_aoos901_cmd:",l_aoos901_cmd
       #CALL cl_cmdrun_wait("aoos901 '"||ps_str||"' '"||g_pid CLIPPED||"'")  #No.TQC-6A0036
       #CALL p_zta_set_win_title()
       CALL p_zta_seldb(ps_str)
       #FUN-9C0036 -- end --
    END IF
    #END FUN-660178
 
    IF g_db_type="IFX" THEN
       LET l_ch = base.Channel.create()
       CALL l_ch.openPipe("cat $INFORMIXDIR/etc/$ONCONFIG|grep DBSERVERALIASES|awk '{ print $2 }'","r")
       WHILE l_ch.read(g_tcp_servername)
             DISPLAY "tcp_servername:",g_tcp_servername
       END WHILE
       LET l_dbs=g_dbs CLIPPED,"@",g_tcp_servername CLIPPED
CONNECT TO l_dbs AS "MAIN"
       IF status THEN
          CALL l_ch.openPipe("cat $INFORMIXDIR/etc/$ONCONFIG|grep DBSERVERNAME|awk '{ print $2 }'","r")
          WHILE l_ch.read(g_tcp_servername)
                DISPLAY "tcp_servername:",g_tcp_servername
          END WHILE
          LET l_dbs=g_dbs CLIPPED,"@",g_tcp_servername CLIPPED
CONNECT TO l_dbs AS "MAIN"
       END IF
    END IF
 
    INITIALIZE g_zta.* TO NULL
    CALL p_zta_show()
    IF g_db_type="IFX" THEN
#No.FUN-680135 --start
#      CREATE TEMP TABLE tempidx(idxname varchar(128),
#                                 tabid   integer,
#                                 idxtype VARCHAR(1),
#                                 part1   smallint,
#                                 part2   smallint,
#                                 part3   smallint,
#                                 part4   smallint,
#                                 part5   smallint,
#                                 part6   smallint,
#                                 part7   smallint,
#                                 part8   smallint,
#                                 part9   smallint,
#                                 part10  smallint,
#                                 part11  smallint,
#                                 part12  smallint,
#                                 part13  smallint,
#                                 part14  smallint,
#                                 part15  smallint,
#                                 part16  smallint,
#                                 dbname  VARCHAR(20)) 
 
       CREATE TEMP TABLE tempidx(
              idxname LIKE type_file.chr1000,
              tabid   LIKE type_file.num10, 
              idxtype LIKE type_file.chr1,  
              part1   LIKE type_file.num5,  
              part2   LIKE type_file.num5,  
              part3   LIKE type_file.num5,  
              part4   LIKE type_file.num5,  
              part5   LIKE type_file.num5,  
              part6   LIKE type_file.num5,  
              part7   LIKE type_file.num5,  
              part8   LIKE type_file.num5,  
              part9   LIKE type_file.num5,  
              part10  LIKE type_file.num5,  
              part11  LIKE type_file.num5,  
              part12  LIKE type_file.num5,  
              part13  LIKE type_file.num5,  
              part14  LIKE type_file.num5,  
              part15  LIKE type_file.num5,  
              part16  LIKE type_file.num5,  
              dbname  LIKE type_file.chr20)
#FUN-680135 --end
       
       #FUN-730016
       CREATE TEMP TABLE tempidx2(
              idxname LIKE type_file.chr1000,
              tabid   LIKE type_file.num10, 
              idxtype LIKE type_file.chr1,  
              part1   LIKE type_file.num5,  
              part2   LIKE type_file.num5,  
              part3   LIKE type_file.num5,  
              part4   LIKE type_file.num5,  
              part5   LIKE type_file.num5,  
              part6   LIKE type_file.num5,  
              part7   LIKE type_file.num5,  
              part8   LIKE type_file.num5,  
              part9   LIKE type_file.num5,  
              part10  LIKE type_file.num5,  
              part11  LIKE type_file.num5,  
              part12  LIKE type_file.num5,  
              part13  LIKE type_file.num5,  
              part14  LIKE type_file.num5,  
              part15  LIKE type_file.num5,  
              part16  LIKE type_file.num5,  
              dbname  LIKE type_file.chr20)
       #END FUN-730016
    END IF
END FUNCTION
 
#start FUN-6A0052 add
FUNCTION p_zta_set_erpdb()
DEFINE l_dbs     LIKE type_file.chr50    #No.FUN-680135 VARCHAR(30)
DEFINE l_ch      base.Channel
 
################ for informix synonym ##############
    IF g_db_type="IFX" THEN
DISCONNECT ALL
#呼叫cl_ins_del_sid是要將執行程式時的sid_file資料刪除,但是p_zta並不是要執行ERP程式,所以不需要像一般程式新增sid_file.
DATABASE g_dbs
    END IF
####################################################
 
    CLOSE DATABASE
    DATABASE g_dbs
 
    IF g_db_type="IFX" THEN
       LET l_ch = base.Channel.create()
       CALL l_ch.openPipe("cat $INFORMIXDIR/etc/$ONCONFIG|grep DBSERVERALIASES|awk '{ print $2 }'","r")
       WHILE l_ch.read(g_tcp_servername)
             DISPLAY "tcp_servername:",g_tcp_servername
       END WHILE
       LET l_dbs=g_dbs CLIPPED,"@",g_tcp_servername CLIPPED
CONNECT TO l_dbs AS "MAIN"
       IF status THEN
          CALL l_ch.openPipe("cat $INFORMIXDIR/etc/$ONCONFIG|grep DBSERVERNAME|awk '{ print $2 }'","r")
          WHILE l_ch.read(g_tcp_servername)
                DISPLAY "tcp_servername:",g_tcp_servername
          END WHILE
          LET l_dbs=g_dbs CLIPPED,"@",g_tcp_servername CLIPPED
CONNECT TO l_dbs AS "MAIN"
       END IF
    END IF
END FUNCTION
#start FUN-6A0052 add
 
FUNCTION p_zta_set_win_title()
   DEFINE   lc_zo02     LIKE zo_file.zo02,
            lc_zx02     LIKE zx_file.zx02,
            lc_zz02     LIKE zz_file.zz02,
            ls_ze031    LIKE type_file.chr1000,  #No.FUN-680135 VARCHAR(100)
            ls_ze032    LIKE type_file.chr1000,  #No.FUN-680135 VARCHAR(100)
            ls_msg      STRING,
            lwin_curr   ui.Window,
            l_sql       STRING,
            l_ch        base.channel
 
 
   # 選擇  使用者名稱(zx_file.zx02)
   LET l_sql="SELECT zx02,zx08 FROM zx_file WHERE zx01='",
             g_user CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre1 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre1 INTO lc_zx02,g_plant
   IF (SQLCA.SQLCODE) THEN
      LET lc_zx02 = g_user
   END IF
   FREE p_zta_set_win_tit_pre1
 
   SELECT azw02 INTO g_legal FROM azw_file WHERE azw01=g_plant  #FUN-980014 add (抓出該營運中心所屬法人)
 
   LET l_ch=base.Channel.create()
   CALL l_ch.openPipe("cat $TEMPDIR/aoos901."||g_pid,"r")
   WHILE l_ch.read(g_plant)
   END WHILE
 
   LET l_sql="SELECT azp03 FROM azp_file WHERE azp01='",
             g_plant CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre2 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre2 INTO g_dbs
   IF (SQLCA.SQLCODE) THEN
      #CALL cl_err("azp_file get error", SQLCA.SQLCODE, 2)  #No.FUN-660081
      CALL cl_err3("sel","azp_file",g_plant,"",SQLCA.sqlcode,"","azp_file get error", 2)  #No.FUN-660081)   #No.FUN-660081
   END IF
   FREE p_zta_set_win_tit_pre2
 
   CLOSE DATABASE

   #呼叫cl_ins_del_sid是要將執行程式時的sid_file資料刪除,但是p_zta並不是要執行ERP程式,所以不需要像一般程式新增sid_file.
   DATABASE g_dbs
   IF (SQLCA.SQLCODE) THEN
      RETURN FALSE
   END IF
 
   # 選擇  程式名稱(gaz_file.gaz03)
   LET l_sql="SELECT gaz03 FROM gaz_file WHERE gaz01='",
             g_prog CLIPPED,"' AND gaz02='",g_lang CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre3 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre3 INTO lc_zz02
   FREE p_zta_set_win_tit_pre3
 
   # 選擇  公司對內全名(zo_file.zo02)
   LET l_sql="SELECT zo02 FROM zo_file WHERE zo01='",
             g_lang CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre4 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre4 INTO lc_zo02
   IF (SQLCA.SQLCODE) THEN
      LET lc_zo02 = "Empty"
   END IF
   FREE p_zta_set_win_tit_pre4
 
   LET l_sql="SELECT ze03 FROM ze_file WHERE ze01 = 'lib-035' AND ze02 = '",g_lang CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre5 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre5 INTO ls_ze031
   FREE p_zta_set_win_tit_pre5
   LET l_sql="SELECT ze03 FROM ze_file WHERE ze01 = 'lib-036' AND ze02 = '",g_lang CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre6 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre6 INTO ls_ze032
   FREE p_zta_set_win_tit_pre6
 
#  #FUN-850004
#  LET ls_msg = lc_zz02 CLIPPED || "(" || g_prog CLIPPED || ")  [" || lc_zo02 CLIPPED || "]" || "(" || g_dbs CLIPPED || ")"
#  LET ls_msg = ls_msg || "  " || ls_ze031 CLIPPED || ":" || g_today || "  " || ls_ze032 CLIPPED || ":" || lc_zx02 CLIPPED
   LET ls_msg = lc_zz02 CLIPPED, "(", g_prog CLIPPED, ")  [", lc_zo02 CLIPPED, "]", "(", g_dbs CLIPPED, ")"
   LET ls_msg = ls_msg, "  ", ls_ze031 CLIPPED, ":", g_today, "  ", ls_ze032 CLIPPED, ":", lc_zx02 CLIPPED
 
   LET lwin_curr = ui.Window.getCurrent()
   CALL lwin_curr.setText(ls_msg)
END FUNCTION
 
 
FUNCTION p_zta_tab_desc()
   DEFINE  l_sql     STRING
   DEFINE  l_i       LIKE type_file.num5      #No.FUN-680135 SMALLINT
 
   IF cl_null(g_zta.zta01) OR cl_null(g_zta.zta02) THEN
      CALL cl_err("",-400,0)
      RETURN
   END IF
 
--  對所有的語言別做insert
   FOR l_i=1 TO g_lang_arr.getLength()
      LET l_sql="INSERT INTO gat_file(gat01,gat02)",
                "VALUES('",g_zta.zta01 CLIPPED,"','",g_lang_arr[l_i],"')"
      EXECUTE IMMEDIATE l_sql
   END FOR
   LET g_cmd = "p_tabname ","'",g_zta.zta01 CLIPPED,"'"
   CALL cl_cmdrun_wait(g_cmd)
END FUNCTION
 
 
FUNCTION p_zta_fld_desc(p_ztb03)
   DEFINE l_length  LIKE type_file.num5,          #No.FUN-680135 SMALLINT
          l_i       LIKE type_file.num5,          #No.FUN-680135 SMALLINT
          l_j       LIKE type_file.num5,          #No.FUN-680135 SMALLINT
          p_ztb03   LIKE ztb_file.ztb03,
          l_sql     STRING
 
   IF cl_null(g_zta.zta01) OR cl_null(g_zta.zta02) THEN
      CALL cl_err("",-400,0)
      RETURN
   END IF
 
   IF p_ztb03 IS NOT NULL THEN
--      為了在欄位單身時壓controlp所做的處理
      FOR l_i=1 TO g_lang_arr.getLength()
          LET l_sql="INSERT INTO gaq_file(gaq01,gaq02,gaq06) ",   #No.FUN-660025
                    "VALUES('",p_ztb03 CLIPPED,"','",g_lang_arr[l_i],"','N')"   #No.FUN-660025
          EXECUTE IMMEDIATE l_sql
      END FOR
--      需考慮在_b時相關transaction的事
      COMMIT WORK
   ELSE
--      將單身陣列的值都insert到gaq,然後呼叫p_feldname進行維護
      FOR l_j=1 TO g_rec_b
         FOR l_i=1 TO g_lang_arr.getLength()
             LET l_sql="INSERT INTO gaq_file(gaq01,gaq02,gaq06) ",   #No.FUN-660025
                       "VALUES('",g_ztb[l_j].ztb03 CLIPPED,"','",
                                  g_lang_arr[l_i],"','N')"   #No.FUN-660025
             EXECUTE IMMEDIATE l_sql
         END FOR
      END FOR
   END IF
   LET l_length=LENGTH(g_zta.zta01)
   LET g_cmd = "p_feldname ","'%",g_zta.zta01[1,l_length-5],"%'"
   CALL cl_cmdrun_wait(g_cmd)
END FUNCTION
 
 
FUNCTION p_zta_a()
DEFINE l_sql      STRING
DEFINE l_str      STRING                       #FUN-7A0029
DEFINE l_cnt      LIKE type_file.num5          #No.FUN-A60050 
 
  IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
  MESSAGE ""
  CLEAR FORM                                   # 清螢墓欄位內容
  CALL g_ztb.clear()
  CALL g_ztc.clear()
  CALL g_ztd.clear()                           #No.FUN-730016
  INITIALIZE g_zta.* LIKE zta_file.*
  INITIALIZE g_zta_t.* TO NULL
  LET g_zta.zta05 = g_today
  LET g_zta.zta06 = g_user
  LET g_zta.zta07 = 'T'                      #TQC-710034
  LET g_zta.zta10 = 'N'
  LET g_zta.zta18 = 'N'                      #No.FUN-A60050
  LET g_zta_t.zta05 = g_today
  LET g_zta_t.zta06 = g_user
  CALL cl_opmsg("a")
  WHILE TRUE
     DISPLAY 'N' TO zta10
     IF cl_null(FGL_GETENV("TOPLINK")) THEN
        LET l_str = cl_getmsg("zta-036",g_lang)
        CALL cl_set_comments("zta01", l_str)
     END IF
     CALL p_zta_i("a")                        # 各欄位輸入
     IF INT_FLAG THEN                         # 若按了DEL鍵
        LET INT_FLAG = 0
        CALL cl_err("",9001,0)
        CLEAR FORM
        EXIT WHILE
     END IF
     IF g_zta.zta01 IS NULL THEN                # KEY 不可空白
        CONTINUE WHILE
     END IF
     BEGIN WORK
     LET g_zta.zta01=g_zta.zta01 CLIPPED
     LET g_zta.zta02=g_zta.zta02 CLIPPED
     LET g_zta.zta04=g_zta.zta04 CLIPPED
     LET g_zta.zta05=g_zta.zta05 CLIPPED
     LET g_zta.zta06=g_zta.zta06 CLIPPED
     LET g_zta.zta07=g_zta.zta07 CLIPPED
     LET g_zta.zta08=g_zta.zta08 CLIPPED
     LET g_zta.zta10=g_zta.zta10 CLIPPED
     LET g_zta.zta11=g_zta.zta11 CLIPPED
     LET g_zta.zta12=g_zta.zta12 CLIPPED
     LET g_zta.zta13=g_zta.zta13 CLIPPED
     LET g_zta.zta14=g_zta.zta14 CLIPPED
     LET g_zta.zta15=g_zta.zta15 CLIPPED
     LET g_zta.zta16=g_zta.zta16 CLIPPED
     LET g_zta.zta17=g_zta.zta17 CLIPPED
     LET g_zta.zta18=g_zta.zta18 CLIPPED        #No.FUN-A60050
     INSERT INTO zta_file VALUES(g_zta.*)       # DISK WRITE
     IF sqlca.sqlcode THEN
        LET g_err="insert zta data error(a):",g_zta.zta01
        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
        CALL cl_err3("ins","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
        ROLLBACK WORK
        CONTINUE WHILE
     ELSE
        #No.FUN-A60050 -- start --
        #當其他資料庫的 zta03, zta09, zta18 的資料與新建立的不相同時，則更改與目前相同
        SELECT COUNT(*) INTO l_cnt FROM zta_file 
         WHERE zta01=g_zta.zta01 AND (zta03 != g_zta.zta03 OR zta09 != g_zta.zta09 OR zta18 != g_zta.zta18 )
        IF l_cnt > 0 THEN 
           LET l_sql="UPDATE zta_file SET zta03='",g_zta.zta03 CLIPPED,"',",
                                         "zta09='",g_zta.zta09 CLIPPED,"',",
                                         "zta18='",g_zta.zta18 CLIPPED,"' ",   
                     " WHERE zta01='",g_zta.zta01 CLIPPED,"'"    
           EXECUTE IMMEDIATE l_sql
           IF sqlca.sqlcode THEN
              LET g_err="update zta error(u):"
              CALL cl_err3("upd","zta_file",g_zta_t.zta01,'',SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
              ROLLBACK WORK
              CONTINUE WHILE
           END IF
        END IF
        #No.FUN-A60050 -- end --
        COMMIT WORK
        LET g_zta_t.* = g_zta.*                # 保存上筆資料
        LET l_sql="SELECT zta01,zta02 FROM zta_file",
                  " WHERE zta01 = '",g_zta.zta01 CLIPPED,"'",
                  "   AND zta02 = '",g_zta.zta02 CLIPPED,"'"
        PREPARE p_zta_a_pre1 FROM l_sql
        EXECUTE p_zta_a_pre1 INTO g_zta.zta01,g_zta.zta02
        FREE p_zta_a_pre1
     END IF
     LET g_zta01_t = g_zta.zta01        #保留舊值
     LET g_zta_t.* = g_zta.*
     LET g_zta_o.* = g_zta.*
    #IF g_zta.zta07 != "S" THEN          #FUN-9C0036 mark
     IF g_zta.zta07 = "T" THEN          #FUN-9C0036
        LET g_rec_b=0
        LET g_rec_d=0
        LET g_rec_c=0                                             #FUN-730016
        CALL p_zta_b()                   #輸入單身
        CALL p_zta_d()                   #輸入索引單身
        CALL p_zta_c()                   #輸入Constraint單身      #FUN-730016
     END IF
     EXIT WHILE
   END WHILE
 
END FUNCTION
 
 
FUNCTION p_zta_w()
 
   IF cl_null(g_zta.zta01) OR cl_null(g_zta.zta02) THEN
      CALL cl_err("",-400,0)
      RETURN
   END IF
 
   LET g_cmd = "p_zs ","'",g_zta.zta01 CLIPPED,"' '",g_zta.zta02 CLIPPED,"'"
   CALL cl_cmdrun(g_cmd)
 
END FUNCTION
 
 
FUNCTION p_zta_y()
 
   IF cl_null(g_zta.zta01) OR cl_null(g_zta.zta02) THEN
      CALL cl_err("",-400,0)
      RETURN
   END IF
 
   LET g_cmd = "p_tabname ","'",g_zta.zta01 CLIPPED,"'"
   CALL cl_cmdrun(g_cmd)
 
END FUNCTION
 
 
FUNCTION p_zta_i(p_cmd)
   DEFINE p_cmd     LIKE type_file.chr1,        #No.FUN-680135 VARCHAR(1)
          l_flag    LIKE type_file.chr1,        #判斷必要欄位是否有輸入  #No.FUN-680135 VARCHAR(1) 
          l_n       LIKE type_file.num5,        #No.FUN-680135 SMALLINT
          l_sql     STRING,
          l_i       LIKE type_file.num5         #No.FUN-680135 SMALLINT
   DEFINE ls_str    STRING                      #No.FUN-7A0029
   DEFINE l_field   LIKE ztb_file.ztb03         #No.FUN-990043
   DEFINE l_azw09   LIKE azw_file.azw09         #No.FUN-9C0036
   DEFINE l_azw05   LIKE azw_file.azw05         #No.FUN-9C0036


   LET g_gat03=''
   LET g_gat04=''

   #No.FUN-A60050 -- start --
   #LET g_gat06=''
   #LET g_gat07=''
   #SELECT gat03,gat04,gat06,gat07 INTO g_gat03,g_gat04,g_gat06,g_gat07
   #  FROM gat_file
   # WHERE gat01=g_zta.zta01
   #   AND gat02=g_lang
   #LET g_gat07_t = g_gat07 CLIPPED                     #No.FUN-990043
   #LET g_gat06_t = g_gat06 CLIPPED                     #No.FUN-9C0036

   SELECT gat03,gat04 INTO g_gat03,g_gat04 FROM gat_file
    WHERE gat01=g_zta.zta01 AND gat02=g_lang

   #No.FUN-A60050 -- end --
 
   INPUT g_zta.zta01,{g_zta.zta02,}g_zta.zta03,g_zta.zta09,g_zta.zta07,g_zta.zta17,     #No.FUN-A60050
         g_zta.zta18,g_gat03,g_gat04,g_zta.zta11,g_zta.zta12,   #No.FUN-A60050
         g_zta.zta05,g_zta.zta06 WITHOUT DEFAULTS
    FROM zta01,{zta02,}zta03,zta09,zta07,zta17,zta18,gat03,gat04,zta11,zta12,   #No.FUN-A60050
         zta05,zta06 HELP 1
 
      BEFORE INPUT
         LET g_before_input_done = FALSE
         CALL p_zta_set_entry(p_cmd)
         CALL p_zta_set_no_entry(p_cmd)
         LET g_before_input_done = TRUE
      
 
      BEFORE FIELD zta01
         #No.FUN-7A0029 
         IF p_cmd="u" THEN
            NEXT FIELD zta03        #No.FUN-A60050
         ELSE
            IF cl_null(FGL_GETENV("TOPLINK")) AND cl_null(g_zta.zta01) THEN 
               LET g_zta.zta01 = "tc_"
            END IF
         END IF
         #END No.FUN-7A0029 
 
      AFTER FIELD zta01
         IF p_cmd = "a" OR                    # 若輸入或更改且改KEY
           (p_cmd = "u" AND g_zta.zta01 != g_zta_t.zta01) THEN
            LET l_sql="SELECT count(*) FROM zta_file",
                      " WHERE zta01 = '",g_zta.zta01 CLIPPED,"'",
                      "   AND zta02 = '",g_zta.zta02 CLIPPED,"'"
            PREPARE p_zta_i_pre1 FROM l_sql
            EXECUTE p_zta_i_pre1 INTO l_n
            FREE p_zta_i_pre1
            IF l_n > 0 THEN                  # Duplicated
               CALL cl_err(g_zta.zta01,-239,0)
               LET g_zta.zta01 = g_zta_t.zta01
               DISPLAY BY NAME g_zta.zta01 ATTRIBUTE(YELLOW)
               NEXT FIELD zta01
            ELSE
               #FUN-7A0029
               IF cl_null(FGL_GETENV("TOPLINK")) AND p_cmd ="a" THEN
                  IF g_zta.zta01[1,3] != 'tc_' THEN 
                     CALL cl_err(g_zta.zta01,"zta-036",0)
                     NEXT FIELD zta01
                  END IF
                  
                  #----------CHI-9C0041 modify start----------------------
                  LET ls_str = g_zta.zta01 CLIPPED

                  IF ls_str.getIndexOf("_file", 1) < 1 THEN
                     CALL cl_err(g_zta.zta01,"zta-036",0)
                     NEXT FIELD zta01
                  END IF
                  #----------CHI-9C0041 modify end------------------------
               END IF
               #END FUN-7A0029
               CALL p_zta_zta01('d')
               LET g_zta.zta02=g_dbs
               DISPLAY BY NAME g_zta.zta02 ATTRIBUTE(YELLOW)
            END IF
         END IF
 
      #FUN-9C0036 -- start --
      BEFORE FIELD zta03 #No.FUN-A60050
         IF p_cmd = "a" THEN
            #若有財務DB, 財務模組的 Table 必須 synonym 至財務 DB.
            IF g_financial_module.getIndexOf(g_zta.zta03 CLIPPED,1) > 0 THEN       #No.FUN-A60050
               SELECT unique azw09 INTO l_azw09 FROM azw_file WHERE azw05=g_dbs  #抓取法人DB
               IF l_azw09 <> g_dbs AND (l_azw09 <> g_zta.zta17 OR cl_null(g_zta.zta17)) 
               THEN
                  LET g_zta.zta07 = 'S'
                  LET g_zta.zta17 = l_azw09 CLIPPED
                  DISPLAY g_zta.zta07 TO zta07
                  DISPLAY g_zta.zta17 TO zta17
               END IF
            END IF
         END IF

      #AFTER FIELD gat06
      ON CHANGE zta03                          #No.FUN-A60050
         #FUN-9C0036 -- start --
         #IF g_zta.zta03 is not null THEN      #No.FUN-A60050
         IF p_cmd = "a" OR                  
           (p_cmd = "u" AND g_zta.zta03 != g_zta_t.zta03) THEN    #No.FUN-A60050
            #若有財務DB, 財務模組的 Table 必須 synonym 至財務 DB.
            IF g_financial_module.getIndexOf(g_zta.zta03 CLIPPED,1) > 0 THEN    #No.FUN-A60050
               IF cl_null(l_azw09) THEN
                  SELECT unique azw09 INTO l_azw09 FROM azw_file WHERE azw05=g_dbs  #抓取法人DB
               END IF
               #判斷是否有財務DB
               SELECT COUNT(*) INTO l_n FROM azw_file,zta_file  
                WHERE zta01=g_zta.zta01 AND zta02=azw05 AND azw05=azw06 AND azw05 <> azw09 
               IF  (p_cmd='a' OR l_n > 0 ) AND (l_azw09 <> g_zta.zta17 OR cl_null(g_zta.zta17)) 
               THEN
                  IF p_cmd = 'a' THEN
                     #非財務db需預設syonym 至財務db 
                     IF g_dbs <> l_azw09 THEN
                        LET g_zta.zta07 = 'S'
                        LET g_zta.zta17 = l_azw09 CLIPPED
                        DISPLAY g_zta.zta07 TO zta07
                        DISPLAY g_zta.zta17 TO zta17
                        CALL cl_err(g_zta.zta01 CLIPPED,"zta-047",0)
                     END IF
                  ELSE
                     CALL cl_err(g_zta.zta01 CLIPPED,"zta-047",1)
                     DISPLAY BY NAME g_zta.zta03          #No.FUN-A60050
                     NEXT FIELD zta03                     #No.FUN-A60050
                  END IF
               END IF
            END IF
            #移至 AFTER INPUT 處理
            #FOR l_i=1 TO g_lang_arr.getLength()
            #    INSERT INTO gat_file(gat01,gat02,gat06)
            #    VALUES(g_zta.zta01,g_lang_arr[l_i],g_gat06)
            #    #IF sqlca.sqlcode=-239 THEN              #TQC-790092
            #    IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  #TQC-790092
            #       UPDATE gat_file SET gat06=g_gat06
            #        WHERE gat01=g_zta.zta01
            #          AND gat02=g_lang_arr[l_i]
            #    END IF
            #END FOR
         END IF
--       IF p_cmd = "a" OR                    # 若輸入或更改且改KEY
--         (p_cmd = "u" AND g_zta.zta01 != g_zta_t.zta01) THEN
--          LET l_sql="SELECT count(*) FROM zta_file",
--                    " WHERE zta01 = '",g_zta.zta01 CLIPPED,"'",
--                    "   AND zta02 = '",g_zta.zta02 CLIPPED,"'"
--          PREPARE p_zta_i_pre2 FROM l_sql
--          EXECUTE p_zta_i_pre2 INTO l_n
--          FREE p_zta_i_pre2
--          IF l_n > 0 THEN                  # Duplicated
--             CALL cl_err(g_zta.zta01,-239,0)
--             LET g_zta.zta01 = g_zta_t.zta01
--             DISPLAY BY NAME g_zta.zta01 ATTRIBUTE(YELLOW)
--             NEXT FIELD zta01
--          END IF
--       END IF
      #FUN-9C0036 -- end --
 
 
      BEFORE FIELD zta07
         IF p_cmd="u" THEN
            NEXT FIELD zta09       #No.FUN-A60050
         END IF
         CALL p_zta_set_entry(p_cmd)
 
      AFTER FIELD zta07
         CALL p_zta_set_no_entry(p_cmd)
 
      #No.FUN-A60050 -- start --
      #BEFORE FIELD gat07
      #   IF g_zta.zta07="S" THEN
      #      IF cl_null(g_zta.zta17) THEN
#     #          NEXT FIELD zta17
      #      END IF
      #   END IF
      #No.FUN-A60050 -- end --
 
      #FUN-990043 -- start --
      ON CHANGE zta07 
         LET g_zta.zta17=''
         DISPLAY BY NAME g_zta.zta17
         #FUN-9C0036 -- start --
         IF g_zta.zta07 = 'V' THEN
            CALL cl_err('','zta-048',0)
            LET g_zta.zta07='T'
            DISPLAY BY NAME g_zta.zta07
            NEXT FIELD zta07 
         END IF
         #FUN-9C0036 -- end --
         #No.FUN-A60050 -- start --
         #若為"系統檔"，則必須一律synonym ds
         IF (g_zta.zta09 = "Z") AND g_zta.zta02 <> 'ds' AND g_zta.zta07 <> 'S' THEN
            CALL cl_err(g_zta.zta01 CLIPPED,"zta-050",0)
            LET g_zta.zta07='S'
            LET g_zta.zta17='ds'
            DISPLAY BY NAME g_zta.zta07
            DISPLAY BY NAME g_zta.zta17
            NEXT FIELD zta07
         END IF
         #No.FUN-A60050 -- end --

      #No.FUN-A60050 -- start --
      ON CHANGE zta09
         IF g_zta.zta10 = 'Y' THEN
            #View的模組清單, 類別屬於 T,S 需檢查是否有 plant 欄位
            IF (g_zta.zta09 MATCHES "[TS]") AND 
               (g_view_no_in.getIndexOf(g_zta.zta03 CLIPPED,1) = 0 )     #FUN-9C0036   #No.FUN-A60050
            THEN
 
               SELECT count(*) INTO l_n FROM azy_file 
                WHERE azy01=g_zta.zta02 AND azy02=g_zta.zta01
               IF l_n > 0 THEN
                  LET g_zta.zta09 = g_zta_t.zta09
                  DISPLAY BY NAME g_zta.zta09
                  CALL cl_err(g_zta.zta01,'zta-043','1')
                  NEXT FIELD zta09 
               END IF 
 
               LET ls_str = g_zta.zta01 CLIPPED
               LET l_field=ls_str.subString(1,ls_str.getIndexOf('_file',1)-1),"plant"
           
               IF g_zta.zta07 = 'S' THEN
                  CASE g_db_type
                   WHEN "ORA" 
                     SELECT COUNT(*) INTO l_n FROM all_tab_columns
                      WHERE lower(table_name) = g_zta.zta01 
                        AND lower(column_name) = l_field
                        AND lower(owner) = g_zta.zta17
                   WHEN "MSV"          #FUN-770027
                    LET l_sql=" SELECT COUNT(*)",
                                " FROM ",g_zta.zta17 CLIPPED,":sys.objects a,",
                                         g_zta.zta17 CLIPPED,":sys.columns b",
                               " WHERE a.name='",g_zta.zta01 CLIPPED,"'",
                                 " AND a.object_id=b.object_id ",
                                 " AND a.name='",l_field CLIPPED,"'"
                    PREPARE p_zta_cnt FROM l_sql
                    EXECUTE p_zta_cnt INTO l_n
                    FREE p_zta_cnt
                  END CASE
               ELSE     
                  CASE g_db_type                                     
                   WHEN "ORA"
                       SELECT COUNT(*) INTO l_n FROM user_tab_columns
                        WHERE lower(table_name) = g_zta.zta01 
                          AND lower(column_name) = l_field
                   WHEN "MSV"
                       SELECT COUNT(*) INTO l_n FROM sys.objects a,sys.columns b
                        WHERE a.name = g_zta.zta01 
                          AND a.object_id = b.object_id
                          AND b.name = l_field     #No.FUN-A80029
                  END CASE   
               END IF
               IF l_n = 0 THEN
                  LET g_zta.zta09 = g_zta_t.zta09
                  DISPLAY BY NAME g_zta.zta09
                  CALL cl_err(g_zta.zta01,'zta-042','1') #沒有 plant 欄位，不可修改檔案類別!
                  NEXT FIELD  zta09
               END IF
            END IF
         END IF
         #若為"系統檔"，則必須一律synonym ds
         IF (g_zta.zta09 = "Z") THEN
            IF p_cmd = "a" OR                  
              (p_cmd = "u" AND g_zta.zta03 != g_zta_t.zta03) THEN    #No.FUN-A60050
               IF p_cmd = 'a' THEN
                  #非 ds 資料庫, 需預設syonym 至 ds
                  IF g_dbs = 'ds' THEN
                     LET g_zta.zta07 = 'T'
                     LET g_zta.zta17 = ''
                     DISPLAY g_zta.zta07 TO zta07
                     DISPLAY g_zta.zta17 TO zta17
                  ELSE
                     LET g_zta.zta07 = 'S'
                     LET g_zta.zta17 = 'ds'
                     DISPLAY g_zta.zta07 TO zta07
                     DISPLAY g_zta.zta17 TO zta17
                  END IF
               ELSE
                  IF g_dbs != 'ds' AND g_zta.zta07 != 'S' AND g_zta.zta17 != 'ds' THEN
                     CALL cl_err(g_zta.zta01 CLIPPED,"zta-050",1)
                     DISPLAY BY NAME g_zta.zta09    
                     NEXT FIELD zta09                 
                  END IF
               END IF
            END IF
         END IF
 
      #FUN-990043 -- end --
      #AFTER FIELD zta09
      #   IF g_zta.zta09 is not null THEN
      #      FOR l_i=1 TO g_lang_arr.getLength()
      #          INSERT INTO gat_file(gat01,gat02,gat07)
      #          VALUES(g_zta.zta01,g_lang_arr[l_i],g_zta.zta09)
      #          #IF sqlca.sqlcode=-239 THEN              #TQC-790092
      #          IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  #TQC-790092
      #             UPDATE gat_file SET gat07=g_zta.zta09
      #              WHERE gat01=g_zta.zta01
      #                AND gat02=g_lang_arr[l_i]
      #          END IF
      #      END FOR
      #   END IF
 
      #AFTER FIELD gat03
      #  IF g_gat03 is not null THEN
      #     FOR l_i=1 TO g_lang_arr.getLength()
      #         IF g_lang=g_lang_arr[l_i] THEN
      #            INSERT INTO gat_file(gat01,gat02,gat03)
      #            VALUES(g_zta.zta01,g_lang,g_gat03)
      #            #IF sqlca.sqlcode=-239 THEN               #TQC-790092
      #            IF cl_sql_dup_value(SQLCA.SQLCODE) THEN   #TQC-790092
      #               UPDATE gat_file SET gat03=g_gat03
      #                WHERE gat01=g_zta.zta01
      #                  AND gat02=g_lang
      #            END IF
      #         ELSE
      #            INSERT INTO gat_file(gat01,gat02)
      #            VALUES(g_zta.zta01,g_lang_arr[l_i])
      #         END IF
      #     END FOR
      #  END IF
 
 
      #AFTER FIELD gat04
      #  IF g_gat04 is not null THEN
      #     FOR l_i=1 TO g_lang_arr.getLength()
      #         IF g_lang=g_lang_arr[l_i] THEN
      #            INSERT INTO gat_file(gat01,gat02,gat04)
      #            VALUES(g_zta.zta01,g_lang,g_gat04)
      #            #IF sqlca.sqlcode=-239 THEN               #TQC-790092
      #            IF cl_sql_dup_value(SQLCA.SQLCODE) THEN   #TQC-790092
      #               UPDATE gat_file SET gat04=g_gat04
      #                WHERE gat01=g_zta.zta01
      #                  AND gat02=g_lang
      #            END IF
      #         ELSE
      #            INSERT INTO gat_file(gat01,gat02)
      #            VALUES(g_zta.zta01,g_lang_arr[l_i])
      #         END IF
      #     END FOR
      #  END IF
      #No.FUN-A60050 -- end --
 
 
      AFTER INPUT  #判斷必要欄位之值是否有值,若無則反白顯示,並要求重新輸入
          LET l_flag="N"
          IF INT_FLAG THEN
             EXIT INPUT
          END IF
          IF g_zta.zta01 IS NULL THEN
             LET l_flag="Y"
             DISPLAY BY NAME g_zta.zta01 ATTRIBUTE(REVERSE)
          END IF
          IF g_zta.zta06 IS NULL THEN
             LET l_flag="Y"
             DISPLAY BY NAME g_zta.zta06 ATTRIBUTE(REVERSE)
          END IF
          IF g_zta.zta03 IS NULL THEN
             LET l_flag="Y"                                    #No.FUN-A60050
             DISPLAY BY NAME g_zta.zta03 ATTRIBUTE(REVERSE)    #No.FUN-A60050
          END IF
          IF g_zta.zta02 IS NULL THEN
             LET l_flag="Y"
             DISPLAY BY NAME g_zta.zta02 ATTRIBUTE(REVERSE)
          END IF

          IF l_flag="Y" THEN
             CALL cl_err("","9033",0)
             NEXT FIELD zta01
          END IF

          #No.FUN-A60050 -- start --
          IF g_zta.zta07 = "S" AND cl_null(g_zta.zta17) THEN
             DISPLAY BY NAME g_zta.zta17 ATTRIBUTE(REVERSE)
             CALL cl_err("zta17","9033",0)
             NEXT FIELD zta17
          END IF

          #FUN-9C0036 -- start --
          #若有財務DB, 財務模組的 Table 必須 synonym 至財務 DB.
          IF g_financial_module.getIndexOf(g_zta.zta03 CLIPPED,1) > 0 THEN 
             #抓取法人DB
             SELECT unique azw09 INTO l_azw09 FROM azw_file WHERE azw05=g_dbs  

             #判斷是否有財務DB
             SELECT COUNT(*) INTO l_n FROM azw_file,zta_file  
              WHERE zta01=g_zta.zta01 AND zta02=azw05 AND azw05=azw06 AND azw05 <> azw09 
             IF (g_dbs<>l_azw09 AND (l_azw09 <> g_zta.zta17 OR cl_null(g_zta.zta17))) OR
                (l_n > 0 AND g_zta.zta03 != g_zta_t.zta03)  
             THEN
                #CALL cl_err_msg(g_zta.zta01 CLIPPED,"zta-047",l_azw09 CLIPPED, 1)
                CALL cl_err(g_zta.zta01 CLIPPED,"zta-047",1)
                IF p_cmd = 'u' AND g_zta.zta03 != g_zta_t.zta03 THEN 
                   LET g_zta.zta03 = g_zta_t.zta03
                   DISPLAY BY NAME g_zta.zta03
                   NEXT FIELD zta03
                ELSE
                   NEXT FIELD zta07
                END IF
             END IF
          END IF

          #No.FUN-A60050 -- start --
          #建立/或修改 gat_file 資料
          FOR l_i=1 TO g_lang_arr.getLength()
              INSERT INTO gat_file(gat01,gat02,gat03,gat04,gat06,gat07)
              VALUES(g_zta.zta01,g_lang_arr[l_i],g_gat03,g_gat04,g_zta.zta03,g_zta.zta09)
              #IF sqlca.sqlcode=-239 THEN              #TQC-790092
              IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  #TQC-790092
                 UPDATE gat_file SET gat03=g_gat03,
                                     gat04=g_gat04,
                                     gat06=g_zta.zta03,
                                     gat07=g_zta.zta09
                  WHERE gat01=g_zta.zta01 AND gat02=g_lang_arr[l_i]
              END IF
          END FOR
          DISPLAY BY NAME g_zta.zta03
          DISPLAY BY NAME g_zta.zta09
          DISPLAY g_gat03 TO gat03
          DISPLAY g_gat04 TO gat04
          #No.FUN-A60050 -- end --

          #修改類型後，必須重新建立 view 或synonym
          IF (g_zta.zta10='Y') AND (g_zta.zta09 <> g_zta_t.zta09 AND 
             ((g_zta.zta09 MATCHES "[TS]" AND g_zta_t.zta09 NOT MATCHES "[TS]") OR 
             (g_zta.zta09 NOT MATCHES "[TS]" AND g_zta_t.zta09 MATCHES "[TS]"))) AND 
             (g_view_no_in.getIndexOf(g_zta.zta03 CLIPPED,1) = 0 )     #FUN-9C0036
          THEN
             IF NOT cl_confirm('zta-049') THEN
                NEXT FIELD zta09
             END IF
          END IF

          #若為"系統檔"，則必須一律synonym ds
          IF g_dbs != 'ds' AND g_zta.zta07 != 'S' AND g_zta.zta17 != 'ds' THEN
             CALL cl_err(g_zta.zta01 CLIPPED,"zta-050",1)
             NEXT FIELD zta09                 
          END IF
          #No.FUN-A60050 -- end --
          #FUN-9C0036 -- end --
 
      ON KEY(CONTROL-O)                        # 沿用所有欄位
         IF INFIELD(zta01) THEN
            LET g_zta.* = g_zta_t.*
            #No.FUN-9A0024--begin 
           #DISPLAY BY NAME g_zta.* ATTRIBUTE(YELLOW)
            DISPLAY BY NAME g_zta.zta01,g_zta.zta07,g_zta.zta17,g_zta.zta10,
                            g_zta.zta05,g_zta.zta06,g_zta.zta02,g_zta.zta11,g_zta.zta12,
                            g_zta.zta18                    #No.FUN-A60050
            #No.FUN-9A0024--end
            NEXT FIELD zta01
         END IF
 
      ON ACTION CONTROLP
         CASE
            WHEN INFIELD(gat03)
               CALL p_zta_tab_desc()
               LET l_sql="SELECT gat03,gat04,gat06,gat07 FROM gat_file",
                         " WHERE gat01='",g_zta.zta01 CLIPPED,"'",
                         "   AND gat02='",g_lang CLIPPED,"'"
               PREPARE p_zta_i_pre3 FROM l_sql
               EXECUTE p_zta_i_pre3 INTO g_gat03,g_gat04,g_gat06,g_gat07
               FREE p_zta_i_pre3
               DISPLAY g_gat03 TO gat03
               DISPLAY g_gat04 TO gat04
              #DISPLAY g_gat06 TO gat06   #No.FUN-A60050
              #DISPLAY g_gat07 TO gat07   #No.FUN-A60050
            WHEN INFIELD(gat04)
               CALL p_zta_tab_desc()
               SELECT gat03,gat04,gat06,gat07
                 INTO g_gat03,g_gat04,g_gat06,g_gat07
                 FROM gat_file
                WHERE gat01=g_zta.zta01
                  AND gat02=g_lang
               DISPLAY g_gat03 TO gat03
               DISPLAY g_gat04 TO gat04
              #DISPLAY g_gat06 TO gat06  #No.FUN-A60050
              #DISPLAY g_gat07 TO gat07  #No.FUN-A60050
            OTHERWISE 
               EXIT CASE
         END CASE
 
      ON KEY(CONTROL-G)
         CALL cl_cmdask()
 
      ON KEY(F12)
         LET g_folder=2
         RETURN
 
      ON KEY(CONTROL-F)                        # 欄位說明
         CASE
            WHEN INFIELD(zta01)    CALL cl_fldhlp("zta01")
            WHEN INFIELD(zta05)    CALL cl_fldhlp("zta05")
            WHEN INFIELD(zta06)    CALL cl_fldhlp("zta06")
            WHEN INFIELD(zta07)    CALL cl_fldhlp("zta07")
            OTHERWISE              CALL cl_fldhlp("    ")
         END CASE
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
   END INPUT
 
END FUNCTION
 
 
FUNCTION p_zta_zta01(p_cmd)
DEFINE  p_cmd    LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
        l_sql    STRING
 
  LET g_gat03=''
  LET g_gat04=''
 #LET g_gat06=''    #No.FUN-A60050
 #LET g_gat07=''    #No.FUN-A60050
  LET g_errno=''
  LET l_sql="SELECT gat03,gat04,gat06,gat07 FROM gat_file",
            " WHERE gat01='",g_zta.zta01 CLIPPED,"'",
            "   AND gat02='",g_lang CLIPPED,"'"
  PREPARE p_zta_zta01_pre FROM l_sql
  EXECUTE p_zta_zta01_pre INTO g_gat03,g_gat04,g_gat06,g_gat07
  FREE p_zta_zta01_pre
#  CASE
#      WHEN sqlca.sqlcode=100   LET g_errno='aoo-070'
#                               LET l_gen02=NULL
#                               LET l_gen03=NULL
#                               LET l_gen04=NULL
#      WHEN l_genacti='N'       LET g_errno='9028'
#      OTHERWISE
#           LET g_errno=sqlca.sqlcode USING '------'
#  END CASE
  IF p_cmd='d' OR cl_null(g_errno)THEN
     DISPLAY g_gat03 TO FORMONLY.gat03
     DISPLAY g_gat04 TO FORMONLY.gat04
    #DISPLAY g_gat06 TO FORMONLY.gat06   #No.FUN-A60050
    #DISPLAY g_gat07 TO FORMONLY.gat07   #No.FUN-A60050
  END IF
END FUNCTION
 
 
 
FUNCTION p_zta_q(p_wc)
DEFINE p_wc   STRING
 
   LET g_row_count = 0
   LET g_curs_index = 0
   CALL cl_navigator_setting( g_curs_index, g_row_count )
   MESSAGE ""
   CALL cl_opmsg("q")
   DISPLAY "   " TO FORMONLY.cnt
   IF p_wc is not null THEN
      CALL p_zta_cs(p_wc)                          # 宣告 SCROLL CURSOR
   ELSE
      CALL p_zta_cs('')                          # 宣告 SCROLL CURSOR
   END IF
   IF INT_FLAG THEN
      LET INT_FLAG = 0
      CLEAR FORM
      RETURN
   END IF
 
   MESSAGE " SEARCHING ! "
 
   OPEN p_zta_count
   FETCH p_zta_count INTO g_row_count
   DISPLAY g_row_count TO FORMONLY.cnt
   CLOSE p_zta_count
 
   OPEN p_zta_cs
   IF sqlca.sqlcode THEN
      LET g_err="open zta scroll cursor error(q):",g_zta.zta01
      CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
      INITIALIZE g_zta.* TO NULL
   ELSE
      CALL p_zta_fetch("F")                  # 讀出TEMP第一筆並顯示
   END IF
 
END FUNCTION
 
FUNCTION p_zta_fetch(p_flag)
    DEFINE p_flag    LIKE type_file.chr1     #No.FUN-680135 VARCHAR(1)
 
    CASE p_flag
        WHEN "N" FETCH NEXT     p_zta_cs INTO  g_zta.zta01,
                                              g_zta.zta02
        WHEN "P" FETCH PREVIOUS p_zta_cs INTO  g_zta.zta01,
                                              g_zta.zta02
        WHEN "F" FETCH FIRST    p_zta_cs INTO  g_zta.zta01,
                                              g_zta.zta02
        WHEN "L" FETCH LAST     p_zta_cs INTO  g_zta.zta01,
                                              g_zta.zta02
        WHEN "/"
            IF (NOT mi_no_ask) THEN
               CALL cl_getmsg('fetch',g_lang) RETURNING g_msg
               LET INT_FLAG = 0  ######add for prompt mod
                  PROMPT g_msg CLIPPED || ': ' FOR g_jump   --改g_jump
                  ON IDLE g_idle_seconds
                     CALL cl_on_idle()
 
               END PROMPT
               IF INT_FLAG THEN
                   LET INT_FLAG = 0
                   EXIT CASE
               END IF
            END IF
            FETCH ABSOLUTE g_jump p_zta_cs INTO  g_zta.zta01,
                                                g_zta.zta02 --改g_jum
            LET mi_no_ask = FALSE
        WHEN "C"
            FETCH CURRENT p_zta_cs INTO  g_zta.zta01,
                                        g_zta.zta02
    END CASE
    IF SQLCA.sqlcode THEN
       CALL cl_err(g_zta.zta01,SQLCA.sqlcode,0)
       INITIALIZE g_zta.* TO NULL  #TQC-6B0105
       RETURN
    ELSE
       CASE p_flag
            WHEN 'F' LET g_curs_index = 1
            WHEN 'P' LET g_curs_index = g_curs_index - 1
            WHEN 'N' LET g_curs_index = g_curs_index + 1
            WHEN 'L' LET g_curs_index = g_row_count
            WHEN '/' LET g_curs_index = g_jump          --改g_jump
      END CASE
      CALL cl_navigator_setting(g_curs_index, g_row_count)
    END IF
 
    SELECT * INTO g_zta.* FROM zta_file            # 重讀DB,因TEMP有不被更新特性
       WHERE zta01=g_zta.zta01 AND zta02=g_zta.zta02
    IF sqlca.sqlcode THEN
       LET g_err="select zta data error(fetch):"
       #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
       CALL cl_err3("sel","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
       INITIALIZE g_zta.* TO NULL
       RETURN
    END IF
    CALL p_zta_show()                      # 重新顯示
END FUNCTION
 
 
FUNCTION p_zta_show()
 
   LET g_zta_t.* = g_zta.*
   #FUN-730016
   CASE g_db_type
    WHEN "IFX" 
      SELECT locklevel INTO g_lockmode FROM systables
       WHERE tabname=g_zta.zta01
   #WHEN "ORA" 
    OTHERWISE                   #No.FUN-A60022
      IF g_zta.zta07='T' THEN
         LET g_lockmode='R'
      ELSE
         LET g_lockmode=''
      END IF
   END CASE
   #END FUN-730016
 
   DISPLAY g_lockmode TO lockmode
   DISPLAY BY NAME g_zta.zta01,g_zta.zta07,g_zta.zta17,g_zta.zta10,g_zta.zta03,g_zta.zta09,
                   g_zta.zta05,g_zta.zta06,g_zta.zta02,g_zta.zta11,g_zta.zta12,g_zta.zta18 #No.FUN-A60050
   CALL p_zta_zta01('d')

   #FUN-A60050 -- start --
   #SELECT gat03,gat04,gat06,gat07 INTO g_gat03,g_gat04,g_gat06,g_gat07
   #  FROM gat_file
   # WHERE gat01=g_zta.zta01 AND gat02=g_lang
   #IF sqlca.sqlcode=100 THEN
   #   LET g_gat03=''
   #   LET g_gat04=''
   #   LET g_gat06=''
   #   LET g_gat07=''
   #END IF
   #DISPLAY g_gat03,g_gat04,g_gat06,g_gat07 TO gat03,gat04,gat06,gat07
   #FUN-A60050 -- end --

   #FUN-A60022 -- start --
   # 避免上筆資料的殘留
   CALL g_ztd_fk.clear()
   DISPLAY ARRAY g_ztd_fk TO s_ref.* ATTRIBUTE(COUNT=0,UNBUFFERED)
     BEFORE DISPLAY
       EXIT DISPLAY
   END DISPLAY
   #FUN-A60022 -- end --

   IF g_zta.zta10='Y' THEN
      CALL p_zta_bshow()
   ELSE
      # 避免CHECK到錯誤時上筆資料的殘留 begin
      CALL g_ztb.clear()
      CALL g_ztc.clear()
      CALL g_ztd.clear()                              #No.FUN-730016
      DISPLAY ARRAY g_ztb TO s_ztb.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
        BEFORE DISPLAY
          EXIT DISPLAY
      END DISPLAY
      DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
        BEFORE DISPLAY
          EXIT DISPLAY
      END DISPLAY
      #FUN-730016
      DISPLAY ARRAY g_ztd TO s_ztd.* ATTRIBUTE(COUNT=g_rec_c)
        BEFORE DISPLAY
          EXIT DISPLAY
      END DISPLAY
      #END FUN-730016
      # 避免CHECK到錯誤時上筆資料的殘留 end
 
      IF g_zta.zta07 = 'T' THEN            #FUN-9C0036
         CALL p_zta_b_fill()
         CALL p_zta_d_fill()
         CALL p_zta_c_fill()               #FUN-730011
      END IF
   END IF
 
END FUNCTION
 
 
FUNCTION p_zta_bshow()
DEFINE l_ztc04_t     LIKE ztc_file.ztc04,          #No.FUN-680135 VARCHAR(20)
       l_sql         STRING,
       l_cnt         LIKE type_file.num5,          #No.FUN-680135 SMALLINT
       i,j,k         LIKE type_file.num5,          #No.FUN-680135 SMALLINT 
       l_i           LIKE type_file.num5,          #No.FUN-680135 SMALLINT
       l_j           LIKE type_file.num5,          #No.FUN-680135 SMALLINT
       l_length      LIKE type_file.num5,          #No.FUN-680135 SMALLINT
       l_length1     LIKE type_file.chr20,         #No.FUN-680135 VARCHAR(10)
       l_scale       LIKE type_file.num5,          #No.FUN-680135 SMALLINT
       l_nullable    LIKE type_file.chr1,          #No.FUN-680135 VARCHAR(1)
       l_tmp         STRING,
       l_part   RECORD
                     part1  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part2  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part3  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part4  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part5  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part6  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part7  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part8  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part9  LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part10 LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part11 LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part12 LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part13 LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part14 LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part15 LIKE type_file.num5,   #No.FUN-680135 SMALLINT
                     part16 LIKE type_file.num5    #No.FUN-680135 SMALLINT
                END RECORD,
       l_part_arr    ARRAY[16] OF LIKE type_file.num5,     #No.FUN-680135 ARRAY[16] OF SMALLINT
       l_dbs         LIKE type_file.chr50                  #No.FUN-680135 VARCHAR(30)
#FUN-730016
DEFINE l_ztc03       LIKE ztc_file.ztc03,
       l_ztc05       LIKE ztc_file.ztc05,
       l_ztc06       LIKE ztc_file.ztc06                  
#END FUN-730016
DEFINE l_def_type    LIKE type_file.chr1                   #TQC-810014
DEFINE l_zta17       LIKE zta_file.zta17                   #FUN-9C0036
DEFINE l_zta17_o     LIKE zta_file.zta17                   #FUN-9C0036
DEFINE l_zta07       LIKE zta_file.zta07                   #FUN-9C0036
#No.FUN-A60022 -- start --
DEFINE l_precision   LIKE type_file.num5,
       l_str         STRING,
       l_start       SMALLINT,
       l_end         SMALLINT,
       l_cmd         VARCHAR(100),
       l_count       SMALLINT
#No.FUN-A60022 -- end --

    IF cl_null(g_zta.zta01) OR cl_null(g_zta.zta02) THEN
       CALL cl_err("",-400,0) RETURN
    END IF
 
    IF g_zta.zta07='S' THEN
       #FUN-9C0036 -- start --
       #取得正確synonym的資料庫,如 dsv1 synonym dsall, dsall synonym ds
       LET l_zta17_o = g_zta.zta17 CLIPPED
       LET l_dbs = g_zta.zta17 CLIPPED
       WHILE TRUE
          SELECT zta17 INTO l_zta17
            FROM zta_file WHERE zta01 = g_zta.zta01 AND zta02 = l_dbs
          IF NOT cl_null(l_zta17 CLIPPED) THEN
            LET l_dbs = l_zta17
            SELECT zta07 INTO l_zta07
              FROM zta_file WHERE zta01 = g_zta.zta01 AND zta02=l_zta17
            IF l_zta07 != 'S' OR cl_null(l_zta07) THEN
               EXIT WHILE
            END IF
            #FUN-A60050 -- start --
            #避免無窮迴圈
            IF l_zta07 = "S" AND l_dbs=l_zta17 THEN
               EXIT WHILE 
            END IF
            #FUN-A60050 -- end --
          ELSE
            EXIT WHILE
          END IF
       END WHILE
       LET g_zta.zta17=l_dbs CLIPPED         #g_zta.zta17 指定為實體DB
       #FUN-9C0036 -- end
--  synonym的做法
       #FUN-730016
       #IF g_db_type="IFX" THEN
       CASE g_db_type
         WHEN "IFX"  
            LET l_dbs=g_zta.zta17 CLIPPED,"@",g_tcp_servername CLIPPED

            CONNECT TO l_dbs AS "CLIENT"

            DECLARE p_zta_ifx_sysidx CURSOR FOR
            SELECT idxname,sysindexes.tabid,idxtype,part1,part2,part3,part4,part5,part6,
                   part7,part8,part9,part10,part11,part12,part13,part14,part15,
                   part16 FROM sysindexes,systables
             WHERE sysindexes.tabid=systables.tabid
               AND systables.tabname=g_zta.zta01
            LET l_j=1
            CALL g_sysidx.clear()
            FOREACH p_zta_ifx_sysidx INTO g_sysidx[l_j].*
               LET g_sysidx[l_j].dbname=g_zta.zta17
               LET l_j=l_j+1
            END FOREACH

            DISCONNECT "CLIENT"
            SET CONNECTION "MAIN"

            FOR l_i=1 TO l_j-1
                INSERT INTO tempidx VALUES(g_sysidx[l_i].*)
            END FOR
 
            LET l_sql=" SELECT DISTINCT idxname,idxtype,ztc05,part1,part2,part3,",
                      "        part4,part5,part6,part7,part8,part9,part10,",
                      "        part11,part12,part13,part14,part15,part16 ",
                      " FROM ",g_zta.zta17 CLIPPED,":systables a, ",
                              "tempidx c ",
                      "        LEFT OUTER JOIN ztc_file",
                      "    ON ztc02='",g_zta.zta17 CLIPPED,"'",
                      "   AND ztc03=idxname ",
                      " WHERE tabname='",g_zta.zta01 CLIPPED,"'",
                      "   AND a.tabid=c.tabid",
                      "   AND c.dbname='",g_zta.zta17 CLIPPED,"'",
                      "   AND c.idxname MATCHES \"[a-z]*\""          #FUN-730016
         WHEN "ORA"  
            LET l_sql="SELECT DISTINCT LOWER(index_name),uniqueness,ztc05",
                      "  FROM all_indexes LEFT OUTER JOIN ztc_file",
                      "    ON ztc02='",g_zta.zta17 CLIPPED,"'",
                      "   AND ztc03=LOWER(index_name) ",
                      " WHERE LOWER(table_name)='",g_zta.zta01 CLIPPED,"'",
                      "   AND LOWER(owner)='",g_zta.zta17 CLIPPED,"'"
         WHEN "MSV"  
            #No.FUN-A60022---start
            LET l_sql=" SELECT DISTINCT c.name,c.is_unique",
                      " FROM ",g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.objects a, ",g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.indexes c ",
                      " WHERE a.object_id=c.object_id ",
                      "   AND c.index_id !=0 ",
                      " AND a.name ='",g_zta.zta01 CLIPPED,"'"
            #No.FUN-A60022---end 
       END CASE     
       #FUN-730016
    ELSE
--  table的做法
       #FUN-730016 
       #IF g_db_type="IFX" THEN
       CASE g_db_type
        WHEN "IFX"
          LET l_sql="SELECT DISTINCT idxname,idxtype,ztc05,part1,part2,part3,",
                    "       part4,part5,part6,part7,part8,part9,part10,",
                    "       part11,part12,part13,part14,part15,part16 ",
                    "  FROM systables a, sysindexes c ",
                    "       LEFT OUTER JOIN ztc_file",
                    "    ON ztc02='",g_dbs CLIPPED,"'",
                    "   AND ztc03=idxname ",
                    " WHERE tabname='",g_zta.zta01 CLIPPED,"'",
                    "   AND a.tabid=c.tabid",
                    "   AND c.idxname MATCHES \"[a-z]*\""          #FUN-730016
        WHEN "ORA"
          LET l_sql="SELECT DISTINCT lower(index_name),uniqueness,ztc05",
                    "  FROM user_indexes LEFT OUTER JOIN ztc_file ",
                    "    ON ztc02='",g_dbs CLIPPED,"'",
                    "   AND ztc03=lower(index_name) ",
                    " WHERE lower(table_name)='",g_zta.zta01 CLIPPED,"'",
		    "   AND lower(index_name) not like 'sys_%'"    #FUN-C60043
        WHEN "MSV"          #FUN-770027
          #No.FUN-A60022---start
          #LET l_sql=" SELECT DISTINCT idxname,idxtype,ztc05,part1,part2,part3,",
          #                 " part4,part5,part6,part7,part8,part9,part10,",
          #                 " part11,part12,part13,part14,part15,part16 ",
          #            " FROM sys.objects a, sys.indexes c ",
          #            " LEFT OUTER JOIN ztc_file ",
          #              " ON ztc02='",g_dbs CLIPPED,"' ",
          #             " AND ztc03= c.name ",
          #           " WHERE a.name='",g_zta.zta01 CLIPPED,"' ",
          #             " AND a.object_id=c.object_id ",
          #             " AND c.name MATCHES \"[a-z]*\" AND c.type_desc <>'HEAP' "
          LET l_sql=" SELECT DISTINCT c.name,c.is_unique",
                    " FROM sys.objects a, sys.indexes c ",
                    " WHERE a.object_id=c.object_id ",
                    "   AND c.index_id !=0 ", 
                    "   AND (c.name not in(select b.CONSTRAINT_NAME from INFORMATION_SCHEMA.TABLE_CONSTRAINTS b where b.TABLE_NAME='",g_zta.zta01 CLIPPED,"') ) ",
                    " AND a.name ='",g_zta.zta01 CLIPPED,"'"
          #No.FUN-A60022---end
       END CASE
       #END FUN-730016
    END IF
 
    DECLARE p_ztc_cs CURSOR FROM l_sql
    IF sqlca.sqlcode THEN
       LET g_err="declare p_ztc_cs error(bshow):"
       CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
       RETURN
    END IF
 
    CALL g_ztc.clear()
    LET l_cnt=1
 
    FOREACH p_ztc_cs INTO l_ztc03,l_ztc06,l_ztc05,l_part.*        #FUN-730016
       IF sqlca.sqlcode THEN
          LET g_err="foreach ztc data error(bshow)"
          CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
          EXIT FOREACH
       END IF 
       #FUN-730016                  
       IF g_db_type="ORA" AND l_ztc03 NOT MATCHES "[a-z]*" THEN
          CONTINUE FOREACH 
       END IF
       LET g_ztc[l_cnt].ztc03 = l_ztc03
       LET g_ztc[l_cnt].ztc06 = l_ztc06
       LET g_ztc[l_cnt].ztc05 = l_ztc05
       
       #END FUN-730016                  
 
       LET l_part_arr[1]=l_part.part1
       LET l_part_arr[2]=l_part.part2
       LET l_part_arr[3]=l_part.part3
       LET l_part_arr[4]=l_part.part4
       LET l_part_arr[5]=l_part.part5
       LET l_part_arr[6]=l_part.part6
       LET l_part_arr[7]=l_part.part7
       LET l_part_arr[8]=l_part.part8
       LET l_part_arr[9]=l_part.part9
       LET l_part_arr[10]=l_part.part10
       LET l_part_arr[11]=l_part.part11
       LET l_part_arr[12]=l_part.part12
       LET l_part_arr[13]=l_part.part13
       LET l_part_arr[14]=l_part.part14
       LET l_part_arr[15]=l_part.part15
       LET l_part_arr[16]=l_part.part16
 
       #No.FUN-7A0029
       IF cl_null(FGL_GETENV("TOPLINK")) THEN 
          LET g_ztc[l_cnt].ztc05 = ""
          SELECT zte04 INTO g_ztc[l_cnt].ztc05 FROM zte_file
          WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
            AND zte03 = g_ztc[l_cnt].ztc03
          IF cl_null(g_ztc[l_cnt].ztc05) THEN
             IF g_ztc[l_cnt].ztc03[1,4] = "tic_" THEN
                 LET g_ztc[l_cnt].ztc05='c'
             END IF
          END IF
       END IF
       #END No.FUN-7A0029
 
       IF g_ztc[l_cnt].ztc05 IS NULL THEN
          LET g_ztc[l_cnt].ztc05='p'
       END IF
 
       IF g_zta.zta07='S' THEN
          #FUN-730016
          #IF g_db_type="IFX" THEN
          CASE g_db_type
           WHEN "IFX" 
             LET l_sql="SELECT colname ",
                       "  FROM ",g_zta.zta17 CLIPPED,":systables a,",
                                 g_zta.zta17 CLIPPED,":syscolumns b",
                       " WHERE tabname='",g_zta.zta01 CLIPPED,"'",
                       "   AND a.tabid=b.tabid ",
                       "   AND colno = ?"
           WHEN "ORA" 
             LET l_sql="select lower(column_name)",
                       "  from all_indexes a,all_ind_columns b",
                       " where lower(a.table_name)='",g_zta.zta01 CLIPPED,"'",
                       "   and lower(a.index_name)='",g_ztc[l_cnt].ztc03 CLIPPED,"'",
                       "   and a.index_name=b.index_name",
                       "   and lower(a.owner)='",g_zta.zta17 CLIPPED,"'",
                       "   and lower(b.index_owner)='",g_zta.zta17 CLIPPED,"'",
                       "   and a.owner=b.index_owner",
                       " order by column_position"
           WHEN "MSV"          #FUN-770027
             #No.FUN-A60022---start
             #LET l_sql=" SELECT b.name ",
             #            " FROM ",g_zta.zta17 CLIPPED,":sys.objects a,",
             #                     g_zta.zta17 CLIPPED,":sys.columns b",
             #           " WHERE a.name='",g_zta.zta01 CLIPPED,"'",
             #             " AND a.object_id=b.object_id ",
             #             " AND column_id = ? "         
             LET l_sql=" SELECT d.name ",
                       "FROM ",g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.objects a ,",
                        g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.indexes b,",
                        g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.index_columns c,",
                        g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.columns d ",
                       " WHERE a.object_id=b.object_id ",
                       " AND b.object_id=c.object_id ",
                       " AND c.object_id =d.object_id ",
                       " AND b.index_id=c.index_id ",
                       " AND c.column_id=d.column_id ",
                       " AND a.name ='",g_zta.zta01 CLIPPED,"'",
                       " AND b.name ='",g_ztc[l_cnt].ztc03 CLIPPED,"'"
             #No.FUN-A60022---end
          END CASE
          #END FUN-730016
       ELSE
          #FUN-730016
          #IF g_db_type="IFX" THEN
          CASE g_db_type
           WHEN "IFX" 
             LET l_sql="SELECT colname FROM systables,syscolumns ",
                       " WHERE tabname='",g_zta.zta01 CLIPPED,"'",
                       "   AND systables.tabid=syscolumns.tabid ",
                       " AND colno = ?"
           WHEN "ORA" 
             LET l_sql="select lower(column_name)",
                       "  from user_indexes a,user_ind_columns b",
                       " where lower(a.table_name)='",g_zta.zta01 CLIPPED,"'",
                       "   and lower(a.index_name)='",g_ztc[l_cnt].ztc03 CLIPPED,"'",
                       "   and a.index_name=b.index_name",
                       " order by column_position"
           WHEN "MSV"          #FUN-770027
             #No.FUN-A60022---start
             #LET l_sql=" SELECT b.name FROM sys.objects a,sys.columns b ",
             #           " WHERE a.name='",g_zta.zta01 CLIPPED,"'",
             #             " AND a.object_id=b.object_id ",
             #             " AND column_id = ? "   
             LET l_sql=" SELECT d.name FROM sys.objects a ,sys.indexes b,sys.index_columns c,sys.columns d ",
                       " WHERE a.object_id=b.object_id ",
                       " AND b.object_id=c.object_id ",
                       " AND c.object_id =d.object_id ",
                       " AND b.index_id=c.index_id ",
                       " AND c.column_id=d.column_id ",
                       " AND a.name ='",g_zta.zta01 CLIPPED,"'",
                       " AND b.name ='",g_ztc[l_cnt].ztc03 CLIPPED,"'"
             #No.FUN-A60022---end
          END CASE
          #END FUN-730016
       END IF
       DECLARE p_ztc_cs2 CURSOR FROM l_sql
       LET g_ztc[l_cnt].ztc04=''
       #FUN-730016
       #IF g_db_type="IFX" THEN
       CASE g_db_type
        WHEN "IFX" 
           FOR l_i=1 TO 16
               IF l_part_arr[l_i] IS NULL THEN EXIT FOR END IF
               FOREACH p_ztc_cs2 USING l_part_arr[l_i] INTO l_ztc04_t
                  IF sqlca.sqlcode THEN
                     LET g_err="foreach sysindexes error(bshow)"
                     CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                     EXIT FOREACH
                  END IF
                  IF g_ztc[l_cnt].ztc04 IS NULL THEN
                     LET g_ztc[l_cnt].ztc04=l_ztc04_t CLIPPED
                  ELSE
                     LET g_ztc[l_cnt].ztc04=g_ztc[l_cnt].ztc04 CLIPPED,",",
                                            l_ztc04_t CLIPPED
                  END IF
               END FOREACH
           END FOR
 
        WHEN "ORA" 
           FOREACH p_ztc_cs2 INTO l_ztc04_t
              IF sqlca.sqlcode THEN
                 LET g_err="foreach sysindexes error(bshow)"
                 CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                 EXIT FOREACH
              END IF
              IF g_ztc[l_cnt].ztc04 IS NULL THEN
                 LET g_ztc[l_cnt].ztc04=l_ztc04_t CLIPPED
              ELSE
                 LET g_ztc[l_cnt].ztc04=g_ztc[l_cnt].ztc04 CLIPPED,",",
                                        l_ztc04_t CLIPPED
              END IF
           END FOREACH
 
        WHEN "MSV" 
           #No.FUN-A60022---start
           FOREACH p_ztc_cs2 INTO l_ztc04_t
              IF sqlca.sqlcode THEN
                 LET g_err="foreach sysindexes error(bshow)"
                 CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                 EXIT FOREACH
              END IF
              IF g_ztc[l_cnt].ztc04 IS NULL THEN
                 LET g_ztc[l_cnt].ztc04=l_ztc04_t CLIPPED
              ELSE
                 LET g_ztc[l_cnt].ztc04=g_ztc[l_cnt].ztc04 CLIPPED,",",
                                        l_ztc04_t CLIPPED
              END IF
           END FOREACH
           #No.FUN-A60022---end 
       END CASE
       #END FUN-730016

       #No.FUN-A60022 -- start --
       CASE g_db_type 
         WHEN "MSV"
           IF g_ztc[l_cnt].ztc06="1" THEN
              LET g_ztc[l_cnt].ztc06="Y"
           ELSE
              LET g_ztc[l_cnt].ztc06="N"
           END IF
         OTHERWISE 
            IF g_ztc[l_cnt].ztc06="U" THEN
               LET g_ztc[l_cnt].ztc06="Y"
            ELSE
               LET g_ztc[l_cnt].ztc06="N"
            END IF
       END CASE
       #No.FUN-A60022 -- end --

       LET l_cnt=l_cnt+1
    END FOREACH
    LET g_rec_d=l_cnt-1
    CALL g_ztc.deleteElement(l_cnt)
 
    IF g_zta.zta07 = 'S' OR (g_zta.zta07 = 'V' AND NOT cl_null(g_zta.zta17)) THEN    #FUN-A60022
       #FUN-730016
       #IF g_db_type="IFX" THEN
       CASE g_db_type
        WHEN "IFX"
          LET l_sql="SELECT colname,coltype,collength,default,ztb05,gaq03,gaq05,b.colno,'',c.type", #TQC-810014
                    "  FROM ",g_zta.zta17 CLIPPED,":systables a,",
                              g_zta.zta17 CLIPPED,":syscolumns b,OUTER ",
                              g_zta.zta17 CLIPPED,":sysdefaults c,",
                    "       OUTER gaq_file,OUTER ztb_file",
                    " WHERE tabname='",g_zta.zta01 CLIPPED,"'",
                    "   AND a.tabid=b.tabid",
                    "   AND ztb02='",g_zta.zta17 CLIPPED,"'",
                    "   AND b.tabid=c.tabid",
                    "   AND b.colno=c.colno",
                    "   AND colname=ztb03 ",
                    "   AND colname=gaq01 ",
                    "   AND gaq02='",g_lang CLIPPED,"' ",
                    " ORDER BY b.colno"
 
        WHEN "ORA"
          #FUN-9A0064 -- start --
          LET l_sql="SELECT lower(column_name),lower(data_type),",
                    "       to_char(decode(data_precision,null,data_length,data_precision),'9999.99'),",
                    "       data_default,ztb05,gaq03,gaq05,data_scale,nullable ",        
                    "  FROM (all_tab_columns LEFT OUTER JOIN gaq_file ",
                    "    ON lower(all_tab_columns.column_name)=gaq_file.gaq01",
                    "   AND gaq_file.gaq02='",g_lang CLIPPED,"') LEFT OUTER JOIN ztb_file ",
                    "    ON lower(all_tab_columns.column_name)=ztb03 ",
                    "   AND ztb_file.ztb02='",g_zta.zta17 CLIPPED,"'",
                    " WHERE lower(table_name)='",g_zta.zta01,"'",
                    "   AND lower(owner)='",g_zta.zta17 CLIPPED,"'",
                    " ORDER BY column_id"
          #FUN-9A0064 -- end --
 
        WHEN "MSV"           #FUN-770027
          #No.FUN-A60022---start
          # LET l_sql=" SELECT b.name,b.system_type_id,b.max_length,default,ztb05,gaq03,gaq05,b.column_id ",
          #             " FROM ",g_zta.zta17 CLIPPED,":sys.objects a,",
          #                      g_zta.zta17 CLIPPED,":sys.columns b,OUTER ",
          #                      g_zta.zta17 CLIPPED,":sysdefaults c,",
          #                    " OUTER gaq_file,OUTER ztb_file",
          #            " WHERE a.name='",g_zta.zta01 CLIPPED,"'",
          #              " AND a.object_id=b.object_id",
          #              " AND ztb02='",g_zta.zta17 CLIPPED,"'",
          #              " AND b.object_id=c.tabid ",
          #              " AND b.column_id=c.colno ",
          #              " AND b.name=ztb03 ",
          #              " AND b.name=gaq01 ",
          #              " AND gaq02='",g_lang CLIPPED,"' ",
          #            " ORDER BY b.column_id"      
          LET l_sql=" SELECT b.name,c.name,b.max_length,cast(g.definition as varchar(100)),e.ztb05,gaq03,gaq05,",
                    "        b.scale,b.is_nullable,'',b.precision ", 
                    " FROM ",g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.objects a ",
                    " LEFT OUTER JOIN ",g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.columns b ON a.object_id=b.object_id",
                    " LEFT OUTER JOIN ",g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.types c ON b.user_type_id=c.user_type_id",
                    " LEFT OUTER JOIN gaq_file d ON b.name=d.gaq01 AND d.gaq02='",g_lang CLIPPED,"' ",
                    " LEFT OUTER JOIN ztb_file e ON d.gaq01=e.ztb03",
                    " LEFT OUTER JOIN ztb_file f ON f.ztb03=e.ztb03 AND f.ztb01=e.ztb01 AND f.ztb02='",g_dbs CLIPPED,"'",
                    " LEFT OUTER JOIN ",g_mssqlarea CLIPPED,"_",g_zta.zta17 CLIPPED,".sys.default_constraints g ON g.object_id=b.default_object_id",
                    " WHERE a.name='",g_zta.zta01 CLIPPED,"'",                       
                    " ORDER BY b.name "
          #No.FUN-A60022---end
       END CASE
       #END FUN-730016
    ELSE
       #FUN-730016
       #IF g_db_type="IFX" THEN
       CASE g_db_type
        WHEN "IFX" 
          LET l_sql="SELECT colname,coltype,collength,default,ztb05,gaq03,gaq05,b.colno,'',c.type ",  #TQC-810014
                    "  FROM systables a,syscolumns b,OUTER sysdefaults c,",
                            " OUTER gaq_file,OUTER ztb_file",
                    " WHERE tabname='",g_zta.zta01 CLIPPED,"'",
                    "   AND a.tabid=b.tabid",
                    "   AND ztb02='",g_dbs CLIPPED,"'",
                    "   AND b.tabid=c.tabid",
                    "   AND b.colno=c.colno",
                    "   AND colname=ztb03 ",
                    "   AND colname=gaq01 ",
                    "   AND gaq02='",g_lang CLIPPED,"' ",
                    " ORDER BY b.colno"
 
        WHEN "ORA" 
          #FUN-9A0064 -- start --
          LET l_sql="SELECT lower(column_name),lower(data_type),",
                    "       to_char(decode(data_precision,null,data_length,data_precision),'9999.99'),",
                    "       data_default,ztb05,gaq03,gaq05,data_scale,nullable", 
                    "  FROM (user_tab_columns LEFT OUTER JOIN gaq_file",
                    "    ON lower(user_tab_columns.column_name)=gaq_file.gaq01 ",
                    "   AND gaq_file.gaq02='",g_lang CLIPPED,"') LEFT OUTER JOIN ztb_file ",
                    "    ON ztb_file.ztb02='",g_dbs CLIPPED,"'",
                    "   AND lower(user_tab_columns.column_name)=ztb_file.ztb03",
                    " WHERE lower(table_name)='",g_zta.zta01 CLIPPED,"'",
                    " ORDER BY column_id"
          #FUN-9A0064 -- end --
        WHEN "MSV"          #FUN-770027
          #No.FUN-A60022---start
          #LET l_sql=" SELECT b.name,b.system_type_id,b.max_length,default,ztb05,gaq03,gaq05,b.colno", 
          #            " FROM sys.objects a,sys.columns b,OUTER sysdefaults c,",
          #                   " OUTER gaq_file,OUTER ztb_file",
          #           " WHERE a.name='",g_zta.zta01 CLIPPED,"'",
          #             " AND a.object_id=b.object_id",
          #             " AND ztb02='",g_dbs CLIPPED,"'",
          #             " AND b.object_id=c.object_id",
          #             " AND b.column_id=c.column_id",
          #             " AND b.name=ztb03 ",
          #             " AND b.name=gaq01 ",
          #             " AND gaq02='",g_lang CLIPPED,"' ",
          #           " ORDER BY b.column_id " 
          
          LET l_sql=" SELECT b.name,c.name,b.max_length,cast(g.definition as varchar(100)),e.ztb05,gaq03,gaq05,",
                    "        b.scale,b.is_nullable,'',b.precision ", 
                    " FROM sys.objects a ",
                    " LEFT OUTER JOIN sys.columns b ON a.object_id=b.object_id",
                    " LEFT OUTER JOIN sys.types c ON b.user_type_id=c.user_type_id",
                    " LEFT OUTER JOIN gaq_file d ON b.name=d.gaq01 AND d.gaq02='",g_lang CLIPPED,"' ",
                    " LEFT OUTER JOIN ztb_file e ON d.gaq01=e.ztb03",
                    " LEFT OUTER JOIN ztb_file f ON f.ztb03=e.ztb03 AND f.ztb01=e.ztb01 AND f.ztb02='",g_dbs CLIPPED,"'",
                    " LEFT OUTER JOIN sys.default_constraints g ON g.object_id=b.default_object_id",
                    " WHERE a.name='",g_zta.zta01 CLIPPED,"'",                       
                    " ORDER BY b.name "
          #No.FUN-A60022---end
       END CASE
       #END FUN-730016
    END IF
 
    DECLARE p_zt2_cs CURSOR FROM l_sql
    CALL g_ztb.clear()
    LET l_cnt=1
    FOREACH p_zt2_cs INTO g_ztb[l_cnt].ztb03,g_ztb[l_cnt].ztb04,
                          l_length,g_ztb[l_cnt].ztb11,g_ztb[l_cnt].ztb05,g_ztb[l_cnt].gaq03,
                          g_ztb[l_cnt].gaq05,l_scale,l_nullable,l_def_type,l_precision        #TQC-810014 #No.FUN-A60022
      IF sqlca.sqlcode THEN
         LET g_err="foreach ztb data error(bshow)"
         CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1) EXIT FOREACH
      END IF
 
############# 為了去除'符號  #############
      #No.TQC-860023  -- start --
      IF g_db_type="ORA" THEN
         LET l_tmp=g_ztb[l_cnt].ztb11
         IF l_tmp.subString(1,1)="'" AND l_tmp != "' '" THEN  
            LET g_ztb[l_cnt].ztb11=l_tmp.subString(2,l_tmp.getIndexOF("'",2)-1)
         ELSE
            LET g_ztb[l_cnt].ztb11=l_tmp.trim()
         END IF
      ELSE
         #若預設值為' '(單一空白時),應顯示 ' '
         IF g_ztb[l_cnt].ztb11 IS NOT NULL AND cl_null(g_ztb[l_cnt].ztb11) THEN
            LET g_ztb[l_cnt].ztb11 = "' '"     
         END IF
      END IF
      #No.TQC-860023  -- end --
 
      #No.FUN-7A0029
      SELECT zte04 INTO g_ztb[l_cnt].ztb05 FROM zte_file
      WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
        AND zte03 = g_ztb[l_cnt].ztb03
      IF cl_null(g_ztb[l_cnt].ztb05) THEN
         IF g_ztb[l_cnt].ztb03[1,3]='tc_' OR g_ztb[l_cnt].ztb03[1,3]='ta_' OR
            g_zta.zta01[1,3]='tc_'
         THEN
            LET g_ztb[l_cnt].ztb05='c'
         ELSE
            LET g_ztb[l_cnt].ztb05='p'
         END IF
      END IF
      #END No.FUN-7A0029
#      IF g_ztb[l_cnt].ztb05 IS NULL THEN
#         LET g_ztb[l_cnt].ztb05='p'
#     END IF
      #IF g_db_type="IFX" THEN
      CASE g_db_type                                        #FUN-730016
       WHEN "IFX"                                           #FUN-730016
         LET g_ztb[l_cnt].ztb09 = "N"
         CASE WHEN g_ztb[l_cnt].ztb04 = 0
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb04 = "char"
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
              WHEN g_ztb[l_cnt].ztb04 = 1 LET g_ztb[l_cnt].ztb04 = "smallint"
              WHEN g_ztb[l_cnt].ztb04 = 2 LET g_ztb[l_cnt].ztb04 = "integer"
              WHEN g_ztb[l_cnt].ztb04 = 5
                   LET l_length1=l_length/256
                   LET l_length=l_length mod 256 CLIPPED
                   IF l_length1<l_length THEN
                      FOR i=1 TO 10
                          IF l_length1[i,i]="." THEN
                             LET g_ztb[l_cnt].ztb04=l_length1[1,i-1] CLIPPED
                             EXIT FOR
                          END IF
                      END FOR
                   ELSE
                      FOR i=1 TO 10
                          IF l_length1[i,i]="." THEN
                             LET g_ztb[l_cnt].ztb04=l_length1[1,i-1] CLIPPED,","
                             EXIT FOR
                          END IF
                      END FOR
                      LET l_length1=l_length CLIPPED
                      LET g_ztb[l_cnt].ztb04 = g_ztb[l_cnt].ztb04 CLIPPED,
                                               l_length1 CLIPPED
                   END IF
                   LET g_ztb[l_cnt].ztb08 = g_ztb[l_cnt].ztb04 CLIPPED
                   LET g_ztb[l_cnt].ztb04 = "decimal"
              WHEN g_ztb[l_cnt].ztb04 = 7 
                   LET g_ztb[l_cnt].ztb04 = "date"
                   #TQC-810014
                   IF l_def_type = 'T' THEN
                      LET g_ztb[l_cnt].ztb11 = 'today'
                   END IF
                   #END TQC-810014
              WHEN g_ztb[l_cnt].ztb04 = 10 
                   LET g_ztb[l_cnt].ztb04 = "datetime"
                   LET g_ztb[l_cnt].ztb06=l_length mod 514
                   CASE
                      WHEN g_ztb[l_cnt].ztb06=510
                           LET g_ztb[l_cnt].ztb06="year"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="year"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="month"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="day"
                              WHEN l_length1=4
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=5
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=6
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=32
                           LET g_ztb[l_cnt].ztb06="month"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="month"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="day"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=4
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=5
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=66
                           LET g_ztb[l_cnt].ztb06="day"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="day"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=4
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=100
                           LET g_ztb[l_cnt].ztb06="hour"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=134
                           LET g_ztb[l_cnt].ztb06="minute"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=168
                           LET g_ztb[l_cnt].ztb06="second"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                   END CASE
              WHEN g_ztb[l_cnt].ztb04 = 11 LET g_ztb[l_cnt].ztb04 = "byte"
              WHEN g_ztb[l_cnt].ztb04 = 13
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb04 = "varchar"
              WHEN g_ztb[l_cnt].ztb04 = 256
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb04 = "char"
                   LET g_ztb[l_cnt].ztb09 = "Y"
              WHEN g_ztb[l_cnt].ztb04 = 257 LET g_ztb[l_cnt].ztb04 = "smallint"
                                            LET g_ztb[l_cnt].ztb09 = "Y"
              WHEN g_ztb[l_cnt].ztb04 = 258 LET g_ztb[l_cnt].ztb04 = "integer"
                                            LET g_ztb[l_cnt].ztb09 = "Y"
              WHEN g_ztb[l_cnt].ztb04 = 261
                   LET l_length1=l_length/256
                   FOR i=1 TO 10
                       IF l_length1[i,i]="." THEN
                          LET g_ztb[l_cnt].ztb04=l_length1[1,i-1] CLIPPED,","
                          EXIT FOR
                       END IF
                   END FOR
                   LET l_length=l_length mod 256 CLIPPED
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb04 = g_ztb[l_cnt].ztb04 CLIPPED,l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb08 = g_ztb[l_cnt].ztb04 CLIPPED
                   LET g_ztb[l_cnt].ztb04 = "decimal"
                   LET g_ztb[l_cnt].ztb09 = "Y"
              WHEN g_ztb[l_cnt].ztb04 = 262 
                   LET g_ztb[l_cnt].ztb04 = "serial"
                   LET g_ztb[l_cnt].ztb09 = "Y"
              WHEN g_ztb[l_cnt].ztb04 = 263 
                   LET g_ztb[l_cnt].ztb04 = "date"
                   LET g_ztb[l_cnt].ztb09 = "Y"
                   #TQC-810014
                   IF l_def_type = 'T' THEN
                      LET g_ztb[l_cnt].ztb11 = 'today'
                   END IF
                   #END TQC-810014
              WHEN g_ztb[l_cnt].ztb04 = 266 
                   LET g_ztb[l_cnt].ztb04 = "datetime"
                   LET g_ztb[l_cnt].ztb06=l_length mod 514
                   CASE
                      WHEN g_ztb[l_cnt].ztb06=510
                           LET g_ztb[l_cnt].ztb06="year"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="year"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="month"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="day"
                              WHEN l_length1=4
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=5
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=6
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=32
                           LET g_ztb[l_cnt].ztb06="month"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="month"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="day"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=4
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=5
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=66
                           LET g_ztb[l_cnt].ztb06="day"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="day"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=4
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=100
                           LET g_ztb[l_cnt].ztb06="hour"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="hour"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=3
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=134
                           LET g_ztb[l_cnt].ztb06="minute"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="minute"
                              WHEN l_length1=2
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                      WHEN g_ztb[l_cnt].ztb06=168
                           LET g_ztb[l_cnt].ztb06="second"
                           LET l_length1=l_length/514
                           CASE
                              WHEN l_length1=1
                                   LET g_ztb[l_cnt].ztb07="second"
                           END CASE
                   END CASE
                   LET g_ztb[l_cnt].ztb09 = "Y"
              WHEN g_ztb[l_cnt].ztb04 = 267 LET g_ztb[l_cnt].ztb04 = "byte"
                                            LET g_ztb[l_cnt].ztb09 = "Y"
              WHEN g_ztb[l_cnt].ztb04 = 269
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb04 = "varchar"
                   LET g_ztb[l_cnt].ztb09 = "Y"
              OTHERWISE LET g_ztb[l_cnt].ztb04 = g_ztb[l_cnt].ztb04
         END CASE
 
       WHEN "ORA"                                           #FUN-730016
         IF l_nullable='Y' THEN   #僅只為了oracle轉成以not null為對象
            LET l_nullable='N'
         ELSE
            LET l_nullable='Y'
         END IF
         CASE WHEN g_ztb[l_cnt].ztb04 = 'varchar2'
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              WHEN g_ztb[l_cnt].ztb04 = 'char'
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              WHEN g_ztb[l_cnt].ztb04 = 'number'
                   LET l_length1=l_length
                   LET g_ztb[l_cnt].ztb08=l_length1 CLIPPED
                   LET l_length1=l_scale CLIPPED
                   IF l_length1<>'0' THEN
                      LET g_ztb[l_cnt].ztb08 = g_ztb[l_cnt].ztb08 CLIPPED,',',l_length1 CLIPPED
                   END IF
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              OTHERWISE
                   LET g_ztb[l_cnt].ztb09 = l_nullable
         END CASE
 
       WHEN "MSV"
        #No.FUN-A60022---start
         IF l_nullable='0' THEN  #MSV版本: 0表示 not null
            LET l_nullable='Y'
         ELSE
            LET l_nullable='N'
         END IF
         CASE WHEN g_ztb[l_cnt].ztb04 = 'varchar'
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              WHEN g_ztb[l_cnt].ztb04 = 'nvarchar'
                   LET l_length=l_length/2 CLIPPED
                   LET l_length1=l_length
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              WHEN g_ztb[l_cnt].ztb04 = 'char'
                   LET l_length1=l_length CLIPPED
                   LET g_ztb[l_cnt].ztb08 = l_length1 CLIPPED
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              WHEN g_ztb[l_cnt].ztb04 = 'int'
                   LET g_ztb[l_cnt].ztb04 = 'integer'
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              WHEN g_ztb[l_cnt].ztb04 = 'date'
                   LET g_ztb[l_cnt].ztb04 = 'datetime'
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              WHEN g_ztb[l_cnt].ztb04 = 'decimal'
                   LET l_length1=l_precision
                   LET g_ztb[l_cnt].ztb08=l_length1 CLIPPED
                   LET l_length1=l_scale CLIPPED
                   IF l_length1<>'0' THEN
                      LET g_ztb[l_cnt].ztb08 = g_ztb[l_cnt].ztb08 CLIPPED,',',l_length1 CLIPPED
                   END IF
                   LET g_ztb[l_cnt].ztb09 = l_nullable
              OTHERWISE
                   LET g_ztb[l_cnt].ztb09 = l_nullable
         END CASE
         IF NOT cl_null(g_ztb[l_cnt].ztb11) THEN
            LET l_str =g_ztb[l_cnt].ztb11 CLIPPED
            LET l_start=l_str.getIndexOf('\'',1) 
            IF l_start > 0 THEN
               LET l_end=l_str.getIndexOf('\'',l_start+1)
               LET g_ztb[l_cnt].ztb11=l_str.subString(l_start+1,l_end-1)
               #若預設值為' '(單一空白時),應顯示 ' '
               IF g_ztb[l_cnt].ztb11 IS NOT NULL AND cl_null(g_ztb[l_cnt].ztb11) THEN
                  LET g_ztb[l_cnt].ztb11 = "' '"     
               END IF
            ELSE
               LET l_start=l_str.getIndexOf('((',1) 
               IF l_start > 0 THEN
                  LET l_end=l_str.getIndexOf('))',l_start+1)
                  LET g_ztb[l_cnt].ztb11=l_str.subString(l_start+2,l_end-1)
               END IF
            END IF
         END IF
         #No.FUN-A60022---start
      END CASE                                              #FUN-730016
 
      LET l_cnt=l_cnt+1
   END FOREACH
   LET g_rec_b=l_cnt-1
   CALL g_ztb.deleteElement(l_cnt)
 
   CALL p_zta_cshow()                        #FUN-730016

   LET g_zta.zta17 = l_zta17_o               #還原為實際synonym db  #FUN-9C0036
 
#DATABASE ds
#   IF sqlca.sqlcode THEN
#      LET g_err="change DB error(bshow):ds"
#      CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
#      RETURN
#   END IF
END FUNCTION
 
 
 
FUNCTION p_zta_b_fill()             #BODY FILL UP
   IF g_zta.zta10='Y' THEN
      #IF g_db_type="IFX" THEN
      CASE g_db_type                                            #FUN-730016
       WHEN "IFX"                                               #FUN-730016
         LET g_sql= "SELECT ztb03,ztb04,ztb08,ztb06,ztb07,ztb09,ztb11,ztb05,gaq03,gaq05",
                    "  FROM systables a,syscolumns b,ztb_file LEFT OUTER JOIN gaq_file",
                    "    ON ztb03=gaq01 AND gaq02='",g_lang CLIPPED,"'",
                    " WHERE ztb01 ='",g_zta.zta01 CLIPPED,"'",
                    "   AND ztb02 ='ds'",
                    "   AND tabname=ztb01",
                    "   AND colname=ztb03",
                    "   AND a.tabid=b.tabid",
                    " ORDER BY colno"
 
       WHEN "ORA"                                               #FUN-730016
         LET g_sql= "SELECT ztb03,ztb04,ztb08,ztb06,ztb07,ztb09,ztb11,ztb05,gaq03,gaq05",
                    "  FROM user_tab_columns,ztb_file LEFT OUTER JOIN gaq_file",
                    "    ON ztb03=gaq01 AND gaq02='",g_lang CLIPPED,"'",
                    " WHERE ztb01 ='",g_zta.zta01 CLIPPED,"'",
                    "   AND ztb02 ='ds'",
                    "   AND ztb01 = lower(table_name) ",
                    "   AND ztb03 = lower(column_name)",
                    " ORDER BY column_id"
 
       WHEN "MSV"                                               #FUN-730016
         #No.FUN-A60022---start
         LET g_sql= "SELECT ztb03,ztb04,ztb08,ztb06,ztb07,ztb09,ztb11,ztb05,gaq03,gaq05",
                    "  FROM sys.objects b ,sys.columns a ,ztb_file LEFT OUTER JOIN gaq_file",
                    "    ON ztb03=gaq01 AND gaq02='",g_lang CLIPPED,"'",
                    " WHERE ztb01 ='",g_zta.zta01 CLIPPED,"'",
                    "   AND a.object_id=b.object_id ",
                    "   AND ztb02 ='ds'",
                    "   AND ztb01 = b.name ",
                    "   AND ztb03 = a.name"
         #No.FUN-A60022---end 
      END CASE                                                  #FUN-730016
   ELSE
      LET g_sql= "SELECT ztb03,ztb04,ztb08,ztb06,ztb07,ztb09,ztb11,ztb05,gaq03,gaq05",
                 "  FROM ztb_file LEFT OUTER JOIN gaq_file",
                 "    ON ztb03=gaq01 AND gaq02='",g_lang CLIPPED,"'",
                 " WHERE ztb01 ='",g_zta.zta01 CLIPPED,"'",
                 "   AND ztb02 ='",g_zta.zta02 CLIPPED,"'",
                 " ORDER BY ztb10"
   END IF
 
   DECLARE ztb_cs CURSOR FROM g_sql
 
   CALL g_ztb.clear()
   LET g_rec_b=0
   LET g_cnt = 1
   FOREACH ztb_cs INTO g_ztb[g_cnt].*   #單身 ARRAY 填充
      IF sqlca.sqlcode THEN
         LET g_err="foreach ztb data error(bfill)"
         CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
         EXIT FOREACH
      END IF
      #No.TQC-860023 -- start --
      IF g_db_type="ORA" THEN
         #若預設值為' '(單一空白時),應顯示 ' '
         IF g_ztb[g_cnt].ztb11 IS NOT NULL AND cl_null(g_ztb[g_cnt].ztb11) THEN
            LET g_ztb[g_cnt].ztb11 = "' '"     
         END IF
      ELSE
         #若預設值為' '(單一空白時),應顯示 ' '
         IF g_ztb[g_cnt].ztb11 IS NOT NULL AND cl_null(g_ztb[g_cnt].ztb11) THEN
            LET g_ztb[g_cnt].ztb11 = "' '"     
         END IF
      END IF
      #No.TQC-860023 -- end  --
      LET g_cnt = g_cnt + 1
      IF g_cnt > g_max_rec THEN
         CALL cl_err("",9035,0)
         EXIT FOREACH
      END IF
   END FOREACH
 
   CALL g_ztb.deleteElement(g_cnt)
   LET g_rec_b=g_cnt-1
   DISPLAY g_rec_b TO FORMONLY.cn2
   LET g_cnt = 0
 
   DISPLAY ARRAY g_ztb TO s_ztb.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
     BEFORE DISPLAY
       EXIT DISPLAY
   END DISPLAY
 
END FUNCTION
 
FUNCTION p_zta_d_fill()             #BODY FILL UP
 
   LET g_sql= "SELECT ztc06,ztc03,ztc04,ztc05",
              "  FROM ztc_file",
              " WHERE ztc01 ='",g_zta.zta01,"' AND ",  #單頭
              " ztc02='",g_zta.zta02,"' "
 
   DECLARE ztc_cs CURSOR FROM g_sql
 
   CALL g_ztc.clear()
   LET g_cnt = 1
 
   FOREACH ztc_cs INTO g_ztc[g_cnt].*   #單身 ARRAY 填充
      IF sqlca.sqlcode THEN
         LET g_err="foreach ztc data error(dfill)"
         CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
         EXIT FOREACH
      END IF
      LET g_cnt = g_cnt + 1
      IF g_cnt > g_max_rec THEN
         CALL cl_err("",9035,0)
         EXIT FOREACH
      END IF
   END FOREACH
   CALL g_ztc.deleteElement(g_cnt)
   LET g_rec_d=g_cnt-1
   DISPLAY g_rec_d TO FORMONLY.cn4  #ATTRIBUTE(RED)
   LET g_cnt = 0
 
   DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
     BEFORE DISPLAY
       EXIT DISPLAY
   END DISPLAY
 
END FUNCTION
 
#FUN-730016
FUNCTION p_zta_cshow()
DEFINE  l_sql           STRING,
        l_i             LIKE type_file.num5,
        l_j             LIKE type_file.num5,
        l_cnt           LIKE type_file.num5
DEFINE  l_ztd           RECORD 
                        ztd08 LIKE type_file.chr20,
                        ztd09 LIKE type_file.chr20,
                        ztd10 LIKE type_file.chr20,
                        ztd11 LIKE type_file.chr20
                        END RECORD
DEFINE  l_column_name   LIKE ztd_file.ztd13
DEFINE  l_position      LIKE ztd_file.ztd14
DEFINE  l_deferred      LIKE type_file.chr20
DEFINE  l_schema        STRING
DEFINE  l_idxname       LIKE type_file.chr50
DEFINE  l_primary       LIKE type_file.num10
DEFINE  l_dbs           LIKE type_file.chr50    
DEFINE  r_column_name   LIKE ztd_file.ztd13         #No.FUN-A60022---add
DEFINE  l_definition    LIKE type_file.chr100       #No.FUN-A60022---add 
 
    IF cl_null(g_zta.zta01) OR cl_null(g_zta.zta02) THEN
       CALL cl_err("",-400,0) RETURN
    END IF
 
    IF g_zta.zta07='S' THEN
       LET l_schema = g_zta.zta17 CLIPPED
    ELSE
       LET l_schema = g_zta.zta02 CLIPPED
    END IF
 
    CALL g_ztd.clear()
    LET l_cnt=1
 
    #IF g_db_type= "IFX" THEN
    CASE g_db_type                                             #FUN-730016
     WHEN "IFX"                                                #FUN-730016
      #取得 Constraint 資料
      IF g_zta.zta07 = 'S' THEN     
         LET l_sql = "SELECT b.constrname, b.constrtype, b.idxname",
                     "  FROM ",l_schema,":systables a,",
                               l_schema,":sysconstraints b",
                     " WHERE a.tabname='",g_zta.zta01 CLIPPED,"' ",
                     "   AND a.tabid = b.tabid",
                     "   AND b.constrtype matches \"[CPRU]\""
 
      ELSE
         LET l_sql = "SELECT b.constrname, b.constrtype, b.idxname",
                     "  FROM systables a,sysconstraints b",
                     " WHERE a.tabname='",g_zta.zta01 CLIPPED,"' ",
                     "   AND a.tabid = b.tabid",
                     "   AND b.constrtype matches \"[CPRU]\""
      END IF
      DECLARE p_ztd_cs CURSOR FROM l_sql
      FOREACH p_ztd_cs INTO g_ztd[l_cnt].ztd03,g_ztd[l_cnt].ztd04,l_idxname
 
         INITIALIZE l_ztd.* TO NULL
         
         CASE g_ztd[l_cnt].ztd04  
          WHEN "C"
            IF g_zta.zta07 = 'S' THEN     
               LET l_sql = "SELECT checktext FROM ",l_schema,":syschecks ",
                           " WHERE constrid = '",g_ztd[l_cnt].ztd03 CLIPPED,"'",
                           "   AND type='T'"
            ELSE
               LET l_sql = "SELECT checktext FROM syschecks ",
                           " WHERE constrid = '",g_ztd[l_cnt].ztd03 CLIPPED,"'",
                           "   AND type='T'"
            END IF
            DECLARE p_zta_csql CURSOR FROM l_sql
            OPEN p_zta_csql
            FETCH p_zta_csql INTO g_ztd[l_cnt].ztd05
                IF g_ztd[l_cnt].ztd05[1] = "(" AND 
                   g_ztd[l_cnt].ztd05[FGL_WIDTH(g_ztd[l_cnt].ztd05 CLIPPED)] = ")" 
                THEN
                   LET g_ztd[l_cnt].ztd05 = g_ztd[l_cnt].ztd05[2,FGL_WIDTH(g_ztd[l_cnt].ztd05 CLIPPED)-1]  
                END IF
            FREE p_zta_csql
 
          #WHEN "N"
          # IF g_zta.zta07 = 'S' THEN     
          #    LET l_sql = "SELECT a.colname ",
          #                "  FROM ",l_schema,":syscolumns a,",
          #                          l_schema,":syscoldepend b,",
          #                          l_schema,":sysconstraints c ",
          #                " WHERE b.constrid= c.constrid ",
          #                "   AND c.constrname ='",g_ztd[l_cnt].ztd03 CLIPPED, "'",
          #                "   AND a.colno = b.colno ",
          #                "   AND a.tabid = b.tabid "
          # ELSE
          #    LET l_sql = "SELECT a.colname ",
          #                "  FROM syscolumns a, syscoldepend b, sysconstraints c ",
          #                " WHERE b.constrid= c.constrid ",
          #                "   AND c.constrname ='",g_ztd[l_cnt].ztd03 CLIPPED, "'",
          #                "   AND a.colno = b.colno ",
          #                "   AND a.tabid = b.tabid "
          # END IF
          # DECLARE p_zta_nsql CURSOR FROM l_sql
          # OPEN p_zta_nsql
          # FETCH p_zta_nsql INTO l_column_name
          # FREE p_zta_nsql
          # LET g_ztd[l_cnt].ztd05 = l_column_name CLIPPED," IS NOT NULL"
          # LET g_ztd[l_cnt].ztd04 = "C"
 
          OTHERWISE
            #取得 PrimaryKey Columns 及 position
            IF g_zta.zta07 = 'S' THEN     
               #sysindexs : 抓取 tempidx 暫時的table
               LET l_sql = "SELECT a.colname,a.colno ",
                           "  FROM ",l_schema,":syscolumns a,",
                           "         tempidx b,",
                                     l_schema,":systables c,",
                                     l_schema,":sysconstraints d ",
                           " WHERE c.tabname = '",g_zta.zta01 CLIPPED,"' ",
                           "   AND c.tabid = d.tabid ",
                           "   AND b.idxname=d.idxname ",
                           "   AND (a.colno = b.part1 OR a.colno = b.part2 OR ",
                           "        a.colno = b.part3 OR a.colno = b.part4 OR ",
                           "        a.colno = b.part5 OR a.colno = b.part6 OR ",
                           "        a.colno = b.part7 OR a.colno = b.part8 OR ",
                           "        a.colno = b.part9 OR a.colno = b.part10 OR ",
                           "        a.colno = b.part11 OR a.colno = b.part12 OR ",
                           "        a.colno = b.part13 OR a.colno = b.part14 OR ",
                           "        a.colno = b.part15 OR a.colno = b.part16) ",
                           "   AND a.tabid= b.tabid ",
                           "   AND d.constrtype = '",g_ztd[l_cnt].ztd04 CLIPPED,"'",
                           "   AND b.dbname='",l_schema CLIPPED,"'",
                           "   ORDER BY a.colno"
            ELSE
               LET l_sql = "SELECT a.colname,a.colno ",
                           "  FROM syscolumns a,sysindexes b,systables c,sysconstraints d ",
                           " WHERE c.tabname = '",g_zta.zta01 CLIPPED,"' ",
                           "   AND c.tabid = d.tabid ",
                           "   AND b.idxname=d.idxname ",
                           "   AND (a.colno = b.part1 OR a.colno = b.part2 OR ",
                           "        a.colno = b.part3 OR a.colno = b.part4 OR ",
                           "        a.colno = b.part5 OR a.colno = b.part6 OR ",
                           "        a.colno = b.part7 OR a.colno = b.part8 OR ",
                           "        a.colno = b.part9 OR a.colno = b.part10 OR ",
                           "        a.colno = b.part11 OR a.colno = b.part12 OR ",
                           "        a.colno = b.part13 OR a.colno = b.part14 OR ",
                           "        a.colno = b.part15 OR a.colno = b.part16) ",
                           "   AND a.tabid= b.tabid ",
                           "   AND d.constrtype = '",g_ztd[l_cnt].ztd04 CLIPPED,"'",
                           "   ORDER BY a.colno"
            END IF
            
            DECLARE p_ztd2_cs CURSOR FROM l_sql
            FOREACH p_ztd2_cs INTO l_column_name,l_position
                IF cl_null(g_ztd[l_cnt].ztd13) THEN
                   LET g_ztd[l_cnt].ztd13 = l_column_name CLIPPED
                ELSE
                   LET g_ztd[l_cnt].ztd13 = g_ztd[l_cnt].ztd13 CLIPPED,",",l_column_name CLIPPED
                END IF
            
                IF cl_null(g_ztd[l_cnt].ztd14) THEN
                   LET g_ztd[l_cnt].ztd14 = l_position
                ELSE
                   LET g_ztd[l_cnt].ztd14 = g_ztd[l_cnt].ztd14 CLIPPED,",",l_position
                END IF
            
                #取得 Referenced Columns 及 position
                 IF g_ztd[l_cnt].ztd04 = 'R' THEN
                   IF g_zta.zta07 = 'S' THEN     
                      LET l_sql = "SELECT b.primary,b.delrule ",
                                  "  FROM ",l_schema,":sysconstraints a,",
                                            l_schema,":sysreferences b ",
                                  " WHERE a.constrid = b.constrid AND a.constrname = '",g_ztd[l_cnt].ztd03 CLIPPED,"'"
                      DECLARE p_zta_rsql CURSOR FROM l_sql
                      OPEN p_zta_rsql
                      FETCH p_zta_rsql INTO l_primary,l_ztd.ztd08
                      FREE p_zta_rsql
 
                      #sysindexs : 抓取 tempidx2 暫時的table
                      LET l_dbs=g_zta.zta17 CLIPPED,"@",g_tcp_servername CLIPPED
CONNECT TO l_dbs AS "CLIENT"
                      LET l_sql = "SELECT sysindexes.idxname,sysindexes.tabid,idxtype,part1,part2,part3,part4,",
                       "       part5,part6,part7,part8,part9,part10,part11,part12,part13,",
                       "       part14,part15, part16 ",
                       "  FROM sysindexes,sysconstraints ",
                       " WHERE sysconstraints.constrid= '",l_primary CLIPPED,"'",
                       "   AND sysindexes.idxname = sysconstraints.idxname "
                      DECLARE p_zta_ifx_sysidx3 CURSOR FROM l_sql
                      LET l_j=1
                      CALL g_sysidx.clear()
                      FOREACH p_zta_ifx_sysidx3 INTO g_sysidx[l_j].*
                         LET g_sysidx[l_j].dbname=g_zta.zta17
                         LET l_j=l_j+1
                      END FOREACH
DISCONNECT "CLIENT"
SET CONNECTION "MAIN"
                      DELETE FROM tempidx2
                      FOR l_i=1 TO l_j-1
                          INSERT INTO tempidx2 VALUES(g_sysidx[l_i].*)
                      END FOR
                      
                      LET l_sql = "SELECT c.constrname,d.tabname,a.colname, a.colno ",
                                  "  FROM ",l_schema,":syscolumns a,",
                                  "         tempidx2 b,",
                                            l_schema,":sysconstraints c,",
                                            l_schema,":systables d ",
                                  " WHERE c.constrid='",l_primary CLIPPED,"' ",
                                  "   AND b.idxname = c.idxname ",
                                  "   AND (a.colno = b.part1 OR a.colno = b.part2 OR ",
                                  "        a.colno = b.part3 OR a.colno = b.part4 OR ",
                                  "        a.colno = b.part5 OR a.colno = b.part6 OR ",
                                  "        a.colno = b.part7 OR a.colno = b.part8 OR ",
                                  "        a.colno = b.part9 OR a.colno = b.part10 OR ",
                                  "        a.colno = b.part11 OR a.colno = b.part12 OR ",
                                  "        a.colno = b.part13 OR a.colno = b.part14 OR ",
                                  "        a.colno = b.part15 OR a.colno = b.part16) ",
                                  "   AND b.tabid = a.tabid  ",
                                  "   AND d.tabid = a.tabid  ",
                                  "   AND b.dbname='",l_schema CLIPPED,"'",
                                  " ORDER BY a.colno "
                   ELSE
                      LET l_sql = "SELECT b.primary,b.delrule",
                                  "  FROM sysconstraints a,",
                                  "       sysreferences b ",
                                  " WHERE a.constrid = b.constrid ",
                                  "   AND a.constrname = '",g_ztd[l_cnt].ztd03 CLIPPED,"'"
                      DECLARE p_zta_rsql2 CURSOR FROM l_sql
                      OPEN p_zta_rsql2
                      FETCH p_zta_rsql2 INTO l_primary,l_ztd.ztd08
                      FREE p_zta_rsql2
                      
                      LET l_sql = "SELECT c.constrname,d.tabname,a.colname, a.colno ",
                                  "  FROM syscolumns a, sysindexes b, sysconstraints c, systables d ",
                                  " WHERE c.constrid='",l_primary CLIPPED,"' ",
                                  "   AND b.idxname = c.idxname ",
                                  "   AND (a.colno = b.part1 OR a.colno = b.part2 OR ",
                                  "        a.colno = b.part3 OR a.colno = b.part4 OR ",
                                  "        a.colno = b.part5 OR a.colno = b.part6 OR ",
                                  "        a.colno = b.part7 OR a.colno = b.part8 OR ",
                                  "        a.colno = b.part9 OR a.colno = b.part10 OR ",
                                  "        a.colno = b.part11 OR a.colno = b.part12 OR ",
                                  "        a.colno = b.part13 OR a.colno = b.part14 OR ",
                                  "        a.colno = b.part15 OR a.colno = b.part16) ",
                                  "   AND b.tabid = a.tabid  ",
                                  "   AND b.tabid = d.tabid  ",
                                  " ORDER BY a.colno "
                   END IF
                   DECLARE p_ztd3_cs CURSOR FROM l_sql
                   FOREACH p_ztd3_cs INTO g_ztd[l_cnt].ztd07,g_ztd[l_cnt].ztd17,l_column_name,l_position
                      IF cl_null(g_ztd[l_cnt].ztd15) THEN
                         LET g_ztd[l_cnt].ztd15 = l_column_name CLIPPED
                      ELSE
                         LET g_ztd[l_cnt].ztd15 = g_ztd[l_cnt].ztd15 CLIPPED,",",l_column_name CLIPPED
                      END IF
                      IF cl_null(g_ztd[l_cnt].ztd16) THEN
                         LET g_ztd[l_cnt].ztd16 = l_position
                      ELSE
                         LET g_ztd[l_cnt].ztd16 = g_ztd[l_cnt].ztd16 CLIPPED,",",l_position
                      END IF 
                   END FOREACH
                END IF
            END FOREACH
         END CASE  
 
         IF g_zta.zta07 = 'S' THEN     
            LET l_sql = "SELECT state FROM ",l_schema,":sysobjstate ",
                        " WHERE objtype = 'C'",
                        "   AND name = '",g_ztd[l_cnt].ztd03 CLIPPED,"'"
         ELSE
            LET l_sql = "SELECT state FROM sysobjstate ",
                        " WHERE objtype = 'C'",
                        "   AND name = '",g_ztd[l_cnt].ztd03 CLIPPED,"'"
         END IF
         DECLARE p_zta_esql CURSOR FROM l_sql
         OPEN p_zta_esql
         FETCH p_zta_esql INTO l_ztd.ztd09
         FREE p_zta_esql
         IF l_ztd.ztd09  = "E" THEN
                LET g_ztd[l_cnt].ztd09 = "1"
         ELSE
                LET g_ztd[l_cnt].ztd09 = "2"
         END IF
      
         IF l_ztd.ztd08 CLIPPED = "C" THEN
             LET g_ztd[l_cnt].ztd08 = "1"
         END IF
 
         #No.FUN-7A0029
         IF cl_null(FGL_GETENV("TOPLINK")) THEN 
            SELECT zte04 INTO g_ztd[l_cnt].ztd12 FROM zte_file
            WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
              AND zte03 = g_ztd[l_cnt].ztd03
            IF cl_null(g_ztd[l_cnt].ztd12) THEN
               IF g_ztd[l_cnt].ztd03[1,4] = "tpc_" THEN
                   LET g_ztd[l_cnt].ztd12='c'
               END IF
            END IF
         END IF
         IF cl_null(g_ztd[l_cnt].ztd12) THEN
            LET g_ztd[l_cnt].ztd12 = "p"
         END IF
         #END No.FUN-7A0029
 
         LET g_ztd[l_cnt].ztd06 = l_schema
 
         LET l_cnt=l_cnt+1
      
      END FOREACH
 
    WHEN "ORA"                                           #FUN-730016
      #取得 Constraint 資料
      LET l_sql = "SELECT LOWER(CONSTRAINT_NAME),CONSTRAINT_TYPE,DELETE_RULE,",
                  "       STATUS,DEFERRABLE,DEFERRED,VALIDATED, ",
                  "       LOWER(R_OWNER), LOWER(R_CONSTRAINT_NAME), ",
                  "       SEARCH_CONDITION ",
                  "  FROM ALL_CONSTRAINTS ",
                  " WHERE LOWER(OWNER)='",l_schema,"' ",
                  "   AND LOWER(TABLE_NAME)='", g_zta.zta01 CLIPPED,"'",
                   "  AND CONSTRAINT_NAME NOT like \"SYS_%\""
 
      DECLARE p_ztd1_cs CURSOR FROM l_sql
      FOREACH p_ztd1_cs INTO g_ztd[l_cnt].ztd03,g_ztd[l_cnt].ztd04,l_ztd.ztd08,
                           l_ztd.ztd09,l_ztd.ztd10,l_deferred,l_ztd.ztd11,
                           g_ztd[l_cnt].ztd06,g_ztd[l_cnt].ztd07,g_ztd[l_cnt].ztd05
          
         #取得 PrimaryKey Columns 及 position
         LET l_sql = "SELECT LOWER(COLUMN_NAME),LOWER(POSITION) FROM ALL_CONS_COLUMNS",
                     " WHERE LOWER(OWNER)='",l_schema,"' ",
                     "   AND LOWER(TABLE_NAME) ='",g_zta.zta01 CLIPPED,"' ",
                     "   AND LOWER(CONSTRAINT_NAME) ='",g_ztd[l_cnt].ztd03 CLIPPED,"' ",
                     " ORDER BY POSITION "
         
         DECLARE p_ztd4_cs CURSOR FROM l_sql
         FOREACH p_ztd4_cs INTO l_column_name,l_position
             IF cl_null(g_ztd[l_cnt].ztd13) THEN
                LET g_ztd[l_cnt].ztd13 = l_column_name CLIPPED
             ELSE
                LET g_ztd[l_cnt].ztd13 = g_ztd[l_cnt].ztd13 CLIPPED,",",l_column_name CLIPPED
             END IF
 
             IF cl_null(g_ztd[l_cnt].ztd14) THEN
                LET g_ztd[l_cnt].ztd14 = l_position
             ELSE
                LET g_ztd[l_cnt].ztd14 = g_ztd[l_cnt].ztd14 CLIPPED,",",l_position
             END IF
 
             #取得 Referenced Columns 及 position
             IF g_ztd[l_cnt].ztd04 = 'R' THEN
                LET l_sql = "SELECT LOWER(TABLE_NAME), LOWER(COLUMN_NAME),LOWER(POSITION) ",
                            "  FROM ALL_CONS_COLUMNS",
                            " WHERE LOWER(OWNER) = '",g_ztd[l_cnt].ztd06 CLIPPED,"' ",
                            "   AND LOWER(CONSTRAINT_NAME) ='",g_ztd[l_cnt].ztd07 CLIPPED,"' ",
                            " ORDER BY POSITION "
                
                DECLARE p_ztd5_cs CURSOR FROM l_sql
                FOREACH p_ztd5_cs INTO g_ztd[l_cnt].ztd17,l_column_name,l_position
                   IF cl_null(g_ztd[l_cnt].ztd15) THEN
                      LET g_ztd[l_cnt].ztd15 = l_column_name CLIPPED
                   ELSE
                      LET g_ztd[l_cnt].ztd15 = g_ztd[l_cnt].ztd15 CLIPPED,",",l_column_name CLIPPED
                   END IF
                   IF cl_null(g_ztd[l_cnt].ztd16) THEN
                      LET g_ztd[l_cnt].ztd16 = l_position
                   ELSE
                      LET g_ztd[l_cnt].ztd16 = g_ztd[l_cnt].ztd16 CLIPPED,",",l_position
                   END IF 
                END FOREACH
             END IF  
         END FOREACH
         CASE l_ztd.ztd08 
             WHEN "CREATION"
                LET g_ztd[l_cnt].ztd08 = "1"
             WHEN "SET NULL" 
                LET g_ztd[l_cnt].ztd08 = "2"
         END CASE
      
         IF l_ztd.ztd09  = "ENABLED" THEN
                LET g_ztd[l_cnt].ztd09 = "1"
         ELSE
                LET g_ztd[l_cnt].ztd09 = "2"
         END IF
      
         CASE l_ztd.ztd10 
             WHEN "NOT DEFERRABLE"
                LET g_ztd[l_cnt].ztd10 = "1"
             OTHERWISE
                IF l_deferred = "IMMEDIATE" THEN 
                   LET g_ztd[l_cnt].ztd10 = "2"
                ELSE
                   LET g_ztd[l_cnt].ztd10 = "3"
                END IF
         END CASE
      
         IF l_ztd.ztd11 = "VALIDATED" THEN
                LET g_ztd[l_cnt].ztd11 = "Y"
         ELSE
                LET g_ztd[l_cnt].ztd11 = "N"
         END IF
      
         #No.FUN-7A0029
         IF cl_null(FGL_GETENV("TOPLINK")) THEN 
            SELECT zte04 INTO g_ztd[l_cnt].ztd12 FROM zte_file
            WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
              AND zte03 = g_ztd[l_cnt].ztd03
            IF cl_null(g_ztd[l_cnt].ztd12) THEN
               IF g_ztd[l_cnt].ztd03[1,4] = "tpc_" THEN
                   LET g_ztd[l_cnt].ztd12='c'
               END IF
            END IF
         END IF
         IF cl_null(g_ztd[l_cnt].ztd12) THEN
            LET g_ztd[l_cnt].ztd12 = "p"
         END IF
         #END No.FUN-7A0029
 
         LET l_cnt=l_cnt+1
      
      END FOREACH
 
     WHEN "MSV"                                                  #FUN-730016 
       #No.FUN-A60022---start
       #取得 Constraint 資料
       LET l_sql = "SELECT c.CONSTRAINT_NAME,c.CONSTRAINT_TYPE,c.IS_DEFERRABLE,c.INITIALLY_DEFERRED",
                   "  FROM ",g_mssqlarea CLIPPED,"_",l_schema CLIPPED,".INFORMATION_SCHEMA.TABLE_CONSTRAINTS c ",
                   " WHERE c.TABLE_NAME ='", g_zta.zta01 CLIPPED,"'"

       DECLARE p_ztd1_cs_1 CURSOR FROM l_sql
       FOREACH p_ztd1_cs_1 INTO g_ztd[l_cnt].ztd03,g_ztd[l_cnt].ztd04,l_ztd.ztd10,l_deferred  

          #取得 PrimaryKey Columns 及 position
          LET l_sql = "SELECT c.index_column_id, d.name ",
                      "  FROM ",g_mssqlarea CLIPPED,"_",l_schema CLIPPED,".sys.objects a,",
                      g_mssqlarea CLIPPED,"_",l_schema CLIPPED,".sys.indexes b,",
                      g_mssqlarea CLIPPED,"_",l_schema CLIPPED,".sys.index_columns c ,",
                      g_mssqlarea CLIPPED,"_",l_schema CLIPPED,".sys.columns d ",
                      " WHERE a.name ='",g_zta.zta01 CLIPPED,"' ",
                      "   AND a.object_id =b.object_id ",
                      "   AND b.object_id =c.object_id ",
                      "   AND c.object_id =d.object_id ",
                      "   AND b.index_id = c.index_id ",
                      "   AND c.column_id =d.column_id ",
                      "   AND b.name='",g_ztd[l_cnt].ztd03 CLIPPED,"' ",
                      " ORDER BY c.index_column_id "
          
          DECLARE p_ztd4_cs_1 CURSOR FROM l_sql
          FOREACH p_ztd4_cs_1 INTO l_position,l_column_name
              IF cl_null(g_ztd[l_cnt].ztd13) THEN
                 LET g_ztd[l_cnt].ztd13 = l_column_name CLIPPED
              ELSE
                 LET g_ztd[l_cnt].ztd13 = g_ztd[l_cnt].ztd13 CLIPPED,",",l_column_name CLIPPED
              END IF

              IF cl_null(g_ztd[l_cnt].ztd14) THEN
                 LET g_ztd[l_cnt].ztd14 = l_position
              ELSE
                 LET g_ztd[l_cnt].ztd14 = g_ztd[l_cnt].ztd14 CLIPPED,",",l_position
              END IF
          END FOREACH 
          
          INITIALIZE l_definition TO NULL 
          
          LET l_sql=" SELECT cast(b.definition as varchar(100)) FROM sys.objects a,sys.check_constraints b "
                   ," WHERE a.object_id =b.parent_object_id AND a.name='",g_zta.zta01 CLIPPED,"'"
                   ,"   AND b.name='",g_ztd[l_cnt].ztd03 CLIPPED,"'"
          DECLARE p_ztd4_cs_2 CURSOR FROM l_sql
          FOREACH p_ztd4_cs_2 INTO l_definition
             IF l_definition IS NOT NULL THEN
                FOR l_i=1 TO LENGTH(l_definition)
                    IF l_definition[l_i,l_i]="(" OR l_definition[l_i,l_i]=")" OR l_definition[l_i,l_i]="[" OR l_definition[l_i,l_i]="]" THEN 
                        LET l_definition[l_i,l_i]=' '
                    END IF 
                END FOR 
                LET  g_ztd[l_cnt].ztd05 =l_definition 
             END IF 
              
          END FOREACH 
           
          #取得 Referenced Columns 及 position
          IF g_ztd[l_cnt].ztd04 ='F' THEN
             INITIALIZE l_position TO NULL
             INITIALIZE l_column_name TO NULL
             INITIALIZE r_column_name TO NULL
             LET g_ztd[l_cnt].ztd04='R'
             LET l_sql=" select d.column_id,d.name,e.name,f.name from sys.objects a "
                      ,"  left outer join sys.foreign_key_columns b on a.object_id =b.constraint_object_id "
                      ,"  left outer join sys.objects c on c.object_id =b.parent_object_id " 
                      ,"  left outer join sys.columns d on c.object_id =d.object_id and b.parent_column_id=d.column_id "
                      ,"  left outer join sys.objects e on e.object_id =b.referenced_object_id "
                      ,"  left outer join sys.columns f on f.object_id =e.object_id and b.referenced_column_id=f.column_id " 
                      ," where a.name='",g_ztd[l_cnt].ztd03 CLIPPED,"'"
             DECLARE p_ztd4_cs_3 CURSOR FROM l_sql
             FOREACH p_ztd4_cs_3 INTO l_position,l_column_name,g_ztd[l_cnt].ztd17,r_column_name 
                IF cl_null(g_ztd[l_cnt].ztd14) THEN
                   LET g_ztd[l_cnt].ztd14 = l_position CLIPPED
                ELSE
                   LET g_ztd[l_cnt].ztd14 = g_ztd[l_cnt].ztd14 CLIPPED,",",l_position CLIPPED
                END IF
                
                IF cl_null(g_ztd[l_cnt].ztd13) THEN
                   LET g_ztd[l_cnt].ztd13 = l_column_name
                ELSE 
                	  LET g_ztd[l_cnt].ztd13 = g_ztd[l_cnt].ztd13 CLIPPED,",",l_column_name CLIPPED 
                END IF 
                 
                IF cl_null(g_ztd[l_cnt].ztd15) THEN
                   LET g_ztd[l_cnt].ztd15 = r_column_name
                ELSE 
                	  LET g_ztd[l_cnt].ztd15 = g_ztd[l_cnt].ztd15 CLIPPED,",",r_column_name CLIPPED 
                END IF 
               
                LET g_ztd[l_cnt].ztd06=l_schema CLIPPED 
                
             END FOREACH 
          END IF 
           
          IF cl_null(FGL_GETENV("TOPLINK")) THEN 
             SELECT zte04 INTO g_ztd[l_cnt].ztd12 FROM zte_file
             WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
               AND zte03 = g_ztd[l_cnt].ztd03
             IF cl_null(g_ztd[l_cnt].ztd12) THEN
                IF g_ztd[l_cnt].ztd03[1,4] = "tpc_" THEN
                    LET g_ztd[l_cnt].ztd12='c'
                END IF
             END IF
          END IF
          CASE l_ztd.ztd10 
              WHEN "N"                                           #FUN-A90062
                 LET g_ztd[l_cnt].ztd10 = "1"
              OTHERWISE
                 IF l_deferred = "NO" THEN 
                    LET g_ztd[l_cnt].ztd10 = "3"
                 END IF
          END CASE
          IF cl_null(g_ztd[l_cnt].ztd12) THEN
             LET g_ztd[l_cnt].ztd12 = "p"
          END IF  
          LET l_cnt=l_cnt+1 
       END FOREACH
      #No.FUN-A60022---end
    END CASE                                                     #FUN-730016
    LET g_rec_c=l_cnt-1
    CALL g_ztd.deleteElement(l_cnt)
 
END FUNCTION
 
 
FUNCTION p_zta_c_fill()             #BODY FILL UP
 
   LET g_sql= "SELECT ztd03,ztd04,ztd05,ztd06,ztd07,ztd08,ztd09,ztd10,ztd11,ztd12,ztd13,ztd14,ztd15,ztd16,ztd17",
              "  FROM ztd_file",
              " WHERE ztd01 ='",g_zta.zta01 CLIPPED,"' AND ",  #單頭
              " ztd02='",g_zta.zta02 CLIPPED,"' "
 
   DECLARE ztd_cs CURSOR FROM g_sql
 
   CALL g_ztd.clear()
   LET g_cnt = 1
 
   FOREACH ztd_cs INTO g_ztd[g_cnt].*   #單身 ARRAY 填充
      IF sqlca.sqlcode THEN
         LET g_err="foreach ztd data error(dfill)"
         CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
         EXIT FOREACH
      END IF
      LET g_cnt = g_cnt + 1
      IF g_cnt > g_max_rec THEN
         CALL cl_err("",9035,0)
         EXIT FOREACH
      END IF
   END FOREACH
   CALL g_ztd.deleteElement(g_cnt)
   LET g_rec_c= g_cnt -1
   LET g_cnt = 0
 
   DISPLAY ARRAY g_ztd TO s_ztd.* ATTRIBUTE(COUNT=g_rec_d)
     BEFORE DISPLAY
       EXIT DISPLAY
   END DISPLAY
 
END FUNCTION
#END FUNCTION
 
FUNCTION p_zta_b()
    DEFINE l_ac_t          LIKE type_file.num5,     #未取消的ARRAY CNT #No.FUN-680135 SMALLINT 
           l_n             LIKE type_file.num5,     #檢查重複用        #No.FUN-680135 SMALLINT
           l_i             LIKE type_file.num5,     #No.FUN-680135     SMALLINT
           l_ln            LIKE type_file.num5,     #No.FUN-680135     SMALLINT      
           l_lock_sw       LIKE type_file.chr1,     #單身鎖住否        #No.FUN-680135 VARCHAR(1)
           p_cmd           LIKE type_file.chr1,     #處理狀態          #No.FUN-680135 VARCHAR(1)
           l_cmd           LIKE zs_file.zs06,       #command
           l_sql           STRING,
           l_zs03          LIKE zs_file.zs03,
           l_ztb10         LIKE ztb_file.ztb10,
           l_datetime_show LIKE type_file.chr1,     #just for 開始結束欄位顯示 #No.FUN-680135 VARCHAR(1)
           l_allow_insert  LIKE type_file.num5,     #可新增否          #No.FUN-680135 SMALLINT
           l_allow_delete  LIKE type_file.num5,     #可刪除否          #No.FUN-680135 SMALLINT
           l_cnt           LIKE type_file.num5                         #No.FUN-7A0029
    DEFINE ls_str          STRING                   #No.FUN-7A0029
    DEFINE l_cust          LIKE type_file.chr1      #No.FUN-7A0029
    DEFINE l_ztb11         STRING,                  #No.TQC-860023
           l_strbuf        base.StringBuffer        #No.TQC-860023
    DEFINE l_field         LIKE ztb_file.ztb03      #No.FUN-990043
    #No.FUN-A60022---start
    DEFINE g_cmd           LIKE zs_file.zs06
    DEFINE q_def_cmd       LIKE zs_file.zs06        
    #No.FUN-A90062---start
    DEFINE l_def_name      LIKE type_file.chr1000   #No.FUN-A90062
    DEFINE l_idx           DYNAMIC ARRAY of RECORD
                               name LIKE type_file.chr1000,
                               sql  STRING
                           END RECORD
    DEFINE l_unique        LIKE type_file.chr1
    DEFINE l_pk_cnt        LIKE type_file.num5
    #No.FUN-A90062---end
    DEFINE l_name          LIKE type_file.chr1000   
    DEFINE l_count         LIKE type_file.num5
    DEFINE l_zs03_l        LIKE zs_file.zs03,    
           l_zs03_g        LIKE zs_file.zs03,    
           l_zs03_q        LIKE zs_file.zs03     
    #No.FUN-A60022---end 
    DEFINE l_ztb03_str     STRING                   #No:FUN-9C0175
    DEFINE l_number        LIKE type_file.num10     #No:FUN-9C0175
    DEFINE l_max           LIKE type_file.num10     #No:FUN-9C0175
     
    LET g_action_choice = ""
    IF g_zta.zta01 IS NULL THEN CALL cl_err("",-400,0) RETURN END IF
    IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
   #start FUN-6A0052 add
   #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
    IF g_zta.zta10='Y' THEN
       IF cl_null(g_MODNO)  THEN
          PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
             ON IDLE g_idle_seconds
                CALL cl_on_idle()
          END PROMPT
#TQC-860017 end  
          display g_MODNO
       END IF
    END IF
   #end FUN-6A0052 add
 
    LET l_allow_insert = cl_detail_input_auth("insert")
    LET l_allow_delete = cl_detail_input_auth("delete")
 
    CALL cl_opmsg("b")
 
#    LET g_forupd_sql = "SELECT ztb03,ztb04,ztb08,ztb06,ztb07,ztb09,ztb11,ztb05",
#                       "  FROM ztb_file ",
#                       " WHERE ztb01=? AND ztb02=?",
#                       "   AND ztb03=? FOR UPDATE"
#    DECLARE p_zta_b_cl CURSOR FROM g_forupd_sql      # LOCK CURSOR
 
#    LET l_ac_t = 0
    LET l_datetime_show = "N"
 
    INPUT ARRAY g_ztb WITHOUT DEFAULTS FROM s_ztb.*
       ATTRIBUTE(COUNT=g_rec_b,MAXCOUNT=g_max_rec,UNBUFFERED,
       INSERT ROW=l_allow_insert,DELETE ROW=l_allow_delete,APPEND ROW=l_allow_insert)
 
       BEFORE INPUT
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(l_ac)
          END IF
 
       BEFORE ROW
          LET p_cmd=''
          LET l_ac = ARR_CURR()
          LET l_lock_sw = "N"            #DEFAULT
#          LET l_n  = ARR_COUNT()
          LET l_cust = ""                                 #No.FUN-7A0029
 
          BEGIN WORK
          OPEN p_zta_cl USING g_zta.zta01,g_zta.zta02
          IF sqlca.sqlcode THEN
             LET g_err="open lock cursor error(b):p_zta_cl"
             CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)   # 資料被他人LOCK
             CLOSE p_zta_cl
             ROLLBACK WORK
             RETURN
          END IF
          FETCH p_zta_cl INTO g_zta.*            # 鎖住將被更改或取消的資料
          IF sqlca.sqlcode THEN
             LET g_err="fetch lock cursor error(b):p_zta_cl"
             CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)      # 資料被他人LOCK
             CLOSE p_zta_cl
             ROLLBACK WORK
             RETURN
          END IF
          IF g_rec_b >= l_ac THEN
             LET p_cmd="u"
             LET g_ztb_t.* = g_ztb[l_ac].*  #BACKUP
#             LET g_ztb_o.* = g_ztb[l_ac].*  #BACKUP
             IF g_zta.zta02 = 'ds' THEN
#                OPEN p_zta_b_cl USING g_zta.zta01,g_zta.zta02,g_ztb_t.ztb03
#                IF sqlca.sqlcode THEN
#                   LET g_err="open lock cursor error(b):p_zta_b_cl"
#                   CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0) # 資料被他人LOCK
#                   LET l_lock_sw="Y"
#                   CLOSE p_zta_b_cl
#                   ROLLBACK WORK
#                   RETURN
#                ELSE
#                   FETCH p_zta_b_cl INTO g_ztb[l_ac].*
#                   IF sqlca.sqlcode THEN
#                      LET g_err="fetch lock cursor error(b):p_zta_b_cl"
#                      CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
#                      LET l_lock_sw = "Y"
#                   END IF
                   LET l_sql="SELECT gaq03,gaq05 FROM gaq_file",
                             " WHERE gaq01='",g_ztb[l_ac].ztb03 CLIPPED,"'",
                             "   AND gaq02='",g_lang CLIPPED,"'"
                   PREPARE p_zta_b_pre1 FROM l_sql
                   EXECUTE p_zta_b_pre1 INTO g_ztb[l_ac].gaq03,g_ztb[l_ac].gaq05
                   FREE p_zta_b_pre1
#                           DISPLAY ARRAY g_ztb TO s_ztb.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
#                             BEFORE DISPLAY
#                           END DISPLAY
#                END IF
             ELSE
                LET l_sql="SELECT gaq03,gaq05 FROM gaq_file",
                          " WHERE gaq01='",g_ztb[l_ac].ztb03 CLIPPED,"'",
                          "   AND gaq02='",g_lang CLIPPED,"'"
                PREPARE p_zta_b_pre2 FROM l_sql
                EXECUTE p_zta_b_pre2 INTO g_ztb[l_ac].gaq03,g_ztb[l_ac].gaq05
                FREE p_zta_b_pre2
             END IF
          END IF
#          IF g_zta.zta10='Y' THEN
#             NEXT FIELD ztb04
#          END IF
           #No.FUN-7A0029
           IF cl_null(FGL_GETENV("TOPLINK")) AND g_zta.zta10 = 'Y' THEN 
              IF p_cmd = 'u' THEN
                 CALL cl_set_comp_entry("ztb04",FALSE)
              ELSE
                 CALL cl_set_comp_entry("ztb04",TRUE)
              END IF
           ELSE
              CALL cl_set_comp_entry("ztb04",TRUE)
           END IF
           #END No.FUN-7A0029
 
       BEFORE INSERT
          LET p_cmd='a'
 
          LET l_n=ARR_COUNT()
          INITIALIZE g_ztb[l_ac].* TO NULL
          LET g_ztb_t.*=g_ztb[l_ac].*
          LET g_ztb[l_ac].ztb09='N'
          #No.FUN-7A0029 
          IF cl_null(FGL_GETENV("TOPLINK")) THEN 
             LET ls_str = g_zta.zta01 CLIPPED

             #----------FUN-9C0175 modify start----------------------
             LET l_number = 0
             LET l_max = 0
             FOR l_i=1 TO (g_ztb.getlength() - 1)
                 LET l_ztb03_str = g_ztb[l_i].ztb03
                 LET l_number = l_ztb03_str.subString(ls_str.getIndexOf("_file",1), l_ztb03_str.getLength())

                 IF l_number > l_max THEN
                    LET l_max = l_number
                 END IF
             END FOR
             LET l_max = l_max + 1
             LET l_ztb03_str = l_max
             LET l_ztb03_str = l_ztb03_str.trim()
             IF (l_ztb03_str.getLength() < 2) THEN
                LET l_ztb03_str = "0",  l_ztb03_str.trim()
             END IF
             #----------FUN-9C0175 modify end------------------------

             IF ls_str.getIndexOf("_file", 1) > 0 THEN     #CHI-9C0041
                LET g_ztb[l_ac].ztb03 = g_zta.zta01[1,ls_str.getIndexOf("_file",1)-1], l_ztb03_str   #FUN-9C0175
             #----------CHI-9C0041 modify start----------------------
             ELSE
                LET g_ztb[l_ac].ztb03 = g_zta.zta01, l_ztb03_str
             END IF
             #----------CHI-9C0041 modify end------------------------

             IF g_zta.zta01[1,3] != 'tc_' THEN
                LET g_ztb[l_ac].ztb03 = 'ta_',g_ztb[l_ac].ztb03 CLIPPED
             END IF
          END IF
          #END No.FUN-7A0029 
          CALL cl_set_comp_entry("ztb04",TRUE)              #No.CHI-840045
          NEXT FIELD ztb03
 
 
       AFTER INSERT
          IF INT_FLAG THEN
             CALL cl_err('',9001,0)
             LET INT_FLAG = 0
             CANCEL INSERT
          END IF
 
          #No.TQC-860023 -- start --
          IF g_ztb[l_ac].ztb11 = "' '" THEN #若預設值為' '(單一空白時)
              LET l_ztb11= " "
          ELSE
              IF cl_null(g_ztb[l_ac].ztb11) THEN
                   LET l_ztb11 = NULL
              ELSE
                   LET l_ztb11= g_ztb[l_ac].ztb11 CLIPPED
              END IF
          END IF
          #No.TQC-860023 -- end --
 
          IF g_zta.zta10 != 'Y' THEN
             LET l_sql="SELECT MAX(ztb10)+1 FROM ztb_file",
                       " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                       "   AND ztb02='",g_zta.zta02 CLIPPED,"'"
             PREPARE p_zta_b_pre3 FROM l_sql
             EXECUTE p_zta_b_pre3 INTO l_ztb10
             IF SQLCA.SQLCODE THEN
                LET g_err="select max(ztb10) error(b):",g_ztb[l_ac].ztb03
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("sel","ztb_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                CANCEL INSERT
             ELSE
                IF l_ztb10 IS NULL THEN
                   LET l_ztb10=1
                END IF
             END IF
             FREE p_zta_b_pre3
 
             #No.TQC-860023 -- start --
             #Informix 若是 defulat '' & ' ' 皆是單一空白, 
             #若要 default null 時，則不能給于 ztb11 值
             IF l_ztb11 IS NULL AND g_db_type="IFX" THEN
                LET l_sql="INSERT INTO ztb_file(ztb01,ztb02,ztb03,ztb04,",
                                     "ztb05,ztb06,ztb07,ztb08,ztb09,ztb10)",
                          "VALUES('",g_zta.zta01 CLIPPED,"','",
                                     g_zta.zta02 CLIPPED,"','",
                                     g_ztb[l_ac].ztb03 CLIPPED,"','",
                                     g_ztb[l_ac].ztb04 CLIPPED,"','",
                                     g_ztb[l_ac].ztb05 CLIPPED,"','",
                                     g_ztb[l_ac].ztb06 CLIPPED,"','",
                                     g_ztb[l_ac].ztb07 CLIPPED,"','",
                                     g_ztb[l_ac].ztb08 CLIPPED,"','",
                                     g_ztb[l_ac].ztb09 CLIPPED,"',",
                                     l_ztb10 CLIPPED,")" 
             ELSE
                LET l_sql="INSERT INTO ztb_file(ztb01,ztb02,ztb03,ztb04,",
                                     "ztb05,ztb06,ztb07,ztb08,ztb09,ztb10,ztb11)",
                          "VALUES('",g_zta.zta01 CLIPPED,"','",
                                     g_zta.zta02 CLIPPED,"','",
                                     g_ztb[l_ac].ztb03 CLIPPED,"','",
                                     g_ztb[l_ac].ztb04 CLIPPED,"','",
                                     g_ztb[l_ac].ztb05 CLIPPED,"','",
                                     g_ztb[l_ac].ztb06 CLIPPED,"','",
                                     g_ztb[l_ac].ztb07 CLIPPED,"','",
                                     g_ztb[l_ac].ztb08 CLIPPED,"','",
                                     g_ztb[l_ac].ztb09 CLIPPED,"',",
                                     l_ztb10 CLIPPED,",'",
                                     l_ztb11,"')" 
             END IF
             #No.TQC-860023 -- end --
             EXECUTE IMMEDIATE l_sql
             IF sqlca.sqlcode THEN
                LET g_err="insert ztb error(b):",g_ztb[l_ac].ztb03
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("ins","ztb_file",g_zta.zta01,g_ztb[l_ac].ztb03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
#                ROLLBACK WORK
                CANCEL INSERT
             ELSE
                #No.FUN-7A0029
                IF g_ztb[l_ac].ztb05 = 's' OR l_cust = 'Y' THEN
                   SELECT COUNT(*) INTO l_cnt FROM zte_file
                    WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                      AND zte03 = g_ztb[l_ac].ztb03
                   IF l_cnt > 0 THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                      VALUES(g_zta.zta01,'ds',g_ztb[l_ac].ztb03,g_ztb[l_ac].ztb05,'','')   
                      IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                         CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztb[l_ac].ztb03,SQLCA.sqlcode,"",g_err,0) 
                         ROLLBACK WORK
                         CANCEL INSERT
                      END IF
                   END IF
                ELSE
                   IF g_ztb_t.ztb05 = 's' AND g_ztb[l_ac].ztb05 != 's' THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      IF g_ztb[l_ac].ztb05 = 'p' THEN
                         UPDATE zte_file set zte04= ''
                          WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                            AND zte03 = g_ztb[l_ac].ztb03
                      END IF
                   END IF
                END IF
                #END No.FUN-7A0029
 
                MESSAGE "INSERT O.K"
                COMMIT WORK
                LET g_rec_b=g_rec_b+1
                DISPLAY g_rec_b TO FORMONLY.cn2
             END IF
          ELSE
             IF p_zta_question_msg("zta-011","zta-010") THEN
                LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                          " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                          "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
                PREPARE p_zta_b_pre4 FROM l_sql
                EXECUTE p_zta_b_pre4 INTO l_zs03
                FREE p_zta_b_pre4
                IF l_zs03 IS NULL THEN
                   LET l_zs03 = 1
                END IF
                #IF g_db_type="IFX" THEN
                CASE g_db_type                                     #FUN-730016
                 WHEN "IFX"                                        #FUN-730016 
                   IF g_ztb[l_ac].ztb09 = 'Y' THEN
                      IF g_ztb[l_ac].ztb04 = "datetime" THEN
                         IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED," ",
                                       g_ztb[l_ac].ztb06 CLIPPED," to ",
                                       g_ztb[l_ac].ztb07 CLIPPED," not null);"
                         ELSE
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED," ",
                                       g_ztb[l_ac].ztb06 CLIPPED," to ",
                                       g_ztb[l_ac].ztb07 CLIPPED," default ''",
                                       l_ztb11,"'' not null);"  #No.TQC-860023
                         END IF
                      ELSE
                         IF g_ztb[l_ac].ztb04 = "char" OR
                            g_ztb[l_ac].ztb04 = "decimal" THEN
                            IF g_ztb[l_ac].ztb11 IS NULL  OR
                               (g_ztb[l_ac].ztb04 = "decimal" AND cl_null(g_ztb[l_ac].ztb11)) THEN  ##No.MOD-840661
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED,"(",
                                          g_ztb[l_ac].ztb08 CLIPPED,") not null);"
                            ELSE
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED,"(",
                                          g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                          l_ztb11,"'' not null);"   #No.TQC-860023
                            END IF
                         ELSE
                            IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," not null);"
                            ELSE
                               #No.TQC-810014
                               IF (g_ztb[l_ac].ztb04 = 'date' AND
                                   g_ztb[l_ac].ztb11 = 'today' ) OR
                                   g_ztb[l_ac].ztb04 = 'integer' OR
                                   g_ztb[l_ac].ztb04 = 'smallint'      #No.MOD-840661
                               THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," default ",
                                             l_ztb11," not null);"   #No.TQC-860023
                               ELSE
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                             l_ztb11,"'' not null);"  #No.TQC-860023
                               END IF
                               #END No.TQC-810014
                            END IF
                         END IF
                      END IF
                   ELSE
                      IF g_ztb[l_ac].ztb04 = "datetime" THEN
                         IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED," ",
                                       g_ztb[l_ac].ztb06 CLIPPED," to ",
                                       g_ztb[l_ac].ztb07 CLIPPED,");"
                         ELSE
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED," ",
                                       g_ztb[l_ac].ztb06 CLIPPED," to ",
                                       g_ztb[l_ac].ztb07 CLIPPED," default ''",
                                       l_ztb11,"'');"    #No.TQC-860023
                         END IF
                      ELSE
                         IF g_ztb[l_ac].ztb04 = "char" OR
                            g_ztb[l_ac].ztb04 = "decimal" THEN
                            IF g_ztb[l_ac].ztb11 IS NULL OR
                               (g_ztb[l_ac].ztb04 = "decimal" AND cl_null(g_ztb[l_ac].ztb11)) THEN  #No.MOD-840661
 
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED,"(",
                                          g_ztb[l_ac].ztb08 CLIPPED,"));"
                            ELSE
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED,"(",
                                          g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                          l_ztb11,"'');"   #No.TQC-860023
                            END IF
                         ELSE
                            IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED,");"
                            ELSE
                               #No.TQC-810014
                               IF (g_ztb[l_ac].ztb04 = 'date' AND
                                   g_ztb[l_ac].ztb11 = 'today' ) OR
                                   g_ztb[l_ac].ztb04 = 'integer' OR
                                   g_ztb[l_ac].ztb04 = 'smallint'      #No.MOD-840661
                               THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," default ",
                                             l_ztb11,");"      #No.TQC-860023
                               ELSE
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                             l_ztb11,"'');"    #No.TQC-860023
                               END IF
                               #END No.TQC-810014
                            END IF
                         END IF
                      END IF
                   END IF
 
                 WHEN "ORA"                                        #FUN-730016 
                   IF g_ztb[l_ac].ztb09 = 'Y' THEN
                      IF g_ztb[l_ac].ztb04 = "varchar2" OR
                         g_ztb[l_ac].ztb04 = "char" OR
                         g_ztb[l_ac].ztb04 = "number" THEN
                         IF g_ztb[l_ac].ztb11 IS NULL OR
                            (g_ztb[l_ac].ztb04 = "number" AND cl_null(g_ztb[l_ac].ztb11))   #No.MOD-840661
                         THEN
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED,"(",
                                       g_ztb[l_ac].ztb08 CLIPPED,") not null);"
                         ELSE
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED,"(",
                                       g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                       l_ztb11,"'' not null);"   #No.TQC-860023
                         END IF
                      ELSE
                         IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED," not null);"
                         ELSE
                            #No.TQC-810014
                            IF g_ztb[l_ac].ztb04 = 'date' AND 
                               g_ztb[l_ac].ztb11 = 'sysdate' 
                            THEN
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," default ",
                                          l_ztb11," not null);"   #No.TQC-860023
                            ELSE
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                          l_ztb11,"'' not null);" #No.TQC-860023
                            END IF
                            #END No.TQC-810014
                         END IF
                      END IF
                   ELSE
                      IF g_ztb[l_ac].ztb04 = "varchar2" OR
                         g_ztb[l_ac].ztb04 = "char" OR
                         g_ztb[l_ac].ztb04 = "number" THEN
                         IF g_ztb[l_ac].ztb11 IS NULL OR
                            (g_ztb[l_ac].ztb04 = "number" AND cl_null(g_ztb[l_ac].ztb11)) THEN  #No.MOD-840661
 
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED,"(",
                                       g_ztb[l_ac].ztb08 CLIPPED,"));"
                         ELSE
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED,"(",
                                       g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                       l_ztb11,"'');"   #No.TQC-860023
                         END IF
                      ELSE
                         IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                       g_ztb[l_ac].ztb03 CLIPPED," ",
                                       g_ztb[l_ac].ztb04 CLIPPED,");"
                         ELSE
                            #No.TQC-810014
                            IF g_ztb[l_ac].ztb04 = 'date' AND 
                               g_ztb[l_ac].ztb11 = 'sysdate' 
                            THEN
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," default ",
                                          l_ztb11,");"        #No.TQC-860023
                            ELSE
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                          l_ztb11,"'');"      #No.TQC-860023
                            END IF
                            #END No.TQC-810014
                         END IF
                      END IF
                   END IF
 
                 WHEN "MSV"                                        #FUN-730016 
                   #No.FUN-A60022---start
                   IF g_ztb[l_ac].ztb04 = "char" OR g_ztb[l_ac].ztb04 = "varchar" 
                     OR g_ztb[l_ac].ztb04 = "nvarchar" OR g_ztb[l_ac].ztb04 = "decimal" THEN 
                     IF g_ztb[l_ac].ztb09 ='Y' THEN       #此欄位設定為not null
                        IF g_ztb[l_ac].ztb11 IS NULL THEN   #此欄位無預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                      g_ztb[l_ac].ztb03 CLIPPED," ",
                                      g_ztb[l_ac].ztb04 CLIPPED,"(",
                                      g_ztb[l_ac].ztb08 CLIPPED,") not null;" 
                        ELSE      #此欄位有預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                      g_ztb[l_ac].ztb03 CLIPPED," ",
                                      g_ztb[l_ac].ztb04 CLIPPED,"(",
                                      g_ztb[l_ac].ztb08 CLIPPED,") not null ",
                                      " default ''",l_ztb11,"'';" 
                        END IF
                     ELSE                  #此欄位設定可 null 
                        IF g_ztb[l_ac].ztb11 IS NULL THEN   #此欄位無預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                   g_ztb[l_ac].ztb03 CLIPPED," ",
                                   g_ztb[l_ac].ztb04 CLIPPED,"(",
                                   g_ztb[l_ac].ztb08 CLIPPED,");"
                        ELSE        #此欄位有預設值 
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                   g_ztb[l_ac].ztb03 CLIPPED," ",
                                   g_ztb[l_ac].ztb04 CLIPPED,"(",
                                   g_ztb[l_ac].ztb08 CLIPPED,") ",
                                   " default ''",l_ztb11,"'';"  
                        END IF
                     END IF
                   END IF
                   IF  g_ztb[l_ac].ztb04 = "integer" OR g_ztb[l_ac].ztb04 = "sysname" 
                   OR g_ztb[l_ac].ztb04 = "smallint" OR g_ztb[l_ac].ztb04 = "text" OR g_ztb[l_ac].ztb04 = "image" THEN
                      IF g_ztb[l_ac].ztb09 ='Y' THEN       #此欄位設定為not null
                        IF g_ztb[l_ac].ztb11 IS NULL THEN   #此欄位沒有預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED," not null;"
                        ELSE      #此欄位有預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED," not null ",
                                    " default ''",l_ztb11,"'';"
                        END IF
                     ELSE         #此欄位設定可 null
                        IF g_ztb[l_ac].ztb11 IS NULL THEN   #此欄位無預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED,";"
                        ELSE        #此欄位有預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED,
                                    " default ''",l_ztb11,"'';" 
                        END IF
                     END IF               
                   END IF
                   IF g_ztb[l_ac].ztb04 = "datetime" THEN
                      IF g_ztb[l_ac].ztb09 ='Y' THEN       #此欄位設定為 not null 
                        IF g_ztb[l_ac].ztb11 IS NULL THEN   #此欄位無預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED," not null;"
                        ELSE      #此欄位有預設值
                           IF l_ztb11 MATCHES 'getdate()' THEN
                              LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED," not null ",
                                    " default ",l_ztb11,";"
                           ELSE
                              LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED," not null ",
                                    " default ''",l_ztb11,"'';"
                           END IF
                        END IF
                     ELSE         #此欄位設定可 null
                        IF g_ztb[l_ac].ztb11 IS NULL THEN   #此欄位無預設值
                           LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED,";"
                        ELSE        #此欄位有預設值
                           IF l_ztb11 MATCHES 'getdate()' THEN
                              LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED,
                                    " default ",l_ztb11,";" 
                           ELSE
                              LET l_cmd="alter table ",g_zta.zta01 CLIPPED," add ",
                                    g_ztb[l_ac].ztb03 CLIPPED," ",
                                    g_ztb[l_ac].ztb04 CLIPPED,
                                    " default ''",l_ztb11,"'';" 
                           END IF  
                        END IF
                     END IF
                   END IF
                   #No.FUN-A60022---end  

                END CASE                                           #FUN-730016
 
                #No.FUN-7A0029
                IF g_ztb[l_ac].ztb05 = 's' OR l_cust = 'Y' THEN
                   SELECT COUNT(*) INTO l_cnt FROM zte_file
                    WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                      AND zte03 = g_ztb[l_ac].ztb03
                   IF l_cnt > 0 THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                      VALUES(g_zta.zta01,'ds',g_ztb[l_ac].ztb03,g_ztb[l_ac].ztb05,'','')   
                      IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                         CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztb[l_ac].ztb03,SQLCA.sqlcode,"",g_err,0) 
                         ROLLBACK WORK
                         CANCEL INSERT
                      END IF
                   END IF
                ELSE
                   IF g_ztb_t.ztb05 = 's' AND g_ztb[l_ac].ztb05 != 's' THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      IF g_ztb[l_ac].ztb05 = 'p' THEN
                         UPDATE zte_file set zte04= ''
                          WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                            AND zte03 = g_ztb[l_ac].ztb03
                      END IF
                   END IF
                END IF
                #END No.FUN-7A0029
 
                LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,",
                           "zs06,zs07,zs08,zs09,zs10,zs11,zs12)",  #No.MOD-470041
                          "VALUES('",g_zta.zta01 CLIPPED,"','",
                                     g_zta.zta02 CLIPPED,"',",
                                     l_zs03 CLIPPED,",'",
                                     g_date CLIPPED,"','",
                                     g_ztb[l_ac].ztb05 CLIPPED,"','",
                                     l_cmd CLIPPED,"','",
                                     g_user CLIPPED,"','",
                                     g_MODNO CLIPPED,"','Y','N','N','",
                                     g_tiptop_ver CLIPPED,"')"
                EXECUTE IMMEDIATE l_sql
                IF sqlca.sqlcode THEN
                   LET g_err="insert zs error(b):no.",l_zs03
                   #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                   CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                   ROLLBACK WORK
                   CANCEL INSERT
#                   DELETE FROM ztb_file WHERE ztb01=g_zta.zta01
#                      AND ztb02=g_zta.zta02
#                      AND ztb03=g_ztb[l_ac].ztb03
                ELSE
                   IF g_edition="C" THEN
                      LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                " VALUES('",g_zta.zta01 CLIPPED,"','",
                                            g_zta.zta02 CLIPPED,"',",
                                            l_zs03 CLIPPED,",'",
                                            g_date CLIPPED,"','",
                                            g_ztb[l_ac].ztb05 CLIPPED,"','",
                                            l_cmd CLIPPED,"','",
                                            g_user CLIPPED,"','",
                                            g_MODNO CLIPPED,
                                            "','Y','N','N','",
                                            g_tiptop_ver CLIPPED,"')"
                      EXECUTE IMMEDIATE l_sql
                      IF sqlca.sqlcode THEN
                         LET g_err="insert zs@std_server error(b):no.",l_zs03
                         #CALL cl_err(g_err,sqlca.sqlcode,1)  #No.FUN-660081
                         CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                         ROLLBACK WORK
                         CANCEL INSERT
#                        DELETE FROM ztb_file WHERE ztb01=g_zta.zta01
#                           AND ztb02=g_zta.zta02
#                           AND ztb03=g_ztb[l_ac].ztb03
                      END IF
                   END IF
                   LET l_sql="SELECT zs06 FROM zs_file",
                             " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                             "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                             "   AND zs03='",l_zs03 CLIPPED,"'"
                   PREPARE p_zta_b_pre5 FROM l_sql
                   EXECUTE p_zta_b_pre5 INTO l_cmd
                   FREE p_zta_b_pre5
                   FOR l_i=1 TO LENGTH(l_cmd)
                       IF l_cmd[l_i,l_i] = ';' THEN
                          LET l_cmd[l_i,l_i]=' '
                          EXIT FOR
                       END IF
                   END FOR
                   EXECUTE IMMEDIATE l_cmd
                   IF sqlca.sqlcode THEN
                      LET g_err="DDL command error(b):",l_cmd
                      CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                      ROLLBACK WORK
                      CANCEL INSERT
                   ELSE
                      COMMIT WORK
                      LET g_rec_b=g_rec_b+1
                      CALL fgl_winmessage("Info","Add Column Success",
                                          "info")
                      DISPLAY g_rec_b TO FORMONLY.cn2
 
                      CALL p_zta_parse_view(g_zta.zta01,'u',l_cmd) #No.FUN-990043
 
                   END IF
                END IF
             ELSE
                CANCEL INSERT
             END IF
          END IF
 
       BEFORE FIELD ztb03
         IF g_zta.zta10 = "Y" THEN
            IF p_cmd="u" THEN
              NEXT FIELD ztb04
            END IF
         END IF
 
       #FUN-7A0029
       AFTER FIELD ztb03
         IF NOT cl_null(g_ztb[l_ac].ztb03) THEN
            IF g_ztb[l_ac].ztb03 != g_ztb_t.ztb03 OR g_ztb_t.ztb03 IS NULL 
            THEN
               IF g_zta.zta10 != 'Y' THEN
                   SELECT COUNT(*) INTO l_cnt FROM ztb_file
                    WHERE ztb01 = g_zta.zta01 AND ztb02 = g_zta.zta02
                      AND ztb03 = g_ztb[l_ac].ztb03 
               ELSE
                   CASE g_db_type                                            #FUN-730016
                    WHEN "IFX"                                               #FUN-730016
                      SELECT COUNT(*) INTO l_cnt FROM systables a,syscolumns b
                       WHERE tabname= g_zta.zta01 
                         AND colname= g_ztb[l_ac].ztb03
                         AND a.tabid=b.tabid
                   
                    WHEN "ORA"                                               #FUN-730016
                      SELECT COUNT(*) INTO l_cnt FROM user_tab_columns
                       WHERE lower(table_name) = g_zta.zta01
                         AND lower(column_name) = g_ztb[l_ac].ztb03
                   
                    WHEN "MSV"                                               #FUN-730016
                      #No.FUN-A60022---start
                      SELECT COUNT(*) INTO l_cnt FROM sys.objects a,sys.columns b
                       WHERE a.object_id=b.object_id
                         AND a.name = g_zta.zta01
                         AND b.name = g_ztb[l_ac].ztb03
                      #No.FUN-A60022---end
                   END CASE                                                  #FUN-730016
               END IF
               IF l_cnt > 0 THEN
                  CALL cl_err(g_ztb[l_ac].ztb03,-239,0)
                  LET g_ztb[l_ac].ztb03 = g_ztb_t.ztb03
                  NEXT FIELD ztb03
               END IF   
               
               IF cl_null(FGL_GETENV("TOPLINK")) THEN
                  IF g_zta.zta01[1,3] = "tc_" THEN
                     IF g_ztb[l_ac].ztb03[1,3] != 'tc_' THEN
                        CALL cl_err_msg(g_ztb[l_ac].ztb03,"zta-037","tc", 0)
                        NEXT FIELD ztb03
                     END IF
                  ELSE
                     IF g_ztb[l_ac].ztb03[1,3] != 'ta_' THEN
                        CALL cl_err_msg(g_ztb[l_ac].ztb03,"zta-037","ta", 0)
                        NEXT FIELD ztb03
                     END IF
                  END IF
               END IF
               #END FUN-END IF
            END IF
         END IF
       #END FUN-7A0029
 
       BEFORE FIELD ztb04
         IF cl_null(g_ztb[l_ac].ztb03) THEN
            NEXT FIELD ztb03
         ELSE
            LET l_sql="SELECT gaq03,gaq05 FROM gaq_file",
                      " WHERE gaq01='",g_ztb[l_ac].ztb03 CLIPPED,"'",
                      "   AND gaq02='",g_lang CLIPPED,"'"
            PREPARE p_zta_b_pre6 FROM l_sql
            EXECUTE p_zta_b_pre6 INTO g_ztb[l_ac].gaq03,g_ztb[l_ac].gaq05
            FREE p_zta_b_pre6
            IF cl_null(g_ztb[l_ac].ztb05) THEN   #No.FUN-7A0029
               IF g_zta.zta01[1,3]='tc_' OR
                  g_ztb[l_ac].ztb03[1,3]='tc_' OR
                  g_ztb[l_ac].ztb03[1,3]='ta_' THEN
                  IF g_ztb[l_ac].ztb05 = 'p' OR cl_null(g_ztb[l_ac].ztb05) THEN                   #No.FUN-7A0029
                     LET g_ztb[l_ac].ztb05='c'
                  END IF
               ELSE
                  LET g_ztb[l_ac].ztb05='p'
               END IF
            END IF
         END IF
 
       AFTER FIELD ztb04
         #No.FUN-A60022---start
         #IF g_ztb[l_ac].ztb04 = "datetime" THEN
         #   CALL cl_set_comp_visible("ztb06,ztb07",TRUE)
         #   NEXT FIELD ztb06
         #END IF
         IF g_db_type ="MSV" THEN 
            CALL cl_set_comp_visible("ztb06,ztb07",FALSE)
            NEXT FIELD ztb08
         ELSE 
            IF g_ztb[l_ac].ztb04 = "datetime" THEN
               CALL cl_set_comp_visible("ztb06,ztb07",TRUE)
               NEXT FIELD ztb06
            END IF
         END IF 
         #No.FUN-A60022---end
 
       BEFORE FIELD ztb08
         IF cl_null(g_ztb[l_ac].ztb04) THEN
            NEXT FIELD ztb04
         ELSE
       	    #No.FUN-A60022---start
            CASE g_db_type
             WHEN "ORA" 
               IF g_ztb[l_ac].ztb04 != "varchar2" AND
                  g_ztb[l_ac].ztb04 != "number" AND
                  g_ztb[l_ac].ztb04 != "char" AND
                  g_ztb[l_ac].ztb04 != "decimal" THEN
                  NEXT FIELD ztb09
               END IF
             WHEN "MSV"
              IF g_ztb[l_ac].ztb04 != "varchar" AND
                 g_ztb[l_ac].ztb04 != "char" AND
                 g_ztb[l_ac].ztb04 != "nvarchar" AND
                 g_ztb[l_ac].ztb04 != "decimal" THEN
                 NEXT FIELD ztb09
              END IF            
            END CASE
            #No.FUN-A60022---end
         END IF
 
       AFTER FIELD ztb08
         IF g_ztb[l_ac].ztb04="varchar2" OR
            g_ztb[l_ac].ztb04="char" OR 
            g_ztb[l_ac].ztb04="nvarchar"        #No.FUN-A60022
         THEN
            IF g_ztb[l_ac].ztb08 IS NULL THEN
               NEXT FIELD ztb08
            END IF
            FOR l_i=1 TO LENGTH(g_ztb[l_ac].ztb08)
                IF g_ztb[l_ac].ztb08[l_i,l_i] NOT MATCHES "[0123456789]" THEN
                   LET g_ztb[l_ac].ztb08=""
                   NEXT FIELD ztb08
                END IF
            END FOR
         ELSE
            IF g_ztb[l_ac].ztb08 IS NULL THEN
               NEXT FIELD ztb08
            END IF
            LET l_ln=0
            FOR l_i=1 TO LENGTH(g_ztb[l_ac].ztb08)
                IF g_ztb[l_ac].ztb08[l_i,l_i] NOT MATCHES "[0123456789]" OR
                   g_ztb[l_ac].ztb08[l_i,l_i] IS NULL THEN
                   IF g_ztb[l_ac].ztb08[l_i,l_i] <> "," OR
                      g_ztb[l_ac].ztb08[l_i,l_i] IS NULL THEN
                      LET g_ztb[l_ac].ztb08=""
                      NEXT FIELD ztb08
                   ELSE
                      LET l_ln=l_ln+1
                      IF l_ln > 1 THEN
                         LET g_ztb[l_ac].ztb08=""
                         NEXT FIELD ztb08
                      END IF
                   END IF
                END IF
             END FOR
          END IF
          #No.FUN-7A0029
          IF cl_null(FGL_GETENV("TOPLINK")) THEN 
             IF p_cmd = 'u' and g_ztb[l_ac].ztb08 != g_ztb_t.ztb08 THEN 
                IF g_ztb[l_ac].ztb05 = 'p' THEN
                   LET g_ztb[l_ac].ztb05 = 'c'  
                   LET l_cust = 'Y'
                END IF
             END IF
          END IF
          #END No.FUN-7A0029
 
       BEFORE FIELD ztb06
          IF g_ztb[l_ac].ztb04 != "datetime"  THEN
             NEXT FIELD ztb09
          END IF
 
       AFTER FIELD ztb06
#          IF cl_null(g_ztb[l_ac].ztb06) THEN
#             NEXT FIELD ztb06
#          END IF
          CASE
            WHEN g_ztb[l_ac].ztb06='year'
                 CALL cl_set_combo_items("ztb07","1,2,3,4,5,6","year,month,day,hour,minute,seconds")
            WHEN g_ztb[l_ac].ztb06='month'
                 CALL cl_set_combo_items("ztb07","1,2,3,4,5","month,day,hour,minute,seconds")
            WHEN g_ztb[l_ac].ztb06='day'
                 CALL cl_set_combo_items("ztb07","1,2,3,4","day,hour,minute,seconds")
            WHEN g_ztb[l_ac].ztb06='hour'
                 CALL cl_set_combo_items("ztb07","1,2,3","hour,minute,seconds")
            WHEN g_ztb[l_ac].ztb06='minute'
                 CALL cl_set_combo_items("ztb07","1,2","minute,seconds")
            WHEN g_ztb[l_ac].ztb06='seconds'
                 CALL cl_set_combo_items("ztb07","1","seconds")
          END CASE
 
       BEFORE FIELD ztb07
          IF g_ztb[l_ac].ztb04 != "datetime" THEN
             NEXT FIELD ztb09
          END IF
       AFTER FIELD ztb07
#          IF cl_null(g_ztb[l_ac].ztb07) THEN
#             NEXT FIELD ztb07
#          END IF
 
       BEFORE FIELD ztb05
          IF cl_null(g_ztb[l_ac].ztb03) THEN
             NEXT FIELD ztb03
          #ELSE                                    #No.FUN-7A0029
            #NEXT FIELD gaq03                      #No.FUN-7A0029 
          END IF
 
       #No.FUN-7A0029
       ON CHANGE ztb05
          IF cl_null(FGL_GETENV("TOPLINK")) THEN 
             IF g_ztb[l_ac].ztb05 = 'p' AND 
               (l_cust = 'Y' OR 
               g_zta.zta01[1,3]='tc_' OR
               g_ztb[l_ac].ztb03[1,3]='tc_' OR
               g_ztb[l_ac].ztb03[1,3]='ta_' OR
               g_ztb_t.ztb05 = 's' OR
               g_ztb_t.ztb05 = 'c' )
             THEN
                CALL cl_err('','zta-040',0)
                IF g_ztb_t.ztb05 = 's' THEN
                    LET g_ztb[l_ac].ztb05 = 's'
                ELSE
                    LET g_ztb[l_ac].ztb05 = 'c'
                END IF
                NEXT FIELD ztb05
             END IF
          END IF
 
       AFTER FIELD ztb09
          IF cl_null(FGL_GETENV("TOPLINK")) THEN 
             IF p_cmd = 'u' and g_ztb[l_ac].ztb09 != g_ztb_t.ztb09 THEN 
                IF g_ztb[l_ac].ztb05 = 'p' THEN
                   LET g_ztb[l_ac].ztb05 = 'c'  
                   LET l_cust = 'Y'
                END IF
             END IF
          END IF
          IF cl_null(g_ztb[l_ac].ztb11) AND  g_zta.zta10='Y' 
          THEN
             IF (g_ztb[l_ac].ztb09 = 'Y' AND p_cmd = 'a') OR
                (g_ztb[l_ac].ztb09 = 'Y' AND p_cmd = 'u' AND g_ztb[l_ac].ztb09 != g_ztb_t.ztb09) 
             THEN
                NEXT FIELD ztb11
             END IF
          END IF
 
       AFTER FIELD ztb11
          IF cl_null(g_ztb[l_ac].ztb11) AND  g_zta.zta10='Y' 
          THEN
             IF (g_ztb[l_ac].ztb09 = 'Y' AND p_cmd = 'a') OR
                (g_ztb[l_ac].ztb09 = 'Y' AND p_cmd = 'u' AND g_ztb[l_ac].ztb09 != g_ztb_t.ztb09) 
             THEN
                NEXT FIELD ztb11
             END IF
          END IF
          IF cl_null(FGL_GETENV("TOPLINK")) THEN 
             IF p_cmd = 'u' and g_ztb[l_ac].ztb11 != g_ztb_t.ztb11 THEN 
                IF g_ztb[l_ac].ztb05 = 'p' THEN
                   LET g_ztb[l_ac].ztb05 = 'c'  
                   LET l_cust = 'Y'
                END IF
             END IF
          END IF
       #END No.FUN-7A0029
 
       BEFORE FIELD gaq03
          IF cl_null(g_ztb[l_ac].ztb03) THEN
             NEXT FIELD ztb03
          END IF
       AFTER FIELD gaq03
          IF NOT cl_null(g_ztb[l_ac].gaq03) THEN
             FOR l_i=1 TO g_lang_arr.getlength()
                 IF g_lang=g_lang_arr[l_i] THEN
                    INSERT INTO gaq_file(gaq01,gaq02,gaq03,gaq06)   #No.FUN-660025
                    VALUES(g_ztb[l_ac].ztb03,g_lang,g_ztb[l_ac].gaq03,'N')   #No.FUN-660025
                    #IF sqlca.sqlcode=-239 THEN               #TQC-790092
                    IF cl_sql_dup_value(SQLCA.SQLCODE) THEN   #TQC-790092
                       UPDATE gaq_file SET gaq03=g_ztb[l_ac].gaq03
                        WHERE gaq01=g_ztb[l_ac].ztb03 AND gaq02=g_lang
                    END IF
                 ELSE
                    INSERT INTO gaq_file(gaq01,gaq02,gaq06)   #No.FUN-660025
                    VALUES(g_ztb[l_ac].ztb03,g_lang_arr[l_i],'N')   #No.FUN-660025
                 END IF
             END FOR
          END IF
 
       BEFORE FIELD gaq05
          IF cl_null(g_ztb[l_ac].ztb03) THEN
             NEXT FIELD ztb03
          END IF
       AFTER FIELD gaq05
          IF NOT cl_null(g_ztb[l_ac].gaq05) THEN
             FOR l_i=1 TO g_lang_arr.getlength()
                 IF g_lang=g_lang_arr[l_i] THEN
                    INSERT INTO gaq_file(gaq01,gaq02,gaq05,gaq06)   #No.FUN-660025
                    VALUES(g_ztb[l_ac].ztb03,g_lang,g_ztb[l_ac].gaq05,'N')   #No.FUN-660025
                    #IF sqlca.sqlcode=-239 THEN              #TQC-790092
                    IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  #TQC-790092
                       UPDATE gaq_file SET gaq05=g_ztb[l_ac].gaq05
                        WHERE gaq01=g_ztb[l_ac].ztb03 AND gaq02=g_lang
                    END IF
                 ELSE
                    INSERT INTO gaq_file(gaq01,gaq02,gaq06)   #No.FUN-660025
                    VALUES(g_ztb[l_ac].ztb03,g_lang_arr[l_i],'N')   #No.FUN-660025
                 END IF
             END FOR
          END IF
 
       BEFORE DELETE                            #是否取消單身
          IF not cl_null(g_ztb_t.ztb03) THEN
             IF NOT p_zta_question_msg("zta-007","zta-006") THEN
                CANCEL DELETE
             END IF
             IF l_lock_sw = "Y" THEN
                CALL cl_err("", -263, 1)
                CANCEL DELETE
             END IF
             #FUN-990043 -- start --
             IF g_zta.zta10 = 'Y' THEN
                #View的模組清單, 類別屬於 T,S 需檢查是否有 plant 欄位
                IF (g_zta.zta09 MATCHES "[TS]") AND                      #FUN-A60050
                   (g_view_no_in.getIndexOf(g_zta.zta03 CLIPPED,1) = 0 )     #FUN-9C0036  #No.FUN-A60050
                THEN
                   LET ls_str = g_zta.zta01 CLIPPED
                   LET l_field=ls_str.subString(1,ls_str.getIndexOf('_file',1)-1),"plant"
                   IF g_ztb[l_ac].ztb03 CLIPPED = l_field THEN
                      CALL cl_err(g_zta.zta01,'zta-044','1')
                      CANCEL DELETE
                   END IF
                END IF
             END IF
             #FUN-990043 -- end --
 
             DELETE FROM ztb_file
              WHERE ztb01 = g_zta.zta01
                AND ztb02 = g_zta.zta02
                AND ztb03 = g_ztb_t.ztb03
             IF sqlca.sqlcode THEN
                LET g_err="delete ztb error(b):",g_zta.zta02 CLIPPED,",",
                           g_ztb_t.ztb03
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztb_file",g_zta.zta01,g_ztb_t.ztb03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
                CANCEL DELETE
             ELSE
                #No.FUN-7A0029
                UPDATE zte_file set zte04= ''
                 WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                   AND zte03 = g_ztb[l_ac].ztb03
                #END NO.FUN-7A0029
 
                IF g_zta.zta10='Y' THEN
                   #No.FUN-A60022---start
                   IF g_db_type="MSV" THEN
                      #No.FUN-A90062 -- start --  
                      #因 ORA 版本，drop 欄位時 index 則一併刪除; 
                      #因此 MSV版本採用相同方式，刪除欄位時，則必須先將 index 刪掉
                      #
                      #抓取關於這個欄位的所有索引 constraint 名稱
                      LET l_sql = "SELECT b.name,b.is_unique FROM  sys.objects a,sys.indexes b, ",
                                  "                    sys.index_columns c, sys.columns d ",
                                  " WHERE d.name = '",g_ztb[l_ac].ztb03 CLIPPED,"' ",
                                  "   AND a.name = '",g_zta.zta01 CLIPPED,"' ",
                                  "   AND b.object_id= c.object_id ",
                                  "   AND c.object_id =d.object_id ", 
                                  "   AND a.object_id =b.object_id ",
                                  "   AND b.index_id = c.index_id ", 
                                  "   AND c.column_id =d.column_id ",
                                  " ORDER BY b.name DESC"
                      DECLARE idx2_cs CURSOR FROM l_sql
                      FOREACH idx2_cs INTO l_name,l_unique   #單身 ARRAY 填充
                                                  
                         SELECT COUNT(*) INTO l_pk_cnt FROM sys.objects 
                          WHERE  type='PK' AND name = l_name 
                         IF l_pk_cnt > 0  THEN
                            CALL cl_err(g_ztb_t.ztb03,"zta-055",1)  
                            ROLLBACK WORK
                            CANCEL DELETE
                         ELSE

                            #刪除 index
                            LET g_cmd="drop index ",g_zta.zta01 CLIPPED,".",l_name CLIPPED
                            EXECUTE IMMEDIATE g_cmd
                            IF sqlca.sqlcode THEN
                               LET g_err="DDL command error(b):",g_cmd
                               CALL p_zta_c_err(g_cmd,g_err)                
                               ROLLBACK WORK
                               CANCEL DELETE
                               EXIT FOREACH
                            ELSE
                               IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,g_cmd) THEN 
                                  ROLLBACK WORK
                                  CANCEL DELETE
                                  EXIT FOREACH
                               END IF
                            END IF
                         END IF
                      END FOREACH
                      #No.FUN-A90062 -- end --  

                      LET l_cmd="alter table ",g_zta.zta01 CLIPPED," drop column ",
                              g_ztb[l_ac].ztb03 CLIPPED
                      INITIALIZE l_name TO NULL
                      INITIALIZE g_cmd TO NULL
                      SELECT c.name INTO l_name FROM sys.columns b,sys.objects c WHERE b.default_object_id=c.object_id and b.name=g_ztb[l_ac].ztb03     
                      IF l_name IS NOT NULL THEN
                         LET g_cmd="alter table ",g_zta.zta01 CLIPPED," drop constraint ",l_name CLIPPED
                      END IF 
                   ELSE 
                      LET l_cmd="alter table ",g_zta.zta01 CLIPPED," drop(",
                          g_ztb[l_ac].ztb03 CLIPPED,")"   #No.FUN-A80029
                   END IF  
                   IF g_cmd IS NOT NULL THEN
                      EXECUTE IMMEDIATE g_cmd
                      IF sqlca.sqlcode THEN
                         LET g_err="DDL command error(b):",l_cmd
                         CALL p_zta_c_err(g_cmd,g_err)                       #FUN-A90062
                         ROLLBACK WORK
                         CANCEL DELETE
                      ELSE
                         IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,g_cmd) THEN 
                            ROLLBACK WORK
                            CANCEL DELETE
                         END IF
                      END IF
                   END IF                                
                   EXECUTE IMMEDIATE l_cmd
                   IF sqlca.sqlcode THEN
                      LET g_err="DDL command error(b):",l_cmd
                      CALL p_zta_c_err(l_cmd,g_err)                       #FUN-A90062
                      ROLLBACK WORK
                      CANCEL DELETE
                   ELSE
                      IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,l_cmd) THEN 
                         ROLLBACK WORK
                         CANCEL DELETE
                      ELSE
                         COMMIT WORK
                         LET g_rec_b=g_rec_b-1
                         CALL fgl_winmessage("Info",
                                          "Drop Column Success","info")
 
                         CALL p_zta_parse_view(g_zta.zta01,'u',l_cmd) #No.FUN-990043
                      END IF
                   END IF
                ELSE
                   LET g_rec_b=g_rec_b-1
                END IF
                # FUN-A60022---end 
             END IF
             DISPLAY g_rec_b TO FORMONLY.cn2  #ATTRIBUTE(RED)
#             CLOSE p_zta_b_cl
             COMMIT WORK
          END IF
 
 
 
       AFTER ROW
          LET l_ac=ARR_CURR()
         #LET l_ac_t=l_ac      #FUN-D30034 Mark
 
          IF INT_FLAG THEN                 #900423
             CALL cl_err("",9001,0)
             LET INT_FLAG = 0
             IF p_cmd='u' THEN
                LET g_ztb[l_ac].* = g_ztb_t.*
             #FUN-D30034--add--str--
             ELSE
                CALL g_ztb.deleteElement(l_ac)
                IF g_rec_b != 0 THEN
                   LET g_action_choice = "field_body"
                   LET l_ac = l_ac_t
                END IF
             #FUN-D30034--add--end--    
             END IF
#             CLOSE p_zta_b_cl
             ROLLBACK WORK
             EXIT INPUT
          END IF
          LET l_ac_t=l_ac      #FUN-D30034 Add
#          CLOSE p_zta_b_cl
          COMMIT WORK
 
       ON ROW CHANGE
          IF INT_FLAG THEN                 #900423
             CALL cl_err("",9001,0)
             LET INT_FLAG = 0
             LET g_ztb[l_ac].* = g_ztb_t.*
             ROLLBACK WORK
             EXIT INPUT
          END IF

          #No.TQC-860023 -- start --
          IF g_ztb[l_ac].ztb11 = "' '" THEN #若預設值為' '(單一空白時)
              LET l_ztb11= " "
          ELSE
              IF cl_null(g_ztb[l_ac].ztb11) THEN
                   LET l_ztb11 = NULL
              ELSE
                   LET l_ztb11= g_ztb[l_ac].ztb11 CLIPPED
              END IF
          END IF
          #No.TQC-860023 -- end --
 
          IF NOT cl_null(g_ztb[l_ac].ztb03) THEN
-- just for datetime的處理
             IF g_ztb[l_ac].ztb04='datetime' THEN
                IF g_ztb[l_ac].ztb06 IS NULL THEN
                   NEXT FIELD ztb06
                ELSE
                   IF g_ztb[l_ac].ztb07 IS NULL THEN
                      NEXT FIELD ztb07
                   END IF
                END IF
             END IF
             IF g_zta.zta10='N' THEN
                #No.TQC-860023 -- start --
                #Informix 若是 defulat '' & ' ' 皆是單一空白, 
                #若要 default null 時，則給于 ztb11 為 NULL 值
                IF l_ztb11 IS NULL AND g_db_type="IFX" THEN
                   LET l_sql="UPDATE ztb_file SET ztb03='",g_ztb[l_ac].ztb03 CLIPPED,"',",
                                              "   ztb04='",g_ztb[l_ac].ztb04 CLIPPED,"',",
                                              "   ztb05='",g_ztb[l_ac].ztb05 CLIPPED,"',",
                                              "   ztb06='",g_ztb[l_ac].ztb06 CLIPPED,"',",
                                              "   ztb07='",g_ztb[l_ac].ztb07 CLIPPED,"',",
                                              "   ztb08='",g_ztb[l_ac].ztb08 CLIPPED,"',",
                                              "   ztb09='",g_ztb[l_ac].ztb09 CLIPPED,"',",
                                              "   ztb11=NULL ",   
                             " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                             "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
                             "   AND ztb03='",g_ztb_t.ztb03 CLIPPED,"'"
                ELSE
                   LET l_sql="UPDATE ztb_file SET ztb03='",g_ztb[l_ac].ztb03 CLIPPED,"',",
                                              "   ztb04='",g_ztb[l_ac].ztb04 CLIPPED,"',",
                                              "   ztb05='",g_ztb[l_ac].ztb05 CLIPPED,"',",
                                              "   ztb06='",g_ztb[l_ac].ztb06 CLIPPED,"',",
                                              "   ztb07='",g_ztb[l_ac].ztb07 CLIPPED,"',",
                                              "   ztb08='",g_ztb[l_ac].ztb08 CLIPPED,"',",
                                              "   ztb09='",g_ztb[l_ac].ztb09 CLIPPED,"',",
                                              "   ztb11='",l_ztb11 ,"'",   
                             " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                             "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
                             "   AND ztb03='",g_ztb_t.ztb03 CLIPPED,"'"
                END IF
                #No.TQC-860023 -- end --
                EXECUTE IMMEDIATE l_sql
                IF sqlca.sqlerrd[3]=0 THEN
                   LET g_err="update ztb data error(b)",g_ztb_t.ztb03
                   #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                   CALL cl_err3("upd","ztb_file",g_zta.zta01,g_ztb_t.ztb03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                   ROLLBACK WORK
                   LET g_ztb[l_ac].* = g_ztb_t.*
                END IF
             END IF
             IF (g_ztb_t.ztb05 is null OR g_ztb_t.ztb05<>g_ztb[l_ac].ztb05) 
                AND g_zta.zta10 != "Y"    #No.FUN-7A0029
             THEN
                LET l_sql="UPDATE ztb_file SET ztb05='",g_ztb[l_ac].ztb05 CLIPPED,"'",
                          " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                          "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
                          "   AND ztb03='",g_ztb[l_ac].ztb03 CLIPPED,"'"
                EXECUTE IMMEDIATE l_sql
                IF sqlca.sqlerrd[3]=0 THEN
                   LET l_sql="INSERT INTO ztb_file(ztb01,ztb02,ztb03,ztb05) ",
                             "VALUES('",g_zta.zta01 CLIPPED,"','",
                                        g_zta.zta02 CLIPPED,"','",
                                        g_ztb[l_ac].ztb03 CLIPPED,"','",
                                        g_ztb[l_ac].ztb05 CLIPPED,"')"
                   EXECUTE IMMEDIATE l_sql
                   IF SQLCA.SQLCODE THEN
                      LET g_err="insert ztb data error(b)",g_ztb_t.ztb03
                      #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                      CALL cl_err3("ins","ztb_file",g_zta.zta01,g_ztb[l_ac].ztb03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                      ROLLBACK WORK
                      LET g_ztb[l_ac].* = g_ztb_t.*
                   END IF
                END IF
                #No.FUN-7A0029
                IF g_ztb[l_ac].ztb05 = 's' OR l_cust = 'Y' THEN
                   SELECT COUNT(*) INTO l_cnt FROM zte_file
                    WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                      AND zte03 = g_ztb[l_ac].ztb03
                   IF l_cnt > 0 THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                      VALUES(g_zta.zta01,'ds',g_ztb[l_ac].ztb03,g_ztb[l_ac].ztb05,'','')   
                      IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                         CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztb[l_ac].ztb03,SQLCA.sqlcode,"",g_err,0) 
                         ROLLBACK WORK
                      END IF
                   END IF
                ELSE
                   IF g_ztb_t.ztb05 = 's' AND g_ztb[l_ac].ztb05 != 's' THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      IF g_ztb[l_ac].ztb05 = 'p' THEN
                         UPDATE zte_file set zte04= ''
                          WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                            AND zte03 = g_ztb[l_ac].ztb03
                      END IF
                   END IF
                END IF
                #END No.FUN-7A0029
             END IF
             IF g_zta.zta10 = "Y" AND ((g_ztb[l_ac].ztb04!=g_ztb_t.ztb04 OR
                                        g_ztb[l_ac].ztb08!=g_ztb_t.ztb08 OR
                                        g_ztb[l_ac].ztb06!=g_ztb_t.ztb06 OR
                                        g_ztb[l_ac].ztb07!=g_ztb_t.ztb07 OR
                                        g_ztb[l_ac].ztb09!=g_ztb_t.ztb09 OR
                                        g_ztb[l_ac].ztb11!=g_ztb_t.ztb11)
                                        OR
                                       (g_ztb[l_ac].ztb11 IS NULL AND
                                        g_ztb_t.ztb11 IS NOT NULL)
                                        OR
                                       (g_ztb[l_ac].ztb11 IS NOT NULL AND
                                        g_ztb_t.ztb11 IS NULL)) THEN
                IF p_zta_question_msg("zta-013","zta-012") THEN
                   #IF g_db_type = "IFX" THEN
                   CASE g_db_type                                   #FUN-730016 
                    WHEN "IFX"                                      #FUN-730016
                      IF g_ztb[l_ac].ztb09 = 'Y' THEN
                         IF g_ztb[l_ac].ztb04 = "datetime" THEN
                            IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," ",
                                          g_ztb[l_ac].ztb06 CLIPPED," to ",
                                          g_ztb[l_ac].ztb07 CLIPPED," not null);"
                            ELSE
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," ",
                                          g_ztb[l_ac].ztb06 CLIPPED," to ",
                                          g_ztb[l_ac].ztb07 CLIPPED," default ''",
                                          l_ztb11,"'' not null);"      #No.TQC-860023
                            END IF
                         ELSE
                            IF g_ztb[l_ac].ztb04 = "char" OR
                               g_ztb[l_ac].ztb04 = "decimal" THEN
                               IF g_ztb[l_ac].ztb11 IS NULL OR
                                  (g_ztb[l_ac].ztb04 = "decimal" AND cl_null(g_ztb[l_ac].ztb11)) #No.MOD-840661
                               THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,") not null);"
                               ELSE
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                             l_ztb11 ,"'' not null);"     #No.TQC-860023
                               END IF
                            ELSE
                               IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," not null);"
                               ELSE
                                  #No.TQC-810014
                                  IF (g_ztb[l_ac].ztb04 = 'date' AND
                                      g_ztb[l_ac].ztb11 = 'today' ) OR
                                      g_ztb[l_ac].ztb04 = 'integer' OR
                                      g_ztb[l_ac].ztb04 = 'smallint'      #No.MOD-840661
                                  THEN
                                      LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                 g_ztb[l_ac].ztb03 CLIPPED," ",
                                                 g_ztb[l_ac].ztb04 CLIPPED," default ",
                                                 l_ztb11 ," not null);"      #No.TQC-860023
                                  ELSE
                                      LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                 g_ztb[l_ac].ztb03 CLIPPED," ",
                                                 g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                                 l_ztb11 ,"'' not null);"    #No.TQC-860023
                                  END IF
                                  #END No.TQC-810014
                               END IF
                            END IF
                         END IF
                      ELSE
                         IF g_ztb[l_ac].ztb04 = "datetime" THEN
                            IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," ",
                                          g_ztb[l_ac].ztb06 CLIPPED," to ",
                                          g_ztb[l_ac].ztb07 CLIPPED,");"
                            ELSE
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," ",
                                          g_ztb[l_ac].ztb06 CLIPPED," to ",
                                          g_ztb[l_ac].ztb07 CLIPPED," default ''",
                                          l_ztb11 ,"'');"    #No.TQC-860023
                            END IF
                         ELSE
                            IF g_ztb[l_ac].ztb04 = "char" OR
                               g_ztb[l_ac].ztb04 = "decimal" THEN
                               IF g_ztb[l_ac].ztb11 IS NULL OR
                                  (g_ztb[l_ac].ztb04 = "decimal" AND cl_null(g_ztb[l_ac].ztb11)) THEN  #No.MOD-840661
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,"));"
                               ELSE
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                             l_ztb11,"'');"     #No.TQC-860023 
                               END IF
                            ELSE
                               IF g_ztb[l_ac].ztb11 IS NULL OR cl_null(g_ztb[l_ac].ztb11)  THEN   ##No.MOD-840661
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,");"
                               ELSE
                                  #No.TQC-810014
                                  IF (g_ztb[l_ac].ztb04 = 'date' AND
                                      g_ztb[l_ac].ztb11 = 'today' ) OR
                                      g_ztb[l_ac].ztb04 = 'integer' OR
                                      g_ztb[l_ac].ztb04 = 'smallint'      #No.MOD-840661
                                  THEN
                                     LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                g_ztb[l_ac].ztb03 CLIPPED," ",
                                                g_ztb[l_ac].ztb04 CLIPPED," default ",
                                                l_ztb11,");"      #No.TQC-860023
                                  ELSE
                                     LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                g_ztb[l_ac].ztb03 CLIPPED," ",
                                                g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                                l_ztb11,"'');"    #No.TQC-860023
                                  END IF
                                  #END No.TQC-810014
                               END IF
                            END IF
                         END IF
                      END IF
 
                    WHEN "ORA"                                      #FUN-730016
                      #oracle null和not null切換和informix不同故不同處理
                      IF g_ztb[l_ac].ztb09 = 'Y' AND g_ztb_t.ztb09 = 'N' THEN
                         IF g_ztb[l_ac].ztb04 = "varchar2" OR
                            g_ztb[l_ac].ztb04 = "char" OR
                            g_ztb[l_ac].ztb04 = "number" THEN
                            IF g_ztb[l_ac].ztb11=g_ztb_t.ztb11 THEN
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED,"(",
                                          g_ztb[l_ac].ztb08 CLIPPED,") not null);"
                            ELSE
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED,"(",
                                          g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                          l_ztb11,"'' not null);"   #No.TQC-860023
                            END IF
                         ELSE
                            IF g_ztb[l_ac].ztb11=g_ztb_t.ztb11 THEN
                               LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                          g_ztb[l_ac].ztb03 CLIPPED," ",
                                          g_ztb[l_ac].ztb04 CLIPPED," not null);"
                            ELSE
                               #No.TQC-810014
                               IF g_ztb[l_ac].ztb04 = 'date' AND 
                                  g_ztb[l_ac].ztb11 = 'sysdate' 
                               THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," default ",
                                             l_ztb11," not null);"    #No.TQC-860023 
                               ELSE
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                             l_ztb11,"'' not null);"  #No.TQC-860023
                               END IF
                               #END No.TQC-810014
                            END IF
                         END IF
                      ELSE
                         IF g_ztb[l_ac].ztb09='N' AND g_ztb_t.ztb09='Y' THEN
                            IF g_ztb[l_ac].ztb04 = "varchar2" OR
                               g_ztb[l_ac].ztb04 = "char" OR
                               g_ztb[l_ac].ztb04 = "number" THEN
                               IF g_ztb[l_ac].ztb11=g_ztb_t.ztb11 THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,") not null);"  #TQC-7C0167
                               ELSE
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                             l_ztb11 ,"'' not null);"  #TQC-7C0167  #No.TQC-860023
                               END IF
                            ELSE
                               IF g_ztb[l_ac].ztb11=g_ztb_t.ztb11 THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," not null);"  #TQC-7C0167
                               ELSE
                                  #No.TQC-810014
                                  IF g_ztb[l_ac].ztb04 = 'date' AND 
                                     g_ztb[l_ac].ztb11 = 'sysdate' 
                                  THEN
                                     LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                g_ztb[l_ac].ztb03 CLIPPED," ",
                                                g_ztb[l_ac].ztb04 CLIPPED," default ",
                                                l_ztb11 ," not null);"  #TQC-7C0167  #No.TQC-860023
                                  ELSE
                                     LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                g_ztb[l_ac].ztb03 CLIPPED," ",
                                                g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                                l_ztb11 ,"'' not null);"  #TQC-7C0167 #No.TQC-860023
                                  END IF
                                  #END No.TQC-810014
                               END IF
                            END IF
                         ELSE
                            IF g_ztb[l_ac].ztb04 = "varchar2" OR
                               g_ztb[l_ac].ztb04 = "char" OR
                               g_ztb[l_ac].ztb04 = "number" THEN
                               IF g_ztb[l_ac].ztb11=g_ztb_t.ztb11 THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,"));"
                               ELSE
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,") default ''",
                                             l_ztb11 ,"'');"    #No.TQC-860023
                               END IF
                            ELSE
                               IF g_ztb[l_ac].ztb11=g_ztb_t.ztb11 THEN
                                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,");"
                               ELSE
                                  #No.TQC-810014
                                  IF g_ztb[l_ac].ztb04 = 'date' AND 
                                     g_ztb[l_ac].ztb11 = 'sysdate' 
                                  THEN
                                     LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                g_ztb[l_ac].ztb03 CLIPPED," ",
                                                g_ztb[l_ac].ztb04 CLIPPED," default ",
                                                l_ztb11,");"       #No.TQC-860023
                                  ELSE
                                     LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
                                                g_ztb[l_ac].ztb03 CLIPPED," ",
                                                g_ztb[l_ac].ztb04 CLIPPED," default ''",
                                                l_ztb11 ,"'');"     #No.TQC-860023
                                  END IF
                                  #END No.TQC-810014
                               END IF
                            END IF
                         END IF
                      END IF
 
                    WHEN "MSV"                                      #FUN-730016
                    #No.FUN-A60022---start                    
                      IF g_ztb[l_ac].ztb04 = "char" OR g_ztb[l_ac].ztb04 = "varchar" OR 
                         g_ztb[l_ac].ztb04 = "decimal" OR g_ztb[l_ac].ztb04 = "nvarchar"  
                      THEN 
                         IF g_ztb[l_ac].ztb09 ='Y' THEN       #该字段不可为空
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," alter column ",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,") not null;"                          
                         ELSE                                 #该字段可空
                         	  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," alter column ",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,"(",
                                             g_ztb[l_ac].ztb08 CLIPPED,");" 
                         END IF                          
                      END IF 
                      
                      IF g_ztb[l_ac].ztb04 = "datetime" OR g_ztb[l_ac].ztb04 = "integer" OR g_ztb[l_ac].ztb04 = "sysname"
                      OR g_ztb[l_ac].ztb04 = "smallint" OR g_ztb[l_ac].ztb04 = "text" OR g_ztb[l_ac].ztb04 = "image" THEN
                         IF g_ztb[l_ac].ztb09 ='Y' THEN       #该字段不可为空
                            LET l_cmd="alter table ",g_zta.zta01 CLIPPED," alter column ",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED," not null;"                          
                         ELSE                                 #该字段可空
                         	  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," alter column ",
                                             g_ztb[l_ac].ztb03 CLIPPED," ",
                                             g_ztb[l_ac].ztb04 CLIPPED,";"
                         END IF                
                      END IF
                      
                     #No.FUN-A90062 -- start --  
                     INITIALIZE g_cmd TO NULL
                     INITIALIZE q_def_cmd TO NULL
                     INITIALIZE l_def_name TO NULL

                     #抓取 default 的 constraint 名稱及預設值
                     SELECT c.name INTO l_def_name 
                       FROM sys.columns b,sys.objects c, sys.default_constraints d 
                      WHERE b.default_object_id=c.object_id and b.default_object_id=d.object_id 
                        and b.name=g_ztb[l_ac].ztb03     

                     IF NOT cl_null(g_ztb[l_ac].ztb11) THEN       #欄位預設值不為空
                        LET q_def_cmd = p_zta_default_sql(g_zta.zta01,g_ztb[l_ac].ztb03,g_ztb[l_ac].ztb11)
                     END IF  	

                     IF l_def_name IS NOT NULL THEN
                        #MSV版本，異動欄位時，必須先將constraint刪掉才能alter
                        LET g_cmd="alter table ",g_zta.zta01 CLIPPED," drop constraint ",l_def_name CLIPPED
                        EXECUTE IMMEDIATE g_cmd
                        IF sqlca.sqlcode THEN
                           LET g_err="DDL command error(b):",g_cmd
                           CALL p_zta_c_err(g_cmd,g_err)                
                           ROLLBACK WORK
                        ELSE
                           IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,g_cmd) THEN 
                              ROLLBACK WORK
                           END IF
                        END IF
                     END IF

                     #抓取關於這個欄位的所有索引 constraint 名稱
                     LET l_sql = "SELECT b.name,b.is_unique FROM  sys.objects a,sys.indexes b, ",
                                 "                    sys.index_columns c, sys.columns d ",
                                 " WHERE d.name = '",g_ztb[l_ac].ztb03 CLIPPED,"' ",
                                 "   AND a.name = '",g_zta.zta01 CLIPPED,"' ",
                                 "   AND b.object_id= c.object_id ",
                                 "   AND c.object_id =d.object_id ", 
                                 "   AND a.object_id =b.object_id ",
                                 "   AND b.index_id = c.index_id ", 
                                 "   AND c.column_id =d.column_id",
                                 " ORDER BY b.name DESC"
                     DECLARE idx_cs CURSOR FROM l_sql
                     CALL l_idx.clear()
                     LET l_cnt = 1
                     FOREACH idx_cs INTO l_idx[l_cnt].name,l_unique   #單身 ARRAY 填充
                                                 
                        SELECT COUNT(*) INTO l_pk_cnt FROM sys.objects 
                         WHERE  type='PK' AND name = l_idx[l_cnt].name 
                        IF l_pk_cnt > 0 THEN
                           LET l_idx[l_cnt].sql = p_zta_pk_sql(g_dbs,l_idx[l_cnt].name,g_zta.zta01,g_ztb[l_ac].ztb03)
                           #MSV版本，異動欄位時，必須先將constraint刪掉才能alter
                           LET g_cmd="alter table ",g_zta.zta01 CLIPPED," drop constraint ",l_idx[l_cnt].name CLIPPED
                        ELSE
                           LET l_idx[l_cnt].sql = p_zta_idx_sql(l_idx[l_cnt].name,g_zta.zta01,l_unique)
                           #MSV版本，異動欄位時，必須先將 index 刪掉才能alter
                           LET g_cmd="drop index ",g_zta.zta01 CLIPPED,".",l_idx[l_cnt].name CLIPPED
                        END IF
                        EXECUTE IMMEDIATE g_cmd
                        IF sqlca.sqlcode THEN
                           LET g_err="DDL command error(b):",g_cmd
                           CALL p_zta_c_err(g_cmd,g_err)                
                           ROLLBACK WORK
                        ELSE
                           IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,g_cmd) THEN 
                              ROLLBACK WORK
                           END IF
                        END IF
                        LET l_cnt = l_cnt + 1
                     END FOREACH
                     CALL l_idx.deleteElement(l_cnt)
                     #No.FUN-A90062 -- end --  
                     #No.FUN-A60022---end
                   END CASE                                         #FUN-730016
 
                   #No.FUN-7A0029
                   IF g_ztb[l_ac].ztb05 = 's' OR l_cust = 'Y' THEN
                      SELECT COUNT(*) INTO l_cnt FROM zte_file
                       WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                      IF l_cnt > 0 THEN
                         UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                          WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                            AND zte03 = g_ztb[l_ac].ztb03
                      ELSE 
                         INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                         VALUES(g_zta.zta01,'ds',g_ztb[l_ac].ztb03,g_ztb[l_ac].ztb05,'','')   
                         IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                            CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztb[l_ac].ztb03,SQLCA.sqlcode,"",g_err,0) 
                            ROLLBACK WORK
                         END IF
                      END IF
                   ELSE
                      IF g_ztb_t.ztb05 = 's' AND g_ztb[l_ac].ztb05 != 's' THEN
                         UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                          WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                            AND zte03 = g_ztb[l_ac].ztb03
                      ELSE 
                         IF g_ztb[l_ac].ztb05 = 'p' THEN
                            UPDATE zte_file set zte04= ''
                             WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                               AND zte03 = g_ztb[l_ac].ztb03
                         END IF
                      END IF
                   END IF
                   #END No.FUN-7A0029
 
#                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED," modify(",
#                      g_ztb[l_ac].ztb03 CLIPPED," ",g_ztb[l_ac].ztb04 CLIPPED,");"
 
                   #No.FUN-A90062 -- start --  
                   LET l_cmd = l_cmd[1,LENGTH(l_cmd)-1]
                   EXECUTE IMMEDIATE l_cmd
                   IF sqlca.sqlcode THEN
                      LET g_err="DDL command error(b):",l_cmd
                      #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                      CALL p_zta_c_err(l_cmd,g_err)                       #FUN-A90062
                      ROLLBACK WORK
                      LET g_ztb[l_ac].* = g_ztb_t.*
                   ELSE
                      #No.FUN-A60022---start
                      IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,l_cmd) THEN 
                         ROLLBACK WORK
                      END IF

                      IF q_def_cmd IS NOT NULL THEN 
                         EXECUTE IMMEDIATE q_def_cmd
                         IF sqlca.sqlcode THEN
                            LET g_err="DDL command error(b):",q_def_cmd
                            CALL p_zta_c_err(q_def_cmd,g_err)                       #FUN-A90062
                            ROLLBACK WORK
                         ELSE
                            IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,q_def_cmd) THEN 
                               ROLLBACK WORK
                            END IF
                         END IF
                      END IF

                      FOR l_i = 1 TO l_idx.getLength() 
                         EXECUTE IMMEDIATE l_idx[l_i].sql
                         IF sqlca.sqlcode THEN
                            LET g_err="DDL command error(b):", l_idx[l_i].sql
                            CALL p_zta_c_err(l_idx[l_i].sql,g_err)                       #FUN-A90062
                            ROLLBACK WORK
                         ELSE
                            IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,l_idx[l_i].sql) THEN 
                               ROLLBACK WORK
                            END IF
                         END IF
                      END FOR
                      #No.FUN-A60022---end
                      COMMIT WORK
 
                      CALL p_zta_parse_view(g_zta.zta01,'u',l_cmd) #No.FUN-990043
 
                      CALL fgl_winmessage("Info",
                                          "Modify Column Success","info")
                   END IF
                   #No.FUN-A90062 -- end --
                ELSE
                   LET g_ztb[l_ac].* = g_ztb_t.*
                   ROLLBACK WORK
                END IF
             ELSE
                #No.FUN-7A0029
                IF g_ztb[l_ac].ztb05 = 's' OR l_cust = 'Y' THEN
                   SELECT COUNT(*) INTO l_cnt FROM zte_file
                    WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                      AND zte03 = g_ztb[l_ac].ztb03
                   IF l_cnt > 0 THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                      VALUES(g_zta.zta01,'ds',g_ztb[l_ac].ztb03,g_ztb[l_ac].ztb05,'','')   
                      IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                         CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztb[l_ac].ztb03,SQLCA.sqlcode,"",g_err,0) 
                         ROLLBACK WORK
                      END IF
                   END IF
                ELSE
                   IF g_ztb_t.ztb05 = 's' AND g_ztb[l_ac].ztb05 != 's' THEN
                      UPDATE zte_file set zte04= g_ztb[l_ac].ztb05
                       WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                         AND zte03 = g_ztb[l_ac].ztb03
                   ELSE 
                      IF g_ztb[l_ac].ztb05 = 'p' THEN
                         UPDATE zte_file set zte04= ''
                          WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                            AND zte03 = g_ztb[l_ac].ztb03
                      END IF
                   END IF
                END IF
                #END No.FUN-7A0029
                COMMIT WORK
             END IF
          END IF
 
       ON KEY(CONTROL-G)
          CALL cl_cmdask()
 
      ON ACTION CONTROLP
         CASE
            WHEN INFIELD(gaq03)
               CALL p_zta_fld_desc(g_ztb[l_ac].ztb03)
               LET l_sql="SELECT gaq03 FROM gaq_file ",
                         " WHERE gaq01='",g_ztb[l_ac].ztb03 CLIPPED,"'",
                         "   AND gaq02='",g_lang CLIPPED,"'"
               PREPARE p_zta_b_pre11 FROM l_sql
               EXECUTE p_zta_b_pre11 INTO g_ztb[l_ac].gaq03
               FREE p_zta_b_pre11
               DISPLAY g_ztb[l_ac].gaq03 TO gaq03
            WHEN INFIELD(gaq05)
               CALL p_zta_fld_desc(g_ztb[l_ac].ztb03)
               LET l_sql="SELECT gaq05 FROM gaq_file ",
                         " WHERE gaq01='",g_ztb[l_ac].ztb03 CLIPPED,"'",
                         "   AND gaq02='",g_lang CLIPPED,"'"
               PREPARE p_zta_b_pre12 FROM l_sql
               EXECUTE p_zta_b_pre12 INTO g_ztb[l_ac].gaq05
               FREE p_zta_b_pre12
               DISPLAY g_ztb[l_ac].gaq05 TO gaq05
            OTHERWISE
               EXIT CASE
         END CASE
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
 
      AFTER INPUT
         IF g_zta.zta10="Y" AND g_zta.zta02='ds' THEN
            CALL p_zta_gsql('S')
          #No.FUN-A60022---start
            IF os.Path.separator() = "/" THEN  
               ERROR "r.s2 ds"
               RUN "r.s2 ds" WITHOUT WAITING
            ELSE
               ERROR "rs2 ds"
               RUN "rs2 ds" WITHOUT WAITING
            END IF
          #No.FUN-A60022---end
         END IF
 
    END INPUT
 
#    CLOSE p_zta_b_cl
 
    COMMIT WORK
 
    CALL p_zta_delall()
 
END FUNCTION
 
 
FUNCTION p_zta_d()
   DEFINE l_ac_t          LIKE type_file.num5,      #未取消的ARRAY CNT #No.FUN-680135 SMALLINT 
          l_n             LIKE type_file.num5,      #檢查重複用        #No.FUN-680135 SMALLINT
          l_i             LIKE type_file.num5,      #No.FUN-680135     SMALLINT
          l_lock_sw       LIKE type_file.chr1,      #單身鎖住否        #No.FUN-680135 VARCHAR(1)
          p_cmd           LIKE type_file.chr1,      #處理狀態          #No.FUN-680135 VARCHAR(1)
          l_cmd           LIKE zs_file.zs06,        #command
          l_sql           STRING,
          l_zs03          LIKE zs_file.zs03,
          l_allow_insert  LIKE type_file.num5,      #可新增否          #No.FUN-680135 SMALLINT
          l_allow_delete  LIKE type_file.num5       #可刪除否          #No.FUN-680135 SMALLINT
   DEFINE ls_str          STRING                    #No.FUN-7A0029
   DEFINE l_cnt           LIKE type_file.num5       #No.FUN-7A0029
 
   LET g_action_choice = ""
   IF cl_null(g_zta.zta01) THEN CALL cl_err("",-400,0) RETURN END IF
   IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
   MESSAGE ""
   CALL cl_opmsg("b")
 
#   LET g_forupd_sql = "SELECT ztc06,ztc03,ztc04,ztc05 FROM ztc_file",
#                      " WHERE ztc01=? AND ztc02=? AND ztc03=? FOR UPDATE"
#   DECLARE p_zta_d_cl CURSOR FROM g_forupd_sql      # LOCK CURSOR
 
   #FUN-730016
   #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
   IF cl_null(g_MODNO) AND g_zta.zta10='Y' THEN
      PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
         ON IDLE g_idle_seconds
            CALL cl_on_idle()
      END PROMPT
#TQC-860017 end  
      display g_MODNO
   END IF
   #END FUN-730016
 
   LET l_ac_t = 0
   LET l_allow_insert = cl_detail_input_auth("insert")
   LET l_allow_delete = cl_detail_input_auth("delete")
 
 
   INPUT ARRAY g_ztc WITHOUT DEFAULTS FROM s_ztc.*
         ATTRIBUTE(COUNT=g_rec_d,MAXCOUNT=g_max_rec,UNBUFFERED,
                   INSERT ROW=l_allow_insert,DELETE ROW=l_allow_delete,APPEND ROW=l_allow_insert)
 
      BEFORE INPUT
         IF g_rec_d != 0 THEN
            CALL fgl_set_arr_curr(l_ac_ztc)
         END IF
 
      BEFORE ROW
         LET p_cmd=""
         LET l_ac_ztc = ARR_CURR()
         LET l_lock_sw = "N"            #DEFAULT
         BEGIN WORK
         OPEN p_zta_cl USING g_zta.zta01,g_zta.zta02
         IF sqlca.sqlcode THEN
            LET g_err="open lock cursor error(d):p_zta_cl",g_zta.zta01
            CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)      # 資料被他人LOCK
            CLOSE p_zta_cl
            ROLLBACK WORK
            RETURN
         ELSE
            FETCH p_zta_cl INTO g_zta.*            # 鎖住將被更改或取消的資料
            IF sqlca.sqlcode THEN
               LET g_err="fetch lock cursor error(d):p_zta_cl"
               CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)      # 資料被他人LOCK
               CLOSE p_zta_cl
               ROLLBACK WORK
               RETURN
            END IF
         END IF
display "g_rec_d:",g_rec_d
display "l_ac_ztc:",l_ac_ztc
         IF g_rec_d >= l_ac_ztc THEN
            LET p_cmd="u"
            LET g_ztc_t.* = g_ztc[l_ac_ztc].*  #BACKUP
            LET g_ztc_o.* = g_ztc[l_ac_ztc].*  #BACKUP
#            OPEN p_zta_d_cl USING g_zta.zta01,g_zta.zta02,g_ztc_t.ztc03
#            IF sqlca.sqlcode THEN
#               LET g_err="open lock cursor error(d):p_zta_d_cl"
#               CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
#               LET l_lock_sw="Y"
#               RETURN
#            ELSE
#               FETCH p_zta_d_cl INTO g_ztc[l_ac_ztc].*
#               IF sqlca.sqlcode THEN
#                  LET g_err="fetch lock cursor error(d):p_zta_d_cl"
#                  CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
#                  LET l_lock_sw = "Y"
#               END IF
#            END IF
            IF g_zta.zta10='Y' THEN
               NEXT FIELD ztc05
            END IF
         END IF
 
      BEFORE INSERT
         LET p_cmd='a'
         LET l_n = ARR_COUNT()
         INITIALIZE g_ztc[l_ac_ztc].* TO NULL      #900423
         LET g_ztc_t.* = g_ztc[l_ac_ztc].*         #新輸入資料
         IF g_ztc[l_ac_ztc].ztc06 IS NULL THEN
            LET g_ztc[l_ac_ztc].ztc06="N"
         END IF
         #No.FUN-7A0029 
         IF cl_null(FGL_GETENV("TOPLINK")) THEN 
            LET ls_str = g_zta.zta01 CLIPPED
            LET g_ztc[l_ac_ztc].ztc03 = g_zta.zta01[1,ls_str.getIndexOf("_file",1)-1]
            IF g_zta.zta01[1,3] = "tc_" THEN
               LET g_ztc[l_ac_ztc].ztc03 = g_ztc[l_ac_ztc].ztc03[4,FGL_WIDTH(g_ztc[l_ac_ztc].ztc03 CLIPPED)]
            END IF 
            LET l_cnt = g_rec_d + 1
            IF l_cnt < 10 THEN
               LET g_ztc[l_ac_ztc].ztc03 = 'tic_', g_ztc[l_ac_ztc].ztc03 CLIPPED, '_0', l_cnt USING '<<<<<'
            ELSE
               LET g_ztc[l_ac_ztc].ztc03 = 'tic_',g_ztc[l_ac_ztc].ztc03 CLIPPED,'_',l_cnt USING '<<<<<' 
            END IF
            LET g_ztc[l_ac_ztc].ztc05 = 'c'
         ELSE
            LET g_ztc[l_ac_ztc].ztc05 = 'p'
         END IF
         #END No.FUN-7A0029 
###      NEXT FIELD ztc03
 
      BEFORE FIELD ztc03
         IF g_zta.zta10='Y' and p_cmd='u' THEN
            NEXT FIELD ztc05
         END IF
 
      BEFORE FIELD ztc06
         IF g_zta.zta10='Y' and p_cmd='u' THEN
            NEXT FIELD ztc05
         END IF
 
      BEFORE FIELD ztc04
         IF g_ztc[l_ac_ztc].ztc03 IS NULL THEN
            NEXT FIELD ztc03
         ELSE
            IF g_zta.zta10='Y' THEN
               IF p_cmd='u' THEN
                  NEXT FIELD ztc05
               END IF
            ELSE
               LET l_sql="SELECT COUNT(*) FROM ztc_file ",
                         " WHERE ztc01='",g_zta.zta01 CLIPPED,"'",
                         "   AND ztc02='",g_zta.zta02 CLIPPED,"'",
                         "   AND ztc03='",g_ztc[l_ac_ztc].ztc03 CLIPPED,"'"
               PREPARE p_zta_d_pre1 FROM l_sql
               EXECUTE p_zta_d_pre1 INTO l_i
               FREE p_zta_d_pre1
               IF l_i>0 THEN
                  CALL cl_err(g_ztc[l_ac_ztc].ztc03,-239,1)
                  NEXT FIELD ztc03
               END IF
            END IF
         END IF
 
      #FUN-7A0029
      AFTER FIELD ztc03
         IF cl_null(FGL_GETENV("TOPLINK")) THEN
            IF g_ztc[l_ac_ztc].ztc03[1,4] != "tic_" THEN
               CALL cl_err(g_ztc[l_ac_ztc].ztc03,"zta-038",0)
               NEXT FIELD ztc03
            END IF
         END IF
 
      ON CHANGE ztc05
         IF cl_null(FGL_GETENV("TOPLINK")) THEN 
            IF g_ztc[l_ac_ztc].ztc05 = 'p' AND 
              ( g_ztc_t.ztc05 = 's' OR g_ztc_t.ztc05 = 'c' OR g_ztc_t.ztc05 IS NULL )
            THEN
               CALL cl_err('','zta-040',0)
               IF g_ztc_t.ztc05 = 's' THEN
                   LET g_ztc[l_ac_ztc].ztc05 = 's'
               ELSE
                   LET g_ztc[l_ac_ztc].ztc05 = 'c'
               END IF
               NEXT FIELD ztc05
            END IF
         END IF
      #END FUN-7A0029
 
      AFTER FIELD ztc04
         IF NOT cl_null(FGL_GETENV("TOPLINK")) THEN         #FUN-7A0029
            IF g_ztc[l_ac_ztc].ztc03[1,4]="tic_" OR
               g_zta.zta01[1,3]="tc_" THEN
               LET g_ztc[l_ac_ztc].ztc05='c'
            ELSE
               LET g_ztc[l_ac_ztc].ztc05='p'
               FOR l_i=1 TO LENGTH(g_ztc[l_ac_ztc].ztc04)-2
                   IF g_ztc[l_ac_ztc].ztc04[l_i,l_i+2]='tc_' OR
                      g_ztc[l_ac_ztc].ztc04[l_i,l_i+2]='ta_' THEN
                      LET g_ztc[l_ac_ztc].ztc05='c'
                   END IF
               END FOR
            END IF
         END IF
      AFTER INSERT
         IF INT_FLAG THEN
            CALL cl_err('',9001,0)
            LET INT_FLAG = 0
            CANCEL INSERT
         END IF
 
         IF g_zta.zta10!='Y' THEN
            IF cl_null(g_ztc[l_ac_ztc].ztc03) OR
               cl_null(g_ztc[l_ac_ztc].ztc04) THEN #重要欄位空白,無效
#               INITIALIZE g_ztc[l_ac_ztc].* TO NULL
               CALL g_ztc.deleteElement(l_ac_ztc)
               DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
                 BEFORE DISPLAY
                   EXIT DISPLAY
               END DISPLAY
            ELSE
#            IF cl_null(g_ztc_t.ztc03) THEN  # 單身新增
               DELETE FROM ztc_file WHERE ztc01=g_zta.zta01
                                      AND ztc02=g_zta.zta02
                                      AND ztc03=g_ztc[l_ac_ztc].ztc03
               LET l_sql="INSERT INTO ztc_file(ztc01,ztc02,ztc03,ztc04,ztc05,ztc06) ",
                        " VALUES('",g_zta.zta01 CLIPPED,"','",
                                    g_zta.zta02 CLIPPED,"','",
                                    g_ztc[l_ac_ztc].ztc03 CLIPPED,"','",
                                    g_ztc[l_ac_ztc].ztc04 CLIPPED,"','",
                                    g_ztc[l_ac_ztc].ztc05 CLIPPED,"','",
                                    g_ztc[l_ac_ztc].ztc06 CLIPPED,"')"
               EXECUTE IMMEDIATE l_sql
               IF sqlca.sqlcode THEN
                  LET g_err="insert ztc error(d):"
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("ins","ztc_file",g_zta.zta01,g_ztc[l_ac_ztc].ztc03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  CANCEL INSERT
               ELSE
                  #No.FUN-7A0029
                  IF g_ztc[l_ac_ztc].ztc05 = 's' THEN
                     SELECT COUNT(*) INTO l_cnt FROM zte_file
                      WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                        AND zte03 = g_ztc[l_ac_ztc].ztc03
                     IF l_cnt > 0 THEN
                        UPDATE zte_file set zte04= g_ztc[l_ac_ztc].ztc05
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztc[l_ac_ztc].ztc03
                     ELSE 
                        INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                        VALUES(g_zta.zta01,'ds',g_ztc[l_ac_ztc].ztc03,g_ztc[l_ac_ztc].ztc05,'','')   
                        IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                           CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztc[l_ac_ztc].ztc03,SQLCA.sqlcode,"",g_err,0) 
                           ROLLBACK WORK
                           CANCEL INSERT
                        END IF
                     END IF
                  END IF
                  #END No.FUN-7A0029
 
                  MESSAGE "INSERT O.K"
                  COMMIT WORK
                  LET g_rec_d=g_rec_d+1
               END IF
            END IF
         ELSE
            IF p_zta_question_msg("zta-015","zta-014") THEN
               IF g_ztc[l_ac_ztc].ztc06="Y" THEN
                  LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                            " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                            "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
                  PREPARE p_zta_d_pre2 FROM l_sql
                  EXECUTE p_zta_d_pre2 INTO l_zs03
                  FREE p_zta_d_pre2
                  IF l_zs03 IS NULL THEN
                     LET l_zs03 = 1
                  END IF
                  #No.FUN-7A0029
                  IF g_ztc[l_ac_ztc].ztc05 = 's' THEN
                     SELECT COUNT(*) INTO l_cnt FROM zte_file
                      WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                        AND zte03 = g_ztc[l_ac_ztc].ztc03
                     IF l_cnt > 0 THEN
                        UPDATE zte_file set zte04= g_ztc[l_ac_ztc].ztc05
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztc[l_ac_ztc].ztc03
                     ELSE 
                        INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                        VALUES(g_zta.zta01,'ds',g_ztc[l_ac_ztc].ztc03,g_ztc[l_ac_ztc].ztc05,'','')   
                        IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                           CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztc[l_ac_ztc].ztc03,SQLCA.sqlcode,"",g_err,0) 
                           ROLLBACK WORK
                           CANCEL INSERT
                        END IF
                     END IF
                  END IF
                  #END No.FUN-7A0029
 
                  LET l_cmd="create unique index ",g_ztc[l_ac_ztc].ztc03 CLIPPED," on ",
                             g_zta.zta01 CLIPPED," (",g_ztc[l_ac_ztc].ztc04 CLIPPED,");"
                  LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ",
                           " VALUES('",g_zta.zta01 CLIPPED,"','",
                                       g_zta.zta02 CLIPPED,"',",
                                       l_zs03 CLIPPED,",'",
                                       g_date CLIPPED,"','",
                                       g_ztc[l_ac_ztc].ztc05 CLIPPED,"','",
                                       l_cmd CLIPPED,"','",
                                       g_user CLIPPED,"','",
                                       g_MODNO CLIPPED,"','Y','N','N','",
                                       g_tiptop_ver CLIPPED,"')"
                  EXECUTE IMMEDIATE l_sql
                  IF sqlca.sqlcode THEN
                     LET g_err="insert zs error(d):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                     CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                     ROLLBACK WORK
                     CANCEL INSERT
                  ELSE
                     LET l_sql="SELECT zs06 FROM zs_file",
                               " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                               "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                               "   AND zs03=,",l_zs03 CLIPPED,"'"
                     PREPARE p_zta_d_pre3 FROM l_sql
                     EXECUTE p_zta_d_pre3 INTO l_cmd
                     FREE p_zta_d_pre3
                     FOR l_i =1 TO LENGTH(l_cmd)
                         IF l_cmd[l_i,l_i]=';' THEN
                            LET l_cmd[l_i,l_i]=' '
                            EXIT FOR
                         END IF
                     END FOR
                  END IF
               ELSE
                  LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                            " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                            "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
                  PREPARE p_zta_d_pre4 FROM l_sql
                  EXECUTE p_zta_d_pre4 INTO l_zs03
                  FREE p_zta_d_pre4
                  IF l_zs03 IS NULL THEN
                     LET l_zs03 = 1
                  END IF
 
                  #No.FUN-7A0029
                  IF g_ztc[l_ac_ztc].ztc05 = 's' THEN
                     SELECT COUNT(*) INTO l_cnt FROM zte_file
                      WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                        AND zte03 = g_ztc[l_ac_ztc].ztc03
                     IF l_cnt > 0 THEN
                        UPDATE zte_file set zte04= g_ztc[l_ac_ztc].ztc05
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztc[l_ac_ztc].ztc03
                     ELSE 
                        INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                        VALUES(g_zta.zta01,'ds',g_ztc[l_ac_ztc].ztc03,g_ztc[l_ac_ztc].ztc05,'','')   
                        IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                           CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztc[l_ac_ztc].ztc03,SQLCA.sqlcode,"",g_err,0) 
                           ROLLBACK WORK
                           CANCEL INSERT
                        END IF
                     END IF
                  END IF
                  #END No.FUN-7A0029
 
                  LET l_cmd="create index ",g_ztc[l_ac_ztc].ztc03 CLIPPED," on ",
                            g_zta.zta01 CLIPPED," (",g_ztc[l_ac_ztc].ztc04 CLIPPED,");"
                  LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ",
                           " VALUES('",g_zta.zta01 CLIPPED,"','",
                                       g_zta.zta02 CLIPPED,"',",
                                       l_zs03 CLIPPED,",'",
                                       g_date CLIPPED,"','",
                                       g_ztc[l_ac_ztc].ztc05 CLIPPED,"','",
                                       l_cmd CLIPPED,"','",
                                       g_user CLIPPED,"','",
                                       g_MODNO CLIPPED,"','Y','N','N','",
                                       g_tiptop_ver CLIPPED,"')"
                  EXECUTE IMMEDIATE l_sql
                  IF sqlca.sqlcode THEN
                     LET g_err="insert zs error(d):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                     CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                     ROLLBACK WORK
                     DELETE FROM ztc_file WHERE ztc01=g_zta.zta01
                        AND ztc02=g_zta.zta02
                        AND ztc03=g_ztc[l_ac_ztc].ztc03
                     CLEAR FORM
                     CALL g_ztb.clear()
                     CALL g_ztc.clear()
                     DISPLAY ARRAY g_ztb TO s_ztb.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
                       BEFORE DISPLAY
                         EXIT DISPLAY
                     END DISPLAY
                     DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
                       BEFORE DISPLAY
                         EXIT DISPLAY
                     END DISPLAY
                  ELSE
                     LET l_sql="SELECT zs06 FROM zs_file",
                               " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                               "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                               "   AND zs03='",l_zs03 CLIPPED,"'"
                     PREPARE p_zta_d_pre5 FROM l_sql
                     EXECUTE p_zta_d_pre5 INTO l_cmd
                     FREE p_zta_d_pre5
                     FOR l_i =1 TO LENGTH(l_cmd)
                         IF l_cmd[l_i,l_i]=';' THEN
                            LET l_cmd[l_i,l_i]=' '
                            EXIT FOR
                         END IF
                     END FOR
                  END IF
               END IF
               EXECUTE IMMEDIATE l_cmd
               IF sqlca.sqlcode THEN
                  LET g_err="DDL command error(d):",l_cmd
                  CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                  ROLLBACK WORK
                  LET g_ztc[l_ac_ztc].* = g_ztc_t.*
                  CALL g_ztc.deleteElement(l_ac_ztc)
                  DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
                    BEFORE DISPLAY
                      EXIT DISPLAY
                  END DISPLAY
                  LET l_sql=l_zs03
                  LET l_sql="DELETE FROM zs_file WHERE zs01='",g_zta.zta01 CLIPPED,"' ",
                            " AND zs02='",g_zta.zta02 CLIPPED,"' ",
                            " AND zs03='",l_sql CLIPPED,"'"
                  EXECUTE IMMEDIATE l_sql
                  COMMIT WORK
#                  CANCEL INSERT
#                  LET l_str=g_dir.top CLIPPED,"/error.out"
#                  LET g_err_channel=base.channel.create()
#                  CALL g_err_channel.openfile( l_str, "r" )
#                  LET l_i=1
#                  WHILE g_err_channel.read(l_err[l_i])
#                     LET l_i=l_i+1
#                  END WHILE
#                  CALL g_err_channel.close()
#                  FOR l_ln=3 TO l_i-1
#                      LET l_err[2]=l_err[2] CLIPPED,"\n",l_err[l_ln] CLIPPED
#                  END FOR
#                  CALL fgl_winmessage("Error Info", l_err[2] CLIPPED,
#                                      "error info")
#                  ROLLBACK WORK
               ELSE
                  IF g_edition="C" THEN
                     LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                               " VALUES('",g_zta.zta01 CLIPPED,"','",
                                          g_zta.zta02 CLIPPED,"',",
                                          l_zs03 CLIPPED,",'",
                                          g_date CLIPPED,"','",
                                          g_ztc[l_ac_ztc].ztc05 CLIPPED,"','",
                                          l_cmd CLIPPED,";','",
                                          g_user CLIPPED,"','",
                                          g_MODNO CLIPPED,
                                          "','Y','N','N','",
                                          g_tiptop_ver,"')"
                     EXECUTE IMMEDIATE l_sql
                     IF sqlca.sqlcode THEN
                        LET g_err="insert zs@std_server error(d):"
                        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                        CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
#                        ROLLBACK WORK
                        DELETE FROM ztc_file WHERE ztc01=g_zta.zta01
                           AND ztc02=g_zta.zta02
                           AND ztc03=g_ztc[l_ac_ztc].ztc03
                        CLEAR FORM
                        CALL g_ztb.clear()
                        CALL g_ztc.clear()
                        DISPLAY ARRAY g_ztb TO s_ztb.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
                          BEFORE DISPLAY
                            EXIT DISPLAY
                        END DISPLAY
                        DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
                          BEFORE DISPLAY
                            EXIT DISPLAY
                        END DISPLAY
                     END IF
                  END IF
 
                  CALL fgl_winmessage("Info","Add Index Success",
                                      "info")
                  COMMIT WORK
                  LET g_rec_d=g_rec_d+1
               END IF
               CALL p_zta_gsql('S')
               DISPLAY g_rec_d TO FORMONLY.cn4  #ATTRIBUTE(RED)
            ELSE
               IF l_ac_ztc=1 THEN
#                  INITIALIZE g_ztc[l_ac_ztc].* TO NULL
                  CALL g_ztc.deleteElement(l_ac_ztc)
                  DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
                    BEFORE DISPLAY
                      EXIT DISPLAY
                  END DISPLAY
               ELSE
                  CANCEL INSERT
               END IF
            END IF
         END IF
 
 
 
      BEFORE DELETE                            #是否取消單身
         IF g_ztc_t.ztc03 IS NOT NULL THEN
            IF g_zta.zta10='Y' THEN
               IF NOT p_zta_question_msg("zta-009","zta-008") THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
 
               DELETE FROM ztc_file
                WHERE ztc01 = g_zta.zta01
                  AND ztc02 = g_zta.zta02
                  AND ztc03 = g_ztc_t.ztc03
               IF sqlca.sqlcode THEN
                  LET g_err="delete ztc error(d):",g_ztc_t.ztc03
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("del","ztc_file",g_zta.zta01,g_ztc_t.ztc03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  CANCEL DELETE
               ELSE
                  #No.FUN-7A0029
                  UPDATE zte_file set zte04= ''
                   WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                     AND zte03 = g_ztc_t.ztc03
                  #END NO.FUN-7A0029
 
                  LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                            " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                            "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
                  PREPARE p_zta_d_pre6 FROM l_sql
                  EXECUTE p_zta_d_pre6 INTO l_zs03
                  FREE p_zta_d_pre6
                  IF l_zs03 IS NULL THEN
                     LET l_zs03 = 1
                  END IF
                #No.FUN-A60022---start
                  IF g_db_type="MSV" THEN
                     LET l_cmd="drop index ",g_zta.zta01,".",g_ztc[l_ac_ztc].ztc03 CLIPPED,";"
                  ELSE
                     LET l_cmd="drop index ",g_ztc[l_ac_ztc].ztc03 CLIPPED,";"
                  END IF
                #No.FUN-A60022---end

                   LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                           " VALUES('",g_zta.zta01 CLIPPED,"','",
                                       g_zta.zta02 CLIPPED,"',",
                                       l_zs03 CLIPPED,",'",
                                       g_date CLIPPED,"','",
                                       g_ztc[l_ac_ztc].ztc05 CLIPPED,"','",
                                       l_cmd CLIPPED,"','",
                                       g_user CLIPPED,"','",
                                       g_MODNO CLIPPED,"','Y','N','N','",
                                       g_tiptop_ver CLIPPED,"')"
                  EXECUTE IMMEDIATE l_sql
                  IF sqlca.sqlcode THEN
                     LET g_err="insert zs error(d):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                     CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                     ROLLBACK WORK
                     DELETE FROM ztc_file WHERE ztc01=g_zta.zta01
                        AND ztc02=g_zta.zta02
                        AND ztc03=g_ztc[l_ac_ztc].ztc03
                     CANCEL DELETE
                  ELSE
                     LET l_sql="SELECT zs06 FROM zs_file",
                               " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                               "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                               "   AND zs03='",l_zs03 CLIPPED,"'"
                     PREPARE p_zta_d_pre7 FROM l_sql
                     EXECUTE p_zta_d_pre7 INTO l_cmd
                     FREE p_zta_d_pre7
                     FOR l_i=1 TO LENGTH(l_cmd)
                         IF l_cmd[l_i,l_i] = ';' THEN
                            LET l_cmd[l_i,l_i]=' '
                            EXIT FOR
                         END IF
                     END FOR
display l_cmd
                     EXECUTE IMMEDIATE l_cmd
                     IF sqlca.sqlcode THEN
                        LET g_err="DDL command error(d):",l_cmd
                        #FUN-730016
                        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                        CALL p_zta_c_err(l_cmd,g_err)                       #FUN-A90062
                        #END FUN-730016
                        ROLLBACK WORK
                        LET l_sql=l_zs03
                        LET l_sql="DELETE FROM zs_file WHERE zs01='",g_zta.zta01 CLIPPED,"' ",
                                  " AND zs02='",g_zta.zta02 CLIPPED,"' ",
                                  " AND zs03='",l_sql CLIPPED,"'"
                        EXECUTE IMMEDIATE l_sql
                        COMMIT WORK
#                        ERROR "DROP INDEX FAIL"
#                        LET l_str=g_dir.top CLIPPED,"/error.out"
#                        LET g_err_channel=base.channel.create()
#                        CALL g_err_channel.openfile( l_str, "r" )
#                        LET l_i=1
#                        WHILE g_err_channel.read(l_err[l_i])
#                           LET l_i=l_i+1
#                        END WHILE
#                        CALL g_err_channel.close()
#                        FOR l_ln=3 TO l_i-1
#                            LET l_err[2]=l_err[2] CLIPPED,"\n",l_err[l_ln] CLIPPED
#                        END FOR
#                        CALL fgl_winmessage("Error Info", l_err[2] CLIPPED,
#                                            "error info")
                        CANCEL DELETE
                     ELSE
                        IF g_edition="C" THEN
                           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                     " VALUES('",g_zta.zta01 CLIPPED,"','",
                                                g_zta.zta02 CLIPPED,"',",
                                                l_zs03 CLIPPED,",'",
                                                g_date CLIPPEd,"','",
                                                g_ztc[l_ac_ztc].ztc05 CLIPPED,"','",
                                                l_cmd CLIPPED,";','",
                                                g_user CLIPPED,"','",
                                                g_MODNO CLIPPED,"',",
                                                "'Y','N','N','",
                                                g_tiptop_ver CLIPPED,"')"
                           EXECUTE IMMEDIATE l_sql
                           IF sqlca.sqlcode THEN
                              LET g_err="insert zs@std_server error(d):"
                              #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                              CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
#                              ROLLBACK WORK
                              DELETE FROM ztc_file WHERE ztc01=g_zta.zta01
                                 AND ztc02=g_zta.zta02
                                 AND ztc03=g_ztc[l_ac_ztc].ztc03
                              CANCEL DELETE
                           END IF
                        END IF
                        COMMIT WORK
                        CALL fgl_winmessage("Info",
                                            "Drop Index Success","info")
                        LET g_rec_d=g_rec_d-1
                     END IF
                  END IF
               END IF
               DISPLAY g_rec_d TO FORMONLY.cn4
            ELSE
               IF NOT cl_delb(0,0) THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
               DELETE FROM ztc_file
                WHERE ztc01 = g_zta.zta01
                  AND ztc02 = g_zta.zta02
                  AND ztc03 = g_ztc_t.ztc03
               IF sqlca.sqlcode THEN
                  LET g_err="delete ztc error(d):",g_ztc_t.ztc03
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("del","ztc_file",g_zta.zta01,g_ztc_t.ztc03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  CANCEL DELETE
               END IF
               #No.FUN-7A0029
               UPDATE zte_file set zte04= ''
                WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                  AND zte03 = g_ztc_t.ztc03
 
               LET g_rec_d=g_rec_d-1
               #END NO.FUN-7A0029
 
               DISPLAY g_rec_d TO FORMONLY.cn4
            END IF
         END IF
         COMMIT WORK
 
      AFTER ROW
         LET l_ac_ztc=ARR_CURR()
        #LET l_ac_t=l_ac_ztc      #FUN-D30034 Mark
 
         IF INT_FLAG THEN                 #900423
            CALL cl_err("",9001,0)
            LET INT_FLAG = 0
            IF p_cmd='u' THEN
               LET g_ztc[l_ac_ztc].* = g_ztc_t.*
            #FUN-D30034--add--str--
            ELSE
               CALL g_ztc.deleteElement(l_ac_ztc)
               IF g_rec_d != 0 THEN
                  LET g_action_choice = "constraint_body"
                  LET l_ac_ztc = l_ac_t
               END IF
            #FUN-D30034--add--end--
            END IF
#            CLOSE p_zta_d_cl
            ROLLBACK WORK
            EXIT INPUT
         END IF
         LET l_ac_t=l_ac_ztc      #FUN-D30034 Add
#         CLOSE p_zta_d_cl
         COMMIT WORK
#         IF cl_null(g_ztc[l_ac_ztc].ztc03)
#            OR cl_null(g_ztc[l_ac_ztc].ztc04) THEN #重要欄位空白,無效
#            INITIALIZE g_ztc[l_ac_ztc].* TO NULL
#         END IF
 
      ON ROW CHANGE
         IF INT_FLAG THEN                 #900423
            CALL cl_err("",9001,0)
            LET INT_FLAG = 0
            LET g_ztc[l_ac_ztc].* = g_ztc_t.*
#            CLOSE p_zta_d_cl
            ROLLBACK WORK
            EXIT INPUT
         END IF
 
         IF l_lock_sw='Y' THEN
            CALL cl_err(g_ztc[l_ac_ztc].ztc03,-263,1)
            LET g_ztc[l_ac_ztc].* = g_ztc_t.*
         ELSE
            IF (not cl_null(g_ztc[l_ac_ztc].ztc03) AND
                not cl_null(g_ztc_t.ztc04)) AND
               ((g_ztc[l_ac_ztc].ztc03 != g_ztc_t.ztc03) OR
               (g_ztc[l_ac_ztc].ztc04 != g_ztc_t.ztc04) OR
               (g_ztc[l_ac_ztc].ztc06 != g_ztc_t.ztc06)) THEN
               LET l_sql="UPDATE ztc_file ",
                         "   SET ztc03='",g_ztc[l_ac_ztc].ztc03 CLIPPED,"',",
                         "       ztc04='",g_ztc[l_ac_ztc].ztc04 CLIPPED,"',",
                         "       ztc05='",g_ztc[l_ac_ztc].ztc05 CLIPPED,"',",
                         "       ztc06='",g_ztc[l_ac_ztc].ztc06 CLIPPED,"'",
                         " WHERE ztc01='",g_zta.zta01 CLIPPED,"'",
                         "   AND ztc02='",g_zta.zta02 CLIPPED,"'",
                         "   AND ztc03='",g_ztc_t.ztc03 CLIPPED,"'"
               EXECUTE IMMEDIATE l_sql
               IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                  LET g_err="update ztc error(d):"
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("upd","ztc_file",g_zta.zta01,g_ztc_t.ztc03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  LET g_ztc[l_ac_ztc].* = g_ztc_t.*
               ELSE
                  MESSAGE "UPDATE O.K"
               END IF
            END IF
#            IF g_ztc[l_ac_ztc].ztc05 != g_ztc_t.ztc05 THEN
#               UPDATE ztc_file SET ztc05=g_ztc[l_ac_ztc].ztc05
#                   WHERE CURRENT OF p_zta_d_cl
#               IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
#                  CALL cl_err(g_ztc[l_ac_ztc].ztc03,sqlca.sqlcode,0)
#                  ROLLBACK WORK
#                  LET g_ztc[l_ac_ztc].* = g_ztc_t.*
#               ELSE
#                  MESSAGE "UPDATE O.K"
#               END IF
#            END IF
 
            IF not cl_null(g_ztc[l_ac_ztc].ztc05) THEN
               IF not cl_null(g_ztc_t.ztc05) AND
                 ( g_ztc[l_ac_ztc].ztc05 != g_ztc_t.ztc05) THEN
                  LET l_sql="UPDATE ztc_file",
                            "   SET ztc05='",g_ztc[l_ac_ztc].ztc05 CLIPPED,"'",
                            " WHERE ztc01='",g_zta.zta01 CLIPPED,"'",
                            "   AND ztc02='",g_zta.zta02 CLIPPED,"'",
                            "   AND ztc03='",g_ztc_t.ztc03 CLIPPED,"'"
                  EXECUTE IMMEDIATE l_sql
                  IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                     LET g_err="update ztc error(d):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                     CALL cl_err3("upd","ztc_file",g_zta.zta01,g_ztc_t.ztc03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                     ROLLBACK WORK
                     LET g_ztc[l_ac_ztc].* = g_ztc_t.*
                  ELSE
                     #No.FUN-7A0029
                     IF g_zta.zta10 != 'Y' THEN
                        IF g_ztc[l_ac_ztc].ztc05 = 's' THEN
                           SELECT COUNT(*) INTO l_cnt FROM zte_file
                            WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                              AND zte03 = g_ztc[l_ac_ztc].ztc03
                           IF l_cnt > 0 THEN
                              UPDATE zte_file set zte04= g_ztc[l_ac_ztc].ztc05
                               WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                                 AND zte03 = g_ztc[l_ac_ztc].ztc03
                           ELSE 
                              INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                              VALUES(g_zta.zta01,'ds',g_ztc[l_ac_ztc].ztc03,g_ztc[l_ac_ztc].ztc05,'','')   
                              IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                                 CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztc[l_ac_ztc].ztc03,SQLCA.sqlcode,"",g_err,0) 
                                 ROLLBACK WORK
                              END IF
                           END IF
                        END IF
                     END IF
                     #END No.FUN-7A0029
                     MESSAGE "UPDATE O.K"
                  END IF
               END IF
            END IF
         END IF
 
      AFTER INPUT
         IF g_zta.zta10="Y" AND g_zta.zta02='ds' THEN
            CALL p_zta_gsql('S')
         END IF
 
      ON ACTION CONTROLG
         CALL cl_cmdask()
 
      ON ACTION CONTROLP
         CASE WHEN INFIELD(ztc04)
              CALL p_zta_select(g_zta.zta01,g_zta.zta02,g_zta.zta10) RETURNING g_ztc[l_ac_ztc].ztc04
         END CASE
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
   END INPUT
 
#   CLOSE p_zta_d_cl
 
   COMMIT WORK
 
END FUNCTION
 
#FUN-730016
FUNCTION p_zta_c()
   DEFINE l_ac_t          LIKE type_file.num5,      #未取消的ARRAY CNT #No.FUN-680135 SMALLINT 
          l_n             LIKE type_file.num5,      #檢查重複用        #No.FUN-680135 SMALLINT
          l_i             LIKE type_file.num5,      #No.FUN-680135     SMALLINT
          l_lock_sw       LIKE type_file.chr1,      #單身鎖住否        #No.FUN-680135 VARCHAR(1)
          p_cmd           LIKE type_file.chr1,      #處理狀態          #No.FUN-680135 VARCHAR(1)
          l_cmd           LIKE zs_file.zs06,        #command
          l_sql           STRING,
          l_zs03          LIKE zs_file.zs03,
          l_allow_insert  LIKE type_file.num5,      #可新增否          #No.FUN-680135 SMALLINT
          l_allow_delete  LIKE type_file.num5       #可刪除否          #No.FUN-680135 SMALLINT
   DEFINE l_sqlcode       LIKE type_file.num5
   DEFINE l_str           STRING
   DEFINE l_cnt           LIKE type_file.num5       #No.FUN-7A0029
 
   LET g_action_choice = ""
   IF cl_null(g_zta.zta01) THEN CALL cl_err("",-400,0) RETURN END IF
   IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
   CALL p_ztd_group_show()
 
   IF g_zta.zta10='Y' THEN
      #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
      IF cl_null(g_MODNO) THEN 
         PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
            ON IDLE g_idle_seconds
               CALL cl_on_idle()
         END PROMPT
#TQC-860017 end  
         display g_MODNO
      END IF
   END IF
 
   MESSAGE ""
   CALL cl_opmsg("b")
 
   LET l_ac_t = 0
   LET l_allow_insert = cl_detail_input_auth("insert")
   LET l_allow_delete = cl_detail_input_auth("delete")
 
 
   INPUT ARRAY g_ztd WITHOUT DEFAULTS FROM s_ztd.*
         ATTRIBUTE(COUNT=g_rec_c,MAXCOUNT=g_max_rec,UNBUFFERED,
                   INSERT ROW=l_allow_insert,DELETE ROW=l_allow_delete,APPEND ROW=l_allow_insert)
 
      BEFORE INPUT
         IF g_rec_c != 0 THEN
            CALL fgl_set_arr_curr(l_ac_ztd)
         END IF
         IF g_zta.zta10 = 'Y' THEN
            CALL cl_set_act_visible("constraint_set", FALSE)
            CASE g_db_type
             WHEN "IFX" 
               CALL cl_set_comp_entry("ztd03",TRUE)
             WHEN "ORA" 
              # CALL cl_set_comp_entry("ztd12",FALSE)      #No.FUN-7A0029
             WHEN "MSV" 
               CALL cl_set_comp_visible("ztd08,ztd09,ztd11", FALSE)  #No.FUN-A60022
            END CASE
         ELSE
            CALL cl_set_act_visible("constraint_set", TRUE)
            CALL cl_set_comp_entry("ztd12",TRUE)
         END IF
         IF g_db_type="IFX" THEN
            CALL cl_set_comp_visible("ztd11", FALSE)
         END IF
 
      BEFORE ROW
         LET p_cmd=""
         LET l_ac_ztd = ARR_CURR()
         LET l_lock_sw = "N"            #DEFAULT
         BEGIN WORK
         OPEN p_zta_cl USING g_zta.zta01,g_zta.zta02
         IF sqlca.sqlcode THEN
            LET g_err="open lock cursor error(d):p_zta_cl",g_zta.zta01
            CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)      # 資料被他人LOCK
            CLOSE p_zta_cl
            ROLLBACK WORK
            RETURN
         ELSE
            FETCH p_zta_cl INTO g_zta.*            # 鎖住將被更改或取消的資料
            IF sqlca.sqlcode THEN
               LET g_err="fetch lock cursor error(d):p_zta_cl"
               CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)      # 資料被他人LOCK
               CLOSE p_zta_cl
               ROLLBACK WORK
               RETURN
            END IF
         END IF
         IF g_rec_c >= l_ac_ztd THEN
            LET p_cmd="u"
            LET g_ztd_t.* = g_ztd[l_ac_ztd].*  #BACKUP
            LET g_ztd_o.* = g_ztd[l_ac_ztd].*  #BACKUP
            IF g_zta.zta10 = 'Y' THEN
               CALL cl_set_act_visible("constraint_set", FALSE)
            END IF
            CALL p_ztd_group_show()
         END IF
 
      AFTER FIELD ztd03
         IF NOT cl_null(g_ztd[l_ac_ztd].ztd03) THEN 
            #FUN-7A0029
            IF cl_null(FGL_GETENV("TOPLINK")) THEN
               LET l_i = FGL_WIDTH(g_ztd[l_ac_ztd].ztd03 CLIPPED)
               IF g_ztd[l_ac_ztd].ztd03[1,4] != "tpc_" OR  l_i < 8 
               THEN
                  CALL cl_err(g_ztd[l_ac_ztd].ztd03,"zta-039",0)
                  NEXT FIELD ztd03
               ELSE
                  IF (l_i > 7 AND g_ztd[l_ac_ztd].ztd03[l_i-2,l_i] != "_pk") 
                  THEN 
                      CALL cl_err(g_ztd[l_ac_ztd].ztd03,"zta-039",0)
                      NEXT FIELD ztd03
                  END IF
               END IF
            END IF
            #END FUN-7A0029
            IF cl_null(g_ztd[l_ac_ztd].ztd04) THEN
               CALL p_zta_constraint(p_cmd)
               DISPLAY BY NAME g_ztd[l_ac_ztd].*
               CALL p_ztd_group_show()
               NEXT FIELD ztd03
            END IF
            IF g_db_type = "ORA" AND g_ztd[l_ac_ztd].ztd03[1,4] = 'sys_' THEN
               CALL cl_err(g_ztd[l_ac_ztd].ztd03,'zta-035',0)
               NEXT FIELD ztd03
            END IF
         END IF
 
      BEFORE INSERT
         LET p_cmd='a'
         LET l_n = ARR_COUNT()
         INITIALIZE g_ztd[l_ac_ztd].* TO NULL      #900423
         LET g_ztd_t.* = g_ztd[l_ac_ztd].*         #新輸入資料
 
         IF g_zta.zta10 = 'Y' THEN
            CALL cl_set_act_visible("constraint_set", TRUE)
         END IF
 
         #No.FUN-7A0029 
         IF cl_null(FGL_GETENV("TOPLINK")) THEN 
            LET l_str = g_zta.zta01 CLIPPED
            LET g_ztd[l_ac_ztd].ztd03 = g_zta.zta01[1,l_str.getIndexOf("_file",1)-1]
            IF g_zta.zta01[1,3] = "tc_" THEN
               LET g_ztd[l_ac_ztd].ztd03 = g_ztd[l_ac_ztd].ztd03[4,FGL_WIDTH(g_ztd[l_ac_ztd].ztd03 CLIPPED)]
            END IF 
            LET g_ztd[l_ac_ztd].ztd03 = 'tpc_',g_ztd[l_ac_ztd].ztd03 CLIPPED,'_pk' 
            LET g_ztd[l_ac_ztd].ztd12= "c"
         ELSE
            LET g_ztd[l_ac_ztd].ztd12= "p"
         END IF
         #END No.FUN-7A0029 
 
      AFTER INSERT
         IF INT_FLAG THEN
            CALL cl_err('',9001,0)
            LET INT_FLAG = 0
            CANCEL INSERT
         END IF
         IF g_zta.zta10!='Y' THEN
            IF cl_null(g_ztd[l_ac_ztd].ztd03) THEN #重要欄位空白,無效
               CALL g_ztd.deleteElement(l_ac_ztd)
               DISPLAY ARRAY g_ztd TO s_ztd.* ATTRIBUTE(COUNT=g_rec_c)
                 BEFORE DISPLAY
                   EXIT DISPLAY
               END DISPLAY
            ELSE
               DELETE FROM ztd_file WHERE ztd01=g_zta.zta01
                                      AND ztd02=g_zta.zta02
                                      AND ztd03=g_ztd[l_ac_ztd].ztd03
               LET l_sql="INSERT INTO ztd_file(ztd01,ztd02,ztd03,ztd04,ztd05,ztd06,ztd07,ztd08,ztd09,ztd10,ztd11,ztd12,ztd13,ztd14,ztd15,ztd16,ztd17) ",
                        " VALUES('",g_zta.zta01 CLIPPED,"','",
                                    g_zta.zta02 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd03 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd04 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd05 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd06 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd07 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd08 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd09 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd10 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd11 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd13 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd14 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd15 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd16 CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd17 CLIPPED,"')"
               EXECUTE IMMEDIATE l_sql
               IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                  LET g_err="insert ztd error(d):"
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("ins","ztd_file",g_zta.zta01,g_ztd[l_ac_ztd].ztd03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  CANCEL INSERT
               ELSE
                  #No.FUN-7A0029
                  IF g_ztd[l_ac_ztd].ztd12 = 's' THEN
                     SELECT COUNT(*) INTO l_cnt FROM zte_file
                      WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                        AND zte03 = g_ztd[l_ac_ztd].ztd03
                     IF l_cnt > 0 THEN
                        UPDATE zte_file set zte04= g_ztd[l_ac_ztd].ztd12
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztd[l_ac_ztd].ztd03
                     ELSE 
                        INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                        VALUES(g_zta.zta01,'ds',g_ztd[l_ac_ztd].ztd03,g_ztd[l_ac_ztd].ztd12,'','')   
                        IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                           CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztd[l_ac_ztd].ztd03,SQLCA.sqlcode,"",g_err,0) 
                           ROLLBACK WORK
                           CANCEL INSERT
                        END IF
                     END IF
                  END IF
                  #END No.FUN-7A0029
 
                  MESSAGE "INSERT O.K"
                  COMMIT WORK
                  LET g_rec_c=g_rec_c+1
               END IF
            END IF
         ELSE
            IF p_zta_question_msg("zta-032","zta-031") THEN
         
               LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                         " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                         "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
               PREPARE p_zta_c_pre4 FROM l_sql
               EXECUTE p_zta_c_pre4 INTO l_zs03
               FREE p_zta_d_pre4
               IF l_zs03 IS NULL THEN
                  LET l_zs03 = 1
               END IF
 
               LET l_cmd = p_zta_ztd_setsql(g_ztd[l_ac_ztd].*)
 
               LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ",
                        " VALUES('",g_zta.zta01 CLIPPED,"','",
                                    g_zta.zta02 CLIPPED,"',",
                                    l_zs03 CLIPPED,",'",
                                    g_date CLIPPED,"','",
                                    g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                    l_cmd CLIPPED,"','",
                                    g_user CLIPPED,"','",
                                    g_MODNO CLIPPED,"','Y','N','N','",
                                    g_tiptop_ver CLIPPED,"')"
               EXECUTE IMMEDIATE l_sql
               IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                  LET g_err="insert zs error(d):"
                  CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                  ROLLBACK WORK
                  CANCEL INSERT
               ELSE
                  #No.FUN-7A0029
                  IF g_ztd[l_ac_ztd].ztd12 = 's' THEN
                     SELECT COUNT(*) INTO l_cnt FROM zte_file
                      WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                        AND zte03 = g_ztd[l_ac_ztd].ztd03
                     IF l_cnt > 0 THEN
                        UPDATE zte_file set zte04= g_ztd[l_ac_ztd].ztd12
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztd[l_ac_ztd].ztd03
                     ELSE 
                        INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                        VALUES(g_zta.zta01,'ds',g_ztd[l_ac_ztd].ztd03,g_ztd[l_ac_ztd].ztd12,'','')   
                        IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                           CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztd[l_ac_ztd].ztd03,SQLCA.sqlcode,"",g_err,0) 
                           ROLLBACK WORK
                           CANCEL INSERT
                        END IF
                     END IF
                  END IF
                  #END No.FUN-7A0029
 
                  LET l_sql="SELECT zs06 FROM zs_file",
                            " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                            "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                            "   AND zs03='",l_zs03 CLIPPED,"'"
                  PREPARE p_zta_c_pre5 FROM l_sql
                  EXECUTE p_zta_c_pre5 INTO l_cmd
                  FREE p_zta_d_pre5
                  FOR l_i =1 TO LENGTH(l_cmd)
                      IF l_cmd[l_i,l_i]=';' THEN
                         LET l_cmd[l_i,l_i]=' '
                         EXIT FOR
                      END IF
                  END FOR
               END IF
               #建立 Constraint 
               EXECUTE IMMEDIATE l_cmd
               IF SQLCA.SQLCODE THEN
                  LET g_err = "Create constraint error:"
                  CALL p_zta_c_err(l_cmd,g_err)                       #FUN-A90062
                  ROLLBACK WORK
                  CANCEL INSERT
                  CALL g_ztd.deleteElement(l_ac_ztd)
                  DISPLAY ARRAY g_ztd TO s_ztd.* ATTRIBUTE(COUNT=g_rec_c)
                    BEFORE DISPLAY
                      EXIT DISPLAY
                  END DISPLAY
               ELSE
                  IF g_edition="C" THEN
                     LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                               " VALUES('",g_zta.zta01 CLIPPED,"','",
                                          g_zta.zta02 CLIPPED,"',",
                                          l_zs03 CLIPPED,",'",
                                          g_date CLIPPED,"','",
                                          g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                          g_constraint_sql CLIPPED,";','",
                                          g_user CLIPPED,"','",
                                          g_MODNO CLIPPED,
                                          "','Y','N','N','",
                                          g_tiptop_ver,"')"
                     EXECUTE IMMEDIATE l_sql
                     IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                        LET g_err="insert zs@std_server error(d):"
                        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                        CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                        DELETE FROM ztd_file WHERE ztd01=g_zta.zta01
                           AND ztd02=g_zta.zta02
                           AND ztd03=g_ztd[l_ac_ztd].ztd03
                        CLEAR FORM
                        CALL g_ztd.clear()
                        DISPLAY ARRAY g_ztd TO s_ztd.* ATTRIBUTE(COUNT=g_rec_c)
                          BEFORE DISPLAY
                            EXIT DISPLAY
                        END DISPLAY
                     END IF
                  END IF
         
                  CALL fgl_winmessage("Info","Add Constraint Success",
                                      "info")
                  COMMIT WORK
                  LET g_rec_c=g_rec_c+1
               END IF
               CALL p_zta_gsql('S')
            ELSE
               IF l_ac_ztd=1 THEN
                  CALL g_ztd.deleteElement(l_ac_ztd)
                  DISPLAY ARRAY g_ztd TO s_ztd.* ATTRIBUTE(COUNT=g_rec_c)
                    BEFORE DISPLAY
                      EXIT DISPLAY
                  END DISPLAY
               ELSE
                  CANCEL INSERT
                  NEXT FIELD ztd03
               END IF
            END IF
         END IF
 
 
      BEFORE DELETE                            #是否取消單身
         IF g_ztd_t.ztd03 IS NOT NULL THEN
            IF g_zta.zta10='Y' THEN
               IF NOT p_zta_question_msg("zta-009","zta-008") THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
               DELETE FROM ztd_file
                WHERE ztd01 = g_zta.zta01
                  AND ztd02 = g_zta.zta02
                  AND ztd03 = g_ztd_t.ztd03
               IF sqlca.sqlcode THEN
                  LET g_err="delete ztd error(d):",g_ztd_t.ztd03
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("del","ztd_file",g_zta.zta01,g_ztd_t.ztd03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  CANCEL DELETE
               ELSE
                  LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                            " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                            "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
                  PREPARE p_zta_c_pre6 FROM l_sql
                  EXECUTE p_zta_c_pre6 INTO l_zs03
                  FREE p_zta_d_pre6
                  IF l_zs03 IS NULL THEN
                     LET l_zs03 = 1
                  END IF
 
                  #No.FUN-7A0029
                  UPDATE zte_file set zte04= ''
                   WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                     AND zte03 = g_ztd_t.ztd03
                  #END NO.FUN-7A0029
 
                  LET l_cmd="alter table ",g_zta.zta01 CLIPPED,
                            " drop constraint ",g_ztd[l_ac_ztd].ztd03 CLIPPED,";"
                   LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                           " VALUES('",g_zta.zta01 CLIPPED,"','",
                                       g_zta.zta02 CLIPPED,"',",
                                       l_zs03 CLIPPED,",'",
                                       g_date CLIPPED,"','",
                                       g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                       l_cmd CLIPPED,"','",
                                       g_user CLIPPED,"','",
                                       g_MODNO CLIPPED,"','Y','N','N','",
                                       g_tiptop_ver CLIPPED,"')"
                  EXECUTE IMMEDIATE l_sql
                  IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                     LET g_err="insert zs error(d):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                     CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                     ROLLBACK WORK
                     DELETE FROM ztd_file WHERE ztd01=g_zta.zta01
                        AND ztd02=g_zta.zta02
                        AND ztd03=g_ztd[l_ac_ztd].ztd03
                     CANCEL DELETE
                  ELSE
                     LET l_sql="SELECT zs06 FROM zs_file",
                               " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                               "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                               "   AND zs03='",l_zs03 CLIPPED,"'"
                     PREPARE p_zta_c_pre7 FROM l_sql
                     EXECUTE p_zta_c_pre7 INTO l_cmd
                     FREE p_zta_d_pre7
                     FOR l_i=1 TO LENGTH(l_cmd)
                         IF l_cmd[l_i,l_i] = ';' THEN
                            LET l_cmd[l_i,l_i]=' '
                            EXIT FOR
                         END IF
                     END FOR
                     EXECUTE IMMEDIATE l_cmd
                     IF sqlca.sqlcode THEN
                        LET g_err="DDL command error(d):",l_cmd
                       #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                        CALL p_zta_c_err(l_cmd,g_err)                       #FUN-A90062
                        ROLLBACK WORK
                        LET l_sql=l_zs03
                        LET l_sql="DELETE FROM zs_file WHERE zs01='",g_zta.zta01 CLIPPED,"' ",
                                  " AND zs02='",g_zta.zta02 CLIPPED,"' ",
                                  " AND zs03='",l_sql CLIPPED,"'"
                        EXECUTE IMMEDIATE l_sql
                        COMMIT WORK
                        CANCEL DELETE
                     ELSE
                        IF g_edition="C" THEN
                           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                     " VALUES('",g_zta.zta01 CLIPPED,"','",
                                                g_zta.zta02 CLIPPED,"',",
                                                l_zs03 CLIPPED,",'",
                                                g_date CLIPPEd,"','",
                                                g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                                l_cmd CLIPPED,";','",
                                                g_user CLIPPED,"','",
                                                g_MODNO CLIPPED,"',",
                                                "'Y','N','N','",
                                                g_tiptop_ver CLIPPED,"')"
                           EXECUTE IMMEDIATE l_sql
                           IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                              LET g_err="insert zs@std_server error(d):"
                              #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                              CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                              DELETE FROM ztd_file WHERE ztd01=g_zta.zta01
                                 AND ztd02=g_zta.zta02
                                 AND ztd03=g_ztd[l_ac_ztd].ztd03
                              CANCEL DELETE
                           END IF
                        END IF
                        #No.FUN-950079 -- start --
                        CASE g_db_type
                         WHEN "IFX"
                           SELECT COUNT(*) INTO l_cnt FROM systables a, sysindexes c 
                            WHERE tabname = g_zta.zta01 AND a.tabid = c.tabid
                              AND c.idxname= g_ztd[l_ac_ztd].ztd03 
                           
                         WHEN "ORA"
                           SELECT COUNT(*) INTO l_cnt FROM user_indexes
                            WHERE lower(table_name)= g_zta.zta01
                              AND lower(index_name) = g_ztd[l_ac_ztd].ztd03
                        
                         WHEN "MSV"          #FUN-770027
                           SELECT COUNT(*) INTO l_cnt FROM sys.objects a, sys.indexes c
                            WHERE a.name= g_zta.zta01
                              AND a.object_id=c.object_id 
                              AND c.name =  g_ztd[l_ac_ztd].ztd03
                              AND c.type_desc <>'HEAP'
                        END CASE
                        IF l_cnt > 0 THEN
                           LET l_zs03 = l_zs03 + 1
                           LET l_cmd="drop index ",g_ztd[l_ac_ztd].ztd03 CLIPPED,";"
                           LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                                   " VALUES('",g_zta.zta01 CLIPPED,"','",
                                               g_zta.zta02 CLIPPED,"',",
                                               l_zs03 CLIPPED,",'",
                                               g_date CLIPPED,"','",
                                               g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                               l_cmd CLIPPED,"','",
                                               g_user CLIPPED,"','",
                                               g_MODNO CLIPPED,"','Y','N','N','",
                                               g_tiptop_ver CLIPPED,"')"
                           EXECUTE IMMEDIATE l_sql
                           IF sqlca.sqlcode THEN
                              LET g_err="insert zs error(d):"
                              #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                              CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                              ROLLBACK WORK
                              CANCEL DELETE
                           ELSE
                              FOR l_i=1 TO LENGTH(l_cmd)
                                  IF l_cmd[l_i,l_i] = ';' THEN
                                     LET l_cmd[l_i,l_i]=' '
                                     EXIT FOR
                                  END IF
                              END FOR
                              display l_cmd           
                              EXECUTE IMMEDIATE l_cmd
                              IF sqlca.sqlcode THEN
                                 LET g_err="DDL command error(d):",l_cmd
                                 CALL p_zta_c_err(l_cmd,g_err)                       #FUN-A90062
                                 ROLLBACK WORK
                                 LET l_sql="DELETE FROM zs_file WHERE zs01='",g_zta.zta01 CLIPPED,"' ",
                                           " AND zs02='",g_zta.zta02 CLIPPED,"' ",
                                           " AND zs03='",l_zs03 CLIPPED,"'"
                                 EXECUTE IMMEDIATE l_sql
                                 COMMIT WORK
                                 CANCEL DELETE
                              ELSE
                                 IF g_edition="C" THEN
                                    LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                              " VALUES('",g_zta.zta01 CLIPPED,"','",
                                                         g_zta.zta02 CLIPPED,"',",
                                                         l_zs03 CLIPPED,",'",
                                                         g_date CLIPPEd,"','",
                                                         g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                                         l_cmd CLIPPED,";','",
                                                         g_user CLIPPED,"','",
                                                         g_MODNO CLIPPED,"',",
                                                         "'Y','N','N','",
                                                         g_tiptop_ver CLIPPED,"')"
                                    EXECUTE IMMEDIATE l_sql
                                    IF sqlca.sqlcode THEN
                                       LET g_err="insert zs@std_server error(d):"
                                       CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
#                                      ROLLBACK WORK
                                       CANCEL DELETE
                                    END IF
                                 END IF
                              END IF
                           END IF
                        END IF
                        #No.FUN-950079 -- end --
                        COMMIT WORK
                        CALL fgl_winmessage("Info",
                                            "Drop Constraint Success","info")
                        LET g_rec_c=g_rec_c-1
                     END IF
                  END IF
               END IF
            ELSE
               IF NOT cl_delb(0,0) THEN
                  CANCEL DELETE
               END IF
               IF l_lock_sw = "Y" THEN
                  CALL cl_err("", -263, 1)
                  CANCEL DELETE
               END IF
               DELETE FROM ztd_file
                WHERE ztd01 = g_zta.zta01
                  AND ztd02 = g_zta.zta02
                  AND ztd03 = g_ztd_t.ztd03
               IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                  LET g_err="delete ztd error(d):",g_ztd_t.ztd03
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("del","ztd_file",g_zta.zta01,g_ztd_t.ztd03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  CANCEL DELETE
               END IF
               #No.FUN-7A0029
               UPDATE zte_file set zte04= ''
                WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                  AND zte03 = g_ztd_t.ztd03
               #END NO.FUN-7A0029
 
               LET g_rec_c=g_rec_c-1
            END IF
         END IF
         COMMIT WORK
 
      #FUN-7A0029
      ON CHANGE ztd12
         IF cl_null(FGL_GETENV("TOPLINK")) THEN 
            IF g_ztd[l_ac_ztd].ztd12 = 'p' AND 
              ( g_ztd_t.ztd12 = 's' OR g_ztd_t.ztd12 = 'c' OR g_ztd_t.ztd12 IS NULL )
            THEN
               CALL cl_err('','zta-040',0)
               IF g_ztd_t.ztd12 = 's' THEN
                   LET g_ztd[l_ac_ztd].ztd12 = 's'
               ELSE
                   LET g_ztd[l_ac_ztd].ztd12 = 'c'
               END IF
               NEXT FIELD ztd12
            END IF
         END IF
      #END FUN-7A0029
 
      AFTER ROW
         LET l_ac_ztd=ARR_CURR()
        #LET l_ac_t=l_ac_ztd     #FUN-D30034 Mark
 
         IF INT_FLAG THEN                 #900423
            CALL cl_err("",9001,0)
            LET INT_FLAG = 0
            IF p_cmd='u' THEN
               LET g_ztd[l_ac_ztd].* = g_ztd_t.*
               DISPLAY BY NAME g_ztd[l_ac_ztd].*
            #FUN-D30034--add--str--
            ELSE
               CALL g_ztd.deleteElement(l_ac_ztd)
               IF g_rec_c != 0 THEN
                  LET g_action_choice = "index_body"
                  LET l_ac_ztd = l_ac_t
               END IF
            #FUN-D30034--add--end-- 
            END IF
            ROLLBACK WORK
            EXIT INPUT
         END IF
         LET l_ac_t=l_ac_ztd     #FUN-D30034 Add
         COMMIT WORK
 
 
      ON ROW CHANGE
         IF INT_FLAG THEN                 #900423
            CALL cl_err("",9001,0)
            LET INT_FLAG = 0
            LET g_ztd[l_ac_ztd].* = g_ztd_t.*
            DISPLAY BY NAME g_ztd[l_ac_ztd].*
            ROLLBACK WORK
            EXIT INPUT
         END IF
 
         IF l_lock_sw='Y' THEN
            CALL cl_err(g_ztd[l_ac_ztd].ztd03,-263,1)
            LET g_ztd[l_ac_ztd].* = g_ztd_t.*
            DISPLAY BY NAME g_ztd[l_ac_ztd].*
         ELSE
            IF g_zta.zta10 != 'Y' THEN
               LET l_sql="UPDATE ztd_file ",
                         "   SET ztd03='",g_ztd[l_ac_ztd].ztd03 CLIPPED,"',",
                         "       ztd04='",g_ztd[l_ac_ztd].ztd04 CLIPPED,"',",
                         "       ztd05='",g_ztd[l_ac_ztd].ztd05 CLIPPED,"',",
                         "       ztd06='",g_ztd[l_ac_ztd].ztd06 CLIPPED,"',",
                         "       ztd07='",g_ztd[l_ac_ztd].ztd07 CLIPPED,"',",
                         "       ztd08='",g_ztd[l_ac_ztd].ztd08 CLIPPED,"',",
                         "       ztd09='",g_ztd[l_ac_ztd].ztd09 CLIPPED,"',",
                         "       ztd10='",g_ztd[l_ac_ztd].ztd10 CLIPPED,"',",
                         "       ztd11='",g_ztd[l_ac_ztd].ztd11 CLIPPED,"',",
                         "       ztd12='",g_ztd[l_ac_ztd].ztd12 CLIPPED,"',",
                         "       ztd13='",g_ztd[l_ac_ztd].ztd13 CLIPPED,"',",
                         "       ztd14='",g_ztd[l_ac_ztd].ztd14 CLIPPED,"',",
                         "       ztd15='",g_ztd[l_ac_ztd].ztd15 CLIPPED,"',",
                         "       ztd16='",g_ztd[l_ac_ztd].ztd16 CLIPPED,"',",
                         "       ztd17='",g_ztd[l_ac_ztd].ztd17 CLIPPED,"'",
                         " WHERE ztd01='",g_zta.zta01 CLIPPED,"'",
                         "   AND ztd02='",g_zta.zta02 CLIPPED,"'",
                         "   AND ztd03='",g_ztd_t.ztd03 CLIPPED,"'"
               EXECUTE IMMEDIATE l_sql
               IF sqlca.sqlcode OR sqlca.sqlerrd[3] = 0 THEN
                  LET g_err="update ztd error(d):"
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("upd","ztd_file",g_zta.zta01,g_ztd_t.ztd03,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
                  LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                  DISPLAY BY NAME g_ztd[l_ac_ztd].*
               ELSE
                  #No.FUN-7A0029
                  UPDATE zte_file set zte04= ''
                   WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                     AND zte03 = g_ztd_t.ztd03
 
                  IF g_ztd[l_ac_ztd].ztd12 = 's' THEN
                     SELECT COUNT(*) INTO l_cnt FROM zte_file
                      WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                        AND zte03 = g_ztd[l_ac_ztd].ztd03
                     IF l_cnt > 0 THEN
                        UPDATE zte_file set zte04= g_ztd[l_ac_ztd].ztd12
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztd[l_ac_ztd].ztd03
                     ELSE 
                        INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                        VALUES(g_zta.zta01,'ds',g_ztd[l_ac_ztd].ztd03,g_ztd[l_ac_ztd].ztd12,'','')   
                        IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                           CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztd[l_ac_ztd].ztd03,SQLCA.sqlcode,"",g_err,0) 
                           ROLLBACK WORK
                        END IF
                     END IF
                  END IF
                  #END No.FUN-7A0029
                  MESSAGE "UPDATE O.K"
               END IF
            ELSE
               IF (g_ztd[l_ac_ztd].ztd03 != g_ztd_t.ztd03) THEN
                  CASE g_db_type
                   WHEN "IFX" 
                     LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                     DISPLAY BY NAME g_ztd[l_ac_ztd].*
                     ROLLBACK WORK
 
                   WHEN "ORA" 
                     IF NOT p_zta_question_msg("zta-034","zta-033") THEN
                        LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                        DISPLAY BY NAME g_ztd[l_ac_ztd].*
                        ROLLBACK WORK
                     ELSE
                        LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                                  " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                                  "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
                        PREPARE p_zta_c_pre9 FROM l_sql
                        EXECUTE p_zta_c_pre9 INTO l_zs03
                        FREE p_zta_d_pre6
                        IF l_zs03 IS NULL THEN
                           LET l_zs03 = 1
                        END IF
 
                        #No.FUN-7A0029
                        UPDATE zte_file set zte04= ''
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztd_t.ztd03
 
                        IF g_ztd[l_ac_ztd].ztd12 = 's' THEN
                           SELECT COUNT(*) INTO l_cnt FROM zte_file
                            WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                              AND zte03 = g_ztd[l_ac_ztd].ztd03
                           IF l_cnt > 0 THEN
                              UPDATE zte_file set zte04= g_ztd[l_ac_ztd].ztd12
                               WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                                 AND zte03 = g_ztd[l_ac_ztd].ztd03
                           ELSE 
                              INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                              VALUES(g_zta.zta01,'ds',g_ztd[l_ac_ztd].ztd03,g_ztd[l_ac_ztd].ztd12,'','')   
                              IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                                 CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztd[l_ac_ztd].ztd03,SQLCA.sqlcode,"",g_err,0) 
                                 ROLLBACK WORK
                              END IF
                           END IF
                        END IF
                        #END No.FUN-7A0029
 
                        LET l_cmd="alter table ",g_zta.zta01 CLIPPED,
                                  " rename constraint ",g_ztd_t.ztd03 CLIPPED,
                                  " to ", g_ztd[l_ac_ztd].ztd03 CLIPPED,";"
                         LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                                 " VALUES('",g_zta.zta01 CLIPPED,"','",
                                             g_zta.zta02 CLIPPED,"',",
                                             l_zs03 CLIPPED,",'",
                                             g_date CLIPPED,"','",
                                             g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                             l_cmd CLIPPED,"','",
                                             g_user CLIPPED,"','",
                                             g_MODNO CLIPPED,"','Y','N','N','",
                                             g_tiptop_ver CLIPPED,"')"
                        EXECUTE IMMEDIATE l_sql
                        IF sqlca.sqlcode THEN
                           LET g_err="insert zs error(d):"
                           #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                           CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                           LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                           DISPLAY BY NAME g_ztd[l_ac_ztd].*
                           ROLLBACK WORK
                        ELSE
                           LET l_sql="SELECT zs06 FROM zs_file",
                                     " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                                     "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                                     "   AND zs03='",l_zs03 CLIPPED,"'"
                           PREPARE p_zta_c_pre10 FROM l_sql
                           EXECUTE p_zta_c_pre10 INTO l_cmd
                           FREE p_zta_d_pre7
                           FOR l_i=1 TO LENGTH(l_cmd)
                               IF l_cmd[l_i,l_i] = ';' THEN
                                  LET l_cmd[l_i,l_i]=' '
                                  EXIT FOR
                               END IF
                           END FOR
                           EXECUTE IMMEDIATE l_cmd
                           IF sqlca.sqlcode THEN
                              LET g_err="DDL command error(d):",l_cmd
                              CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                              LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                              DISPLAY BY NAME g_ztd[l_ac_ztd].*
                              ROLLBACK WORK
                              LET l_sql=l_zs03
                              LET l_sql="DELETE FROM zs_file WHERE zs01='",g_zta.zta01 CLIPPED,"' ",
                                        " AND zs02='",g_zta.zta02 CLIPPED,"' ",
                                        " AND zs03='",l_sql CLIPPED,"'"
                              EXECUTE IMMEDIATE l_sql
                              COMMIT WORK
                           ELSE
                              IF g_edition="C" THEN
                                 LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                           " VALUES('",g_zta.zta01 CLIPPED,"','",
                                                      g_zta.zta02 CLIPPED,"',",
                                                      l_zs03 CLIPPED,",'",
                                                      g_date CLIPPEd,"','",
                                                      g_ztd[l_ac_ztd].ztd12 CLIPPED,"','",
                                                      l_cmd CLIPPED,";','",
                                                      g_user CLIPPED,"','",
                                                      g_MODNO CLIPPED,"',",
                                                      "'Y','N','N','",
                                                      g_tiptop_ver CLIPPED,"')"
                                 EXECUTE IMMEDIATE l_sql
                                 IF sqlca.sqlcode THEN
                                    LET g_err="insert zs@std_server error(d):"
                                    #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                                    CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                                    LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                                    DISPLAY BY NAME g_ztd[l_ac_ztd].*
                                    ROLLBACK WORK
                                 END IF
                              END IF
                              COMMIT WORK
                              CALL fgl_winmessage("Info",
                                                  "Modify Constraint Success","info")
                           END IF
                        END IF
                     END IF
               
                   WHEN "MSV"                                  #FUN-730016
                   #No.FUN-A60022---start
                     IF NOT p_zta_question_msg("zta-034","zta-033") THEN
                        LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                        DISPLAY BY NAME g_ztd[l_ac_ztd].*
                        ROLLBACK WORK
                     ELSE
                        #No.FUN-7A0029
                        UPDATE zte_file set zte04= ''
                         WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                           AND zte03 = g_ztd_t.ztd03

                        IF g_ztd[l_ac_ztd].ztd12 = 's' THEN
                           SELECT COUNT(*) INTO l_cnt FROM zte_file
                            WHERE zte01 = g_zta.zta01 AND zte02 ='ds'
                              AND zte03 = g_ztd[l_ac_ztd].ztd03
                           IF l_cnt > 0 THEN
                              UPDATE zte_file set zte04= g_ztd[l_ac_ztd].ztd12
                               WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                                 AND zte03 = g_ztd[l_ac_ztd].ztd03
                           ELSE 
                              INSERT INTO zte_file(zte01,zte02,zte03,zte04,zte05,zte06)
                              VALUES(g_zta.zta01,'ds',g_ztd[l_ac_ztd].ztd03,g_ztd[l_ac_ztd].ztd12,'','')   
                              IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  
                                 CALL cl_err3("ins","zte_file",g_zta.zta01,g_ztd[l_ac_ztd].ztd03,SQLCA.sqlcode,"",g_err,0) 
                                 ROLLBACK WORK
                              END IF
                           END IF
                        END IF
                        #END No.FUN-7A0029

                        LET l_cmd=" exec sp_rename ",g_ztd_t.ztd03 CLIPPED,
                                  ",", g_ztd[l_ac_ztd].ztd03 CLIPPED
                        EXECUTE IMMEDIATE l_cmd
                        IF sqlca.sqlcode THEN
                           LET g_err="DDL command error(d):",l_cmd
                           CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                           LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                           DISPLAY BY NAME g_ztd[l_ac_ztd].*
                           ROLLBACK WORK
                        ELSE
                           #LET l_cmd = l_cmd ,";"    #No.FUN-A80029
                           IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,l_cmd) THEN 
                              LET g_ztd[l_ac_ztd].* = g_ztd_t.*
                              DISPLAY BY NAME g_ztd[l_ac_ztd].*
                              ROLLBACK WORK
                           END IF

                           COMMIT WORK
                           CALL fgl_winmessage("Info",
                                               "Modify Constraint Success","info")
                        END IF
                     END IF
                   #No.FUN-A60022---end 
                  END CASE                                     #FUN-730016 
               END IF
            END IF
         END IF
 
      ON ACTION constraint_set
         CALL p_zta_constraint(p_cmd)
         DISPLAY BY NAME g_ztd[l_ac_ztd].*
         CALL p_ztd_group_show()
         NEXT FIELD ztd03
 
      ON ACTION CONTROLG
         CALL cl_cmdask()
 
      ON ACTION CONTROLP
        #CASE WHEN INFIELD(ztd04)
        #END CASE
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
   END INPUT
 
#   CLOSE p_zta_d_cl
 
   COMMIT WORK
 
END FUNCTION
 
FUNCTION p_zta_constraint(p_cmd)
  DEFINE p_cmd     LIKE type_file.chr1
 
  OPEN WINDOW p_zta_constraint_w AT 12,40 WITH FORM "azz/42f/p_zta_constraint"
  ATTRIBUTE(STYLE = "sm3")
 
  CALL cl_ui_locale("p_zta_constraint")
 
   
  INITIALIZE g_ztd_c TO NULL
  INITIALIZE g_ztd_c_t TO NULL
 
  CALL g_tcol.clear()
  CALL g_trcol.clear()
  CALL g_kcol.clear()
  CALL g_rcol.clear()
  LET g_tcol_rec_b = 0
  LET g_trcol_rec_b = 0
  LET g_kcol_rec_b = 0
  LET g_rcol_rec_b = 0
 
  LET g_ztd_c.ztd03 = g_ztd[l_ac_ztd].ztd03 
 
  IF p_cmd != 'a' OR (NOT cl_null(g_ztd[l_ac_ztd].ztd04)) THEN
     #取得 Constraint 資料
     CALL p_zta_constraint_set()
  ELSE
     LET g_ztd_c.ztd04 = "1"
     LET g_ztd_c.ztd08 = "" 
     LET g_ztd_c.ztd09 = "1" 
     LET g_ztd_c.ztd10 = "1" 
     IF g_db_type != "IFX" THEN
        LET g_ztd_c.ztd11 = "1" 
     END IF
  END IF
 
  CALL cl_set_comp_visible("page28,page29,page30", FALSE)
  
  CALL p_zta_tcol_b_fill()
 
  CALL p_zta_constraint_menu()
 
  CLOSE WINDOW p_zta_constraint_w
END FUNCTION
 
FUNCTION p_zta_constraint_set()
DEFINE l_tok      base.StringTokenizer
DEFINE l_cnt      LIKE type_file.num5
DEFINE l_str      STRING
 
        CASE g_ztd[l_ac_ztd].ztd04
           WHEN "P"
               LET g_ztd_c.ztd04 = "1"
           WHEN "C"
               LET g_ztd_c.ztd04 = "2"
           WHEN "U"
               LET g_ztd_c.ztd04 = "3"
           WHEN "R"
               LET g_ztd_c.ztd04 = "4"
        END CASE
 
        LET g_ztd_c.ztd05 = g_ztd[l_ac_ztd].ztd05
        LET g_ztd_c.ztd06 = g_ztd[l_ac_ztd].ztd06
        LET g_ztd_c.ztd17 = g_ztd[l_ac_ztd].ztd17
 
        LET l_tok = base.StringTokenizer.createExt(g_ztd[l_ac_ztd].ztd13 CLIPPED,",","",TRUE)
        LET l_cnt = 0
        WHILE l_tok.hasMoreTokens()
              LET l_str = l_tok.nextToken()
              LET l_cnt = l_cnt + 1
              LET g_kcol[l_cnt].kcol01 = l_str
        END WHILE
        LET g_kcol_rec_b = l_cnt
        
        LET l_tok = base.StringTokenizer.createExt(g_ztd[l_ac_ztd].ztd15 CLIPPED,",","",TRUE)
        LET l_cnt = 0
        WHILE l_tok.hasMoreTokens()
              LET l_str = l_tok.nextToken()
              LET l_cnt = l_cnt + 1
              LET g_rcol[l_cnt].rcol01 = l_str
        END WHILE
        LET g_rcol_rec_b = l_cnt
 
        LET g_ztd_c.ztd08 = g_ztd[l_ac_ztd].ztd08
        LET g_ztd_c.ztd09 = g_ztd[l_ac_ztd].ztd09
        LET g_ztd_c.ztd10 = g_ztd[l_ac_ztd].ztd10
        
        #IF g_db_type != "IFX" THEN
        IF g_db_type = "ORA" THEN                                #FUN-730016
           IF g_ztd[l_ac_ztd].ztd11 = "Y" THEN
                  LET g_ztd_c.ztd11 = "1"
           ELSE
                  LET g_ztd_c.ztd11 = "2"
           END IF
        END IF
 
END FUNCTION
 
FUNCTION p_zta_constraint_menu()
 
    LET g_constraint_choice = "constraint_type" 
    WHILE  TRUE 
 
        CALL p_zta_condition_check() 
 
        #控制 page 顯示
        CALL p_zta_constraint_type_change()
 
        CASE g_constraint_choice 
           WHEN "constraint_type"                 #Constraint Definition 
                CALL p_zta_constraint_type()
 
           WHEN "constraint_pk"                   #Key Columns
                CALL p_zta_constraint_pk()
 
           WHEN "constraint_fk"                   #Referenced Table
                 CALL p_zta_constraint_fk()        
 
           WHEN "constraint_fk_col"               #Referenced Columns
                CALL p_zta_trcol_b_fill(g_ztd_c.ztd06,g_ztd_c.ztd17)
                CALL p_zta_constraint_fk_col()        
 
           WHEN "constraint_check"                #Check Constraint Condition
                CALL p_zta_constraint_check()      
 
           WHEN "constraint_option"               #Options
                 CALL p_zta_constraint_option()
 
           WHEN "constraint_sql"                  #SQL
                 CALL p_zta_constraint_sql()
 
           WHEN "help"                            # H.求助
              CALL cl_show_help()
   
           WHEN "constraint_finish"               # 完成
              EXIT WHILE
   
           WHEN "exit"                            # Esc.結束
              EXIT WHILE
   
           WHEN "controlg"                        # KEY(CONTROL-G)
              CALL cl_cmdask()
 
        END CASE
    END WHILE 
END FUNCTION
 
FUNCTION p_zta_tcol_b_fill()
DEFINE l_i     LIKE type_file.num5
 
   CALL g_tcol.clear()
 
   FOR l_i = 1 TO g_rec_b
       LET g_tcol[l_i].tcol01 = g_ztb[l_i].ztb03
   END FOR
   LET g_tcol_rec_b = g_rec_b
END FUNCTION
 
FUNCTION p_zta_trcol_b_fill(p_schema,p_tabname)
DEFINE p_schema         LIKE ztd_file.ztd06
DEFINE p_tabname        LIKE ztd_file.ztd17
DEFINE l_i              LIKE type_file.num5
DEFINE l_colname        LIKE type_file.chr20
DEFINE l_colname_str    STRING
DEFINE l_sql            STRING
 
       CALL g_trcol.clear()
 
       CASE cl_db_get_database_type()
           WHEN "ORA"
                LET l_sql= "SELECT COLUMN_NAME FROM ALL_TAB_COLUMNS WHERE TABLE_NAME = UPPER('",p_tabname,"') AND OWNER =UPPER('",p_schema ,"') ORDER BY COLUMN_ID"
           WHEN "IFX"
                LET l_sql = "SELECT colname FROM ",p_schema,":syscolumns col,systables tab WHERE tab.tabname = '",p_tabname ,"'AND tab.tabid = col.tabid ORDER BY colno"
         #No.FUN-A60022---start
           WHEN "MSV"
                LET l_sql= " select b.name from ",g_mssqlarea CLIPPED,"_",p_schema CLIPPED,".sys.objects a,",g_mssqlarea CLIPPED,"_",p_schema CLIPPED,".sys.columns b "
                          ,"  where a.object_id =b.object_id and a.name ='",p_tabname CLIPPED,"'"
        #No.FUN-A60022---end
       END CASE
 
       LET l_i = 0
       DECLARE sch_cur CURSOR FROM l_sql
       FOREACH sch_cur INTO l_colname
           LET l_colname_str = l_colname
           LET l_i = l_i + 1
           LET g_trcol[l_i].trcol01 = l_colname_str.toLowerCase()
       END FOREACH
       LET g_trcol_rec_b =  l_i 
END FUNCTION
 
FUNCTION p_zta_constraint_type()
DEFINE l_cnt         LIKE type_file.num5
           
   CALL cl_set_act_visible("accept,cancel", FALSE)
          
   INPUT g_ztd_c.ztd03,g_ztd_c.ztd04 WITHOUT DEFAULTS FROM ztd03,ztd04
      BEFORE INPUT 
         CALL cl_set_action_active("back,finish", FALSE)
 
      AFTER FIELD ztd03         
         IF g_db_type = "ORA" AND g_ztd_c.ztd03[1,4] = 'sys_' THEN
            CALL cl_err(g_ztd_c.ztd03,'zta-035',0)
            NEXT FIELD ztd03
         END IF
         #FUN-7A0029
         IF cl_null(FGL_GETENV("TOPLINK")) THEN
            LET l_cnt = FGL_WIDTH(g_ztd_c.ztd03 CLIPPED)
            IF g_ztd_c.ztd03[1,4] != "tpc_" OR l_cnt < 8 THEN
               CALL cl_err(g_ztd_c.ztd03,"zta-039",0)
               NEXT FIELD ztd03
            ELSE
               IF (l_cnt > 7 AND g_ztd_c.ztd03[FGL_WIDTH(g_ztd_c.ztd03 CLIPPED)-2,FGL_WIDTH(g_ztd_c.ztd03 CLIPPED)] != "_pk")
               THEN
                     CALL cl_err(g_ztd_c.ztd03,"zta-039",0)
                     NEXT FIELD ztd03
               END IF
            END IF
         END IF
         #END FUN-7A0029
 
      AFTER INPUT 
         IF g_constraint_choice = "wnext" THEN
            IF g_ztd_c.ztd04 = "2" THEN
                 LET g_constraint_choice="constraint_check"
            ELSE 
                 LET g_constraint_choice="constraint_pk"
            END IF
         END IF
          
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT INPUT
          
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
          
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
          
     ON ACTION back 
          
     ON ACTION wnext
        LET g_constraint_choice = "wnext"
        ACCEPT INPUT
          
     ON ACTION finish
          
     ON ACTION constraint_type
        LET g_constraint_choice="constraint_type"
        ACCEPT INPUT
          
     ON ACTION constraint_pk 
        LET g_constraint_choice="constraint_pk"
        ACCEPT INPUT
          
     ON ACTION constraint_fk 
        LET g_constraint_choice="constraint_fk"
        ACCEPT INPUT
          
     ON ACTION constraint_fk_col 
        LET g_constraint_choice="constraint_fk_col"
        ACCEPT INPUT
          
     ON ACTION constraint_check 
        LET g_constraint_choice="constraint_check"
        ACCEPT INPUT
          
     ON ACTION constraint_option 
        LET g_constraint_choice="constraint_option"
        ACCEPT INPUT
          
     ON ACTION constraint_sql 
        LET g_constraint_choice="constraint_sql"
        ACCEPT INPUT
          
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
   END INPUT 
   CALL cl_set_act_visible("accept,cancel", TRUE)
          
END FUNCTION
          
FUNCTION p_zta_constraint_type_change()
          
   #依照 Constraint Type 隱藏 Page 畫面
   CALL cl_set_comp_visible("page6,page7,page8,page27,page28,page29,page30", FALSE)
   CASE g_constraint_choice 
      WHEN "constraint_type"                 #Constraint Definition 
           CALL cl_set_comp_visible("page6", TRUE)
          
      WHEN "constraint_pk"                   #Key Columns
           CALL cl_set_comp_visible("page27", TRUE)
 
      WHEN "constraint_fk"                   #Referenced Table
           CALL cl_set_comp_visible("page28", TRUE)
 
      WHEN "constraint_fk_col"               #Referenced Columns
           CALL cl_set_comp_visible("page29", TRUE)
 
      WHEN "constraint_check"                #Check Constraint Condition
           CALL cl_set_comp_visible("page30", TRUE)
 
      WHEN "constraint_option"               #Options
           CALL cl_set_comp_visible("page7", TRUE)
 
      WHEN "constraint_sql"                  #SQL
           CALL cl_set_comp_visible("page8", TRUE)
 
   END CASE
 
END FUNCTION 
 
FUNCTION p_zta_constraint_pk()
DEFINE l_i         LIKE type_file.num5
 
  LET g_array_change = FALSE
 
  CALL cl_set_act_visible("accept,cancel", FALSE)
 
  CALL p_zta_pk_array2_refresh()
 
  DISPLAY ARRAY g_tcol TO s_tcol.* ATTRIBUTE(COUNT=g_tcol_rec_b)
     BEFORE DISPLAY
        CALL cl_set_action_active("finish", FALSE)
 
     BEFORE ROW
        LET l_tcol_ac = ARR_CURR()
 
     ON ACTION pk_change
        LET g_array_change = TRUE
        EXIT DISPLAY
    
     ON ACTION p_add 
        FOR l_i = 1 TO g_kcol_rec_b 
            IF g_tcol[l_tcol_ac].tcol01 = g_kcol[l_i].kcol01 THEN
               MESSAGE "Repeat Data"
               CONTINUE DISPLAY
            END IF
        END FOR
        MESSAGE ""
        LET g_kcol_rec_b = g_kcol_rec_b + 1
        LET g_kcol[g_kcol_rec_b].kcol01 = g_tcol[l_tcol_ac].tcol01
        CALL p_zta_pk_array2_refresh()
 
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT DISPlAY
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPlAY
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPlAY
 
     ON ACTION back 
        LET g_constraint_choice="constraint_type"
        EXIT DISPLAY
 
     ON ACTION wnext
        IF g_ztd_c.ztd04 = "4" THEN
             LET g_constraint_choice="constraint_fk"
        ELSE 
           #No.FUN-A60022---start   
             IF g_db_type="MSV" THEN 
                LET g_constraint_choice="constraint_sql"
             ELSE 
                LET g_constraint_choice="constraint_option"
             END IF 
           #No.FUN-A60022---end
        END IF
        EXIT DISPLAY
 
     ON ACTION finish
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
   END DISPLAY 
   CALL cl_set_act_visible("accept,cancel", TRUE)
   IF g_array_change THEN
      CALL p_zta_constraint_pk_array2()
   END IF
END FUNCTION
 
FUNCTION p_zta_constraint_pk_array2()
 
  LET g_array_change = FALSE
 
  CALL cl_set_act_visible("accept,cancel", FALSE)
 
  DISPLAY ARRAY g_kcol TO s_kcol.* ATTRIBUTE(COUNT=g_kcol_rec_b)
     BEFORE DISPLAY 
        CALL cl_set_action_active("finish", FALSE)
 
     BEFORE ROW
        LET l_kcol_ac = ARR_CURR()
 
     ON ACTION pk_change
        LET g_array_change = TRUE
        EXIT DISPLAY
    
     ON ACTION p_move
        IF g_kcol_rec_b > 0 THEN
           CALL g_kcol.deleteElement(l_kcol_ac)
           LET g_kcol_rec_b = g_kcol_rec_b - 1
           CALL p_zta_pk_array2_refresh()
        END IF
 
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT DISPLAY
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPLAY
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPLAY
 
     ON ACTION back 
        LET g_constraint_choice="constraint_type"
        EXIT DISPLAY
 
     ON ACTION wnext
        IF g_ztd_c.ztd04 = "4" THEN
             LET g_constraint_choice="constraint_fk"
        ELSE 
           #No.FUN-A60022---start
             #LET g_constraint_choice="constraint_option"    
             IF g_db_type="MSV" THEN 
                LET g_constraint_choice="constraint_sql"
             ELSE 
                LET g_constraint_choice="constraint_option"
             END IF 
           #No.FUN-A60022---end
        END IF
        EXIT DISPLAY
  
     ON ACTION finish
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
  END DISPLAY 
  CALL cl_set_act_visible("accept,cancel", TRUE)
  IF g_array_change THEN
     CALL p_zta_constraint_pk()
  END IF
 
END FUNCTION
 
FUNCTION p_zta_constraint_fk()
DEFINE   l_sql           STRING
DEFINE   l_n             LIKE type_file.num5
DEFINE   l_gat03          LIKE gat_file.gat03      #No.FUN-A60022
 
 
   LET g_ztd_c_t.ztd06 = g_ztd_c.ztd06
   LET g_ztd_c_t.ztd17 = g_ztd_c.ztd17
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   INPUT g_ztd_c.ztd06,g_ztd_c.ztd17 WITHOUT DEFAULTS FROM ztd06,ztd17
        BEFORE INPUT 
           CALL cl_set_action_active("finish", FALSE)
     
        AFTER FIELD ztd06
           IF NOT cl_null(g_ztd_c.ztd06) THEN
              SELECT DISTINCT azp03 FROM azp_file WHERE azp03=g_ztd_c.ztd06
              IF STATUS THEN
                 #CALL cl_err('sel azp:',STATUS,0)  #No.FUN-660081
                 CALL cl_err3("sel","azp_file",g_ztd_c.ztd06,"",SQLCA.sqlcode,"","sel azp",0)   #No.FUN-660081
                 NEXT FIELD ztd06
              END IF
              IF g_ztd_c.ztd06 != g_ztd_c_t.ztd06 THEN 
                 CALL g_rcol.clear()
                 LET g_rcol_rec_b = 0
              END IF
           END IF
   
        AFTER FIELD ztd17
           IF NOT cl_null(g_ztd_c.ztd17) THEN
              LET l_sql="SELECT count(*) FROM zta_file",
                        " WHERE zta01 = '",g_ztd_c.ztd17 CLIPPED,"'",
                        "   AND zta02 = '",g_ztd_c.ztd06 CLIPPED,"'"
              PREPARE p_ztd_i_pre1 FROM l_sql
              EXECUTE p_ztd_i_pre1 INTO l_n
              FREE p_ztd_i_pre1
              IF l_n = 0 THEN                  # Duplicated
                 CALL cl_err(g_ztd_c.ztd17,NOTFOUND,0)
                 NEXT FIELD ztd17
              END IF
              IF g_ztd_c.ztd17 != g_ztd_c_t.ztd17 THEN 
                 CALL g_rcol.clear()
                 LET g_rcol_rec_b = 0
              END IF
           END IF
 
 
        ON ACTION CONTROLP
           CALL cl_set_act_visible("accept,cancel", TRUE)
           CASE
             WHEN INFIELD(ztd06)
                # 產生查詢畫面的參數初始化.
                CALL cl_init_qry_var()
                LET g_qryparam.form = "q_azp4zta"   #TQC-6C0129
                LET g_qryparam.construct = 'N'
                LET g_qryparam.default1 = g_ztd_c.ztd06
                CALL cl_create_qry() RETURNING g_ztd_c.ztd06
                DISPLAY g_ztd_c.ztd06 TO ztd06
                NEXT FIELD ztd06
 
             WHEN INFIELD(ztd17)
              #No.FUN-A60022---start
                #CALL cl_init_qry_var()
                #LET g_qryparam.form = "q_zta01"
                #LET g_qryparam.default1 = g_ztd_c.ztd17
                #LET g_qryparam.arg1 = g_lang CLIPPED
                #CALL cl_create_qry() RETURNING g_ztd_c.ztd17
                #DISPLAY g_ztd_c.ztd17 TO ztd17 
                #NEXT FIELD ztd17       
                CALL cl_init_qry_var()
                LET g_qryparam.form = "q_zta3"
                LET g_qryparam.default1 = g_ztd_c.ztd17
                LET g_qryparam.default2 = NULL
                LET g_qryparam.arg1 = g_lang CLIPPED
                LET g_qryparam.arg2 = g_ztd_c.ztd06
                CALL cl_create_qry() RETURNING g_ztd_c.ztd17,l_gat03
                DISPLAY g_ztd_c.ztd17 TO ztd17 
                NEXT FIELD ztd17
              #No.FUN-A60022---end
           END CASE
           CALL cl_set_act_visible("accept,cancel", FALSE)
 
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION back 
        LET g_constraint_choice="constraint_pk"
        ACCEPT INPUT
 
     ON ACTION wnext
        LET g_constraint_choice="constraint_fk_col"
        ACCEPT INPUT
 
     ON ACTION finish
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
   END INPUT 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
END FUNCTION
 
FUNCTION p_zta_constraint_fk_col()
DEFINE l_i         LIKE type_file.num5
 
  LET g_array_change = FALSE
 
 
  CALL p_zta_fk_array2_refresh()
 
  CALL cl_set_act_visible("accept,cancel", FALSE)
 
  DISPLAY ARRAY g_trcol TO s_trcol.* ATTRIBUTE(COUNT=g_trcol_rec_b)
     BEFORE DISPLAY
        CALL cl_set_action_active("finish", FALSE)
 
     BEFORE ROW
        LET l_trcol_ac = ARR_CURR()
 
     ON ACTION fk_change
        LET g_array_change = TRUE
        EXIT DISPLAY
    
     ON ACTION f_add 
        FOR l_i = 1 TO g_rcol_rec_b 
            IF g_trcol[l_trcol_ac].trcol01 = g_rcol[l_i].rcol01 THEN
               MESSAGE "Repeat Data"
               CONTINUE DISPLAY
            END IF
        END FOR
        MESSAGE ""
        LET g_rcol_rec_b = g_rcol_rec_b + 1
        LET g_rcol[g_rcol_rec_b].rcol01 = g_trcol[l_trcol_ac].trcol01
        CALL p_zta_fk_array2_refresh()
 
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT DISPlAY
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPlAY
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPlAY
 
     ON ACTION back 
        LET g_constraint_choice="constraint_fk"
        EXIT DISPLAY
 
     ON ACTION wnext
      #No.FUN-A60022---start
        IF g_db_type="MSV" THEN
           LET g_constraint_choice="constraint_sql"
        ELSE
           LET g_constraint_choice="constraint_option"
        END IF
      #No.FUN-A60022---end
        EXIT DISPLAY
 
     ON ACTION finish
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
   END DISPLAY 
  CALL cl_set_act_visible("accept,cancel", TRUE)
  IF g_array_change THEN
     CALL p_zta_constraint_fk_array2()
  END IF
 
END FUNCTION
 
FUNCTION p_zta_constraint_fk_array2()
 
  LET g_array_change = FALSE
 
  CALL cl_set_act_visible("accept,cancel", FALSE)
 
  DISPLAY ARRAY g_rcol TO s_rcol.* ATTRIBUTE(COUNT=g_rcol_rec_b)
     BEFORE DISPLAY
        CALL cl_set_action_active("finish", FALSE)
 
     BEFORE ROW
        LET l_rcol_ac = ARR_CURR()
 
     ON ACTION fk_change
        LET g_array_change = TRUE
        EXIT DISPLAY
    
     ON ACTION f_move
        IF g_rcol_rec_b > 0 THEN
           CALL g_rcol.deleteElement(l_rcol_ac)
           LET g_rcol_rec_b = g_rcol_rec_b - 1
           CALL p_zta_pk_array2_refresh()
        END IF
 
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT DISPLAY
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPLAY
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT DISPLAY
 
     ON ACTION back 
        LET g_constraint_choice="constraint_fk"
        EXIT DISPLAY
 
     ON ACTION wnext
        LET g_constraint_choice="constraint_option"
        EXIT DISPLAY
 
     ON ACTION finish
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
  END DISPLAY 
  CALL cl_set_act_visible("accept,cancel", TRUE)
  IF g_array_change THEN
     CALL p_zta_constraint_fk_col()
  END IF
 
END FUNCTION
 
FUNCTION p_zta_constraint_option()
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   INPUT g_ztd_c.ztd08,g_ztd_c.ztd09,g_ztd_c.ztd11,g_ztd_c.ztd10
       WITHOUT DEFAULTS FROM ztd08,ztd09,ztd11,ztd10
     BEFORE INPUT
        CALL cl_set_action_active("finish", FALSE)
        IF cl_null(g_ztd_c.ztd08) THEN
           IF g_ztd_c.ztd04 = "4" THEN
              #FUN-730016
              #IF g_db_type="IFX" THEN
              CASE g_db_type 
               WHEN "IFX"
                  LET g_ztd_c.ztd08 = "1"
                  CALL cl_set_comp_entry("ztd08",FALSE)
               WHEN "ORA"
                  LET g_ztd_c.ztd08 = "2"
                  CALL cl_set_comp_entry("ztd08",TRUE)
               WHEN "MSV"
                #No.FUN-A60022---start
                  LET g_ztd_c.ztd08 = "2"
                  CALL cl_set_comp_entry("ztd08",TRUE)
                  CALL cl_set_comp_entry("ztd09,ztd10,ztd11",FALSE )
                #No.FUN-A60022---end
              END CASE
              #END FUN-730016
           ELSE
              LET g_ztd_c.ztd08 = "" 
              CALL cl_set_comp_entry("ztd08",FALSE)
           END IF
        ELSE
           IF g_db_type="IFX" THEN
              IF g_ztd_c.ztd04 = "4" THEN
                  LET g_ztd_c.ztd08 = "1"
              ELSE
                  LET g_ztd_c.ztd08 = ""
              END IF
              CALL cl_set_comp_entry("ztd08",FALSE)
           END IF
        END IF
        IF g_db_type="IFX" THEN
           CALL cl_set_comp_visible("gb9", FALSE)
        END IF
        DISPLAY g_ztd_c.ztd08 TO ztd08
 
     
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION back
        CASE g_ztd_c.ztd04 
          WHEN "1" 
             LET g_constraint_choice = "constraint_pk"
          WHEN "2"
             LET g_constraint_choice = "constraint_check"
          WHEN "3"  
             LET g_constraint_choice = "constraint_pk"
          WHEN "4"  
             LET g_constraint_choice = "constraint_fk_col"
        END CASE
        ACCEPT INPUT
 
     ON ACTION wnext
        LET g_constraint_choice="constraint_sql"
        ACCEPT INPUT
 
     ON ACTION finish
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
   END INPUT 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
 
END FUNCTION 
 
FUNCTION p_zta_constraint_check()
 
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   INPUT g_ztd_c.ztd05 WITHOUT DEFAULTS FROM ztd05
     BEFORE INPUT
        CALL cl_set_action_active("finish", FALSE)
     
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT INPUT
 
     ON ACTION back 
        LET g_constraint_choice="constraint_type"
        ACCEPT INPUT
 
     ON ACTION wnext 
      #No.FUN-A60022---start
        IF g_db_type="MSV" THEN
           LET g_constraint_choice="constraint_sql"
        ELSE
           LET g_constraint_choice="constraint_option"
        END IF
      #No.FUN-A60022---end
        ACCEPT INPUT
 
     ON ACTION finish
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT
   END INPUT 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
 
END FUNCTION 
 
FUNCTION p_zta_constraint_sql()
   
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   CALL p_zta_constraint_setsql()
 
   DISPLAY g_constraint_sql TO sql
 
   MENU ""
     BEFORE MENU
        CALL DIALOG.setActionActive("wnext", FALSE)
 
     ON ACTION exit                             # Esc.結束
        LET g_constraint_choice="exit"
        EXIT MENU
 
     ON ACTION cancel
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT MENU
 
     ON ACTION cancel2
        LET INT_FLAG=FALSE             #MOD-570244     mars
        LET g_constraint_choice="exit"
        EXIT MENU
 
     ON ACTION back 
      #No.FUN-A60022---start
        IF g_db_type="MSV" THEN
           IF g_ztd_c.ztd04 = '1' OR g_ztd_c.ztd04 = '3' THEN
              LET g_constraint_choice="constraint_pk"
           END IF
           IF g_ztd_c.ztd04 = '2' THEN
              LET g_constraint_choice="constraint_check"
           END IF
           IF g_ztd_c.ztd04 = '4' THEN
              LET g_constraint_choice="constraint_fk_col"
           END IF
        ELSE
           LET g_constraint_choice="constraint_option"
        END IF
      #No.FUN-A60022---end
        EXIT MENU
 
     ON ACTION wnext
 
     ON ACTION finish
        LET g_constraint_choice="constraint_finish"
        LET g_ztd[l_ac_ztd].ztd03 = g_ztd_c.ztd03
 
        CASE g_ztd_c.ztd04
           WHEN "1"
               LET g_ztd[l_ac_ztd].ztd04 = "P"
               LET g_ztd_c.ztd05 = ""
               LET g_ztd_c.ztd06 = ""
               LET g_ztd_c.ztd17 = ""
               LET g_ztd_c.ztd08 = ""
               CALL g_rcol.clear()
           WHEN "2"
               LET g_ztd[l_ac_ztd].ztd04 = "C"
               LET g_ztd_c.ztd06 = ""
               LET g_ztd_c.ztd17 = ""
               CALL g_kcol.clear()
               CALL g_rcol.clear()
           WHEN "3"
               LET g_ztd[l_ac_ztd].ztd04 = "U"
               LET g_ztd_c.ztd05 = ""
               LET g_ztd_c.ztd06 = ""
               LET g_ztd_c.ztd17 = ""
               CALL g_rcol.clear()
           WHEN "4"
               LET g_ztd[l_ac_ztd].ztd04 = "R"
               LET g_ztd_c.ztd05 = ""
        END CASE
 
        LET g_ztd[l_ac_ztd].ztd05 = g_ztd_c.ztd05
        LET g_ztd[l_ac_ztd].ztd06 = g_ztd_c.ztd06
        LET g_ztd[l_ac_ztd].ztd17 = g_ztd_c.ztd17
        LET g_ztd[l_ac_ztd].ztd13 =  p_zta_kcol_str()
        LET g_ztd[l_ac_ztd].ztd15 =  p_zta_rcol_str()
 
        SELECT LOWER(CONSTRAINT_NAME) INTO g_ztd[l_ac_ztd].ztd07 
          FROM ALL_CONS_COLUMNS 
         WHERE LOWER(OWER)= g_ztd_c.ztd06 AND LOWER(TABLE_NAME) = g_ztd_c.ztd17
           AND LOWER(COLUMN_NAME) = g_ztd[l_ac_ztd].ztd15
 
        LET g_ztd[l_ac_ztd].ztd08 = g_ztd_c.ztd08
        LET g_ztd[l_ac_ztd].ztd09 = g_ztd_c.ztd09
        LET g_ztd[l_ac_ztd].ztd10 = g_ztd_c.ztd10
        
        IF g_ztd_c.ztd11 = "1" THEN
               LET g_ztd[l_ac_ztd].ztd11 = "Y"
        ELSE
               LET g_ztd[l_ac_ztd].ztd11 = "N"
        END IF
        EXIT MENU
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE MENU
   END MENU 
   CALL cl_set_act_visible("accept,cancel", TRUE)
 
 
END FUNCTION
 
FUNCTION p_zta_pk_array2_refresh()
 
  DISPLAY ARRAY g_kcol TO s_kcol.* ATTRIBUTE(COUNT=g_kcol_rec_b)
     BEFORE DISPLAY
        EXIT DISPLAY
  END DISPLAY
 
END FUNCTION
 
 
FUNCTION p_zta_fk_array2_refresh()
 
  DISPLAY ARRAY g_rcol TO s_rcol.* ATTRIBUTE(COUNT=g_rcol_rec_b)
     BEFORE DISPLAY
        EXIT DISPLAY
  END DISPLAY
END FUNCTION
 
FUNCTION p_zta_ztd_setsql(p_ztd)
DEFINE p_ztd         RECORD 
                          ztd03     LIKE ztd_file.ztd03,
                          ztd04     LIKE ztd_file.ztd04,
                          ztd05     LIKE ztd_file.ztd05,
                          ztd06     LIKE ztd_file.ztd06,
                          ztd07     LIKE ztd_file.ztd07,
                          ztd08     LIKE ztd_file.ztd08,
                          ztd09     LIKE ztd_file.ztd09,
                          ztd10     LIKE ztd_file.ztd10,
                          ztd11     LIKE ztd_file.ztd11,
                          ztd12     LIKE ztd_file.ztd12,
                          ztd13     LIKE ztd_file.ztd13,
                          ztd14     LIKE ztd_file.ztd14,
                          ztd15     LIKE ztd_file.ztd15,
                          ztd16     LIKE ztd_file.ztd16,
                          ztd17     LIKE ztd_file.ztd17
                     END RECORD
DEFINE l_sql         STRING
DEFINE l_str         STRING
DEFINE l_i           LIKE type_file.num5
 
   #IF g_db_type="IFX" THEN
   CASE g_db_type              #FUN-730016
    WHEN "IFX"                 #FUN-730016
      #產生 Constraint SQL
      #LET l_str =  g_zta.zta02 CLIPPED,":",g_zta.zta01 CLIPPED
      #LET l_sql = "alter table ", l_str," add constraint"
      LET l_sql = "alter table ", g_zta.zta01 CLIPPED," add constraint"
      
      CASE p_ztd.ztd04
           WHEN "P"     #1:PrimaryKey
              LET l_sql = l_sql," primary key  (",p_ztd.ztd13 CLIPPED,")"
      
           WHEN "C"     #2:Check
              LET l_sql = l_sql," check (",p_ztd.ztd05 CLIPPED ,")"
      
           WHEN "U"     #3:Unique
              LET l_sql = l_sql," unique (",p_ztd.ztd13 CLIPPED,")"
      
           WHEN "R"     #4:Foreign Key
              LET l_sql = l_sql," (foreign key (",p_ztd.ztd13 CLIPPED,")"
      
              LET l_sql = l_sql," references ",p_ztd.ztd06 CLIPPED,":",p_ztd.ztd17 CLIPPED
              LET l_sql = l_sql," (",p_ztd.ztd15 CLIPPED,")"
      END CASE
      
      IF p_ztd.ztd08 = "1" THEN
            LET l_sql = l_sql, " on delete cascade"
      END IF
      
      LET l_sql = l_sql, " constraint ",p_ztd.ztd03 CLIPPED
 
     #IF p_ztd.ztd10 != "1" THEN
     #   LET l_sql = l_sql, " deferrable initially"
     #   CASE p_ztd.ztd10 
     #      WHEN "2" 
     #          LET l_sql = l_sql," immediate"
     #      WHEN "3"
     #          LET l_sql = l_sql," deferred"
     #   END CASE
     #END IF
      
      IF p_ztd.ztd09 = "1" THEN
         LET l_sql = l_sql," enabled"
      ELSE
         LET l_sql = l_sql," disabled"
      END IF  
      
     #IF p_ztd.ztd11 = "Y" THEN
     #   LET l_sql = l_sql," validate"
     #ELSE
     #   LET l_sql = l_sql," novalidate"
     #END IF
      
      IF p_ztd.ztd04 = "R" THEN
         LET l_sql = l_sql ,")"
      END IF
 
    WHEN "ORA"                 #FUN-730016
      #產生 Constraint SQL
      #LET l_str =  g_zta.zta02 CLIPPED,".",g_zta.zta01 CLIPPED
      #LET l_sql = "alter table ", l_str," add ",
      LET l_sql = "alter table ", g_zta.zta01 CLIPPED ," add ",
                     " constraint ",p_ztd.ztd03 CLIPPED
      
      CASE p_ztd.ztd04
           WHEN "P"     #1:PrimaryKey
              LET l_sql = l_sql," primary key  (",p_ztd.ztd13 CLIPPED,")"
      
           WHEN "C"     #2:Check
              LET l_sql = l_sql," check (",p_ztd.ztd05 CLIPPED ,")"
      
           WHEN "U"     #3:Unique
              LET l_sql = l_sql," unique (",p_ztd.ztd13 CLIPPED,")"
      
           WHEN "R"     #4:Foreign Key
              LET l_sql = l_sql," foreign key (",p_ztd.ztd13 CLIPPED,")"
      
              LET l_sql = l_sql," references ",p_ztd.ztd06 CLIPPED,".",p_ztd.ztd17 CLIPPED
              LET l_sql = l_sql," (",p_ztd.ztd15 CLIPPED,")"
      END CASE
      
      CASE p_ztd.ztd08
         WHEN "1"
            LET l_sql = l_sql, " on delete cascade"
         WHEN "2"
            LET l_sql = l_sql, " on delete set null"
      END CASE
      
      IF p_ztd.ztd10 != "1" THEN
         LET l_sql = l_sql, " deferrable initially"
         CASE p_ztd.ztd10 
            WHEN "2" 
                LET l_sql = l_sql," immediate"
            WHEN "3"
                LET l_sql = l_sql," deferred"
         END CASE
      END IF
      
      IF p_ztd.ztd09 = "1" THEN
         LET l_sql = l_sql," enable"
      ELSE
         LET l_sql = l_sql," disable"
      END IF  
      
      IF p_ztd.ztd11 = "Y" THEN
         LET l_sql = l_sql," validate"
      ELSE
         LET l_sql = l_sql," novalidate"
      END IF
 
    WHEN "MSV"                 #FUN-730016
    #No.FUN-A60022---start
      LET l_sql = "alter table ", g_zta.zta01 CLIPPED ," add constraint ",p_ztd.ztd03 CLIPPED
      
      CASE p_ztd.ztd04
           WHEN "P"     #1:PrimaryKey
              LET l_sql = l_sql," primary key  (",p_ztd.ztd13 CLIPPED,")"
      
           WHEN "C"     #2:Check
              LET l_sql = l_sql," check (",p_ztd.ztd05 CLIPPED ,")"
      
           WHEN "U"     #3:Unique
              LET l_sql = l_sql," unique (",p_ztd.ztd13 CLIPPED,")"
      
           WHEN "R"     #4:Foreign Key
              LET l_sql = l_sql," foreign key (",p_ztd.ztd13 CLIPPED,")"     
              LET l_sql = l_sql," references ",s_dbstring(p_ztd.ztd06),p_ztd.ztd17 CLIPPED
              LET l_sql = l_sql," (",p_ztd.ztd15 CLIPPED,")"
      END CASE
      
      CASE p_ztd.ztd08
         WHEN "1"
            LET l_sql = l_sql, " on delete cascade"
         WHEN "2"
            LET l_sql = l_sql, " on delete no action"
      END CASE
      
      IF p_ztd.ztd10 != "1" THEN
         LET l_sql = l_sql, " deferrable initially"
         CASE p_ztd.ztd10 
            WHEN "2" 
                LET l_sql = l_sql," immediate"
            WHEN "3"
                LET l_sql = l_sql," deferred"
         END CASE
      END IF
    #No.FUN-A60022---end 
   END CASE                    #FUN-730016
 
   LET l_sql = l_sql,";"
   RETURN l_sql
 
END FUNCTION
 
FUNCTION p_zta_constraint_setsql()
DEFINE l_sql         STRING
DEFINE l_str         STRING
DEFINE l_i           LIKE type_file.num5
 
   #IF g_db_type="IFX" THEN
   CASE g_db_type                                    #FUN-730016
    WHEN "IFX"                                       #FUN-730016
       #產生 Constraint SQL
       #LET l_str =  g_zta.zta02 CLIPPED,":",g_zta.zta01 CLIPPED
       LET l_str =  g_zta.zta01 CLIPPED
       LET l_sql = "ALTER TABLE ", l_str.toUpperCase(),
                   " ADD CONSTRAINT ",ASCII 10
               
       CASE g_ztd_c.ztd04
            WHEN "1"     #1:PrimaryKey
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," PRIMARY KEY (",l_str.toUpperCase(),") ",ASCII 10
       
            WHEN "2"     #2:Check
               LET l_str = g_ztd_c.ztd05 CLIPPED
               LET l_str = cl_replace_str(g_ztd_c.ztd05 CLIPPED,"\n"," ")
               LET l_sql = l_sql," CHECK (",l_str.toUpperCase(),")",ASCII 10
       
            WHEN "3"     #3:Unique
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," UNIQUE (",l_str.toUpperCase(),") ",ASCII 10
       
            WHEN "4"     #4:Foreign Key
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," (FOREIGN KEY (",l_str.toUpperCase(),") ", ASCII 10
       
               LET l_str =  g_ztd_c.ztd06 CLIPPED,":",g_ztd_c.ztd17 CLIPPED
               LET l_sql = l_sql," REFERENCES ",l_str.toUpperCase()
               LET l_str =  p_zta_rcol_str()
               LET l_sql = l_sql," (", l_str.toUpperCase(),") ",ASCII 10
       END CASE
       
      IF g_ztd_c.ztd08 = "1" THEN
         LET l_sql = l_sql, " ON DELETE CASCADE", ASCII 10
      END IF
       
      LET l_sql = l_sql," CONSTRAINT ",g_ztd_c.ztd03 CLIPPED, ASCII 10
      #IF g_ztd_c.ztd10 != "1" THEN
      #   LET l_sql = l_sql, " DEFERRABLE ",ASCII 10,
      #                      " INITIALLY"
      #   CASE g_ztd_c.ztd10 
      #      WHEN "2" 
      #          LET l_sql = l_sql," IMMEDIATE"
      #      WHEN "3"
      #          LET l_sql = l_sql," DEFERRED"
      #   END CASE
      #END IF
       
       IF g_ztd_c.ztd09 = "1" THEN
          LET l_sql = l_sql," ENABLED ", ASCII 10
       ELSE
          LET l_sql = l_sql," DISABLED ",ASCII 10
       END IF  
       
      #IF g_ztd_c.ztd11 = "1" THEN
      #   LET l_sql = l_sql," VALIDATE", ASCII 10
      #ELSE
      #   LET l_sql = l_sql," NOVALIDATE",ASCII 10
      #END IF
       IF g_ztd_c.ztd04 = '4' THEN
          LET l_sql = l_sql ,")"
       END IF
 
    WHEN "ORA"                                       #FUN-730016
       #產生 Constraint SQL
       LET l_str =  g_zta.zta01 CLIPPED
       LET l_sql = "ALTER TABLE ", l_str.toUpperCase()," ADD",ASCII 10,
                   " CONSTRAINT ",g_ztd_c.ztd03 CLIPPED, ASCII 10
               
       CASE g_ztd_c.ztd04
            WHEN "1"     #1:PrimaryKey
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," PRIMARY KEY (",l_str.toUpperCase(),") ",ASCII 10
       
            WHEN "2"     #2:Check
               LET l_str = g_ztd_c.ztd05 CLIPPED
               LET l_str = cl_replace_str(g_ztd_c.ztd05 CLIPPED,"\n"," ")
               LET l_sql = l_sql," CHECK (",l_str.toUpperCase(),")",ASCII 10
       
            WHEN "3"     #3:Unique
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," UNIQUE (",l_str.toUpperCase(),") ",ASCII 10
       
            WHEN "4"     #4:Foreign Key
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," FOREIGN KEY (",l_str.toUpperCase(),") ", ASCII 10
       
               LET l_str =  g_ztd_c.ztd06 CLIPPED,".",g_ztd_c.ztd17 CLIPPED
               LET l_sql = l_sql," REFERENCES ",l_str.toUpperCase()
               LET l_str =  p_zta_rcol_str()
               LET l_sql = l_sql," (", l_str.toUpperCase(),") ",ASCII 10
       END CASE
       
       IF NOT cl_null(g_ztd_c.ztd08) THEN
          IF g_ztd_c.ztd08 = "1" THEN
             LET l_sql = l_sql, " ON DELETE CASCADE", ASCII 10
          ELSE
             LET l_sql = l_sql, " ON DELETE SET NULL", ASCII 10
          END IF
       END IF
       
       IF g_ztd_c.ztd10 != "1" THEN
          LET l_sql = l_sql, " DEFERRABLE ",ASCII 10,
                             " INITIALLY"
          CASE g_ztd_c.ztd10 
             WHEN "2" 
                 LET l_sql = l_sql," IMMEDIATE"
             WHEN "3"
                 LET l_sql = l_sql," DEFERRED"
          END CASE
       END IF
       
       IF g_ztd_c.ztd09 = "1" THEN
          LET l_sql = l_sql," ENABLE ", ASCII 10
       ELSE
          LET l_sql = l_sql," DISABLE ",ASCII 10
       END IF  
       
       IF g_ztd_c.ztd11 = "1" THEN
          LET l_sql = l_sql," VALIDATE", ASCII 10
       ELSE
          LET l_sql = l_sql," NOVALIDATE",ASCII 10
       END IF
 
    WHEN "MSV"                                       #FUN-730016
     #No.FUN-A60022---start
       LET l_str =  g_zta.zta01 CLIPPED
       LET l_sql = "ALTER TABLE ", l_str.toUpperCase()," ADD",ASCII 10,
                   " CONSTRAINT ",g_ztd_c.ztd03 CLIPPED, ASCII 10
               
       CASE g_ztd_c.ztd04
            WHEN "1"     #1:PrimaryKey
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," PRIMARY KEY (",l_str.toUpperCase(),") ",ASCII 10
       
            WHEN "2"     #2:Check
               LET l_str = g_ztd_c.ztd05 CLIPPED
               LET l_str = cl_replace_str(g_ztd_c.ztd05 CLIPPED,"\n"," ")
               LET l_sql = l_sql," CHECK (",l_str.toUpperCase(),")",ASCII 10
       
            WHEN "3"     #3:Unique
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," UNIQUE (",l_str.toUpperCase(),") ",ASCII 10
       
            WHEN "4"     #4:Foreign Key
               LET l_str =  p_zta_kcol_str()
               LET l_sql = l_sql," FOREIGN KEY (",l_str.toUpperCase(),") ", ASCII 10
               LET l_sql = l_sql," REFERENCES ",s_dbstring(g_ztd_c.ztd06),g_ztd_c.ztd17 CLIPPED
               LET l_str =  p_zta_rcol_str()
               LET l_sql = l_sql," (", l_str.toUpperCase(),") ",ASCII 10
       END CASE
       
       IF NOT cl_null(g_ztd_c.ztd08) THEN
          IF g_ztd_c.ztd08 = "1" THEN
             LET l_sql = l_sql, " ON DELETE CASCADE", ASCII 10
          ELSE
             LET l_sql = l_sql, " ON DELETE NO ACTION", ASCII 10
          END IF
       END IF
       
       IF g_ztd_c.ztd10 != "1" THEN
          LET l_sql = l_sql, " DEFERRABLE ",ASCII 10,
                             " INITIALLY"
          CASE g_ztd_c.ztd10 
             WHEN "2" 
                 LET l_sql = l_sql," IMMEDIATE"
             WHEN "3"
                 LET l_sql = l_sql," DEFERRED"
          END CASE
       END IF
     #No.FUN-A60022---end 
   END CASE
   LET g_constraint_sql = l_sql
 
END FUNCTION
 
FUNCTION p_zta_kcol_str()
DEFINE l_i     LIKE type_file.num5
DEFINE l_str   STRING
 
   FOR l_i = 1 TO g_kcol_rec_b
       IF l_i <> 1 THEN
          LET l_str = l_str,","
       END IF 
       LET l_str = l_str,g_kcol[l_i].kcol01 CLIPPED
   END FOR
 
   RETURN l_str
END FUNCTION
 
FUNCTION p_zta_rcol_str()
DEFINE l_i     LIKE type_file.num5
DEFINE l_str   STRING
 
   FOR l_i = 1 TO g_rcol_rec_b
       IF l_i <> 1 THEN
          LET l_str = l_str,","
       END IF 
       LET l_str = l_str,g_rcol[l_i].rcol01 CLIPPED
   END FOR
 
   RETURN l_str
 
END FUNCTION 
 
FUNCTION p_zta_condition_check()
DEFINE l_status         LIKE type_file.num5
  LET l_status = 1
  IF g_constraint_choice = "constraint_option" OR
     g_constraint_choice = "constraint_sql" OR
     g_constraint_choice = "constraint_fk" OR
     g_constraint_choice = "constraint_fk_col" 
  THEN
     IF g_ztd_c.ztd04 != "2" THEN
        IF g_kcol_rec_b = 0 THEN
           CALL cl_err('','mfg2726',0)
           LET g_constraint_choice = "constraint_pk"
           LET l_status = 0
        END IF
     END IF
     
     IF g_ztd_c.ztd04 = "4" AND l_status = 1 THEN
        IF cl_null(g_ztd_c.ztd06) OR cl_null(g_ztd_c.ztd17) THEN
           IF g_constraint_choice != "constraint_fk" THEN
              CALL cl_err('','mfg2726',0)
              LET g_constraint_choice = "constraint_fk"
              LET l_status = 0
           END IF
        ELSE
           IF g_constraint_choice = "constraint_option" OR
              g_constraint_choice = "constraint_sql"  
           THEN
               IF g_rcol_rec_b = 0 THEN
                  CALL cl_err('','mfg2726',0)
                  LET g_constraint_choice = "constraint_fk_col"
                  LET l_status = 0
               END IF
           END IF
        END IF
     END IF
     IF g_ztd_c.ztd04 = "2" AND l_status = 1 THEN
        IF cl_null(g_ztd_c.ztd05) THEN
           CALL cl_err('','mfg2726',0)
           LET g_constraint_choice = "constraint_check"
           LET l_status = 0
        END IF
     END IF
  END IF
 
 
END FUNCTION
 
#END FUN-730016
 
FUNCTION p_zta_gsql(p_cmd)
  DEFINE l_i            LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_zta          RECORD LIKE zta_file.*,
         p_cmd          LIKE type_file.chr1,          #No.FUN-680135 VARCHAR(1)
         l_sql          STRING,
         l_cmd          STRING,
         l_result       STRING,
         l_row_count    LIKE type_file.num5           #No.FUN-680135 SMALLINT
 
 
    IF cl_null(g_zta.zta01) THEN
       CALL cl_err("",-400,0)
       RETURN
    END IF

    IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-9C0036

    IF NOT cl_confirm('zta-025') THEN
       RETURN
    END IF
    CASE p_cmd
         WHEN 'S'
              ###### 去除無系統別的table ########
              IF cl_null(g_zta.zta03) THEN         #No.FUN-A60050
                 EXIT CASE
              END IF
              CALL p_zta_gsql_file(g_zta.zta01,g_zta.zta02) RETURNING l_result
              ###### int_flag拿來for個人使用 #######
              IF INT_FLAG=1 THEN
                 CALL cl_err(l_result,"zta-026",1)
                 LET INT_FLAG=0
              END IF
         WHEN 'B'
              LET l_zta.*=g_zta.*
              #IF g_db_type="IFX" THEN
              CASE g_db_type                                  #FUN-730016
               WHEN "IFX"                                     #FUN-730016
                 LET l_sql="SELECT zta_file.* FROM zta_file LEFT OUTER JOIN gat_file ",
                           "    ON zta_file.zta01=gat_file.gat01",
                           "   AND gat_file.gat02='",g_lang CLIPPED,"'",        #FUN-9C0036
                           " WHERE ",g_wc CLIPPED,
                           " ORDER BY zta01,zta02"
               WHEN "ORA"                                     #FUN-730016
                 #FUN-9A0064 -- start --
                 LET l_sql="SELECT zta_file.* FROM zta_file LEFT OUTER JOIN gat_file ",
                           "    ON zta_file.zta01=gat_file.gat01",
                           "   AND gat_file.gat02='",g_lang CLIPPED,"'",        #FUN-9C0036
                           " WHERE ",g_wc CLIPPED,
                           " ORDER BY zta01,zta02"
                 #FUN-9A0064 -- end --
               WHEN "MSV"                                     #FUN-730016
               #No.FUN-A60022---start
                 LET l_sql="SELECT zta_file.* FROM zta_file LEFT OUTER JOIN gat_file ",
                           "    ON zta_file.zta01=gat_file.gat01",
                           "   AND gat_file.gat02='0'",
                           " WHERE ",g_wc CLIPPED,
                           " ORDER BY zta01,zta02"  
               #No.FUN-A60022---end
              END CASE                                        #FUN-730016
              DECLARE p_zta_gsql_cs SCROLL CURSOR WITH HOLD FROM l_sql   # SCROLL CURSOR
              #IF g_db_type="IFX" THEN
              CASE g_db_type                                  #FUN-730016
               WHEN "IFX"                                     #FUN-730016
                 LET l_sql="SELECT COUNT(*) FROM zta_file LEFT OUTER JOIN gat_file ",
                           "    ON zta_file.zta01=gat_file.gat01",
                           "   AND gat_file.gat02='",g_lang CLIPPED,"'",       #FUN-9C0036
                           " WHERE ",g_wc CLIPPED
               WHEN "ORA"                                     #FUN-730016
                 #FUN-9A0064 -- start --
                 LET l_sql="SELECT COUNT(*) FROM zta_file LEFT OUTER JOIN gat_file ",
                           "    ON zta_file.zta01=gat_file.gat01",
                           "   AND gat_file.gat02='",g_lang CLIPPED,"'",       #FUN-9C0036
                           " WHERE ",g_wc CLIPPED
                 #FUN-9A0064 -- end --
               WHEN "MSV"                                     #FUN-730016
               #No.FUN-A60022---start
                 LET l_sql="SELECT COUNT(*) FROM zta_file LEFT OUTER JOIN gat_file ",
                           "    ON zta_file.zta01=gat_file.gat01",
                           "   AND gat_file.gat02='0'",
                           " WHERE ",g_wc CLIPPED
               #No.FUN-A60022---end
              END CASE                                        #FUN-730016
              DECLARE p_zta_gsql_count CURSOR FROM l_sql
              OPEN p_zta_gsql_count
              FETCH p_zta_gsql_count INTO l_row_count
              FREE p_zta_count
 
              OPEN p_zta_gsql_cs
              IF sqlca.sqlcode THEN
                 LET g_err="open zta_gsql scroll cursor error(gsql):",g_zta.zta01
                 CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
                 LET g_zta.*=l_zta.*
              ELSE
                 CALL cl_progress_bar(l_row_count)
 
                 #確保及清空error file
                 LET l_cmd="chmod 777 $TEMPDIR/p_zta_gsql_file.",g_pid CLIPPED," >/dev/null 2>&1"
                 RUN l_cmd
                 LET l_cmd='echo "">$TEMPDIR/p_zta_gsql_file.',g_pid CLIPPED
                 RUN l_cmd
 
                 FOR l_i=1 TO l_row_count
                     CASE l_i
                        WHEN 1
                           FETCH FIRST p_zta_gsql_cs INTO g_zta.*
                        WHEN l_row_count
                           FETCH LAST p_zta_gsql_cs INTO g_zta.*
                        OTHERWISE
                           FETCH NEXT p_zta_gsql_cs INTO g_zta.*
                     END CASE
                     CALL cl_progressing("Import : " || g_zta.zta01 )
                     CALL p_zta_bshow()
                     CALL p_zta_gsql_file(g_zta.zta01,g_zta.zta02) RETURNING l_result
                     ###### int_flag拿來for個人使用 #######
                     IF l_result is not null THEN
                        LET l_cmd=cl_getmsg('zta-026',g_lang)
                        LET l_cmd='echo "',l_result CLIPPED,l_cmd,'">>$TEMPDIR/p_zta_gsql_file.',g_pid CLIPPED
                        RUN l_cmd
#                        CALL cl_err(l_str,"zta-026",1)
#                        LET INT_FLAG=0
#                        CLOSE WINDOW w_progbar
#                        EXIT FOR
                     END IF
                 END FOR
                 IF INT_FLAG=1 THEN
                    LET INT_FLAG=0
                   #LET l_cmd="$FGLRUN $TOP/azz/42r/p_view.42r $TEMPDIR/p_zta_gsql_file.",g_pid CLIPPED," 66"        #FUN-B30176  mark
                    LET l_cmd=FGL_GETENV("FGLRUN")," ",FGL_GETENV("TOP"),os.Path.separator(),"azz",os.Path.separator(),  #FUN-B30176  #TQC-B70185 add " "
                              os.Path.separator(),"42r",os.Path.separator(),"p_view.42r ",FGL_GETENV("TEMPDIR"),     #FUN-B30176
                              os.Path.separator(),"p_zta_gsql_file.",g_pid CLIPPED," 66"                             #FUN-B30176
                    RUN l_cmd
                 END IF
              END IF
              FREE p_zta_gsql_cs
              CALL p_zta_fetch('C')
#              LET g_zta.*=l_zta.*
    END CASE
 
END FUNCTION
 
 
FUNCTION p_zta_gsql_file(p_zta01,p_zta02)
  DEFINE p_zta01          LIKE zta_file.zta01,
         p_zta02          LIKE zta_file.zta02,
         l_zta            RECORD LIKE zta_file.*,
         l_cnt            LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_n              LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_ln             LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_i              LIKE type_file.num5,          #檢查重複用    #No.FUN-680135 SMALLINT
         l_zs06           LIKE zs_file.zs06,
         l_cmd            STRING,
         l_str            STRING,
         l_sql            STRING,
         l_top            STRING,
         l_gat03          LIKE gat_file.gat03,
         l_gat04          LIKE gat_file.gat04,
         l_gat06          LIKE gat_file.gat06,
         l_gat07          LIKE gat_file.gat07,
         l_gaq05          LIKE gaq_file.gaq05,
         l_gensql_channel base.channel,
         l_tok            base.StringTokenizer
  DEFINE l_ztb11          STRING                        #No.TQC-860023
  DEFINE l_ztc03_str      STRING                        #No:FUN-A50004

#  BEGIN WORK
 
  LET g_sql="SELECT zta_file.*,gat03,gat04,gat06,gat07 ",
            "  FROM zta_file LEFT OUTER JOIN gat_file ",
            "    ON zta01=gat01 AND gat02='",g_lang CLIPPED,"'",
            " WHERE zta01='",p_zta01 CLIPPED,"'",
            "   AND zta02='",p_zta02 CLIPPED,"'"
  DECLARE p_zta_tmp CURSOR FROM g_sql
  OPEN p_zta_tmp
  FETCH p_zta_tmp INTO l_zta.*,l_gat03,l_gat04,l_gat06,l_gat07
  FREE p_zta_tmp
 
  IF l_zta.zta03 IS NULL THEN  #No.FUN-A60050
     RETURN ""
  END IF
 
  IF g_zta.zta07 != "T" THEN          #FUN-9C0036
     RETURN ""
  ELSE
     FOR l_i=1 TO 6
        IF l_zta.zta01[l_i,l_i] = '_' THEN
           EXIT FOR
        END IF
     END FOR
     LET l_top = UPSHIFT(l_zta.zta03)     #No.FUN-A60050
     LET l_top = fgl_getenv(l_top)

     #No.FUN-A60022 -- start --
     LET l_str = p_zta_set_db_type("sch")  #FUN-A80029

     LET l_str = l_top CLIPPED,"/",l_str,"/",
                 l_zta.zta01 CLIPPED,".sch"
#                 l_zta.zta01[1,l_i-1],".sql"
     #No.FUN-A60022 -- end --

     LET l_gensql_channel=base.channel.create()
     CALL l_gensql_channel.setdelimiter("")
     CALL l_gensql_channel.openfile(l_str CLIPPED, "w" )
     IF STATUS THEN
        LET INT_FLAG=1
        CALL l_gensql_channel.close()
        RETURN l_str
     ELSE
        #FUN-730016
        #IF g_db_type="IFX" THEN
        CASE g_db_type
         WHEN "IFX" 
           CALL l_gensql_channel.write("{")
         WHEN "ORA" 
           CALL l_gensql_channel.write("/*")
         WHEN "MSV" 
           CALL l_gensql_channel.write("/*")#No.FUN-A60022
        END CASE
        #END FUN-730016
        CALL l_gensql_channel.write("================================================================================")
        LET l_str = "檔案代號:",p_zta01 CLIPPED
        CALL l_gensql_channel.write(l_str)
        LET l_str = "檔案名稱:",l_gat03 CLIPPED
        CALL l_gensql_channel.write(l_str)
        LET l_str = "檔案目的:",l_gat04 CLIPPED
        CALL l_gensql_channel.write(l_str)
#       LET l_str = "檔案來源:",l_zta.zta13 CLIPPED
#       CALL l_gensql_channel.write(l_str)
        LET l_str = "上游檔案:",l_zta.zta11 CLIPPED
        CALL l_gensql_channel.write(l_str)
        LET l_str = "下游檔案:",l_zta.zta12 CLIPPED
        CALL l_gensql_channel.write(l_str)
        LET l_str = "檔案類型:",l_zta.zta09 CLIPPED       #No.FUN-990043  #No.FUN-A60050
        CALL l_gensql_channel.write(l_str)                #No.FUN-990043 
        LET l_str = "多語系檔案:",l_zta.zta18 CLIPPED     #No.FUN-A60050
        CALL l_gensql_channel.write(l_str)                #No.FUN-A60050
#       LET l_str = "注意事項:",l_zta.zta16 CLIPPED
#       CALL l_gensql_channel.write(l_str)
        CALL l_gensql_channel.write("============.========================.==========================================")
        #FUN-730016
        #IF g_db_type="IFX" THEN
        CASE g_db_type
         WHEN "IFX" 
           CALL l_gensql_channel.write("}")
         WHEN "ORA" 
           CALL l_gensql_channel.write("*/")
         WHEN "MSV" 
           CALL l_gensql_channel.write("*/")#No.FUN-A60022
        END CASE
        #END FUN-730016
        LET l_str = "create table ",l_zta.zta01 CLIPPED
        CALL l_gensql_channel.write(l_str)
        CALL l_gensql_channel.write("(")
        LET l_i=0
#        FOREACH ztb_gsql_file INTO l_ztb03,l_ztb04,l_ztb06,l_ztb07,l_ztb08,l_ztb09,l_gaq03
#           IF sqlca.sqlcode THEN
#              LET g_err="foreach ztb_gsql_file error(gsql_file):"
#              CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
#              EXIT FOREACH
#           END IF
 
 
        FOR l_cnt=1 TO g_rec_b
           #No.TQC-860023 -- start --
           IF g_ztb[l_cnt].ztb11 = "' '" THEN    #若預設值為' '(單一空白時)
              LET l_ztb11 = ' '
           ELSE
              LET l_ztb11 = g_ztb[l_cnt].ztb11 CLIPPED
           END IF 
           #No.TQC-860023 -- end --
 

           LET l_i=l_i+1
           IF l_i != l_n THEN
              IF l_cnt=g_rec_b THEN
                 #IF g_db_type="IFX" THEN
                 CASE g_db_type                                #FUN-730016
                  WHEN "IFX"                                   #FUN-730016
                    IF g_ztb[l_cnt].ztb04='datetime' THEN
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED,
                                       " TO ",g_ztb[l_cnt].ztb07 CLIPPED," NOT NULL"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED,
                                       " TO ",g_ztb[l_cnt].ztb07 CLIPPED," DEFAULT '", l_ztb11 ,"' NOT NULL"  #No.TQC-860023  #FUN-A60022
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED,
                                       " TO ",g_ztb[l_cnt].ztb07 CLIPPED
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED,
                                       " TO ",g_ztb[l_cnt].ztb07 CLIPPED," DEFAULT '",l_ztb11 ,"'"   #No.TQC-860023
                          END IF
                       END IF
                    ELSE
                       IF g_ztb[l_cnt].ztb04='char' OR g_ztb[l_cnt].ztb04='decimal' THEN
                          IF g_ztb[l_cnt].ztb09='Y' THEN
                             IF g_ztb[l_cnt].ztb11 IS NULL OR
                                (g_ztb[l_cnt].ztb04 = "decimal" AND cl_null(g_ztb[l_cnt].ztb11))  #No.MOD-840661
                             THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") NOT NULL"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"' NOT NULL"  #No.TQC-860023
                             END IF
                          ELSE
                             IF g_ztb[l_cnt].ztb11 IS NULL OR
                                (g_ztb[l_cnt].ztb04 = "decimal" AND cl_null(g_ztb[l_cnt].ztb11))  #No.MOD-840661
                             THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,")"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"'"  #No.TQC-860023
                             END IF
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb09='Y' THEN
                             IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL"
                             ELSE
                                #TQC-810014
                                IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                   g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint'    #No.MOD-840661
                                THEN
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11," NOT NULL"   #No.TQC-860023
                                ELSE
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"' NOT NULL" #No.TQC-860023
                                END IF
                                #END TQC-810014
                             END IF
                          ELSE
                             IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED
                             ELSE
                                #TQC-810014
                                IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                   g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint'    #No.MOD-840661
                                THEN
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11            #No.TQC-860023
                                ELSE
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11 ,"'"      #No.TQC-860023
                                END IF
                                #END TQC-810014
                             END IF
                          END IF
                       END IF
                    END IF
 
                  WHEN "ORA"                                   #FUN-730016
                    IF g_ztb[l_cnt].ztb04='varchar2' OR
                       g_ztb[l_cnt].ztb04='char' OR
                       g_ztb[l_cnt].ztb04='number' THEN
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR
                             (g_ztb[l_cnt].ztb04 = "number" AND cl_null(g_ztb[l_cnt].ztb11))     #No.MOD-840661
                          THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") NOT NULL"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"' NOT NULL"   #No.TQC-860023
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR
                             (g_ztb[l_cnt].ztb04 = "number" AND cl_null(g_ztb[l_cnt].ztb11))     #No.MOD-840661
                          THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,")"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"'"            #No.TQC-860023
                          END IF
                       END IF
                    ELSE
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL"
                          ELSE
                             #TQC-810014
                             IF g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'sysdate' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11," NOT NULL"       #No.TQC-860023
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"' NOT NULL"     #No.TQC-860023
                             END IF
                             #END TQC-810014
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED
                          ELSE
                             #TQC-810014
                             IF g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'sysdate' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11                   #No.TQC-860023
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"'"              #No.TQC-860023
                             END IF
                             #END TQC-810014
                          END IF
                       END IF
                    END IF
 
                  WHEN "MSV"                                   #FUN-730016
                    #FUN-A60022 -- start --
                    IF g_ztb[l_cnt].ztb04 = "char"    OR g_ztb[l_cnt].ztb04 = "varchar" OR 
                       g_ztb[l_cnt].ztb04 = "decimal" OR g_ztb[l_cnt].ztb04 = "nvarchar" 
                    THEN
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") NOT NULL"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"' NOT NULL"
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,")"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"'"
                          END IF
                       END IF
                    END IF 
                    IF g_ztb[l_cnt].ztb04 = "integer" OR g_ztb[l_cnt].ztb04 = "sysname" OR 
                       g_ztb[l_cnt].ztb04 = "smallint" OR g_ztb[l_cnt].ztb04 = "text" OR 
                       g_ztb[l_cnt].ztb04 = "image" 
                    THEN
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL"
                          ELSE
                             IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint'    #No.MOD-840661
                                THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11," NOT NULL"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"' NOT NULL"
                             END IF
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED
                          ELSE
                             IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint'    #No.MOD-840661
                             THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"'"
                             END IF
                          END IF
                       END IF
                    END IF 
                    IF g_ztb[l_cnt].ztb04 = "datetime"  THEN   
                       IF g_ztb[l_cnt].ztb09='Y' THEN  #欄位不可為空
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN  #無預設值
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL"
                          ELSE         #有預設值
                             IF g_ztb[l_cnt].ztb11='getdate()' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT ",l_ztb11," NOT NULL"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT '",l_ztb11,"' NOT NULL"
                             END IF
                          END IF
                       ELSE      #欄位可為空
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN    #無預設值
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED
                          ELSE     #有預設值
                             IF g_ztb[l_cnt].ztb11='getdate()' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT ",l_ztb11
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED, " DEFAULT '",l_ztb11
                             END IF
                          END IF
                       END IF 
                    END IF
                #No.FUN-A60022---end
                 END CASE                                      #FUN-730016
              ELSE
                 #IF g_db_type="IFX" THEN
                 CASE g_db_type                                #FUN-730016 
                  WHEN "IFX"                                   #FUN-730016
                    IF g_ztb[l_cnt].ztb04='datetime' THEN
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED," TO ",
                                         g_ztb[l_cnt].ztb07 CLIPPED," NOT NULL,"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED," TO ",
                                         g_ztb[l_cnt].ztb07 CLIPPED," DEFAULT '",l_ztb11,"' NOT NULL,"        #No.TQC-860023
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED," TO ",
                                         g_ztb[l_cnt].ztb07 CLIPPED," ,"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," ",g_ztb[l_cnt].ztb06 CLIPPED," TO ",
                                         g_ztb[l_cnt].ztb07 CLIPPED," DEFAULT '",l_ztb11,"',"                 #No.TQC-860023
                          END IF
                       END IF
                    ELSE
                       IF g_ztb[l_cnt].ztb04='char' OR g_ztb[l_cnt].ztb04='decimal' THEN
                          IF g_ztb[l_cnt].ztb09='Y' THEN
                             IF g_ztb[l_cnt].ztb11 IS NULL OR
                                (g_ztb[l_cnt].ztb04 = "decimal" AND cl_null(g_ztb[l_cnt].ztb11))  #No.MOD-840661
                             THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") NOT NULL,"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"' NOT NULL,"   #No.TQC-860023
                             END IF
                          ELSE
                             IF g_ztb[l_cnt].ztb11 IS NULL OR
                                (g_ztb[l_cnt].ztb04 = "decimal" AND cl_null(g_ztb[l_cnt].ztb11))  #No.MOD-840661
                             THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,"),"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"',"            #No.TQC-860023
                             END IF
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb09='Y' THEN
                             IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL,"
                             ELSE
                                #TQC-810014
                                IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                   g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint'    #No.MOD-840661
                                THEN
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11," NOT NULL,"     #No.TQC-860023
                                ELSE
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"' NOT NULL,"   #No.TQC-860023
                                END IF
                                #END TQC-810014
                             END IF
                          ELSE
                             IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,","
                             ELSE
                                #TQC-810014
                                IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                   g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint'    #No.MOD-840661
                                THEN
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11,","        #No.TQC-860023
                                ELSE
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"',"      #No.TQC-860023
                                END IF
                                #END TQC-810014
                             END IF
                          END IF
                       END IF
                    END IF
 
                  WHEN "ORA"                                   #FUN-730016
                    IF g_ztb[l_cnt].ztb04='varchar2' OR
                       g_ztb[l_cnt].ztb04='char' OR
                       g_ztb[l_cnt].ztb04='number' THEN
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR
                             (g_ztb[l_cnt].ztb04 = "number" AND cl_null(g_ztb[l_cnt].ztb11))     #No.MOD-840661
                          THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") NOT NULL,"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"' NOT NULL,"    #No.TQC-860023
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR
                             (g_ztb[l_cnt].ztb04 = "number" AND cl_null(g_ztb[l_cnt].ztb11))     #No.MOD-840661
                          THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,"),"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"',"            #No.TQC-860023
                          END IF
                       END IF
                    ELSE
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL,"
                          ELSE
                             #TQC-810014
                             IF g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'sysdate' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11," NOT NULL,"    #No.TQC-860023
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"' NOT NULL,"  #No.TQC-860023
                             END IF
                             #END TQC-810014
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   ##No.MOD-840661
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,","
                          ELSE
                             #TQC-810014
                             IF g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'sysdate' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT ",l_ztb11,","            #No.TQC-860023
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," DEFAULT '",l_ztb11,"',"          #No.TQC-860023
                             END IF
                             #END TQC-810014
                          END IF
                       END IF
                    END IF
 
                  WHEN "MSV"                                   #FUN-730016
                  #No.FUN-A60022---start
                    IF g_ztb[l_cnt].ztb04 = "char" OR g_ztb[l_cnt].ztb04 = "varchar" OR g_ztb[l_cnt].ztb04 = "decimal" 
                       OR g_ztb[l_cnt].ztb04 = "nvarchar" THEN 
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") NOT NULL,"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"' NOT NULL,"
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL THEN
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,"),"
                          ELSE
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,"(",g_ztb[l_cnt].ztb08 CLIPPED,") DEFAULT '",l_ztb11,"',"
                          END IF
                       END IF
                    END IF 
                    IF g_ztb[l_cnt].ztb04 = "integer" OR g_ztb[l_cnt].ztb04 = "sysname" 
                    OR g_ztb[l_cnt].ztb04 = "smallint" OR g_ztb[l_cnt].ztb04 = "text" OR g_ztb[l_cnt].ztb04 = "image" THEN
                       IF g_ztb[l_cnt].ztb09='Y' THEN
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL,"
                          ELSE
                             IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                 g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint' THEN
                                   LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT ",l_ztb11," NOT NULL,"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT '",l_ztb11,"' NOT NULL,"
                             END IF
                          END IF
                       ELSE
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN   
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,","
                          ELSE
                             IF (g_ztb[l_cnt].ztb04='date' AND g_ztb[l_cnt].ztb11 = 'today') OR
                                g_ztb[l_cnt].ztb04 = 'integer' OR g_ztb[l_cnt].ztb04 = 'smallint' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT ",l_ztb11,","
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT '",l_ztb11,"',"
                             END IF
                          END IF
                       END IF
                    END IF
                    IF g_ztb[l_cnt].ztb04 = "datetime"  THEN   
                       IF g_ztb[l_cnt].ztb09='Y' THEN  #欄位不可為空
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN  #無預設值
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED," NOT NULL,"
                          ELSE         #有預設值
                             IF g_ztb[l_cnt].ztb11='getdate()' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT ",l_ztb11," NOT NULL,"
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT '",l_ztb11,"' NOT NULL,"
                             END IF
                          END IF
                       ELSE      #欄位可為空
                          IF g_ztb[l_cnt].ztb11 IS NULL OR cl_null(g_ztb[l_cnt].ztb11)  THEN    #無預設值
                             LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED,","
                          ELSE     #有預設值
                             IF g_ztb[l_cnt].ztb11='getdate()' THEN
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT ",l_ztb11,","
                             ELSE
                                LET l_zs06=g_ztb[l_cnt].ztb04 CLIPPED ," DEFAULT '",l_ztb11,"'"
                             END IF
                          END IF
                       END IF 
                    END IF 
                  #No.FUN-A60022---end 
                 END CASE                                      #FUN-730016
              END IF
           END IF
           #IF g_db_type="IFX" THEN
           CASE g_db_type                                      #FUN-730016
            WHEN "IFX"                                         #FUN-730016 
              IF cl_null(g_ztb[l_cnt].gaq03) THEN
                 LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED
              ELSE
                 IF LENGTH(l_zs06) > 25 THEN
                    LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED," {",
                               g_ztb[l_cnt].gaq03[1,40],"}"
                 ELSE
                    LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED,COLUMN 38,"{",
                               g_ztb[l_cnt].gaq03[1,40],COLUMN 79,"}"
                 END IF
              END IF
 
            WHEN "ORA"                                         #FUN-730016 
              IF cl_null(g_ztb[l_cnt].gaq03) THEN
                 LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED
              ELSE
                 IF LENGTH(l_zs06) > 25 THEN
                    LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED," /*",
                               g_ztb[l_cnt].gaq03[1,40],"*/"
                 ELSE
                    LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED,COLUMN 38,"/*",
                               g_ztb[l_cnt].gaq03[1,40],COLUMN 79,"*/"
                 END IF
              END IF
 
            WHEN "MSV"                                         #FUN-730016 
            #No.FUN-A60022---start
              IF cl_null(g_ztb[l_cnt].gaq03) THEN
                 LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED
              ELSE
                 IF LENGTH(l_zs06) > 25 THEN
                    LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED," /*",
                               g_ztb[l_cnt].gaq03[1,40],"*/"
                 ELSE
                    LET l_str =g_ztb[l_cnt].ztb03 CLIPPED,' ',COLUMN 13,l_zs06 CLIPPED,COLUMN 38,"/*",
                               g_ztb[l_cnt].gaq03[1,40],COLUMN 79,"*/"
                 END IF
              END IF
            #No.FUN-A60022---end 
           END CASE                                            #FUN-730016
 
           CALL l_gensql_channel.write(l_str)
           LET l_sql="SELECT gaq05 FROM gaq_file",
                     " WHERE gaq01='",g_ztb[l_cnt].ztb03 CLIPPED,"'",
                     "   AND gaq02='",g_lang CLIPPED,"'"
           PREPARE p_zta_gsql_file_pre1 FROM l_sql
           EXECUTE p_zta_gsql_file_pre1 INTO l_gaq05
           FREE p_zta_gsql_file_pre1
           IF l_gaq05 != g_ztb[l_cnt].gaq03 THEN
              LET l_tok = base.StringTokenizer.createExt(l_gaq05 CLIPPED,"\n","",TRUE)
              LET l_ln=LENGTH(l_gaq05)
              WHILE l_tok.hasMoreTokens()
                    LET l_str = l_tok.nextToken()
                    IF l_str!=g_ztb[l_cnt].gaq03 THEN
                       #FUN-730016 
                       #IF g_db_type="IFX" THEN
                       CASE g_db_type
                        WHEN "IFX" 
                          LET l_str=COLUMN 38,"{",l_str,COLUMN 79,"}"
                        WHEN "ORA" 
                          LET l_str=COLUMN 38,"/*",l_str,COLUMN 79,"*/"
                        WHEN "MSV"
                          LET l_str=COLUMN 38,"/*",l_str,COLUMN 79,"*/" #No.FUN-A60022 
                       END CASE
                       #END FUN-730016
                       CALL l_gensql_channel.write(l_str)
                    END IF
              END WHILE
           END IF
        END FOR
        CALL l_gensql_channel.write(");")
        CALL l_gensql_channel.write("")
        LET l_i=0
        FOR l_cnt=1 TO g_rec_d
           LET l_i=l_i+1
           #----------FUN-A50004 modify start----------------------
           LET l_ztc03_str = g_ztc[l_cnt].ztc03
           IF (l_ztc03_str.getIndexOf('_pk', 1) < 1) THEN
           #----------FUN-A50004 modify end------------------------
              IF g_ztc[l_cnt].ztc06="Y" THEN
                 LET l_str ="create unique index ",g_ztc[l_cnt].ztc03 CLIPPED," on ",
                            l_zta.zta01 CLIPPED," (",g_ztc[l_cnt].ztc04 CLIPPED,");"
              ELSE
                 LET l_str ="create        index ",g_ztc[l_cnt].ztc03 CLIPPED," on ",
                            l_zta.zta01 CLIPPED," (",g_ztc[l_cnt].ztc04 CLIPPED,");"
              END IF
              CALL l_gensql_channel.write(l_str)
           END IF   #FUN-A50004
        END FOR
 
        #FUN-730016
        FOR l_cnt = 1 TO g_rec_c
           LET l_str = p_zta_ztd_setsql(g_ztd[l_cnt].*)
           CALL l_gensql_channel.write(l_str)
        END FOR
 
      #No.FUN-A60022---start
        #IF g_db_type="IFX" THEN
        CASE g_db_type
         WHEN "IFX" 
           LET l_str="alter table ",g_zta.zta01 CLIPPED," modify lock mode(row);"
           CALL l_gensql_channel.write(l_str)
         WHEN "ORA" 
         WHEN "MSV" 
        END CASE
 
        LET l_str="grant select on ", g_zta.zta01 CLIPPED ," to tiptopgp;" #No.FUN-9B0011
        CALL l_gensql_channel.write(l_str)
        LET l_str="grant update on ", g_zta.zta01 CLIPPED ," to tiptopgp;" #No.FUN-9B0011
        CALL l_gensql_channel.write(l_str)
        LET l_str="grant delete on ", g_zta.zta01 CLIPPED ," to tiptopgp;" #No.FUN-9B0011
        CALL l_gensql_channel.write(l_str)
        LET l_str="grant insert on ", g_zta.zta01 CLIPPED ," to tiptopgp;" #No.FUN-9B0011
        CALL l_gensql_channel.write(l_str)
        
        IF g_db_type  = "MSV" THEN
           LET l_str="grant references on ", g_zta.zta01 CLIPPED , " to public;" #FUN-B50010
           CALL l_gensql_channel.write(l_str)
          #LET l_str="grant references on ", g_zta.zta01 CLIPPED , " to ods;"    #FUN-B50010
          #CALL l_gensql_channel.write(l_str)                                    #FUN-B50010
        ELSE
           LET l_str="grant index on ", g_zta.zta01 CLIPPED ," to public;"  #No.FUN-9B0011 #FUN-B50010
           CALL l_gensql_channel.write(l_str)
          #LET l_str="grant index on ", g_zta.zta01 CLIPPED ," to ods;" #No.FUN-9C0036     #FUN-B50010
          #CALL l_gensql_channel.write(l_str)                                              #FUN-B50010
        END IF
        LET l_str="grant select on ", g_zta.zta01 CLIPPED ," to ods;" #No.FUN-9C0036
        CALL l_gensql_channel.write(l_str)
        
        #END FUN-730016
      #No.FUN-A60022---end   

        CALL l_gensql_channel.close()
        RETURN ""
     END IF
  END IF
END FUNCTION
 
FUNCTION p_zta_imp_create_sqlfile()
  DEFINE l_sql         STRING,
         l_file        STRING,
         l_tabname     LIKE type_file.chr20,    #No.FUN-680135 VARCHAR(20)
         l_body   DYNAMIC ARRAY of RECORD
                       feldname STRING,
                       datatype STRING,
                       desc     STRING,
                       other    STRING
                  END RECORD,
         l_body_cnt    LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_other       LIKE gaq_file.gaq05,     #No.FUN-680135 VARCHAR(1000)
         l_desc        LIKE gaq_file.gaq03,     #No.FUN-680135 VARCHAR(500)
         l_feldname    LIKE gaq_file.gaq01,     #No.FUN-680135 VARCHAR(20)
         l_zta11       LIKE zta_file.zta11,     #上游檔案 #No.FUN-680135 VARCHAR(60)
         l_zta12       LIKE zta_file.zta12,     #下游檔案 #No.FUN-680135 VARCHAR(60)
         l_gat03       LIKE gat_file.gat03,     #檔案名稱 
         l_gat04       LIKE gat_file.gat04,     #檔案目的 
         l_command     STRING,
         l_command_lst DYNAMIC ARRAY OF STRING,
         l_cmd_start   LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_i           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_j           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_x           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_y           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_channel     BASE.CHANNEL,
         l_length      LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_zs03        LIKE zs_file.zs03,
         l_zs06        LIKE zs_file.zs06,
         l_str         STRING,
         l_module      LIKE gat_file.gat06,
         l_gat06       LIKE gat_file.gat06,
         l_sel         LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_success     LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_start       LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_step        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_other_flag  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_jump        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_result      STRING,
         l_strbuf      base.StringBuffer,       #TQC-640008
         l_result2     LIKE type_file.num10     #FUN-A60022
 
   #start FUN-6A0052 add
   #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
    IF cl_null(g_MODNO) THEN
       PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
          ON IDLE g_idle_seconds
             CALL cl_on_idle()
       END PROMPT
#TQC-860017 end  
       display g_MODNO
    END IF
   #end FUN-6A0052 add
 
    OPEN WINDOW p_zta_sel_w AT 5,20
      WITH FORM "azz/42f/p_zta_sel" ATTRIBUTE(STYLE=g_win_style)
    LET l_str="1.匯入檔案&欄位說明,2.建立表格與匯入檔案&欄位說明,3.建立表格"
    CALL cl_set_combo_items("module",l_str,l_str)

   #CALL cl_ui_init()
    CALL cl_ui_locale("p_zta_sel")   #FUN-9C0036

    INPUT l_sel FROM module
        BEFORE INPUT
          CALL cl_getmsg('zta-003',g_lang) RETURNING g_msg
          CALL cl_set_comp_att_text('module',g_msg)
          AFTER FIELD module
                IF l_sel is null THEN
                   NEXT FIELD module
                END IF
 #TQC-860017 start
 
        ON ACTION about
           CALL cl_about()
 
        ON ACTION controlg
           CALL cl_cmdask()
 
        ON ACTION help
           CALL cl_show_help()
 
        ON IDLE g_idle_seconds
           CALL cl_on_idle()
           CONTINUE INPUT
#TQC-860017 end  
    END INPUT
    CLOSE WINDOW p_zta_sel_w
    IF INT_FLAG THEN
       LET INT_FLAG=0
       RETURN
    END IF
 
    IF l_sel MATCHES "[23]" THEN
       OPEN WINDOW p_zta_sel_w AT 5,20
         WITH FORM "azz/42f/p_zta_sel" ATTRIBUTE(STYLE=g_win_style)

       #No.FUN-A60050 -- start --
       #LET l_str=''
       ##-----指定combo module的值-------------#
       #DECLARE p_module_cur CURSOR FOR SELECT gao01 FROM gao_file ORDER BY gao01
       #FOREACH p_module_cur INTO l_gat06
       #   IF cl_null(l_str) THEN
       #      LET l_str=l_gat06 CLIPPED
       #   ELSE
       #      LET l_str=l_str CLIPPED,",",l_gat06 CLIPPED
       #   END IF
       #END FOREACH
#      # LET l_str=l_str.toLowerCase()
       #CALL cl_set_combo_items("module",l_str,l_str)

       CALL cl_set_combo_items("module",g_zta03_str,g_zta03_str)
       #No.FUN-A60050 -- end --

      #CALL cl_ui_init()
       CALL cl_ui_locale("p_zta_sel")   #FUN-9C0036
       #-------------------------------------#
       INPUT l_module FROM module
             AFTER FIELD module
                   IF l_module is null THEN
                      NEXT FIELD module
                   END IF
#TQC-860017 start
 
          ON ACTION about
             CALL cl_about()
 
          ON ACTION controlg
             CALL cl_cmdask()
 
          ON ACTION help
             CALL cl_show_help()
 
          ON IDLE g_idle_seconds
             CALL cl_on_idle()
             CONTINUE INPUT
#TQC-860017 end      
       END INPUT
       CLOSE WINDOW p_zta_sel_w
       IF INT_FLAG THEN
          LET INT_FLAG=0
          RETURN
       END IF
    END IF
 
   #LET l_command="ls $TEMPDIR/zta_impfile_loc"           #FUN-6A0052 mark
    LET l_command="ls /u3/top/zta/FUN/zta_impfile_loc"   #FUN-6A0052
    RUN l_command RETURNING l_result
    IF l_result !=0 THEN
       IF l_module is null THEN
          LET l_file=cl_server_file(g_dir.top)
       ELSE
          LET l_file=cl_server_file(g_dir.top||'/'||l_module)
       END IF
    ELSE
       LET l_channel=base.channel.create()
      #CALL l_channel.openfile(g_dir.tempdir||'/zta_impfile_loc' , "r" )   #FUN-6A0052 mark
       CALL l_channel.openfile("/u3/top/zta/FUN/zta_impfile_loc" , "r" )  #FUN-6A0052
       IF STATUS THEN
          CALL l_channel.close()
          IF l_module is null THEN
             LET l_file=cl_server_file(g_dir.top)
          ELSE
             LET l_file=cl_server_file(g_dir.top||'/'||l_module)
          END IF
       ELSE
          LET l_command=''
          WHILE l_channel.read(l_command)
          END WHILE
          CALL l_channel.close()
          IF l_command.getLength()=0 THEN
             IF l_module is null THEN
                LET l_file=cl_server_file(g_dir.top)
             ELSE
                LET l_file=cl_server_file(g_dir.top||'/'||l_module)
             END IF
          ELSE
             LET l_file=cl_server_file(l_command)
          END IF
       END IF
    END IF
    LET l_length=l_file.getLength()
#let l_file="/u3/genero/topo/azz/sql/c_qaz.sql"
#let l_length=1
    IF l_length > 0 THEN
       LET l_channel=base.channel.create()
       CALL l_channel.openfile( l_file, "r" )
       IF STATUS THEN
          CALL cl_err("","zta-027",1)
          CALL l_channel.close()
          RETURN
       END IF
 
#      LET l_sql = g_dir.tempdir CLIPPED,"/","zta_alter_err"
#      LET l_error_list=base.channel.create()
#      CALL l_error_list.setdelimiter("")
#      CALL l_error_list.openfile(l_sql CLIPPED, "w" )
#      CALL l_error_list.write("     err_no  db_name       command")
 
       LET l_start='N'
       LET l_x=1
       LET l_str=''
       LET l_success='Y'
       
       WHILE l_channel.read(l_command)
#TQC-640008
          LET l_strbuf=base.StringBuffer.create()
          CALL l_strbuf.append(l_command)
          CALL l_strbuf.replace('　',' ',0)
          CALL l_strbuf.replace('\t',' ',0)
          CALL l_strbuf.replace('	',' ',0)
          LET l_command=l_strbuf.toString()
#END TQC-640008
 
          LET l_command=l_command.toLowerCase()
          LET l_command=l_command.trim()
          LET l_length=LENGTH(l_command)
          IF l_start='Y' THEN
             LET l_str=l_str,l_command
          ELSE
             -- 開始create指令 or not則抓table說明
             IF l_command.getIndexOf('create',1) THEN
                LET l_start='Y'
                LET l_str=l_str,l_command
             ELSE
                CASE
                   WHEN l_command.subString(l_x,l_x+8)="檔案名稱:"
                        LET l_gat03=l_command.subString(l_x+9,l_length)
                   WHEN l_command.subString(l_x,l_x+8)="檔案目的:"
                        LET l_gat04=l_command.subString(l_x+9,l_length)
                   WHEN l_command.subString(l_x,l_x+8)="上游檔案:"
                        LET l_zta11=l_command.subString(l_x+9,l_length)
                   WHEN l_command.subString(l_x,l_x+8)="下游檔案:"
                        LET l_zta12=l_command.subString(l_x+9,l_length)
                END CASE
             END IF
          END IF
       END WHILE
       CALL p_zta_cut_spaces(l_str) RETURNING l_str
       LET l_length=l_str.getLength()
       LET l_i=1
       LET l_cmd_start=1
       -- 此while將指令拆開
       WHILE l_str.getIndexOf(';',l_cmd_start)
           LET l_command_lst[l_i]=l_str.subString(l_cmd_start,l_str.getIndexOf(';',l_cmd_start)-1)
           LET l_i=l_i+1
           LET l_cmd_start=l_str.getIndexOf(';',l_cmd_start)+1
       END WHILE
       FOR l_i=1 TO l_command_lst.getLength()
           CASE
             WHEN l_command_lst[l_i].subString(1,8)="create t"
                  LET l_tabname=l_command_lst[l_i].subString(14,l_command_lst[l_i].getIndexOf('(',14)-1) CLIPPED
                  # l_x和l_y為create table指令裡第一個(和最後一個)的位置
                  # 即l_x和l_y記錄table欄位的內容
                  LET l_x=l_command_lst[l_i].getIndexOf('(',1)
                  FOR l_j=l_command_lst[l_i].getLength() TO 1 STEP -1
                      IF l_command_lst[l_i].subString(l_j,l_j)=')' THEN
                         LET l_y=l_j
                         EXIT FOR
                      END IF
                  END FOR
                  LET l_command=l_command_lst[l_i].subString(l_x+1,l_y-1)
                  LET l_command=l_command.trim()
                  LET l_step=1  #l_step為階段,1表示取feldname,2取datatype,3取desc
                  LET l_jump=0
                  LET l_body_cnt=1
                  LET l_length=l_command.getLength()
                  FOR l_j=1 TO l_length
                      IF l_j<l_jump THEN
                         CONTINUE FOR
                      END IF
                      IF l_command.subString(l_j,l_j)=' ' THEN
                         CONTINUE FOR
                      END IF
                      CASE
                         WHEN l_step=1
                              LET l_jump=l_command.getIndexOf(' ',l_j)
                              LET l_body[l_body_cnt].feldname=l_command.subString(l_j,l_jump-1)
                              LET l_step=2
                         WHEN l_step=2
                              CASE
                                 WHEN l_command.subString(l_j,l_j+1)="da" OR
                                      l_command.subString(l_j,l_j+1)="sm" OR
                                      l_command.subString(l_j,l_j+1)="in"
                                 #     LET l_body[l_body_cnt].datatype="date"
                                      IF l_command.getIndexOf(',',l_j)=0 THEN
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type             #FUN-730016
                                          WHEN "IFX"                #FUN-730016
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('{',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('{',l_j)
                                            END IF
 
                                          WHEN "ORA"                #FUN-730016
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
                                          WHEN "MSV"                #FUN-730016
                                            #No.FUN-A60022---start
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF     
                                            #No.FUN-A60022---end 
                                         END CASE                   #FUN-730016
                                      ELSE
                                         LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type             #FUN-730016
                                          WHEN "IFX"                #FUN-730016
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('{',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                        #       LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                            END IF
 
                                          WHEN "ORA"                #FUN-730016
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                      #         LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                            END IF
 
                                          WHEN "MSV"                #FUN-730016
                                            #No.FUN-A60022---start
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                            END IF
                                            #No.FUN-A60022---end
                                         END CASE                   #FUN-730016
                                      END IF
                                 WHEN l_command.subString(l_j,l_j+1)="va" OR
                                      l_command.subString(l_j,l_j+1)="ch"
                                      IF l_command.getIndexOf(',',l_j)=0 THEN
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type             #FUN-730016
                                          WHEN "IFX"                #FUN-730016
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('{',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('{',l_j)
                                            END IF
 
                                          WHEN "ORA"                #FUN-730016
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
 
                                          WHEN "MSV"                #FUN-730016
                                            #No.FUN-A60022---start
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
                                            #No.FUN-A60022---end
                                         END CASE                   #FUN-730016
                                      ELSE
                                         LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type             #FUN-730016
                                          WHEN "IFX"                #FUN-730016
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('{',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                            END IF
 
                                          WHEN "ORA"                #FUN-730016
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                            END IF
 
                                          WHEN "MSV"                #FUN-730016
                                            #No.FUN-A60022---start
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                            END IF   
                                            #No.FUN-A60022---end
                                         END CASE                   #FUN-730016
                                      END IF
                                 WHEN l_command.subString(l_j,l_j+1)="nu" OR
                                      l_command.subString(l_j,l_j+1)="de"
                                      IF l_command.getIndexOf(',',l_j)=0 THEN
                                         LET l_step="21"  #step2的第一種情況(無逗號的情況)
                                      ELSE
                                         IF l_command.getIndexOf(',',l_j)<l_command.getIndexOf(')',l_j) THEN
                                            LET l_y=l_command.getIndexOf(',',l_command.getIndexOf(')',l_j))
                                            IF l_y=0 THEN
                                               LET l_step="21"
                                            ELSE
                                               LET l_step="22"
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_y-1))
                                            END IF
                                         ELSE
                                            LET l_y=l_command.getIndexOf(',',l_command.getIndexOf(')',l_j))
                                            LET l_step="22"
                                            LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_y-1))
                                         END IF
                                      END IF
                                      IF l_step="21" THEN
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type             #FUN-730016
                                          WHEN "IFX"                #FUN-730016
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('{',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('{',l_j)
                                            END IF
 
                                          WHEN "ORA"                #FUN-730016
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
 
                                          WHEN "MSV"                #FUN-730016
                                            #No.FUN-A60022---start
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
                                            #No.FUN-A60022---end
                                         END CASE                   #FUN-730016
                                      ELSE
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type             #FUN-730016
                                          WHEN "IFX"                #FUN-730016
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_y+1
                                            ELSE
                                               IF (l_command.getIndexOf('{',l_j)-l_y)<5 AND
                                                  (l_command.getIndexOf('{',l_j)-l_y)>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('{',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_y+1
                                               END IF
                                            END IF
 
                                          WHEN "ORA"                #FUN-730016
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_y+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_y)<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_y)>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_y+1
                                               END IF
                                            END IF
 
                                          WHEN "MSV"                #FUN-730016
                                            #No.FUN-A60022---start  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_y+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_y)<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_y)>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_y+1
                                               END IF
                                            END IF   
                                            #No.FUN-A60022---end
                                         END CASE                   #FUN-730016
                                      END IF
                              END CASE
                         WHEN l_step=3
                              IF l_other_flag THEN
                                 IF l_other_flag=1 THEN
                                    #FUN-730016
                                    #IF g_db_type="IFX" THEN
                                    CASE g_db_type             
                                     WHEN "IFX"               
                                       LET l_body[l_body_cnt].other=l_command.subString(l_command.getIndexOf('{',l_j)+1,l_command.getIndexOf('}',l_j)-1)
                                     WHEN "ORA"                
                                       LET l_body[l_body_cnt].other=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                     WHEN "MSV"                
                                       LET l_body[l_body_cnt].other=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1) #No.FUN-A60022             

                                    END CASE                   
                                    #END FUN-730016
                                 ELSE
                                    #FUN-730016
                                    #IF g_db_type="IFX" THEN
                                    CASE g_db_type             
                                     WHEN "IFX"               
                                       LET l_body[l_body_cnt].other=l_body[l_body_cnt].other CLIPPED,ascii(10),l_command.subString(l_command.getIndexOf('{',l_j)+1,l_command.getIndexOf('}',l_j)-1)
                                     WHEN "ORA"               
                                       LET l_body[l_body_cnt].other=l_body[l_body_cnt].other CLIPPED,ascii(10),l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                     WHEN "MSV"               
                                       LET l_body[l_body_cnt].other=l_body[l_body_cnt].other CLIPPED,ascii(10),l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1) #No.FUN-A60022
                                    END CASE
                                    #END FUN-730016
                                 END IF
                                 #IF g_db_type="IFX" THEN
                                 CASE g_db_type             #FUN-730016
                                  WHEN "IFX"                #FUN-730016
                                    LET l_jump=l_command.getIndexOf('}',l_j)+1
                                    IF (l_command.getIndexOf('{',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('{',l_jump)-l_jump)>0 THEN    
                                       LET l_other_flag=l_other_flag+1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "ORA"                #FUN-730016
                                    LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                    IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('/*',l_jump)-l_jump)>0 THEN   
                                       LET l_other_flag=l_other_flag+1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "MSV"                #FUN-730016
                                   #No.FUN-A60022---start 
                                   LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                   IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                      (l_command.getIndexOf('/*',l_jump)-l_jump)>0 THEN   
                                      LET l_other_flag=l_other_flag+1
                                   ELSE
                                      LET l_step=1
                                      LET l_body_cnt=l_body_cnt+1
                                      LET l_other_flag=0
                                   END IF  
                                   #No.FUN-A60022---end
                                 END CASE                   #FUN-730016
                              ELSE
                                 #IF g_db_type="IFX" THEN
                                 CASE g_db_type             #FUN-730016
                                  WHEN "IFX"                #FUN-730016
                                    LET l_body[l_body_cnt].desc=l_command.subString(l_command.getIndexOf('{',l_j)+1,l_command.getIndexOf('}',l_j)-1)
                                    LET l_jump=l_command.getIndexOf('}',l_j)+1
                                    IF (l_command.getIndexOf('{',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('{',l_jump)-l_jump)>0 THEN    
                                       LET l_other_flag=1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "ORA"                #FUN-730016
                                    LET l_body[l_body_cnt].desc=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                    LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                    IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('/*',l_jump)-l_jump)>=0 THEN
                                       LET l_other_flag=1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "MSV"                #FUN-730016
                                    #No.FUN-A60022---start
                                    LET l_body[l_body_cnt].desc=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                    LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                    IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('/*',l_jump)-l_jump)>=0 THEN
                                       LET l_other_flag=1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF   
                                    #No.FUN-A60022---end
                                 END CASE                   #FUN-730016
                              END IF
                      END CASE
                  END FOR
                  IF l_sel MATCHES "[23]" THEN
                     EXECUTE IMMEDIATE l_command_lst[l_i]
                     IF SQLCA.SQLCODE THEN
                        CALL cl_err("dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") error:",sqlca.sqlcode,1)
                        LET l_success='N'
                        EXIT FOR
                     END IF
                     LET l_success='Y'
                     LET l_sql="grant select on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant update on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant insert on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant delete on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant index on ",l_tabname CLIPPED," to public" #No.FUN-9B0011 #FUN-B50010
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant select on ",l_tabname CLIPPED," to ods" #No.FUN-9C0036
                     EXECUTE IMMEDIATE l_sql
                    #LET l_sql="grant index on ",l_tabname CLIPPED," to ods" #No.FUN-9C0036 #FUN-B50010
                    #EXECUTE IMMEDIATE l_sql #FUN-B50010
                  END IF
             WHEN l_command_lst[l_i].subString(1,8)="create u" or
                  l_command_lst[l_i].subString(1,8)="create i"
                  IF l_success='Y' and l_sel MATCHES "[23]" THEN
                     EXECUTE IMMEDIATE l_command_lst[l_i]
                     IF SQLCA.SQLCODE THEN
                        CALL cl_err("dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") error:",sqlca.sqlcode,1)
                        LET l_success='N'
                        LET l_sql="drop table ",l_tabname
                        EXECUTE IMMEDIATE l_sql
                        EXIT FOR
                     END IF
                  END IF
           END CASE
#           display "command",l_i USING '#',":",l_command_lst[l_i]
       END FOR
       display "l_gat03:",l_gat03 CLIPPED
       display "l_gat04:",l_gat04 CLIPPED
       display "l_module:",l_module CLIPPED
       display "l_zta11:",l_zta11 CLIPPED
       display "l_zta12:",l_zta12 CLIPPED
       FOR l_i=1 TO l_body.getLength()
           display "l_body[",l_i,"].feldname:",l_body[l_i].feldname
           display "l_body[",l_i,"].datatype:",l_body[l_i].datatype
           display "l_body[",l_i,"].desc:",l_body[l_i].desc
           display "l_body[",l_i,"].other:",l_body[l_i].other
       END FOR
 
       IF l_sel MATCHES "[12]" THEN
          IF l_success='Y' THEN
             FOR l_i=1 TO g_lang_arr.getLength()
                 IF g_lang=g_lang_arr[l_i] THEN
                    INSERT INTO gat_file(gat01,gat02,gat03,gat04,gat06)
                    VALUES(l_tabname,g_lang,l_gat03,l_gat04,l_module)
                    IF sqlca.sqlcode THEN
                       LET g_err1 = "insert into gat_file("||l_tabname||") error"  #No.FUN-660081
                       #CALL cl_err("insert into gat_file("||l_tabname||") error:",sqlca.sqlcode,1)  #No.FUN-660081
                       CALL cl_err3("ins","gat_file",l_tabname,g_lang,SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                    END IF
                 ELSE
                    INSERT INTO gat_file(gat01,gat02,gat06)
                    VALUES(l_tabname,g_lang_arr[l_i],l_module)
                    IF sqlca.sqlcode THEN
                       LET g_err1 = "insert into gat_file("||l_tabname||") error"  #No.FUN-660081
                       #CALL cl_err("insert into gat_file("||l_tabname||") error:",sqlca.sqlcode,1)  #No.FUN-660081
                       CALL cl_err3("ins","gat_file",l_tabname,g_lang_arr[l_i],SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                    END IF
                 END IF
                 FOR l_j=1 TO l_body.getLength()
                     LET l_feldname=l_body[l_j].feldname
                     LET l_desc=l_body[l_j].desc
                     LET l_other=l_body[l_j].other
                     IF cl_null(l_other) THEN
                        IF g_lang=g_lang_arr[l_i] THEN
                           INSERT INTO gaq_file(gaq01,gaq02,gaq03,gaq06) VALUES(l_feldname,g_lang,l_desc,'N')   #No.FUN-660025
                           IF sqlca.sqlcode THEN
                              LET g_err1 = "insert gaq_file(" || l_feldname CLIPPED || ") error:" #No.FUN-660081
                              #CALL cl_err("insert gaq_file(" || l_feldname CLIPPED || ") error:",sqlca.sqlcode,1)  #No.FUN-660081
                              CALL cl_err3("ins","gaq_file",l_feldname,g_lang,SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                           END IF
                        ELSE
                           INSERT INTO gaq_file(gaq01,gaq02,gaq06) VALUES(l_feldname,g_lang_arr[l_i],'N')   #No.FUN-660025
                           IF sqlca.sqlcode THEN
                              LET g_err1 = "insert gaq_file(" || l_feldname CLIPPED || ") error:" #No.FUN-660081
                              #CALL cl_err("insert gaq_file(" || l_feldname CLIPPED || ") error:",sqlca.sqlcode,1)  #No.FUN-660081
                              CALL cl_err3("ins","gaq_file",l_feldname,g_lang_arr[l_i],SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                           END IF
                        END IF
                     ELSE
                        IF g_lang=g_lang_arr[l_i] THEN
                           INSERT INTO gaq_file(gaq01,gaq02,gaq03,gaq05,gaq06) VALUES(l_feldname,g_lang,l_desc,l_other,'N')   #No.FUN-660025
                           IF sqlca.sqlcode THEN
                              LET g_err1 = "insert gaq_file(" || l_feldname CLIPPED || ") error:" #No.FUN-660081
                              #CALL cl_err("insert gaq_file(" || l_feldname CLIPPED || ") error:",sqlca.sqlcode,1)  #No.FUN-660081
                              CALL cl_err3("ins","gaq_file",l_feldname,g_lang,SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                           END IF
                        ELSE
                           INSERT INTO gaq_file(gaq01,gaq02,gaq06) VALUES(l_feldname,g_lang_arr[l_i],'N')   #No.FUN-660025
                           IF sqlca.sqlcode THEN
                              LET g_err1 = "insert gaq_file(" || l_feldname CLIPPED || ") error:" #No.FUN-660081
                              #CALL cl_err("insert gaq_file(" || l_feldname CLIPPED || ") error:",sqlca.sqlcode,1)  #No.FUN-660081
                              CALL cl_err3("ins","gaq_file",l_feldname,g_lang_arr[l_i],SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                           END IF
                        END IF
                     END IF
                 END FOR
             END FOR
          END IF
       END IF
       IF l_sel MATCHES "[23]" THEN
          IF l_success='Y' THEN
             INSERT INTO zta_file(zta01,zta02,zta05,zta06,zta07,zta10,zta11,zta12)
             VALUES(l_tabname,g_dbs,g_date,g_user,'T','Y',l_zta11,l_zta12)
             IF sqlca.sqlcode THEN
                LET g_err1 = "insert into zta_file("||l_tabname||") error:"  #No.FUN-660081
                #CALL cl_err("insert into zta_file("||l_tabname||") error:",sqlca.sqlcode,1)  #No.FUN-660081
                CALL cl_err3("ins","zta_file",l_tabname,g_dbs,SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                LET l_sql="drop table ",l_tabname
                EXECUTE IMMEDIATE l_sql
             ELSE
                LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                          " WHERE zs01 = '",l_tabname CLIPPED,"'",
                          "   AND zs02 = '",g_dbs CLIPPED,"'"
                PREPARE p_zta_imp_create_sqlfile_pre1 FROM l_sql
                EXECUTE p_zta_imp_create_sqlfile_pre1 INTO l_zs03
                FREE p_zta_imp_create_sqlfile_pre1
                IF l_zs03 IS NULL THEN
                   LET l_zs03 = 1
                END IF
                LET l_zs06='create table '||l_tabname CLIPPED||' {$'||UPSHIFT(l_module CLIPPED)||'/sch/'||l_tabname CLIPPED||'.sch.src}'
                INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,
                                    zs09,zs10,zs11,zs12)
                 VALUES(l_tabname,g_dbs,l_zs03,g_date,'p',l_zs06,
                           g_user,g_MODNO,'Y','N','N', g_tiptop_ver)
                IF sqlca.sqlcode THEN
                   LET g_err1 = "insert into zs_file("||l_tabname||") error:"  #No.FUN-660081
                   #CALL cl_err("insert into zs_file("||l_tabname||") error:",sqlca.sqlcode,1)  #No.FUN-660081
                   CALL cl_err3("ins","zs_file",l_tabname,l_zs03,SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                   LET l_sql="drop table ",l_tabname
                   EXECUTE IMMEDIATE l_sql
                   delete from zta_file where zta01=l_tabname
                ELSE
                   CALL fgl_winmessage("Info","Create Table Success","info")
                   CALL p_zta_q("zta01='"||l_tabname CLIPPED||"'")
                   IF g_zta.zta02='ds' THEN
                    #No.FUN-A60022---start
                      IF os.Path.separator() = "/" THEN  
                         ERROR "r.s2 ds"
                         RUN "r.s2 ds" WITHOUT WAITING
                      ELSE
                         ERROR "rs2 ds"
                         RUN "rs2 ds" WITHOUT WAITING
                      END IF
                    #No.FUN-A60022---end
                   END IF
                   CALL p_zta_gsql_file(g_zta.zta01,g_zta.zta02) RETURNING l_result

                   #No.FUN-A60022---start
                   LET l_str = p_zta_set_db_type("sch")   #FUN-A80029

                   IF os.Path.chdir(os.Path.join(g_dir.top,DOWNSHIFT(l_module) CLIPPED || "/" || l_str)) THEN
                      CALL os.Path.copy(g_zta.zta01 CLIPPED || ".sch" , g_zta.zta01 CLIPPED || ".sch.src" ) RETURNING l_result2
                      LET l_str="ls "||g_zta.zta01 CLIPPED||".sch.src"
                      RUN l_str
                   END IF
                   #No.FUN-A60022---end
                END IF
             END IF
          END IF
       ELSE
             CALL p_zta_q("zta01='"||l_tabname CLIPPED||"'")
             CALL p_zta_gsql_file(g_zta.zta01,g_zta.zta02) RETURNING l_result
       END IF
       CALL l_channel.close()
    ELSE
       display "l_file is null"
       RETURN
    END IF
END FUNCTION
 
#start FUN-6A0052 add
FUNCTION p_zta_imp_create_sqlfile_1()
  DEFINE l_sql         STRING,
         l_file        STRING,
         l_tabname     LIKE type_file.chr20,    #No.FUN-680135 VARCHAR(20)
         l_body   DYNAMIC ARRAY of RECORD
                       feldname STRING,
                       datatype STRING,
                       desc     STRING,
                       other    STRING
                  END RECORD,
         l_body_cnt    LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_other       LIKE gaq_file.gaq05,     #No.FUN-680135 VARCHAR(1000)
         l_desc        LIKE gaq_file.gaq03,     #No.FUN-680135 VARCHAR(500)
         l_type        LIKE gaq_file.gaq07,     ##FUN-730016
         l_type_array  DYNAMIC ARRAY OF LIKE gaq_file.gaq07,     ##FUN-730016
         l_type_start  LIKE type_file.num5,     #FUN-730016
         l_type_end    LIKE type_file.num5,     #FUN-730016
         l_feldname    LIKE gaq_file.gaq01,     #No.FUN-680135 VARCHAR(20)
         l_zta11       LIKE zta_file.zta11,     #上游檔案 #No.FUN-680135 VARCHAR(60)
         l_zta12       LIKE zta_file.zta12,     #下游檔案 #No.FUN-680135 VARCHAR(60)
         l_gat03       LIKE gat_file.gat03,     #檔案名稱 
         l_gat04       LIKE gat_file.gat04,     #檔案目的 
        #l_gat07       LIKE gat_file.gat07,     #檔案類型
         l_zta09       LIKE zta_file.zta09,     #檔案類型    #No.FUN-A60050
         l_zta18       LIKE zta_file.zta18,     #多語系檔案  #No.FUN-A60050
         l_command     STRING,
         l_command_lst DYNAMIC ARRAY OF STRING,
         l_cmd_start   LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_i           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_j           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_x           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_y           LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_channel     BASE.CHANNEL,
         l_length      LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_zs03        LIKE zs_file.zs03,
         l_zs06        LIKE zs_file.zs06,
         l_str         STRING,
         l_module      LIKE gat_file.gat06,
         l_gat06       LIKE gat_file.gat06,
         l_sel         LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_success     LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_start       LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_step        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_other_flag  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_jump        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_result      STRING,
         l_strbuf      base.StringBuffer,       #TQC-640008
         l_msg         STRING,                  #FUN-6A0052 add
         l_cnt         SMALLINT                 #TQC-710048 add
DEFINE   l_command_sql STRING,                  #No.FUN-850112
         l_command_bak STRING                   #No.FUN-850112
DEFINE   l_gae02       LIKE gae_file.gae02,     #No.FUN-A60050     
         l_gae04       LIKE gae_file.gae04,     #No.FUN-A60050
         l_gae04_text  STRING,                  #No.FUN-A60050
         l_gae04_str   STRING                   #No.FUN-A60050
DEFINE   l_cmd         LIKE zs_file.zs06,       #No.FUN-A60022---add 
         l_result2     LIKE type_file.num10     #No.FUN-A60022---add

   IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
   #start FUN-6A0052 add
   #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
    IF cl_null(g_MODNO) THEN
       PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
          ON IDLE g_idle_seconds
             CALL cl_on_idle()
       END PROMPT
#TQC-860017 end  
       display g_MODNO
    END IF
   #end FUN-6A0052 add
 
   #No.FUN-A60050  -- start --
   #OPEN WINDOW p_zta_sel_w AT 5,20
   #  WITH FORM "azz/42f/p_zta_sel" ATTRIBUTE(STYLE=g_win_style)
   ##LET l_str="1.匯入檔案&欄位說明,2.建立表格與匯入檔案&欄位說明,3.建立表格"
   #LET l_str= cl_getmsg("zta-051",g_lang)                              
   #CALL cl_set_combo_items("module",l_str,l_str)
   #CALL cl_ui_init()
   #CALL cl_ui_locale("p_zta_sel")   #FUN-9C0036
   #INPUT l_sel FROM module
   #    BEFORE INPUT
   #      CALL cl_getmsg('zta-003',g_lang) RETURNING g_msg
   #      CALL cl_set_comp_att_text('module',g_msg)
   #      AFTER FIELD module
   #            IF l_sel is null THEN
   #               NEXT FIELD module
   #            END IF
   ##TQC-860017 start
 
   #   ON ACTION about
   #      CALL cl_about()
 
   #   ON ACTION controlg
   #      CALL cl_cmdask()
 
   #   ON ACTION help
   #      CALL cl_show_help()
 
   #   ON IDLE g_idle_seconds
   #      CALL cl_on_idle()
   #      CONTINUE INPUT
   ##TQC-860017 end   
   #END INPUT
   #CLOSE WINDOW p_zta_sel_w
   #IF INT_FLAG THEN
   #   LET INT_FLAG=0
   #   RETURN
   #END IF

   #LET l_str= cl_getmsg("zta-051",g_lang)                              

   #彈出視窗詢問("欄位說明","combobox項目字串")
   #選擇匯入項目: "1.匯入檔案&欄位說明,2.建立表格與匯入檔案&欄位說明,3.建立表格"
   LET l_sel = p_zta_sel("zta-003","zta-051")
   IF INT_FLAG THEN
      LET INT_FLAG=0
      RETURN
   END IF
   #No.FUN-A60050  -- end --
 
    IF l_sel MATCHES "[23]" THEN
       #No.FUN-A60050  -- start --
       #OPEN WINDOW p_zta_sel_w AT 5,20
       #  WITH FORM "azz/42f/p_zta_sel" ATTRIBUTE(STYLE=g_win_style)
       #LET l_str=''
       #-----指定combo module的值-------------#
       #DECLARE p_module_1_cur CURSOR FOR SELECT gao01 FROM gao_file ORDER BY gao01
       #FOREACH p_module_1_cur INTO l_
       #   IF cl_null(l_str) THEN
       #      LET l_str=l_gat06 CLIPPED
       #   ELSE
       #      LET l_str=l_str CLIPPED,",",l_gat06 CLIPPED
       #   END IF
       #END FOREACH
#       LET l_str=l_str.toLowerCase()
 
       #CALL cl_set_combo_items("module",l_str,l_str)
      #CALL cl_ui_init()
       #CALL cl_ui_locale("p_zta_sel")   #FUN-9C0036
       #-------------------------------------#
       #INPUT l_module FROM module
       #     AFTER FIELD module
       #           IF l_module is null THEN
       #              NEXT FIELD module
       #           END IF
#TQC-860017 start
 
       #  ON ACTION about
       #     CALL cl_about()
 
       #  ON ACTION controlg
       #     CALL cl_cmdask()
 
       #  ON ACTION help
       #     CALL cl_show_help()
 
       #  ON IDLE g_idle_seconds
       #     CALL cl_on_idle()
       #     CONTINUE INPUT
#TQC-860017 end      
       #END INPUT
       #CLOSE WINDOW p_zta_sel_w
       #IF INT_FLAG THEN
       #   LET INT_FLAG=0
       #   RETURN
       #END IF

       #彈出視窗詢問("欄位說明","combobox項目字串")
       #選擇檔案模組: AAP,AIM,AAP...."
       LET l_module = p_zta_sel("",g_zta03_str)
       IF INT_FLAG THEN
          LET INT_FLAG=0
          RETURN
       END IF


       #抓取 p_perlang zta09 設定資料
       SELECT gae04 INTO l_gae04 FROM gae_file
        WHERE gae01='p_zta' and gae02='zta09' and gae03=g_lang
       LET l_gae04_text = l_gae04 CLIPPED,":"
  
       DECLARE p_gae_cur CURSOR FOR SELECT gae02,gae04 FROM gae_file 
             WHERE gae01='p_zta' AND gae02 LIKE 'zta09_%' AND gae03=g_lang ORDER BY gae02
       FOREACH p_gae_cur INTO l_gae02,l_gae04
          IF cl_null(l_gae04_str) THEN
             LET l_gae04_str = l_gae02[7,7],".",l_gae04 CLIPPED
          ELSE
             LET l_gae04_str = l_gae04_str CLIPPED,",",l_gae02[7,7],".",l_gae04 CLIPPED
          END IF
       END FOREACH

       #彈出視窗詢問("欄位說明","combobox項目字串")
       #選擇檔案類型: "B.基本資料檔,M.主檔,T.交易檔..." , 
       #目前改以 user 手動選擇為主，不參考sch檔
       LET l_zta09 = p_zta_sel(l_gae04_text,l_gae04_str)
       LET l_zta09 = l_zta09[1,1]
       IF INT_FLAG THEN
          LET INT_FLAG=0
          RETURN
       END IF
       #No.FUN-A60050  -- end --

    END IF
   #FUN-A60052 -- start --
   #LET l_command="ls $TEMPDIR/zta_impfile_loc"           #FUN-6A0052 mark
   #LET l_command="ls " || g_dir.top || "/zta/FUN/zta_impfile_loc"   #FUN-6A0052
   #RUN l_command RETURNING l_result

    #取得放置 alter sql 的檔案路徑
    LET l_command = p_zta_impfile_position()

    IF NOT os.Path.exists(l_command) THEN
       IF l_module is null THEN
          LET l_file=cl_server_file(g_dir.top)
       ELSE
          display g_dir.top
          LET l_file=cl_server_file(os.Path.join(g_dir.top,l_module))
       END IF
    ELSE
       LET l_channel=base.channel.create()
      #CALL l_channel.openfile(g_dir.tempdir||'/zta_impfile_loc' , "r" )   #FUN-6A0052 mark
       CALL l_channel.openfile(l_command , "r" )                           #FUN-6A0052
       IF STATUS THEN
          CALL l_channel.close()
          IF l_module is null THEN
           #No.FUN-A60022---start
             IF os.Path.separator() = "/" THEN  
                LET l_cmd=FGL_GETENV("TOP")
                FOR l_i=1 TO l_str.getLength()
                    IF l_cmd[l_i,l_i]="\\" THEN 
                       LET l_cmd[l_i,l_i]='/'
                    END IF 
                                   
                END FOR 
             END IF 
             LET g_dir.top=l_cmd
           #No.FUN-A60022---end 
             LET l_file=cl_server_file(g_dir.top)
          ELSE
             LET l_file=cl_server_file(os.Path.join(g_dir.top,l_module))
          END IF
       ELSE
          LET l_command=''
          WHILE l_channel.read(l_command)
          END WHILE
          CALL l_channel.close()
          IF l_command.getLength()=0 THEN
             IF l_module is null THEN
                LET l_file=cl_server_file(g_dir.top)
             ELSE
                LET l_file=cl_server_file(os.Path.join(g_dir.top,l_module))
             END IF
          ELSE
             LET l_file=cl_server_file(l_command)
          END IF
       END IF
    END IF
 
    LET l_length=l_file.getLength()      #FUN-6A0052 add
    IF l_length = 0 THEN RETURN END IF   #FUN-6A0052 add
 
    LET g_plant_o = g_plant              #FUN-6A0052 add
    LET g_dbs_o = g_dbs                  #FUN-6A0052 add
    LET g_errmsg = ''                    #TQC-710048 add
    LET g_create_module = l_module       #FUN-9C0036
    LET g_table_type = l_zta09 CLIPPED   #FUN-A60050

    CALL p_zta_seldb2("C")   #選擇要Alter那些資料庫             #FUN-6A0052 add  #FUN-660178
    LET g_create_module = ""             #FUN-9C0036
 
IF NOT INT_FLAG THEN                                            #FUN-6A0052 add
 LET g_ods_end = FALSE                                          #FUN-9A0077
 LET g_plant_status = 0                                         #FUN-9C0036

 FOR l_ac=1 TO g_cnt1                                           #FUN-6A0052 add
  #FUN-9A0077 -- start --
  IF l_ac = 1 THEN
     SELECT COUNT(*) INTO g_zta_cnt FROM zta_file WHERE zta01 = l_tabname 
  END IF
  IF l_ac = g_cnt1 THEN
     LET g_ods_end = TRUE
  END IF
  #FUN-9A0077 -- end --
  IF g_azp1[l_ac].select='Y' THEN                               #FUN-6A0052 add
   IF g_azp1[l_ac].tab_syn='T' THEN                             #FUN-6A0052 add
    LET g_plant = g_azp1[l_ac].azp01 CLIPPED                    #FUN-6A0052 add
    LET g_dbs   = g_azp1[l_ac].azp03 CLIPPED                    #FUN-6A0052 add
    CALL p_zta_set_erpdb()                #連結資料庫           #FUN-6A0052 add
    IF (SQLCA.SQLCODE) THEN CONTINUE FOR END IF                 #TQC-710048 add
   #                                  #3.建立表格               #TQC-710048 add
   #IF g_dbs != 'ds' THEN LET l_sel = '3' END IF                #FUN-6A0052 add #TQC-710048 add
 
    LET l_length=l_file.getLength()
#let l_file="/u3/genero/topo/azz/sql/c_qaz.sql"
#let l_length=1
    IF l_length > 0 THEN
       LET l_channel=base.channel.create()
       CALL l_channel.openfile( l_file, "r" )
       IF STATUS THEN
          CALL cl_err("","zta-027",1)
          CALL l_channel.close()
          RETURN
       END IF
 
#      LET l_sql = g_dir.tempdir CLIPPED,"/","zta_alter_err"
#      LET l_error_list=base.channel.create()
#      CALL l_error_list.setdelimiter("")
#      CALL l_error_list.openfile(l_sql CLIPPED, "w" )
#      CALL l_error_list.write("     err_no  db_name       command")
 
       LET l_start='N'
       LET l_x=1
       LET l_str=''
       LET l_success='Y'
       
       WHILE l_channel.read(l_command)
#TQC-640008
          LET l_strbuf=base.StringBuffer.create()
          CALL l_strbuf.append(l_command)
          CALL l_strbuf.replace('　',' ',0)
          CALL l_strbuf.replace('\t',' ',0)
          CALL l_strbuf.replace('	',' ',0)
 
          #No.FUN-850112 -- start --
          LET l_command_sql=l_strbuf.toString()      
#END TQC-640008
          LET l_command_sql = l_command_sql.trim()
          LET l_command=l_command_sql.toLowerCase()
         #LET l_command=l_command.trim()
          LET l_length=LENGTH(l_command)
          IF l_start='Y' THEN
             LET l_str=l_str,l_command_sql
          ELSE
             -- 開始create指令 or not則抓table說明
             IF l_command.getIndexOf('create',1) THEN
                LET l_start='Y'
                LET l_str=l_str,l_command_sql
             ELSE
                #No.FUN-990043 -- start --
                CASE
                   WHEN l_command.getIndexOf("檔案名稱:",1) > 0
                        LET l_i = l_command.getIndexOf(":",1) + 1
                        LET l_gat03=l_command_sql.subString(l_i,l_length)
                   WHEN l_command.getIndexOf("檔案目的:",1) > 0
                        LET l_i = l_command.getIndexOf(":",1) + 1
                        LET l_gat04=l_command_sql.subString(l_i,l_length)
                   WHEN l_command.getIndexOf("上游檔案:",1) > 0
                        LET l_i = l_command.getIndexOf(":",1) + 1
                        LET l_zta11=l_command_sql.subString(l_i,l_length)
                   WHEN l_command.getIndexOf("下游檔案:",1) > 0 
                        LET l_i = l_command.getIndexOf(":",1) + 1
                        LET l_zta12=l_command_sql.subString(l_i,l_length)
#FUN-A60050--start
#FUN-980059--begin
#                  WHEN l_command.getIndexOf("檔案類型:",1) > 0
#                       LET l_i = l_command.getIndexOf(":",1) + 1
#                       LET l_zta09=l_command_sql.subString(l_i,l_length)
#FUN-980059--end
#FUN-A60050--mark
                   WHEN l_command.getIndexOf("多語系檔案:",1) > 0            #No.FUN-A60050
                        LET l_i = l_command.getIndexOf(":",1) + 1            #No.FUN-A60050
                        LET l_zta18=l_command_sql.subString(l_i,l_length)    #No.FUN-A60050
                END CASE
                #No.FUN-990043 -- end --
             END IF
          END IF
          #No.FUN-850112 -- end --
       END WHILE
       CALL p_zta_cut_spaces(l_str) RETURNING l_str
       LET l_length=l_str.getLength()
       LET l_i=1
       LET l_cmd_start=1
       -- 此while將指令拆開
       WHILE l_str.getIndexOf(';',l_cmd_start)
           LET l_command_lst[l_i]=l_str.subString(l_cmd_start,l_str.getIndexOf(';',l_cmd_start)-1)
           LET l_i=l_i+1
           LET l_cmd_start=l_str.getIndexOf(';',l_cmd_start)+1
       END WHILE

       

       FOR l_i=1 TO l_command_lst.getLength()
           LET l_command_sql = l_command_lst[l_i].toLowerCase() #No.FUN-850112 
           CASE
             WHEN l_command_sql.subString(1,8)="create t"  #No.FUN-850112
                  LET l_tabname=l_command_lst[l_i].subString(14,l_command_lst[l_i].getIndexOf('(',14)-1) CLIPPED
                  #No.FUN-990043 -- start --
                  LET l_str = l_tabname CLIPPED
                  LET l_feldname = l_str.subString(1,l_str.getIndexOf('_file',1)-1),"plant"
                  #View的模組清單, 類別屬於 T,S 需檢查是否有 plant 欄位
                  IF l_command_sql.getIndexOf(l_feldname,1) = 0 AND 
                     l_zta09 MATCHES "[TS]" AND                             #No.FUN-A60050
                     (g_view_no_in.getIndexOf(l_module CLIPPED,1) = 0 )     #FUN-9C0036
                  THEN
                        CALL cl_err(l_tabname,'zta-045',1)  #該新增檔案類型為'T'或'S'類table,應含有plantcode欄位
                        RETURN
                  END IF
                  #No.FUN-990043 -- end --
                 
                  #FUN-7A0029
                  IF cl_null(FGL_GETENV("TOPLINK")) THEN
                     IF l_tabname[1,3] != 'tc_' THEN 
                        CALL cl_err(l_tabname,"zta-036",1)
                        LET g_plant = g_plant_o                          
                        LET g_dbs   = g_dbs_o                            
                        CALL p_zta_set_erpdb()        #連結資料庫        
                        RETURN
                     END IF
                  END IF
                  #END FUN-7A0029
                        
                  # l_x和l_y為create table指令裡第一個(和最後一個)的位置
                  # 即l_x和l_y記錄table欄位的內容
                  LET l_x=l_command_lst[l_i].getIndexOf('(',1)
                  FOR l_j=l_command_lst[l_i].getLength() TO 1 STEP -1
                      IF l_command_lst[l_i].subString(l_j,l_j)=')' THEN
                         LET l_y=l_j
                         EXIT FOR
                      END IF
                  END FOR
                  LET l_command=l_command_lst[l_i].subString(l_x+1,l_y-1)
                  LET l_command=l_command.trim()
                  LET l_command_bak = l_command.toLowerCase()  #No.FUN-850112
                  LET l_step=1  #l_step為階段,1表示取feldname,2取datatype,3取desc
                  LET l_jump=0
                  LET l_body_cnt=1
                  LET l_length=l_command.getLength()
                  FOR l_j=1 TO l_length
                      IF l_j<l_jump THEN
                         CONTINUE FOR
                      END IF
                      IF l_command.subString(l_j,l_j)=' ' THEN
                         CONTINUE FOR
                      END IF
                      CASE
                         WHEN l_step=1
                              LET l_jump=l_command.getIndexOf(' ',l_j)
                              LET l_body[l_body_cnt].feldname=l_command.subString(l_j,l_jump-1)
                              #FUN-7A0029
                              IF cl_null(FGL_GETENV("TOPLINK")) THEN
                                 IF l_body[l_body_cnt].feldname.subString(1,3) != 'tc_' THEN
                                    CALL cl_err_msg(l_body[l_body_cnt].feldname, "zta-037","tc", 10)
                                    LET g_plant = g_plant_o                          
                                    LET g_dbs   = g_dbs_o                            
                                    CALL p_zta_set_erpdb()        #連結資料庫        
                                    RETURN
                                 END IF
                              END IF
                              #END FUN-7A0029
                              LET l_step=2
                         WHEN l_step=2
                              CASE
                                 WHEN l_command_bak.subString(l_j,l_j+1)="da" OR  #No.FUN-850112
                                      l_command_bak.subString(l_j,l_j+1)="sm" OR  #No.FUN-850112
                                      l_command_bak.subString(l_j,l_j+1)="in"     #No.FUN-850112
                                 #     LET l_body[l_body_cnt].datatype="date"
                                      IF l_command.getIndexOf(',',l_j)=0 THEN
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type              #FUN-730016
                                          WHEN "IFX"                 #FUN-730016  
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('{',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('{',l_j)
                                            END IF
 
                                          WHEN "ORA"                 #FUN-730016  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
 
                                          WHEN "MSV"                 #FUN-730016  
                                            #No.FUN-A60022---start   
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF  
                                            #No.FUN-A60022---end
                                         END CASE                    #FUN-730016
                                      ELSE
                                         LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type              #FUN-730016
                                          WHEN "IFX"                 #FUN-730016  
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('{',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                        #       LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                            END IF
 
                                          WHEN "ORA"                 #FUN-730016  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                      #         LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                            END IF
 
                                          WHEN "MSV"                 #FUN-730016  
                                            #No.FUN-A60022---start  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                      #         LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                            END IF   
                                            #No.FUN-A60022---end
                                         END CASE                    #FUN-730016
                                      END IF
                                 WHEN l_command_bak.subString(l_j,l_j+1)="va" OR   #No.FUN-850112
                                      l_command_bak.subString(l_j,l_j+1)="ch"      #No.FUN-850112
                                      IF l_command_bak.getIndexOf(',',l_j)=0 THEN  #No.FUN-850112
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type              #FUN-730016
                                          WHEN "IFX"                 #FUN-730016  
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('{',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('{',l_j)
                                            END IF
 
                                          WHEN "ORA"                 #FUN-730016  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
 
                                          WHEN "MSV"                 #FUN-730016  
                                            #No.FUN-A60022---start   
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF  
                                            #No.FUN-A60022---end
                                         END CASE                    #FUN-730016
                                      ELSE
                                         LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf(',',l_j)-1))
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type              #FUN-730016
                                          WHEN "IFX"                 #FUN-730016  
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('{',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('{',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                            END IF
 
                                          WHEN "ORA"                 #FUN-730016  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                            END IF
 
                                          WHEN "MSV"                 #FUN-730016  
                                            #No.FUN-A60022---start  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_command.getIndexOf(',',l_j)+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_command.getIndexOf(',',l_j))>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_command.getIndexOf(',',l_j)+1
                                               END IF
                                            END IF   
                                            #No.FUN-A60022---end 
                                         END CASE                    #FUN-730016
                                      END IF
                                 WHEN l_command_bak.subString(l_j,l_j+1)="nu" OR     #No.FUN-850112
                                      l_command_bak.subString(l_j,l_j+1)="de"        #No.FUN-850112
                                      IF l_command_bak.getIndexOf(',',l_j)=0 THEN    #No.FUN-850112
                                         LET l_step="21"  #step2的第一種情況(無逗號的情況)
                                      ELSE
                                         IF l_command.getIndexOf(',',l_j)<l_command.getIndexOf(')',l_j) THEN
                                            LET l_y=l_command.getIndexOf(',',l_command.getIndexOf(')',l_j))
                                            IF l_y=0 THEN
                                               LET l_step="21"
                                            ELSE
                                               LET l_step="22"
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_y-1))
                                            END IF
                                         ELSE
                                            LET l_y=l_command.getIndexOf(',',l_command.getIndexOf(')',l_j))
                                            LET l_step="22"
                                            LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_y-1))
                                         END IF
                                      END IF
                                      IF l_step="21" THEN
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type              #FUN-730016
                                          WHEN "IFX"                 #FUN-730016  
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('{',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('{',l_j)
                                            END IF
 
                                          WHEN "ORA"                 #FUN-730016  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF
 
                                          WHEN "MSV"                 #FUN-730016  
                                            #No.FUN-A60022---start 
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_length))
                                               LET l_jump=l_length+1
                                            ELSE
                                               LET l_body[l_body_cnt].datatype=p_zta_del_spaces(l_command.subString(l_j,l_command.getIndexOf('/*',l_j)-1))
                                               LET l_step=3
                                               LET l_jump=l_command.getIndexOf('/*',l_j)
                                            END IF    
                                            #No.FUN-A60022---end
                                         END CASE                    #FUN-730016
                                      ELSE
                                         #IF g_db_type="IFX" THEN
                                         CASE g_db_type              #FUN-730016
                                          WHEN "IFX"                 #FUN-730016  
                                            IF l_command.getIndexOf('{',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_y+1
                                            ELSE
                                               IF (l_command.getIndexOf('{',l_j)-l_y)<5 AND
                                                  (l_command.getIndexOf('{',l_j)-l_y)>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('{',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_y+1
                                               END IF
                                            END IF
 
                                          WHEN "ORA"                 #FUN-730016  
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_y+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_y)<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_y)>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_y+1
                                               END IF
                                            END IF
 
                                          WHEN "MSV"                 #FUN-730016  
                                            #No.FUN-A60022---start
                                            IF l_command.getIndexOf('/*',l_j)=0 THEN
                                               LET l_step=1
                                               LET l_body_cnt=l_body_cnt+1
                                               LET l_jump=l_y+1
                                            ELSE
                                               IF (l_command.getIndexOf('/*',l_j)-l_y)<5 AND
                                                  (l_command.getIndexOf('/*',l_j)-l_y)>0 THEN
                                                  #表示此欄位有/*或{
                                                  LET l_step=3
                                                  LET l_jump=l_command.getIndexOf('/*',l_j)
                                               ELSE
                                                  #表示此欄位無/*或{
                                                  LET l_step=1
                                                  LET l_body_cnt=l_body_cnt+1
                                                  LET l_jump=l_y+1
                                               END IF
                                            END IF     
                                            #No.FUN-A60022---end
                                         END CASE                    #FUN-730016
                                      END IF
                              END CASE
                         WHEN l_step=3
                              IF l_other_flag THEN
                                 IF l_other_flag=1 THEN
                                    #FUN-730016  
                                    #IF g_db_type="IFX" THEN
                                    CASE g_db_type            
                                     WHEN "IFX"                 
                                       LET l_body[l_body_cnt].other=l_command.subString(l_command.getIndexOf('{',l_j)+1,l_command.getIndexOf('}',l_j)-1)
                                     WHEN "ORA"                 
                                       LET l_body[l_body_cnt].other=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                     WHEN "MSV"                 
                                       LET l_body[l_body_cnt].other=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1) #No.FUN-A60022
                                    END CASE
                                    #END FUN-730016
                                 ELSE
                                    #FUN-730016  
                                    #IF g_db_type="IFX" THEN
                                    CASE g_db_type            
                                     WHEN "IFX"                 
                                       LET l_body[l_body_cnt].other=l_body[l_body_cnt].other CLIPPED,ascii(10),l_command.subString(l_command.getIndexOf('{',l_j)+1,l_command.getIndexOf('}',l_j)-1)
                                     WHEN "ORA"                 
                                       LET l_body[l_body_cnt].other=l_body[l_body_cnt].other CLIPPED,ascii(10),l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                     WHEN "MSV"                 
                                       LET l_body[l_body_cnt].other=l_body[l_body_cnt].other CLIPPED,ascii(10),l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)#No.FUN-A60022
                                    END CASE
                                    #END FUN-730016
                                 END IF
                                 #IF g_db_type="IFX" THEN
                                 CASE g_db_type              #FUN-730016
                                  WHEN "IFX"                 #FUN-730016  
                                    LET l_jump=l_command.getIndexOf('}',l_j)+1
                                    IF (l_command.getIndexOf('{',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('{',l_jump)-l_jump)>=0 THEN   #TQC-710034
                                       LET l_other_flag=l_other_flag+1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "ORA"                 #FUN-730016  
                                    LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                    IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('/*',l_jump)-l_jump)>=0 THEN  #TQC-710034
                                       LET l_other_flag=l_other_flag+1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "MSV"                 #FUN-730016  
                                    #No.FUN-A60022---start 
                                    LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                    IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('/*',l_jump)-l_jump)>=0 THEN  #TQC-710034
                                       LET l_other_flag=l_other_flag+1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF    
                                    #No.FUN-A60022---end 
                                 END CASE                    #FUN-730016
                              ELSE
                                 #IF g_db_type="IFX" THEN
                                 CASE g_db_type              #FUN-730016
                                  WHEN "IFX"                 #FUN-730016  
                                    LET l_body[l_body_cnt].desc=l_command.subString(l_command.getIndexOf('{',l_j)+1,l_command.getIndexOf('}',l_j)-1)
                                    LET l_jump=l_command.getIndexOf('}',l_j)+1
                                    IF (l_command.getIndexOf('{',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('{',l_jump)-l_jump)>=0 THEN   #TQC-710034
                                       LET l_other_flag=1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "ORA"                 #FUN-730016  
                                    LET l_body[l_body_cnt].desc=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                    LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                    IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('/*',l_jump)-l_jump)>=0 THEN
                                       LET l_other_flag=1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF
 
                                  WHEN "MSV"                 #FUN-730016  
                                    #No.FUN-A60022---start  
                                    LET l_body[l_body_cnt].desc=l_command.subString(l_command.getIndexOf('/*',l_j)+2,l_command.getIndexOf('*/',l_j)-1)
                                    LET l_jump=l_command.getIndexOf('*/',l_j)+2
                                    IF (l_command.getIndexOf('/*',l_jump)-l_jump)<5 AND
                                       (l_command.getIndexOf('/*',l_jump)-l_jump)>=0 THEN
                                       LET l_other_flag=1
                                    ELSE
                                       LET l_step=1
                                       LET l_body_cnt=l_body_cnt+1
                                       LET l_other_flag=0
                                    END IF 
                                    #No.FUN-A60022---end 
                                 END CASE                    #FUN-730016
                              END IF
                      END CASE
                  END FOR
                  IF l_sel MATCHES "[23]" THEN
                     EXECUTE IMMEDIATE l_command_lst[l_i]
                     IF SQLCA.SQLCODE THEN
                        #No.FUN-A80029 -- start --
                        #CALL cl_err("dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") error:",sqlca.sqlcode,1)
                        LET g_err="dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") error:"
                        CALL p_zta_c_err(l_command_lst[l_i],g_err)                       #FUN-A90062
                        #No.FUN-A80029 -- end --
                        LET l_success='N'
                        EXIT FOR
                     END IF
                     LET l_success='Y'
                     LET l_sql="grant select on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant update on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant insert on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant delete on ",l_tabname CLIPPED," to tiptopgp" #No.FUN-9B0011
                     EXECUTE IMMEDIATE l_sql
                     LET l_sql="grant index on ",l_tabname CLIPPED," to public" #No.FUN-9B0011 #FUN-B50010
                     EXECUTE IMMEDIATE l_sql
                   #No.FUN-A60022---start
                     #FUN-B50010 --start--
                     #IF g_db_type = "MSV" THEN
                     #   LET l_sql="grant references on ",l_tabname CLIPPED," to ods"
                     #ELSE
                     #   LET l_sql="grant index on ",l_tabname CLIPPED," to ods" #No.FUN-9C0036 
                     #END IF
                     #EXECUTE IMMEDIATE l_sql
                     #FUN-B50010 --end--
                     LET l_sql="grant select on ",l_tabname CLIPPED," to ods" #No.FUN-9C0036
                     EXECUTE IMMEDIATE l_sql
                  END IF
             WHEN l_command_sql.subString(1,8)="create u" or  #No.FUN-850112
                  l_command_sql.subString(1,8)="create i"     #No.FUN-850112
                  IF l_success='Y' and l_sel MATCHES "[23]" THEN
                     #FUN-7A0029
                     IF cl_null(FGL_GETENV("TOPLINK")) THEN
                        LET l_type_start = l_command_sql.getIndexOf("index",1)+6            #No.FUN-850112
                        LET l_type_end = l_command_sql.getIndexOf(" on ",l_type_start) - 1  #No.FUN-850112
                        LET l_str = l_command_lst[l_i].subString(l_type_start,l_type_end)
                        display "l_index:",l_str
                        IF l_str.subString(1,4) != "tic_" AND 
                           l_str.subString(1,4) != "tpc_"
                        THEN
                           LET l_sql="drop table ",l_tabname
                           EXECUTE IMMEDIATE l_sql
                           CALL cl_err(l_command_lst[l_i],"zta-038",1)
                           LET g_plant = g_plant_o                          
                           LET g_dbs   = g_dbs_o                            
                           CALL p_zta_set_erpdb()        #連結資料庫        
                           RETURN
                        END IF
                     END IF
                     #END FUN-7A0029
                     
                     EXECUTE IMMEDIATE l_command_lst[l_i]
                     IF SQLCA.SQLCODE THEN
                        #No.FUN-A80029 -- start --
                        #CALL cl_err("dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") index error:" || l_command_lst[l_i] CLIPPED,sqlca.sqlcode,1) #FUN-A60022
                        LET g_err="dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") index error:"
                        CALL p_zta_c_err(l_command_lst[l_i],g_err)                       #FUN-A90062
                        #No.FUN-A80029 -- end --
                        LET l_success='N'
                        LET l_sql="drop table ",l_tabname
                        EXECUTE IMMEDIATE l_sql
                        EXIT FOR
                     END IF
                  END IF
             #FUN-730016
             WHEN l_command_sql.subString(1,5)="alter" AND           #No.FUN-850112
                  l_command_sql.getIndexOf("constraint",1) > 0       #No.FUN-850112
                  IF l_success='Y' and l_sel MATCHES "[23]" THEN
                     #FUN-7A0029
                     IF cl_null(FGL_GETENV("TOPLINK")) THEN
                        LET l_type_start = l_command_sql.getIndexOf("constraint",1)+11             #No.FUN-850112
                        LET l_type_end = l_command_sql.getIndexOf(" primary",l_type_start) - 1     #No.FUN-850112 
                        LET l_str = l_command_lst[l_i].subString(l_type_start,l_type_end)
                        display "l_constraint:",l_str
                        IF l_str.subString(1,4) != "tpc_" OR
                           l_str.subString(l_str.getLength()-2,l_str.getLength()) != "_pk"
                        THEN
                           CALL cl_err(l_command_lst[l_i],"zta-039",1)
                           LET l_sql="drop table ",l_tabname
                           EXECUTE IMMEDIATE l_sql
                           LET g_plant = g_plant_o                          
                           LET g_dbs   = g_dbs_o                            
                           CALL p_zta_set_erpdb()        #連結資料庫        
                           RETURN
                        END IF
                     END IF
                     #END FUN-7A0029
 
                     LET l_sql = l_command_lst[l_i]
                     EXECUTE IMMEDIATE l_sql
                     IF SQLCA.SQLCODE THEN
                        #No.FUN-A80029 -- start --
                        #CALL cl_err("dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") constraint error:",sqlca.sqlcode,1)
                        LET g_err="dbs:"||g_dbs CLIPPED||"  create table("||l_tabname CLIPPED||") constraint error:"
                        CALL p_zta_c_err(l_sql,g_err)                       #FUN-A90062
                        #No.FUN-A80029 -- end --
                        LET l_success='N'
                        LET l_sql="drop table ",l_tabname
                        EXECUTE IMMEDIATE l_sql
                        EXIT FOR
                     END IF
                  END IF
             #END FUN-730016
           END CASE
#           display "command",l_i USING '#',":",l_command_lst[l_i]
       END FOR
       CALL l_body.deleteElement(l_body_cnt)        #FUN-9A0077
       LET l_body_cnt = l_body_cnt - 1              #FUN-9A0077
       display "l_gat03:",l_gat03 CLIPPED
       display "l_gat04:",l_gat04 CLIPPED
       display "l_module:",l_module CLIPPED
       display "l_zta11:",l_zta11 CLIPPED
       display "l_zta12:",l_zta12 CLIPPED
       display "l_zta09:",l_zta09 CLIPPED
       display "l_zta18:",l_zta18 CLIPPED
       FOR l_i=1 TO l_body_cnt                        #FUN-9A0077  
           display "l_body[",l_i,"].feldname:",l_body[l_i].feldname
           display "l_body[",l_i,"].datatype:",l_body[l_i].datatype
           display "l_body[",l_i,"].desc:",l_body[l_i].desc
           display "l_body[",l_i,"].other:",l_body[l_i].other
       END FOR
 
       IF l_sel MATCHES "[12]" THEN
          IF l_success='Y' THEN
             FOR l_i=1 TO g_lang_arr.getLength()
                #start TQC-710048 add
                #判斷當gat_file(檔案名稱多語言對照檔)沒有這個檔案時，再做INSERT
                 LET l_cnt = 0
                 SELECT COUNT(*) INTO l_cnt FROM gat_file
                  WHERE gat01 = l_tabname AND gat02=g_lang_arr[l_i]
                 IF l_cnt = 0 THEN
                #end TQC-710048 add
                    IF g_lang=g_lang_arr[l_i] THEN
#FUN-980059--begin
#                      INSERT INTO gat_file(gat01,gat02,gat03,gat04,gat06)
#                      VALUES(l_tabname,g_lang,l_gat03,l_gat04,l_module)
                       INSERT INTO gat_file(gat01,gat02,gat03,gat04,gat06,gat07)
                       VALUES(l_tabname,g_lang,l_gat03,l_gat04,l_module,l_zta09)   #No.FUN-A60050
#FUN-980059--end
                       IF sqlca.sqlcode THEN
                          LET g_err1 = "insert into gat_file("||l_tabname||") error"  #No.FUN-660081
                          #CALL cl_err("insert into gat_file("||l_tabname||") error:",sqlca.sqlcode,1)  #No.FUN-660081
                          CALL cl_err3("ins","gat_file",l_tabname,g_lang,SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                       END IF
                    ELSE
                       INSERT INTO gat_file(gat01,gat02,gat06,gat07)           #No.FUN-A60050
                       VALUES(l_tabname,g_lang_arr[l_i],l_module,l_zta09)      #No.FUN-A60050
                       IF sqlca.sqlcode THEN
                          LET g_err1 = "insert into gat_file("||l_tabname||") error"  #No.FUN-660081
                          #CALL cl_err("insert into gat_file("||l_tabname||") error:",sqlca.sqlcode,1)  #No.FUN-660081
                          CALL cl_err3("ins","gat_file",l_tabname,g_lang_arr[l_i],SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                       END IF
                    END IF
                 ELSE     #No.FUN-A60050
                    UPDATE gat_file SET gat06=l_module,gat07=l_zta09  #No.FUN-A60050
                     WHERE gat01=l_tabname AND gat02=g_lang_arr[l_i]  ##No.FUN-A60050
                 END IF   #No.FUN-A60050 add

                 FOR l_j=1 TO l_body_cnt                        #FUN-9A0077
                     LET l_feldname=l_body[l_j].feldname
                     LET l_desc=l_body[l_j].desc
                     LET l_other=l_body[l_j].other
                     #start TQC-710048 add
                     #判斷當gaq_file(欄位多語言說明檔)沒有這個欄位時，再做INSERT
                     LET l_cnt = 0
                     SELECT COUNT(*) INTO l_cnt FROM gaq_file
                      WHERE gaq01 =l_feldname AND gaq02 = g_lang_arr[l_i]
                     IF l_cnt = 0 THEN
                     #end TQC-710048 add
                        #FUN-730016
                        #(內部用)所屬欄位型態以 "/<XXXXX>/" 來判斷
                        LET l_type = ""                    
                        IF l_body[l_j].desc.getIndexOf("/<",1) > 0 THEN
                           LET l_type_start = l_body[l_j].desc.getIndexOf("/<",1)  
                           IF l_body[l_j].desc.getIndexOf('>/',l_type_start+1)  THEN
                              LET l_type_end = l_body[l_j].desc.getIndexOf('>/',l_type_start+1)
                              LET l_type = l_body[l_j].desc.subString(l_type_start+2,l_type_end-1)
                              LET l_desc = l_body[l_j].desc.subString(1,l_type_start-1)
                           END IF
                        END IF
                        #END FUN-730016
 
                        #No.TQC-810014
                        IF g_lang != g_lang_arr[l_i] THEN
                             IF NOT cl_null(FGL_GETENV("TOPLINK")) THEN
                                LET l_desc = p_zta_gaq_dict(g_lang_arr[l_i],l_desc)
                             ELSE
                                LET l_desc = ""
                             END IF
                        END IF
                        INSERT INTO gaq_file(gaq01,gaq02,gaq03,gaq05,gaq06,gaq07) VALUES(l_feldname,g_lang_arr[l_i],l_desc,l_other,'N',l_type)   #No.FUN-660025  #FUN-730016
                        IF sqlca.sqlcode THEN
                           LET g_err1 = "insert gaq_file(" || l_feldname CLIPPED || ") error:" #No.FUN-660081
                           #CALL cl_err("insert gaq_file(" || l_feldname CLIPPED || ") error:",sqlca.sqlcode,1)  #No.FUN-660081
                           CALL cl_err3("ins","gaq_file",l_feldname,g_lang_arr[l_i],SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                        END IF
                        IF g_lang=g_lang_arr[l_i] THEN
                           LET l_type_array[l_j] = l_type      #FUN-73006
                        END IF
                        #END No.TQC-810014
                     END IF   #TQC-710048 add
                 END FOR
             END FOR
          END IF
       END IF
       IF l_sel MATCHES "[23]" THEN
          IF l_success='Y' THEN
             #No.FUN-A60050 -- start --
             IF cl_null(l_zta18) THEN
                LET l_zta18 = 'N'
             END IF
             #No.FUN-A60050 -- end --
             INSERT INTO zta_file(zta01,zta02,zta03,zta05,zta06,zta07,zta09,zta10,zta11,zta12,zta18)     #No.FUN-A60050
             VALUES(l_tabname,g_dbs,l_module,g_date,g_user,'T',l_zta09,'Y',l_zta11,l_zta12,l_zta18)           #No.FUN-A60050 
             IF sqlca.sqlcode THEN
                LET g_err1 = "insert into zta_file("||l_tabname||") error:"  #No.FUN-660081
                #CALL cl_err("insert into zta_file("||l_tabname||") error:",sqlca.sqlcode,1) #No.FUN-660081
                CALL cl_err3("ins","zta_file",l_tabname,g_dbs,SQLCA.sqlcode,"",g_err1,1)     #No.FUN-660081
                LET l_sql="drop table ",l_tabname
                EXECUTE IMMEDIATE l_sql
             ELSE
                LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                          " WHERE zs01 = '",l_tabname CLIPPED,"'",
                          "   AND zs02 = '",g_dbs CLIPPED,"'"
                PREPARE p_zta_imp_create_sqlfile_1_pre1 FROM l_sql
                EXECUTE p_zta_imp_create_sqlfile_1_pre1 INTO l_zs03
                FREE p_zta_imp_create_sqlfile_1_pre1
                IF l_zs03 IS NULL THEN
                   LET l_zs03 = 1
                END IF
                LET l_zs06='create table '||l_tabname CLIPPED||' {$'||UPSHIFT(l_module CLIPPED)||'/sch/'||l_tabname CLIPPED||'.sch.src}'
                INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,
                                    zs09,zs10,zs11,zs12)
                 VALUES(l_tabname,g_dbs,l_zs03,g_date,'p',l_zs06,
                           g_user,g_MODNO,'Y','N','N', g_tiptop_ver)
                IF sqlca.sqlcode THEN
                   LET g_err1 = "insert into zs_file("||l_tabname||") error:"  #No.FUN-660081
                   #CALL cl_err("insert into zs_file("||l_tabname||") error:",sqlca.sqlcode,1)  #No.FUN-660081
                   CALL cl_err3("ins","zs_file",l_tabname,l_zs03,SQLCA.sqlcode,"",g_err1,1)   #No.FUN-660081
                   LET l_sql="drop table ",l_tabname
                   EXECUTE IMMEDIATE l_sql
                   delete from zta_file where zta01=l_tabname
                ELSE
                  #start TQC-710048 modify
                  #CALL fgl_winmessage("Info","Create Table Success","info")
                   IF cl_null(g_errmsg) THEN
                      LET g_errmsg = g_dbs CLIPPED                            #FUN-9C0036
                   ELSE
                      LET g_errmsg = g_errmsg CLIPPED,"/",g_dbs CLIPPED       #FUN-9C0036
                   END IF
                  #end TQC-710048 modify
                   CALL p_zta_q("zta01='"||l_tabname CLIPPED||"'")
                   IF g_zta.zta02='ds' THEN
                    #No.FUN-A60022---start
                      IF os.Path.separator() = "/" THEN  
                         ERROR "r.s2 ds"
                         RUN "r.s2 ds" WITHOUT WAITING
                      ELSE
                         ERROR "rs2 ds"
                         RUN "rs2 ds" WITHOUT WAITING
                      END IF
                    #No.FUN-A60022---end
                   END IF
                   CALL p_zta_gsql_file(g_zta.zta01,g_zta.zta02) RETURNING l_result

                   #No.FUN-A60022---start
                   LET l_str = p_zta_set_db_type("sch")  #FUN-A80029

                   IF os.Path.chdir(os.Path.join(g_dir.top,DOWNSHIFT(l_module) CLIPPED || "/" || l_str)) THEN
                      CALL os.Path.copy(g_zta.zta01 CLIPPED || ".sch" , g_zta.zta01 CLIPPED || ".sch.src" ) RETURNING l_result2
                      LET l_str="ls "||g_zta.zta01 CLIPPED||".sch.src"
                      RUN l_str
                   END IF
                   #No.FUN-A60022---end
                END IF
             END IF
          END IF
       ELSE
          CALL p_zta_q("zta01='"||l_tabname CLIPPED||"'")
          CALL p_zta_gsql_file(g_zta.zta01,g_zta.zta02) RETURNING l_result
       END IF
       CALL l_channel.close()
       IF l_success='Y' THEN                         #FUN-9C0036
          CALL p_zta_parse_view(l_tabname,'a','')    #FUN-990043
       END IF
    ELSE
       display "l_file is null"
       RETURN
    END IF
  #start FUN-6A0052 add
   ELSE    #g_azp1[l_ac].tab_syn='S'
       LET g_plant = g_azp1[l_ac].azp01 CLIPPED
       LET g_dbs   = g_azp1[l_ac].azp03 CLIPPED
       CALL p_zta_set_erpdb()                #連結資料庫
       IF (SQLCA.SQLCODE) THEN CONTINUE FOR END IF            #TQC-710048 add
 
      #1.寫入gat_file
       FOR l_i=1 TO g_lang_arr.getLength()
           INSERT INTO gat_file(gat01,gat02,gat06,gat07)      #No.FUN-A60050
           VALUES(l_tabname,g_lang_arr[l_i],l_module,l_zta09) #No.FUN-A60050
           #IF sqlca.sqlcode=-239 THEN              #TQC-790092
           IF cl_sql_dup_value(SQLCA.SQLCODE) THEN  #TQC-790092
              UPDATE gat_file SET gat06=l_module,gat07=l_zta09  #No.FUN-A60050
               WHERE gat01=l_tabname
                 AND gat02=g_lang_arr[l_i]
           END IF
       END FOR
 
      #2.寫入zta_file
       BEGIN WORK
       LET g_zta.zta01 = l_tabname CLIPPED
       LET g_zta.zta02 = g_azp1[l_ac].azp03 CLIPPED
       LET g_zta.zta03 = l_module CLIPPED                  #No.FUN-A60050
       LET g_zta.zta05 = g_today
       LET g_zta.zta06 = g_user
       LET g_zta.zta07 = g_azp1[l_ac].tab_syn  CLIPPED
       LET g_zta.zta09 = l_zta09 CLIPPED                   #No.FUN-A60050
       LET g_zta.zta10 = 'N'
       LET g_zta.zta17 = g_azp1[l_ac].syn_db CLIPPED
       LET g_zta.zta18 = l_zta18 CLIPPED                   #No.FUN-A60050
       #No.FUN-A60050 -- start --
       IF cl_null(g_zta.zta18) THEN
          LET g_zta.zta18 = 'N'
       END IF
       #No.FUN-A60050 -- end --
       INSERT INTO zta_file VALUES(g_zta.*)
       IF sqlca.sqlcode THEN
          LET g_err="insert zta data error(a):",g_zta.zta01
          #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
          CALL cl_err3("ins","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
          ROLLBACK WORK
       ELSE
          COMMIT WORK
       END IF
 
      #3.產生Table      
       CALL p_zta_gensql() 
   END IF
   #No.FUN-9A0077 -- start --
  ELSE
   IF g_ods_end = TRUE THEN
      CALL p_zta_cr_parse_view(g_zta.zta01,'a')    #No.FUN-9A0077
   END IF
   #No.FUN-9A0077 -- end --
  END IF             #FUN-6A0052 add
 END FOR             #FUN-6A0052 add
 #start TQC-710048 add
 IF NOT cl_null(g_errmsg) THEN
   LET g_errmsg = g_errmsg CLIPPED," Create Table Success"
   CALL fgl_winmessage("Info",g_errmsg,"info")
 END IF
 #end TQC-710048 add
 
ELSE                 #FUN-6A0052 add
 LET INT_FLAG = 0    #FUN-6A0052 add
 RETURN              #FUN-6A0052 add
END IF               #FUN-6A0052 add
 
    LET g_plant = g_plant_o                           #FUN-6A0052 add
    LET g_dbs   = g_dbs_o                             #FUN-6A0052 add
    CALL p_zta_set_erpdb()        #連結資料庫         #FUN-6A0052 add
    CALL p_zta_q("zta01='"||l_tabname CLIPPED||"'")   #FUN-6A0052 add
 
END FUNCTION
#end FUN-6A0052 add
 
FUNCTION p_zta_get_desc(p_str)
DEFINE p_str      STRING,
       l_x        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
       l_y        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
       l_length   LIKE type_file.num5      #No.FUN-680135 SMALLINT
 
    #IF g_db_type="IFX" THEN
    CASE g_db_type              #FUN-730016
     WHEN "IFX"                 #FUN-730016  
       LET l_length=LENGTH(p_str)
       FOR l_x=1 TO l_length
           IF p_str.subString(l_x,l_x)="{" THEN
              FOR l_y=l_x+1 TO l_length
                  IF p_str.subString(l_y,l_y)="}" THEN
                     LET p_str=p_str.subString(l_x+1,l_y-1)
                     RETURN p_str
                  END IF
              END FOR
           END IF
       END FOR
 
     WHEN "ORA"                 #FUN-730016  
       LET l_length=LENGTH(p_str)
       FOR l_x=1 TO l_length
           IF l_x!=l_length THEN
              IF p_str.subString(l_x,l_x+1)="/*" THEN
                 FOR l_y=l_x+2 TO l_length
                     IF l_y!=l_length THEN
                        IF p_str.subString(l_y,l_y+1)="*/" THEN
                           LET p_str=p_str.subString(l_x+2,l_y-1)
                           RETURN p_str
                        END IF
                     END IF
                 END FOR
              END IF
           END IF
       END FOR
 
     WHEN "MSV"                 #FUN-730016  
     #No.FUN-A60022---start  
       LET l_length=LENGTH(p_str)
       FOR l_x=1 TO l_length
           IF l_x!=l_length THEN
              IF p_str.subString(l_x,l_x+1)="/*" THEN
                 FOR l_y=l_x+2 TO l_length
                     IF l_y!=l_length THEN
                        IF p_str.subString(l_y,l_y+1)="*/" THEN
                           LET p_str=p_str.subString(l_x+2,l_y-1)
                           RETURN p_str
                        END IF
                     END IF
                 END FOR
              END IF
           END IF
       END FOR 
     #No.FUN-A60022---end 
    END CASE                    #FUN-730016
END FUNCTION
 
FUNCTION p_zta_imp_sqlfile()
  DEFINE l_sql           STRING,
         l_sql_t         STRING,
         l_file          STRING,
         l_tabname       LIKE type_file.chr20,    #No.FUN-680135 VARCHAR(20)
         l_fldname       LIKE gaq_file.gaq01,     #No.FUN-680135 VARCHAR(15)
         l_command       STRING,
         l_command_t     STRING,
         l_command_bak   LIKE gaq_file.gaq03,     #No.FUN-680135 VARCHAR(255)
         l_tablist       STRING,
         l_i             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_j             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_x             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_y             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_channel       BASE.CHANNEL,
         l_length        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_zs03          LIKE zs_file.zs03,
         l_count         LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_error_list    base.channel,
         l_complete      LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_str           STRING,
         l_idxname       LIKE gaq_file.gaq01,     #No.FUN-680135 VARCHAR(15)
         l_fld_desc      LIKE type_file.chr1000,  #No.FUN-680135 VARCHAR(100)
         l_cmd_stat      LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_readfile      base.channel,
         l_out           STRING,
         l_result        STRING
 
   #start FUN-6A0052 add
   #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
    IF cl_null(g_MODNO) THEN
       PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
          ON IDLE g_idle_seconds
             CALL cl_on_idle()
       END PROMPT
#TQC-860017 end  
       display g_MODNO
    END IF
   #end FUN-6A0052 add
 
   #LET l_command="ls $TEMPDIR/zta_impfile_loc"           #FUN-6A0052 mark
    LET l_command="ls /u3/top/zta/FUN/zta_impfile_loc"   #FUN-6A0052
    RUN l_command RETURNING l_result
    IF l_result !=0 THEN
       LET l_file=cl_server_file(g_dir.top)
    ELSE
       LET l_channel=base.channel.create()
      #CALL l_channel.openfile(g_dir.tempdir||'/zta_impfile_loc' , "r" )   #FUN-6A0052 mark
       CALL l_channel.openfile("/u3/top/zta/FUN/zta_impfile_loc" , "r" )  #FUN-6A0052
       IF STATUS THEN
          CALL l_channel.close()
          LET l_file=cl_server_file(g_dir.top)
       ELSE
          LET l_command=''
          WHILE l_channel.read(l_command)
          END WHILE
          CALL l_channel.close()
display l_command.getLength()
          IF l_command.getLength()=0 THEN
             LET l_file=cl_server_file(g_dir.top)
          ELSE
             LET l_file=cl_server_file(l_command)
          END IF
       END IF
    END IF
 
    LET l_length=l_file.getLength()
    IF l_length > 0 THEN
       LET l_channel=base.channel.create()
       CALL l_channel.openfile( l_file, "r" )
       IF STATUS THEN
          CALL cl_err("","zta-027",1)
          CALL l_channel.close()
          RETURN
       END IF
       LET l_i=1
 
       LET l_sql = g_dir.tempdir CLIPPED,"/","zta_alter_err"
       LET l_error_list=base.channel.create()
       CALL l_error_list.setdelimiter("")
       CALL l_error_list.openfile(l_sql CLIPPED, "w" )
       CALL l_error_list.write("     err_no  db_name       command")
 
       WHILE l_channel.read(l_command)
          IF l_complete='Y' THEN
             LET l_str=''
             LET l_complete='N'
          END IF
          LET l_tabname=''
          LET l_command_bak=l_command.toLowerCase()
          LET l_length=LENGTH(l_command_bak)
          FOR l_x=1 TO l_length
              IF l_command_bak[l_x,l_x]=';' THEN
                 LET l_length=l_x
                 LET l_complete='Y'
                 LET l_str=l_str CLIPPED,l_command_bak CLIPPED
                 LET l_command_bak=l_str
              END IF
          END FOR
          IF l_complete='N' THEN
             LET l_str=l_str CLIPPED,l_command_bak CLIPPED
             CONTINUE WHILE
          ELSE
             LET l_command_bak=l_str CLIPPED
          END IF
          CASE
            WHEN l_command_bak[1,5] = "alter"
              FOR l_x=7 TO l_length
                  IF l_length-l_x>3 THEN
                     IF l_command_bak[l_x,l_x+4]="table" THEN
                        FOR l_y=l_x+5 TO l_length
                            IF l_length-l_y>1 THEN
                               CASE
                                 WHEN l_command_bak[l_y,l_y+2]="add"
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=1
                                #WHEN l_command_bak[l_y,l_y+2]="mod"
                                 WHEN l_command_bak[l_y,l_y+5]="modify"  #TQC-730109
 
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=2
                                #WHEN l_command_bak[l_y,l_y+2]="dro"
                                 WHEN l_command_bak[l_y,l_y+3]="drop"    #TQC-730109
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=3
                               END CASE
                            END IF
                        END FOR
                     END IF
                  END IF
              END FOR
            WHEN l_command_bak[1,19] = "create unique index"
              FOR l_x=21 TO l_length
                  IF l_length-l_x>0 THEN
                     IF l_command_bak[l_x,l_x+1]="on" THEN
                        FOR l_y=l_x+2 TO l_length
                            IF l_command_bak[l_y,l_y]='(' THEN
                               display 'table:',l_command_bak[l_x+3,l_y-1]
                               LET l_tabname=l_command_bak[l_x+3,l_y-1]
                               display 'command:',l_command_bak CLIPPED
                            END IF
                        END FOR
                     END IF
                  END IF
              END FOR
            WHEN l_command_bak[1,12] = "create index"
              FOR l_x=14 TO l_length
                  IF l_length-l_x>0 THEN
                     IF l_command_bak[l_x,l_x+1]="on" THEN
                        FOR l_y=l_x+2 TO l_length
                            IF l_command_bak[l_y,l_y]='(' THEN
                               display 'table:',l_command_bak[l_x+3,l_y-1]
                               LET l_tabname=l_command_bak[l_x+3,l_y-1]
                               display 'command:',l_command_bak CLIPPED
                            END IF
                        END FOR
                     END IF
                  END IF
              END FOR
            WHEN l_command_bak[1,10] = "drop index"
              FOR l_x=12 TO l_length-1
                  IF l_command_bak[l_x,l_x]!=' ' THEN
                     LET l_idxname=l_command_bak[l_x,l_length-1] CLIPPED
                     #IF g_db_type="IFX" THEN
                     CASE g_db_type              #FUN-730016
                      WHEN "IFX"                 #FUN-730016  
                        LET l_sql="select t.tabname from systables t,sysindexes i",
                                  " where t.tabid=i.tabid",
                                  "   and i.idxname='",l_idxname CLIPPED,"'"
                        PREPARE p_zta_imp_sqlfile_pre3 FROM l_sql
                        EXECUTE p_zta_imp_sqlfile_pre3 INTO l_tabname
                        IF sqlca.sqlcode THEN
                           LET l_sql=sqlca.sqlcode USING '-----------',
                               COLUMN 14,g_dbs CLIPPED,             #FUN-9C0036
                               COLUMN 28,l_command_bak CLIPPED
                           CALL l_error_list.write(l_sql)
                           CONTINUE WHILE
                        END IF
                        FREE p_zta_imp_sqlfile_pre3
 
                      WHEN "ORA"                 #FUN-730016  
                        LET l_sql="select lower(table_name) from user_indexes",
                                  " where lower(index_name)='",l_idxname CLIPPED,"'"
                        PREPARE p_zta_imp_sqlfile_pre4 FROM l_sql
                        EXECUTE p_zta_imp_sqlfile_pre4 INTO l_tabname
                        IF sqlca.sqlcode THEN
                           LET l_sql=sqlca.sqlcode USING '-----------',
                               COLUMN 14,g_dbs CLIPPED,               #FUN-9C0036
                               COLUMN 28,l_command_bak CLIPPED
                           CALL l_error_list.write(l_sql)
                           CONTINUE WHILE
                        END IF
                        FREE p_zta_imp_sqlfile_pre4
 
                      WHEN "MSV"                 #FUN-730016  
                      #No.FUN-A60022---start  
                        LET l_sql=" select a.name from sys.objects a,sys.indexes b ",
                                  " where a.object_id =b.object_id and b.name='",l_idxname CLIPPED,"'"
                        PREPARE p_zta_imp_sqlfile_pref FROM l_sql
                        EXECUTE p_zta_imp_sqlfile_pref INTO l_tabname
                        IF sqlca.sqlcode THEN
                           LET l_sql=sqlca.sqlcode USING '-----------',
                               COLUMN 14,g_dbs,
                               COLUMN 28,l_command_bak CLIPPED
                           CALL l_error_list.write(l_sql)
                           CONTINUE WHILE
                        END IF
                        FREE p_zta_imp_sqlfile_pref
                      #No.FUN-A60022---end 
                     END CASE                    #FUN-730016
                     display 'table:',l_tabname
                     display 'command:',l_command_bak CLIPPED
                     EXIT FOR
                  END IF
              END FOR
          END CASE
          IF cl_null(l_tabname) THEN
             LET l_sql="can't parse" ,
                 COLUMN 14,g_dbs CLIPPED,        #FUN-9C0036
                 COLUMN 28,l_command_bak CLIPPED
             CALL l_error_list.write(l_sql)
             CONTINUE WHILE
          END IF
 
          IF l_command_bak[l_length,l_length]=';' THEN
             LET l_command_bak=l_command_bak[1,l_length-1]
          END IF
 
          BEGIN WORK
          LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                    " WHERE zs01 = '",l_tabname CLIPPED,"'",
                    "   AND zs02 = '",g_dbs CLIPPED,"'"
          PREPARE p_zta_imp_sqlfile_pre1 FROM l_sql
          EXECUTE p_zta_imp_sqlfile_pre1 INTO l_zs03
          FREE p_zta_imp_sqlfile_pre1
          IF l_zs03 IS NULL THEN
             LET l_zs03 = 1
          END IF
          LET l_sql="SELECT COUNT(*) FROM ztb_file",
                    " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                    "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
                    "   AND ztb05='c'"
          PREPARE p_zta_imp_sqlfile_pre2 FROM l_sql
          EXECUTE p_zta_imp_sqlfile_pre2 INTO l_count
          FREE p_zta_imp_sqlfile_pre2
          LET l_sql_t=l_command_bak
          LET l_sql=''
          FOR l_j=1 TO l_sql_t.getLength()
              LET l_sql=l_sql,l_sql_t.subString(l_j,l_j)
              IF l_sql_t.subString(l_j,l_j)="'" THEN
                 LET l_sql=l_sql,"'"
              END IF
          END FOR
          IF l_count > 0 THEN
              LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                        " VALUES('",l_tabname CLIPPED,"','",
                                    g_dbs CLIPPED,"',",
                                    l_zs03 CLIPPED,",'",
                                    g_date CLIPPED,"','c','",
                                    l_sql CLIPPED,";','",
#                                    l_command_bak CLIPPED,";','",
                                    g_user CLIPPED,"','",
                                    g_MODNO CLIPPED,"','Y','N','N','",
                                    g_tiptop_ver CLIPPED,"')"
          ELSE
              LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                        " VALUES('",l_tabname CLIPPED,"','",
                                    g_dbs CLIPPED,"',",
                                    l_zs03 CLIPPED,",'",
                                    g_date CLIPPED,"','p','",
                                    l_sql CLIPPED,";','",
#                                    l_command_bak CLIPPED,";','",
                                    g_user CLIPPED,"','",
                                    g_MODNO CLIPPED,"','Y','N','N','",
                                    g_tiptop_ver CLIPPED,"')"
          END IF
          EXECUTE IMMEDIATE l_sql
          IF sqlca.sqlcode THEN
             LET l_sql=sqlca.sqlcode using '-----------',
                 COLUMN 14,g_dbs CLIPPED,        #FUN-9C0036
                 COLUMN 28,"insert zs error(gensql):",l_tabname
             CALL l_error_list.write(l_sql)
             ROLLBACK WORK
             CONTINUE WHILE
          END IF
          IF g_edition="C" THEN
             LET l_sql_t=l_command_bak
             LET l_sql=''
             FOR l_j=1 TO l_sql_t.getLength()
                 LET l_sql=l_sql,l_sql_t.subString(l_j,l_j)
                 IF l_sql_t.subString(l_j,l_j)="'" THEN
                    LET l_sql=l_sql,"'"
                 END IF
             END FOR
             IF l_count > 0 THEN
                LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                          " VALUES('",l_tabname CLIPPED,"','",
                                     g_dbs CLIPPED,"',",
                                     l_zs03 CLIPPED,",'",
                                     g_date CLIPPED,"','c','",
                                     l_sql CLIPPED,";','",
#                                     l_command_bak CLIPPED,";','",
                                     g_user CLIPPED,"','",
                                     g_MODNO CLIPPED,
                                     "','Y','N','N','",
                                     g_tiptop_ver CLIPPED,"')"
             ELSE
                LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                          " VALUES('",l_tabname CLIPPED,"','",
                                     g_dbs CLIPPED,"',",
                                     l_zs03 CLIPPED,",'",
                                     g_date CLIPPED,"','p','",
                                     l_sql CLIPPED,";','",
#                                     l_command_bak CLIPPED,";','",
                                     g_user CLIPPED,"','",
                                     g_MODNO CLIPPED,
                                     "','Y','N','N','",
                                     g_tiptop_ver CLIPPED,"')"
             END IF
             EXECUTE IMMEDIATE l_sql
          END IF
          IF sqlca.sqlcode THEN
             LET l_sql=sqlca.sqlcode using '-----------',
                 COLUMN 14,g_dbs CLIPPED,             #FUN-9C0036
                 COLUMN 28,"insert zs@std_server error(gensql):",l_tabname
             CALL l_error_list.write(l_sql)
             ROLLBACK WORK
             CONTINUE WHILE
          END IF
          LET l_fld_desc=''
          #IF g_db_type="IFX" THEN
          CASE g_db_type              #FUN-730016
           WHEN "IFX"                 #FUN-730016  
             IF l_command.getIndexOf('{',1) THEN
                LET l_fld_desc=p_zta_get_desc(l_command)  --前面l_i先加1了
             END IF
 
           WHEN "ORA"                 #FUN-730016  
             IF l_command.getIndexOf('/*',1) THEN
                LET l_fld_desc=p_zta_get_desc(l_command)  --前面l_i先加1了
             END IF
 
           WHEN "MSV"                 #FUN-730016  
           #No.FUN-A60022---start 
             IF l_command.getIndexOf('/*',1) THEN
                LET l_fld_desc=p_zta_get_desc(l_command)  --前面l_i先加1了
             END IF    
           #No.FUN-A60022---end
          END CASE                    #FUN-730016
 
          IF l_fld_desc is not null THEN
             LET l_command_t=l_command.trim()
             LET l_x=l_command_t.getIndexOf('(',1)
             LET l_y=l_command_t.getIndexOf(' ',l_x)
             LET l_fldname=l_command_t.subString(l_x+1,l_y-1)
             IF l_cmd_stat=1 or l_cmd_stat=2 THEN
                FOR l_j=1 TO g_lang_arr.getLength()
                    IF g_lang=g_lang_arr[l_j] THEN
                       INSERT INTO gaq_file(gaq01,gaq02,gaq03,gaq06) VALUES(l_fldname,g_lang,l_fld_desc,'N')   #No.FUN-660025
                       IF sqlca.sqlcode THEN
                          IF l_cmd_stat=2 THEN
                             UPDATE gaq_file SET gaq03=l_fld_desc
                              WHERE gaq01=l_fldname AND gaq02=g_lang
#                             IF sqlca.sqlcode or sqlca.sqlerrd[3]=0 THEN
#                                CALL cl_err("update gaq_file(" || l_fldname CLIPPED || ") error:",sqlca.sqlcode,1)
#                             END IF
#                          ELSE
#                             CALL cl_err("insert gaq_file(" || l_fldname CLIPPED || ") error:",sqlca.sqlcode,1)
                          END IF
                       END IF
                    ELSE
                       INSERT INTO gaq_file(gaq01,gaq02,gaq06) VALUES(l_fldname,g_lang_arr[l_j],'N')   #No.FUN-660025
#                       IF sqlca.sqlcode THEN
#                          CALL cl_err("insert gaq_file(" || l_fldname CLIPPED || ") error:",sqlca.sqlcode,1)
#                       END IF
                    END IF
                END FOR
             END IF
          END IF
          IF l_i=1 THEN
             LET l_tablist="zta01='",l_tabname CLIPPED,"' "
          ELSE
             LET l_tablist=l_tablist," or zta01='",l_tabname CLIPPED,"' "
          END IF
display "l_fld_desc:",l_fld_desc
display "l_command_bak:",l_command_bak
          EXECUTE IMMEDIATE l_command_bak
          IF sqlca.sqlcode THEN
             LET l_sql=sqlca.sqlcode using '-----------',
                 COLUMN 14,g_dbs CLIPPED,     #FUN-9C0036
                 COLUMN 28,l_command_bak CLIPPED
             CALL l_error_list.write(l_sql)
             ROLLBACK WORK
             LET l_sql="DELETE FROM zs_file WHERE zs01='",l_tabname CLIPPED,"'",
                                            " AND zs02='",g_dbs CLIPPED,"'",
                                            " AND zs03='",l_zs03 CLIPPED,"'"
             EXECUTE IMMEDIATE l_sql
             IF g_edition="C" THEN
                LET l_sql="DELETE FROM zs_file@",g_std_server CLIPPED,
                          " WHERE zs01='",l_tabname CLIPPED,"' ",
                          "   AND zs02='",g_dbs CLIPPED,"' ",
                          "   AND zs03='",l_zs03 CLIPPED,"'"
                EXECUTE IMMEDIATE l_sql
             END IF
             CONTINUE WHILE
          ELSE
             COMMIT WORK
          END IF
          CALL p_zta_show()
          LET l_i=l_i+1
       END WHILE
 
       CALL l_channel.close()
       LET l_str="chmod 777 ",g_dir.tempdir CLIPPED,"/","zta_alter_err 2>/dev/null"
       RUN l_str
       LET l_str="cat ",g_dir.tempdir CLIPPED,"/","zta_alter_err |wc -l>zta_alter.out"
       RUN l_str
       LET l_readfile=base.channel.create()
       LET l_str=g_dir.tempdir CLIPPED,"/zta_alter.out"
       CALL l_readfile.openfile(l_str,"r")
       WHILE l_readfile.read(l_out)
       END WHILE
       CALL l_readfile.close()
display "l_out:",l_out
       IF l_out.trim()!='3' THEN
         #LET l_str="$FGLRUN $TOP/azz/42r/p_view.42r ",g_dir.tempdir CLIPPED,"/","zta_alter_err"," 66"   #FUN-B30176  mark
          LET l_str=FGL_GETENV("FGLRUN") ," ",FGL_GETENV("TOP"),os.Path.separator(),"azz",os.Path.separator(),    #FUN-B30176 #TQC-B70185 add " "
                    "42r",os.Path.separator(),"p_view.42r ",g_dir.tempdir CLIPPED,os.Path.separator(),"zta_alter_err"," 66"    #FUN-B30176
          RUN l_str
       ELSE
          CALL fgl_winmessage("Info","Alter Success","Info")
       END IF
       CALL p_zta_q(l_tablist)
       IF g_zta.zta02='ds' THEN
        #No.FUN-A60022---start
          IF os.Path.separator() = "/" THEN  
             ERROR "r.s2 ds"
             RUN "r.s2 ds" WITHOUT WAITING
          ELSE
             ERROR "rs2 ds"
             RUN "rs2 ds" WITHOUT WAITING
          END IF
        #No.FUN-A60022---end
       END IF
    ELSE
       display "l_file is null"
       RETURN
    END IF
END FUNCTION
 
#start FUN-6A0052 add
FUNCTION p_zta_imp_sqlfile_1()
  DEFINE l_sql           STRING,
         l_sql_t         STRING,
         l_file          STRING,
         l_tabname       LIKE type_file.chr20,    #No.FUN-680135 VARCHAR(20)
         l_fldname       LIKE gaq_file.gaq01,     #No.FUN-680135 VARCHAR(15)
         l_command       STRING,
         l_command_t     STRING,
         l_command_bak   LIKE gaq_file.gaq03,     #No.FUN-680135 VARCHAR(255)
         l_tablist       STRING,
         l_i             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_j             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_x             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_y             LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_channel       BASE.CHANNEL,
         l_length        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_zs03          LIKE zs_file.zs03,
         l_count         LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_error_list    base.channel,
         l_complete      LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
         l_str           STRING,
         l_idxname       LIKE gaq_file.gaq01,     #No.FUN-680135 VARCHAR(15)
         l_fld_desc      LIKE type_file.chr1000,  #No.FUN-680135 VARCHAR(100)
         l_desc          STRING,                  #FUN-730016
         l_type          LIKE gaq_file.gaq07,     #FUN-730016
         l_type_start    LIKE type_file.num5,     #FUN-730016
         l_type_end      LIKE type_file.num5,     #FUN-730016
         l_cmd_stat      LIKE type_file.num5,     #No.FUN-680135 SMALLINT
         l_readfile      base.channel,
         l_out           STRING,
         l_result        STRING,
         l_msg           STRING,                  #FUN-6A0052 add
         l_zta07         LIKE zta_file.zta07      #FUN-6A0052 add
DEFINE   l_fieldname     LIKE ztb_file.ztb03      #No.FUN-7A0029
DEFINE   l_m             LIKE type_file.num5      #No.FUN-7A0029
DEFINE   l_start         LIKE type_file.num5      #No.FUN-7A0029
DEFINE   l_end           LIKE type_file.num5      #No.FUN-7A0029
DEFINE   l_dic_desc      LIKE type_file.chr1000   #No.TQC-810014
DEFINE   l_command_sql   STRING                   #No.FUN-850112
DEFINE   l_ztd12         LIKE ztd_file.ztd12      #No.FUN-950079
DEFINE   l_pk            LIKE ztd_file.ztd03      #No.FUN-950079
DEFINE   l_cmd           STRING                   #No.FUN-950079
DEFINE   l_ods_tab       DYNAMIC ARRAY OF LIKE zta_file.zta01    #FUN-9A0077
DEFINE   l_ods_tab_t     DYNAMIC ARRAY OF LIKE zta_file.zta01    #FUN-9A0077
DEFINE   l_indexname     STRING,                  #No.FUN-A60022 
         p_cmd           base.StringBuffer        #No.FUN-A60022
DEFINE   l_ze03          LIKE type_file.chr1000   #No.FUN-A60022
DEFINE   l_ze01          LIKE ze_file.ze01        #No.FUN-A60022  
DEFINE   l_lang          LIKE type_file.chr6      #No.FUN-A60022
DEFINE   l_module        LIKE gat_file.gat06      #No.FUN-A60022
DEFINE   l_cmd2          LIKE zs_file.zs06        #No.FUN-A60022
DEFINE   l_name          LIKE zs_file.zs06        #No.FUN-A60022
DEFINE   l_default       LIKE ztb_file.ztb11      #No.FUN-A60022
#No.FUN-A90062---start
DEFINE   q_def_cmd       LIKE zs_file.zs06        
DEFINE   l_idx           DYNAMIC ARRAY of RECORD
                             name LIKE type_file.chr1000,
                             sql  STRING
                         END RECORD
DEFINE   l_unique        LIKE type_file.chr1
DEFINE   l_pk_cnt        LIKE type_file.num5,
         l_cnt           LIKE type_file.num5
#No.FUN-A90062---end 

   IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
   #start FUN-6A0052 add
   #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
    IF cl_null(g_MODNO) THEN
       PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
          ON IDLE g_idle_seconds
             CALL cl_on_idle()
       END PROMPT
#TQC-860017 end  
       display g_MODNO
    END IF
   #end FUN-6A0052 add
 
   #FUN-6A0022 -- start --
   #LET l_command="ls $TEMPDIR/zta_impfile_loc"          
   #LET l_command="ls /u3/top/zta/FUN/zta_impfile_loc"   

    #取得放置 alter sql 的檔案路徑
    LET l_command = p_zta_impfile_position()

    IF NOT os.Path.exists(l_command) THEN
       LET l_file=cl_server_file(g_dir.top)
    ELSE
       LET l_channel=base.channel.create()
       CALL l_channel.openfile(l_command , "r" ) 
       IF STATUS THEN
          CALL l_channel.close()
          IF os.Path.separator() = "/" THEN  
             LET l_cmd2=FGL_GETENV("TOP")
             FOR l_i=1 TO l_str.getLength()
                 IF l_cmd2[l_i,l_i]="\\" THEN 
                    LET l_cmd2[l_i,l_i]='/'
                 END IF 
                                
             END FOR 
          END IF 
          LET g_dir.top=l_cmd2
   #No.FUN-A60022---end 
          LET l_file=cl_server_file(g_dir.top)
       ELSE
          LET l_command=''
          WHILE l_channel.read(l_command)
          END WHILE
          CALL l_channel.close()
          IF l_command.getLength()=0 THEN
             LET l_file=cl_server_file(g_dir.top)
          ELSE
             LET l_file=cl_server_file(l_command)
          END IF
       END IF
    END IF
 
    LET l_length=l_file.getLength()      #FUN-6A0052 add
    IF l_length = 0 THEN RETURN END IF   #FUN-6A0052 add
 
    LET g_plant_o = g_plant   #FUN-6A0052 add
    LET g_dbs_o = g_dbs       #FUN-6A0052 add
    LET g_errmsg = ''         #TQC-710048 add
 
   #CALL p_zta_seldb1("A")   #選擇要Alter那些資料庫          #FUN-6A0052 add
    CALL p_zta_seldb2("A")   #選擇要Alter那些資料庫          #FUN-9C0036 add
 
IF NOT INT_FLAG THEN                                         #FUN-6A0052 add
 LET g_ods_end = FALSE                                       #FUN-9A0077

 FOR l_ac=1 TO g_cnt1                                        #FUN-6A0052 add
  IF g_azp1[l_ac].select='Y' THEN          #要Alter該資料庫   #FUN-6A0052 add  #FUN-9C0036
    LET g_plant = g_azp1[l_ac].azp01 CLIPPED   #FUN-9C0036
    LET g_dbs   = g_azp1[l_ac].azp03 CLIPPED   #FUN-9C0036
    CALL p_zta_set_erpdb()                #連結資料庫        #FUN-6A0052 add
    IF (SQLCA.SQLCODE) THEN CONTINUE FOR END IF              #TQC-710048 add
    LET l_str = ""                                           #No.FUN-7A0029
    LET l_length=l_file.getLength()
    IF l_length > 0 THEN
       LET l_channel=base.channel.create()
       CALL l_channel.openfile( l_file, "r" )
       IF STATUS THEN
          CALL cl_err("","zta-027",1)
          CALL l_channel.close()
          RETURN
       END IF
       LET l_i=1
 
       LET l_sql = g_dir.tempdir CLIPPED,"/","zta_alter_err"
       LET l_error_list=base.channel.create()
       CALL l_error_list.setdelimiter("")
       CALL l_error_list.openfile(l_sql CLIPPED, "w" )
       CALL l_error_list.write("db_name     command") #No.FUN-7A0029
       CALL l_error_list.write("error_no    err_message   ") #No.FUN-7A0029
       CALL l_error_list.write("----------- ---------------------------------------------------------------------------------")
 
       WHILE l_channel.read(l_command)
          IF l_complete='Y' THEN
             LET l_str=''
             LET l_complete='N'
          END IF
          LET g_plant_status = 0                                      #FUN-9C0036
          LET l_tabname=''
          LET l_command_sql=l_command                  #No.FUN-850112
          LET l_command_bak=l_command.toLowerCase()
          LET l_length=LENGTH(l_command_bak)
          FOR l_x=1 TO l_length
              IF l_command_bak[l_x,l_x]=';' THEN
                 LET l_length=l_x
                 LET l_complete='Y'
                 LET l_str=l_str CLIPPED,l_command_bak CLIPPED
                 LET l_command_bak=l_str
              END IF
          END FOR
          IF l_complete='N' THEN
             LET l_str=l_str CLIPPED,l_command_bak CLIPPED
             CONTINUE WHILE
          ELSE
             LET l_command_bak=l_str CLIPPED
          END IF
          CASE
            WHEN l_command_bak[1,5] = "alter"
              FOR l_x=7 TO l_length
                  IF l_length-l_x>3 THEN
                     IF l_command_bak[l_x,l_x+4]="table" THEN
                        FOR l_y=l_x+5 TO l_length
                            IF l_length-l_y>1 THEN
                               CASE
                                 WHEN l_command_bak[l_y,l_y+2]="add" AND (l_x+6 < l_y-1)  #No.FUN-950079
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]    
                                      IF l_ac = 1 THEN LET l_ods_tab[l_ods_tab.getLength()+1]=l_tabname  END IF  #FUN-9A0077
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=1
                                      #No.FUN-7A0029
                                      IF cl_null(FGL_GETENV("TOPLINK")) THEN
                                         LET l_str = l_command_bak CLIPPED
                                         #判斷 constraint 名稱是否符合客製規範
                                         IF l_str.getIndexOf('constraint',1) > 0 THEN
                                            LET l_start = l_str.getIndexOf('constraint',1) + 11
                                            LET l_end = l_str.getIndexOf('primary',l_start)
                                            IF l_end > 0 THEN
                                               LET l_str = l_str.subString(l_start,l_end-2)
                                               LET l_str = l_str.trim()
                                               LET l_m = l_str.getLength()
                                               IF l_str.subString(1,4) != "tpc_" OR  l_m < 8 
                                               THEN
                                                  LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED        #FUN-9C0036
                                                  CALL l_error_list.write(l_sql) 
                                                  LET l_sql = "zta-039", COLUMN 13,cl_getmsg("zta-039",g_lang)
                                                  CALL l_error_list.write(l_sql) 
                                                  CONTINUE WHILE
                                               ELSE
                                                  IF (l_m > 7 AND l_str.subString(l_m-2,l_m) != "_pk") 
                                                  THEN 
                                                      LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED     #FUN-9C0036
                                                      CALL l_error_list.write(l_sql)
                                                      LET l_sql = "zta-039", COLUMN 13, cl_getmsg("zta-039",g_lang)
                                                      CALL l_error_list.write(l_sql) 
                                                      CONTINUE WHILE
                                                  END IF
                                               END IF
                                            END IF
                                         ELSE
                                            #判斷欄位名稱是否符合客製規範
                                            LET l_start = ""
                                            FOR l_m = l_y+3 TO l_length
                                                IF l_command_bak[l_m,l_m] = "(" THEN
                                                   LET l_start = l_m + 1
                                                ELSE
                                                   IF l_command_bak[l_m,l_m] = " " THEN
                                                      IF l_start IS NOT NULL AND l_end IS NOT NULL THEN
                                                         LET l_fieldname = l_command.subString(l_start,l_end)  #No.FUN-850112       
                                                         display "l_fieldname:",l_fieldname," s:",l_start," e:",l_end
                                                         IF l_tabname[1,3] = "tc_" THEN
                                                            IF l_fieldname[1,3] != 'tc_' THEN
                                                               LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED     #FUN-9C0036
                                                               CALL l_error_list.write(l_sql)
                                                               LET l_sql = cl_getmsg("zta-037",g_lang)
                                                               LET l_sql = "zta-037", COLUMN 13, cl_replace_str(l_sql,'%1','tc')
                                                               CALL l_error_list.write(l_sql) 
                                                               CONTINUE WHILE
                                                            END IF
                                                         ELSE
                                                            IF l_fieldname[1,3] != 'ta_' THEN
                                                               LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED     #FUN-9C0036
                                                               CALL l_error_list.write(l_sql)
                                                               LET l_sql = cl_getmsg("zta-037",g_lang)
                                                               LET l_sql = "zta-037", COLUMN 13,cl_replace_str(l_sql,'%1','ta')
                                                               CALL l_error_list.write(l_sql) 
                                                               CONTINUE WHILE
                                                            END IF
                                                         END IF
                                                         #MOD-B70006   add begin-----------------------------------
                                                         IF (l_tabname[1,3] = "tc_" AND l_fieldname[1,3] = 'tc_')
                                                            OR l_fieldname[1,3] = 'ta_' THEN
                                                            EXIT FOR
                                                         END IF
                                                         #MOD-B70006   add end-------------------------------------
                                                      END IF
                                                   ELSE
                                                      IF l_start IS NOT NULL THEN
                                                         LET l_end = l_m
                                                      END IF
                                                   END IF
                                                END IF
                                            END FOR
                                         END IF
                                      END IF
                                      #END No.FUN-7A0029
                                      EXIT FOR                    #No.FUN-730016
                                #WHEN l_command_bak[l_y,l_y+2]="mod"
                                 WHEN l_command_bak[l_y,l_y+5]="modify"  #TQC-730109
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]
                                      IF l_ac = 1 THEN LET l_ods_tab[l_ods_tab.getLength()+1]=l_tabname  END IF  #FUN-9A0077
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=2
                                      EXIT FOR                    #No.FUN-730016
                                #WHEN l_command_bak[l_y,l_y+2]="dro"
                                 WHEN l_command_bak[l_y,l_y+3]="drop"    #TQC-730109
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]
                                      IF l_ac = 1 THEN LET l_ods_tab[l_ods_tab.getLength()+1]=l_tabname  END IF  #FUN-9A0077
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=3
                                      EXIT FOR                    #No.FUN-730016
                                 #No.FUN-730016
                                 WHEN l_command_bak[l_y,l_y+5]="rename"    #TQC-730109
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]
                                      IF l_ac = 1 THEN LET l_ods_tab[l_ods_tab.getLength()+1]=l_tabname  END IF  #FUN-9A0077
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=4
                                      EXIT FOR
                                 #END No.FUN-730016
                                 # FUN-A60022---start
                                 # SQL Server 的 modify
                                 WHEN l_command_bak[l_y,l_y+4]="alter"  #TQC-730109
                                      display 'table:',l_command_bak[l_x+6,l_y-1]
                                      LET l_tabname=l_command_bak[l_x+6,l_y-1]
                                      IF l_ac = 1 THEN LET l_ods_tab[l_ods_tab.getLength()+1]=l_tabname  END IF  #FUN-9A0077
                                      display 'command:',l_command_bak CLIPPED
                                      LET l_cmd_stat=2
                                      EXIT FOR
                                 # FUN-A60022---end
                               END CASE
                            END IF
                        END FOR
                     END IF
                  END IF
              END FOR
            WHEN l_command_bak[1,19] = "create unique index"
              FOR l_x=21 TO l_length
                  IF l_length-l_x>0 THEN
                     IF l_command_bak[l_x,l_x+1]="on" THEN
                        FOR l_y=l_x+2 TO l_length
                            IF l_command_bak[l_y,l_y]='(' THEN
                               display 'table:',l_command_bak[l_x+3,l_y-1]
                               LET l_tabname=l_command_bak[l_x+3,l_y-1]
                               display 'command:',l_command_bak CLIPPED
                               #No.FUN-7A0029
                               #判斷 Index 名稱是否符合客製規範
                               IF cl_null(FGL_GETENV("TOPLINK")) THEN
                                  LET l_str = l_command_bak[21,l_x-2]
                                  LET l_str = l_str.trim()
                                  display "index_name:",l_str
                                  IF (l_str.subString(1,4) != 'tic_' AND l_str.subString(1,4) != 'tpc_' ) OR
                                     (l_str.subString(1,4) = 'tpc_' AND l_str.subString(l_str.getLength()-2,l_str.getLength()) != "_pk") OR
                                      l_str.getLength() < 5
                                  THEN
                                     LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED     #FUN-9C0036
                                     CALL l_error_list.write(l_sql)
                                     LET l_sql = "zta-038", COLUMN 13,cl_getmsg("zta-038",g_lang)
                                     CALL l_error_list.write(l_sql) 
                                     CONTINUE WHILE
                                  END IF
                               END IF
                               #END No.FUN-7A0029
                            END IF
                        END FOR
                     END IF
                  END IF
              END FOR
            WHEN l_command_bak[1,12] = "create index"
              FOR l_x=14 TO l_length
                  IF l_length-l_x>0 THEN
                     IF l_command_bak[l_x,l_x+1]="on" THEN
                        FOR l_y=l_x+2 TO l_length
                            IF l_command_bak[l_y,l_y]='(' THEN
                               display 'table:',l_command_bak[l_x+3,l_y-1]
                               LET l_tabname=l_command_bak[l_x+3,l_y-1]
                               display 'command:',l_command_bak CLIPPED
                               #No.FUN-7A0029
                               #判斷 Index 名稱是否符合客製規範
                               IF cl_null(FGL_GETENV("TOPLINK")) THEN
                                  LET l_str = l_command_bak[14,l_x-2]
                                  LET l_str = l_str.trim()
                                  display "index_name:",l_str
                                  display "str:",l_str.subString(1,4)
                                  display "str_len:",l_str.getLength()
                                  IF (l_str.subString(1,4) != 'tic_' AND l_str.subString(1,4) != 'tpc_' ) OR
                                     (l_str.subString(1,4) = 'tpc_' AND l_str.subString(l_str.getLength()-2,l_str.getLength()) != "_pk") OR
                                      l_str.getLength() < 5
                                  THEN
                                     LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED    #FUN-9C0036
                                     CALL l_error_list.write(l_sql)
                                     LET l_sql = "zta-038", COLUMN 13,cl_getmsg("zta-038",g_lang)
                                     CALL l_error_list.write(l_sql) 
                                     CONTINUE WHILE
                                  END IF
                               END IF
                               #END No.FUN-7A0029
                            END IF
                        END FOR
                     END IF
                  END IF
              END FOR
            WHEN l_command_bak[1,10] = "drop index"
              FOR l_x=12 TO l_length-1
                  IF l_command_bak[l_x,l_x]!=' ' THEN
                     LET l_idxname=l_command_bak[l_x,l_length-1] CLIPPED
                     #IF g_db_type="IFX" THEN
                     CASE g_db_type              #FUN-730016
                      WHEN "IFX"                 #FUN-730016  
                        LET l_sql="select t.tabname from systables t,sysindexes i",
                                  " where t.tabid=i.tabid",
                                  "   and i.idxname='",l_idxname CLIPPED,"'"
                        PREPARE p_zta_imp_sqlfile_1_pre3 FROM l_sql
                        EXECUTE p_zta_imp_sqlfile_1_pre3 INTO l_tabname
                        IF sqlca.sqlcode THEN
                           #No.FUN-7A0029
                           #LET l_sql=sqlca.sqlcode USING '-----------',
                           #    COLUMN 20,g_dbs,
                           #    COLUMN 28,l_command_bak CLIPPED
                           LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED             #FUN-9C0036
                           CALL l_error_list.write(l_sql)
                           LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                           CALL l_error_list.write(l_sql) 
                           #END No.FUN-7A0029
                           CONTINUE WHILE
                        END IF
                        FREE p_zta_imp_sqlfile_1_pre3
 
                      WHEN "ORA"                 #FUN-730016  
                        LET l_sql="select lower(table_name) from user_indexes",
                                  " where lower(index_name)='",l_idxname CLIPPED,"'"
                        PREPARE p_zta_imp_sqlfile_1_pre4 FROM l_sql
                        EXECUTE p_zta_imp_sqlfile_1_pre4 INTO l_tabname
                        IF sqlca.sqlcode THEN
                           #No.FUN-7A0029
                           #LET l_sql=sqlca.sqlcode USING '-----------',
                           #    COLUMN 20,g_dbs,
                           #    COLUMN 28,l_command_bak CLIPPED
                           LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED       #FUN-9C0036
                           CALL l_error_list.write(l_sql)
                           LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                           CALL l_error_list.write(l_sql) 
                           #END No.FUN-7A0029
                           CONTINUE WHILE
                        END IF
                        FREE p_zta_imp_sqlfile_1_pre4
 
                      WHEN "MSV"                 #FUN-730016  
                      #No.FUN-A60022---start 
                        LET l_indexname=l_idxname
                        IF l_indexname.getIndexOf('.',1)>0 THEN
                           Let l_idxname=l_indexname.subString(l_indexname.getIndexOf('.',1)+1,l_indexname.getLength())
                        END IF 
                        LET l_sql=" select a.name from sys.objects a,sys.indexes b ",
                                  " where a.object_id =b.object_id and b.name='",l_idxname CLIPPED,"'"
                        PREPARE p_zta_imp_sqlfile_1_prep FROM l_sql
                        EXECUTE p_zta_imp_sqlfile_1_prep INTO l_tabname
                        IF sqlca.sqlcode THEN
                           LET l_sql= g_dbs, COLUMN 13,l_command_bak CLIPPED
                           CALL l_error_list.write(l_sql)
                           LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                           CALL l_error_list.write(l_sql) 
                           CONTINUE WHILE
                        END IF
                        FREE p_zta_imp_sqlfile_1_prep   
                      #No.FUN-A60022---end
                     END CASE                    #FUN-730016
                     display 'table:',l_tabname
                     display 'command:',l_command_bak CLIPPED
                     EXIT FOR
                  END IF
              END FOR
          END CASE

          IF cl_null(l_tabname) THEN
             ##No.FUN-7A0029
             #LET l_sql="can't parse" ,
             #    COLUMN 20,g_dbs,
             #    COLUMN 28,l_command_bak CLIPPED
             LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED        #FUN-9C0036
             CALL l_error_list.write(l_sql)
             LET l_sql = "can't parse"
             CALL l_error_list.write(l_sql) 
             #END #No.FUN-7A0029
             CONTINUE WHILE
          END IF
 
         #start FUN-6A0052 add
          #檢查一下，如果要Alter的Table是屬於Synonym的，就跳過不做
          LET l_sql="SELECT zta07 FROM zta_file",
                    " WHERE zta01='",l_tabname CLIPPED,"'",
                    "   AND zta02='",g_dbs CLIPPED,"'"
          PREPARE p_zta_imp_sqlfile_1_pre5 FROM l_sql
          EXECUTE p_zta_imp_sqlfile_1_pre5 INTO l_zta07
          IF l_zta07 = 'S' THEN CONTINUE WHILE END IF
         #end FUN-6A0052 add
 
          IF l_command_bak[l_length,l_length]=';' THEN
             LET l_command_bak=l_command_bak[1,l_length-1]
             LET l_command=l_command.subString(1,l_length-1)     #No.FUN-850112
          END IF
 
          #FUN-A60022 -- start --
          #FUN-A90062 -- start --  
          INITIALIZE g_cmd TO NULL
          INITIALIZE q_def_cmd TO NULL
          LET l_name = NULL
          CALL l_idx.clear()
          #FUN-A90062 -- end --  

          #MSV 版本，建立alter column 或 default constraint 時必須先砍之前的constraint
          LET l_command_t=l_command.toLowerCase()
          LET g_cmd = ""
          IF g_db_type='MSV' AND 
            (l_command_t.getIndexOf('add constraint df__',1)>0 OR 
             l_command_t.getIndexOf(' alter column ',1) > 0  OR
             l_command_t.getIndexOf(' drop column ',1) > 0 )            #No.FUN-A90062
          THEN
              #抓取欄位名稱
              IF l_command_t.getIndexOf('add constraint df__',1)>0 THEN
                 LET l_fldname = l_command_t.subString(l_command_t.getIndexOf(' for ',1)+5,l_command_t.getLength())
              ELSE
                 LET l_start = l_command_t.getIndexOf('column ',1)+7    #No.FUN-A90062
                 LET l_end   = l_command_t.getIndexOf(' ',l_start)-1
                 IF l_end = -1 THEN
                    LET l_end = l_command_t.getLength()
                 END IF
                 LET l_fldname = l_command_t.subString(l_start, l_end)
              END IF

              #No.FUN-A80029 -- start -- 
              #No.FUN-A90062 -- start --  
              #抓取 default 的 constraint 名稱及預設值
              SELECT c.name,cast(d.definition as varchar(100)) INTO l_name,l_default 
                FROM sys.columns b,sys.objects c, sys.default_constraints d 
               WHERE b.default_object_id=c.object_id and b.default_object_id=d.object_id and b.name=l_fldname

              IF NOT cl_null(l_name) AND        #欄位預設值不為空
                 l_command_t.getIndexOf(' alter column ',1) > 0  
              THEN
                 LET q_def_cmd = p_zta_default_sql(l_tabname,l_fldname,l_default)
              END IF  	

              LET g_cmd = ""
              IF l_command_t.getIndexOf(' alter column ',1)>0  OR 
                 l_command_t.getIndexOf(' drop column ',1) > 0
              THEN
                 #抓取關於這個欄位的所有索引 constraint 名稱
                 LET l_sql = "SELECT b.name,b.is_unique FROM  sys.objects a,sys.indexes b, ",
                             "                    sys.index_columns c, sys.columns d ",
                             " WHERE d.name = '",l_fldname CLIPPED,"' ",
                             "   AND a.name = '",l_tabname CLIPPED,"' ",
                             "   AND b.object_id= c.object_id ",
                             "   AND c.object_id =d.object_id ", 
                             "   AND a.object_id =b.object_id ",
                             "   AND b.index_id = c.index_id ", 
                             "   AND c.column_id =d.column_id",
                             " ORDER BY b.name DESC"
                 DECLARE imp_idx_cs CURSOR FROM l_sql
                 LET l_cnt = 1
                 FOREACH imp_idx_cs INTO l_idx[l_cnt].name,l_unique   #單身 ARRAY 填充
                                             
                    #修改欄位時先刪index、pk, 再重建index、pk; 刪除欄位則只有刪index，不自動刪pk.
                    SELECT COUNT(*) INTO l_pk_cnt FROM sys.objects 
                     WHERE  type='PK' AND name = l_idx[l_cnt].name 
                    IF l_pk_cnt > 0 THEN
                       IF l_command_t.getIndexOf(' alter column ',1) > 0  THEN
                          LET l_idx[l_cnt].sql = p_zta_pk_sql(g_dbs,l_idx[l_cnt].name,l_tabname,l_fldname)
                          #MSV版本，異動欄位時，必須先將constraint刪掉才能alter
                          LET g_cmd="alter table ",l_tabname CLIPPED," drop constraint ",l_idx[l_cnt].name CLIPPED
                       ELSE 
                          LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_t CLIPPED  
                          CALL l_error_list.write(l_sql)
                          LET l_sql = "zta-055", COLUMN 13,cl_getmsg("zta-055",g_lang)
                          CALL l_error_list.write(l_sql) 
                          ROLLBACK WORK
                          CONTINUE WHILE
                       END IF
                    ELSE
                       IF l_command_t.getIndexOf(' alter column ',1) > 0  THEN
                          LET l_idx[l_cnt].sql = p_zta_idx_sql(l_idx[l_cnt].name,l_tabname,l_unique)
                          #MSV版本，異動欄位時，必須先將 index 刪掉才能alter
                       END IF
                       LET g_cmd="drop index ",l_tabname CLIPPED,".",l_idx[l_cnt].name CLIPPED
                    END IF
                    EXECUTE IMMEDIATE g_cmd
                    IF sqlca.sqlcode THEN
                       LET l_sql= g_dbs CLIPPED, COLUMN 13,g_cmd CLIPPED  
                       CALL l_error_list.write(l_sql)
                       LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                       CALL l_error_list.write(l_sql) 
                       ROLLBACK WORK
                       CONTINUE WHILE
                    ELSE
                       IF NOT p_insert_zs_file(g_dbs CLIPPED,l_tabname CLIPPED,g_cmd) THEN 
                          ROLLBACK WORK
                       END IF
                    END IF
                    LET l_cnt = l_cnt + 1
                 END FOREACH
                 #因刪除欄位，所以不需要重建index 及PK
                 IF l_command_t.getIndexOf(' drop column ',1) > 0 THEN
                    CALL l_idx.clear()
                 ELSE
                    CALL l_idx.deleteElement(l_cnt)
                 END IF
              END IF

              IF l_name IS NOT NULL THEN
                 #砍除 default 的 constraint
                 LET g_cmd="alter table ",l_tabname CLIPPED," drop constraint ",l_name CLIPPED
                 EXECUTE IMMEDIATE g_cmd
                 IF sqlca.sqlcode THEN
                    LET l_sql= g_dbs CLIPPED, COLUMN 13,g_cmd CLIPPED  
                    CALL l_error_list.write(l_sql)
                    LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                    CALL l_error_list.write(l_sql) 
                    ROLLBACK WORK
                    CONTINUE WHILE
                 ELSE
                    IF NOT p_insert_zs_file(g_dbs CLIPPED,l_tabname CLIPPED,g_cmd) THEN 
                       ROLLBACK WORK
                       CONTINUE WHILE
                    END IF
                 END IF
              END IF

              #No.FUN-A90062 -- end --  
              #No.FUN-A80029 -- end -- 
          END IF
          #FUN-A60022 -- end --

          BEGIN WORK
          LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                    " WHERE zs01 = '",l_tabname CLIPPED,"'",
                    "   AND zs02 = '",g_dbs CLIPPED,"'"
          PREPARE p_zta_imp_sqlfile_1_pre1 FROM l_sql
          EXECUTE p_zta_imp_sqlfile_1_pre1 INTO l_zs03
          FREE p_zta_imp_sqlfile_1_pre1
          IF l_zs03 IS NULL THEN
             LET l_zs03 = 1
          END IF
          LET l_sql="SELECT COUNT(*) FROM ztb_file",
                    " WHERE ztb01='",l_tabname CLIPPED,"'",
                    "   AND ztb02='",g_dbs CLIPPED,"'",
                    "   AND ztb05='c'"
          PREPARE p_zta_imp_sqlfile_1_pre2 FROM l_sql
          EXECUTE p_zta_imp_sqlfile_1_pre2 INTO l_count
          FREE p_zta_imp_sqlfile_1_pre2
         #LET l_sql_t=l_command_bak
          LET l_sql_t=l_command              #No.FUN-850112
          LET l_sql=''
          FOR l_j=1 TO l_sql_t.getLength()
              LET l_sql=l_sql,l_sql_t.subString(l_j,l_j)
              IF l_sql_t.subString(l_j,l_j)="'" THEN
                 LET l_sql=l_sql,"'"
              END IF
          END FOR
          IF l_count > 0 THEN
              LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                        " VALUES('",l_tabname CLIPPED,"','",
                                    g_dbs CLIPPED,"',",
                                    l_zs03 CLIPPED,",'",
                                    g_date CLIPPED,"','c','",
                                    l_sql CLIPPED,";','",
#                                    l_command_bak CLIPPED,";','",
                                    g_user CLIPPED,"','",
                                    g_MODNO CLIPPED,"','Y','N','N','",
                                    g_tiptop_ver CLIPPED,"')"
          ELSE
              LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                        " VALUES('",l_tabname CLIPPED,"','",
                                    g_dbs CLIPPED,"',",
                                    l_zs03 CLIPPED,",'",
                                    g_date CLIPPED,"','p','",
                                    l_sql CLIPPED,";','",
#                                    l_command_bak CLIPPED,";','",
                                    g_user CLIPPED,"','",
                                    g_MODNO CLIPPED,"','Y','N','N','",
                                    g_tiptop_ver CLIPPED,"')"
          END IF
          EXECUTE IMMEDIATE l_sql
          IF sqlca.sqlcode THEN
             #No.FUN-7A0029
             #LET l_sql=sqlca.sqlcode using '-----------',
             #    COLUMN 20,g_dbs,
             #    COLUMN 28,"insert zs error(gensql):",l_tabname
             LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED        #FUN-9C0036
             CALL l_error_list.write(l_sql)
             LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
             CALL l_error_list.write(l_sql) 
             #END No.FUN-7A0029
             ROLLBACK WORK
             CONTINUE WHILE
          END IF
          IF g_edition="C" THEN
            #LET l_sql_t=l_command_bak
             LET l_sql_t=l_command              #No.FUN-850112
             LET l_sql=''
             FOR l_j=1 TO l_sql_t.getLength()
                 LET l_sql=l_sql,l_sql_t.subString(l_j,l_j)
                 IF l_sql_t.subString(l_j,l_j)="'" THEN
                    LET l_sql=l_sql,"'"
                 END IF
             END FOR
             IF l_count > 0 THEN
                LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                          " VALUES('",l_tabname CLIPPED,"','",
                                     g_dbs CLIPPED,"',",
                                     l_zs03 CLIPPED,",'",
                                     g_date CLIPPED,"','c','",
                                     l_sql CLIPPED,";','",
#                                     l_command_bak CLIPPED,";','",
                                     g_user CLIPPED,"','",
                                     g_MODNO CLIPPED,
                                     "','Y','N','N','",
                                     g_tiptop_ver CLIPPED,"')"
             ELSE
                LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                          " VALUES('",l_tabname CLIPPED,"','",
                                     g_dbs CLIPPED,"',",
                                     l_zs03 CLIPPED,",'",
                                     g_date CLIPPED,"','p','",
                                     l_sql CLIPPED,";','",
#                                     l_command_bak CLIPPED,";','",
                                     g_user CLIPPED,"','",
                                     g_MODNO CLIPPED,
                                     "','Y','N','N','",
                                     g_tiptop_ver CLIPPED,"')"
             END IF
             EXECUTE IMMEDIATE l_sql
          END IF
          IF sqlca.sqlcode THEN
             #No.FUN-7A0029
             #LET l_sql=sqlca.sqlcode using '-----------',
             #    COLUMN 20,g_dbs,
             #    COLUMN 28,"insert zs@std_server error(gensql):",l_tabname
             LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED      #FUN-9C0036
             CALL l_error_list.write(l_sql)
             LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
             CALL l_error_list.write(l_sql) 
             #END No.FUN-7A0029
             ROLLBACK WORK
             CONTINUE WHILE
          END IF
          LET l_fld_desc=''
          #IF g_db_type="IFX" THEN
          CASE g_db_type              #FUN-730016
           WHEN "IFX"                 #FUN-730016  
             #No.FUN-850112  -- start --
             IF l_command_sql.getIndexOf('{',1) THEN
                LET l_fld_desc=p_zta_get_desc(l_command_sql)  --前面l_i先加1了 
             END IF
           WHEN "ORA"                 #FUN-730016  
             IF l_command_sql.getIndexOf('/*',1) THEN
                LET l_fld_desc=p_zta_get_desc(l_command_sql)  --前面l_i先加1了  #No.FUN-850112
             END IF
             #No.FUN-850112  -- end --
 
           WHEN "MSV"                 #FUN-730016  
           #No.FUN-A60022---start
             IF l_command_sql.getIndexOf('/*',1) THEN
                LET l_fld_desc=p_zta_get_desc(l_command_sql)  --前面l_i先加1了
             END IF     
           #No.FUN-A60022---end
          END CASE                    #FUN-730016

          IF l_fld_desc is not null THEN
             LET l_command_t=l_command_sql.trim()        #No.FUN-850112
             
             LET l_fldname = p_zta_get_feldname(l_command_t) #No.FUN-A80029 

             #FUN-730016
             LET l_desc = l_fld_desc CLIPPED
             LET l_type = ""
             IF l_desc.getIndexOf('/<',1) > 0 THEN
                LET l_type_start = l_desc.getIndexOf('/<',1)  
                IF l_desc.getIndexOf('>/',l_type_start+1)  THEN
                   LET l_type_end = l_desc.getIndexOf('>/',l_type_start+1)
                   LET l_type = l_desc.subString(l_type_start+2,l_type_end-1)
                   LET l_fld_desc = l_desc.subString(1,l_type_start-1)
                END IF
             END IF
             #END FUN-730016
             IF l_cmd_stat=1 or l_cmd_stat=2 THEN
                FOR l_j=1 TO g_lang_arr.getLength()
                    IF g_lang=g_lang_arr[l_j] THEN
                       INSERT INTO gaq_file(gaq01,gaq02,gaq03,gaq06,gaq07) VALUES(l_fldname,g_lang,l_fld_desc,'N',l_type)   #No.FUN-660025  ##FUN-730016
                       IF sqlca.sqlcode THEN
                          IF l_cmd_stat=2 THEN
                             UPDATE gaq_file SET gaq03=l_fld_desc,gaq07=l_type   #FUN-730016
                              WHERE gaq01=l_fldname AND gaq02=g_lang
#                             IF sqlca.sqlcode or sqlca.sqlerrd[3]=0 THEN
#                                CALL cl_err("update gaq_file(" || l_fldname CLIPPED || ") error:",sqlca.sqlcode,1)
#                             END IF
#                          ELSE
#                             CALL cl_err("insert gaq_file(" || l_fldname CLIPPED || ") error:",sqlca.sqlcode,1)
                          END IF
                       END IF
                    ELSE
                       #No.TQC-810014
                       IF NOT cl_null(FGL_GETENV("TOPLINK")) THEN
                          LET l_dic_desc = p_zta_gaq_dict(g_lang_arr[l_j],l_fld_desc)
                       ELSE
                          LET l_dic_desc = ""
                       END IF
                       INSERT INTO gaq_file(gaq01,gaq02,gaq03,gaq06,gaq07) VALUES(l_fldname,g_lang_arr[l_j],l_dic_desc,'N',l_type)   #No.FUN-660025 #FUN-730016
#                       IF sqlca.sqlcode THEN
#                          CALL cl_err("insert gaq_file(" || l_fldname CLIPPED || ") error:",sqlca.sqlcode,1)
#                       END IF
                       #END No.TQC-810014
                    END IF
                END FOR
             END IF
          END IF
          IF l_i=1 THEN
             LET l_tablist="zta01='",l_tabname CLIPPED,"' "
          ELSE
             LET l_tablist=l_tablist," or zta01='",l_tabname CLIPPED,"' "
          END IF

display "l_fld_desc:",l_fld_desc
display "l_command_bak:",l_command_bak
display "l_command:",l_command
          #EXECUTE IMMEDIATE l_command_bak
          EXECUTE IMMEDIATE l_command                   ##No.FUN-850112
          IF sqlca.sqlcode THEN
             #No.FUN-7A0029
             #LET l_sql=sqlca.sqlcode using '-----------',
             #    COLUMN 20,g_dbs,
             #    COLUMN 28,l_command_bak CLIPPED            
             LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command CLIPPED         #FUN-9C0036
             CALL l_error_list.write(l_sql)
             #No.FUN-A60022---start  
             IF g_db_type="MSV" THEN
                #No.FUN-A90062 --start --
                LET l_sql = SQLCA.SQLERRD[2] USING '----------', COLUMN 13, p_zta_msv_errmsg(l_command,SQLCA.SQLERRD[2])
                #No.FUN-A90062 --end --
             ELSE
                LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
             END IF
             #No.FUN-A60022---end
             CALL l_error_list.write(l_sql) 
             #END No.FUN-7A0029

             ROLLBACK WORK
             LET l_sql="DELETE FROM zs_file WHERE zs01='",l_tabname CLIPPED,"'",
                                            " AND zs02='",g_dbs CLIPPED,"'",
                                            " AND zs03='",l_zs03 CLIPPED,"'"
             EXECUTE IMMEDIATE l_sql
             IF g_edition="C" THEN
                LET l_sql="DELETE FROM zs_file@",g_std_server CLIPPED,
                          " WHERE zs01='",l_tabname CLIPPED,"' ",
                          "   AND zs02='",g_dbs CLIPPED,"' ",
                          "   AND zs03='",l_zs03 CLIPPED,"'"
                EXECUTE IMMEDIATE l_sql
             END IF
             CONTINUE WHILE
          ELSE
             #No.FUN-950079 -- start --
             #若是刪除 primary key，則一併刪除 index
             IF l_sql_t.getIndexOf("drop constraint",1) > 0 THEN
                IF l_count > 0 THEN
                   LET l_ztd12 = 'c'
                ELSE
                   LET l_ztd12 = 'p'
                END IF
                LET l_pk = l_sql_t.subString(l_sql_t.getIndexOf("drop constraint",1)+16,l_sql_t.getLength())
                LET l_pk = l_pk CLIPPED
                LET l_tabname = l_tabname CLIPPED
                display "primary key:",l_pk
                CASE g_db_type
                 WHEN "IFX"
                   SELECT COUNT(*) INTO l_count FROM systables a, sysindexes c 
                    WHERE tabname = l_tabname AND a.tabid = c.tabid
                      AND c.idxname= l_pk 
                   
                 WHEN "ORA"
                   SELECT COUNT(*) INTO l_count FROM user_indexes
                    WHERE lower(table_name)= l_tabname
                      AND lower(index_name) = l_pk
 
                 WHEN "MSV"          #FUN-770027
                   SELECT COUNT(*) INTO l_count FROM sys.objects a, sys.indexes c
                    WHERE a.name= l_tabname
                      AND a.object_id=c.object_id 
                      AND c.name = l_pk 
                      AND c.type_desc <>'HEAP'
                END CASE
                IF l_count > 0 THEN
                   LET l_zs03 = l_zs03 + 1
                   LET l_cmd="drop index ", l_pk CLIPPED
                   LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                             " VALUES('",l_tabname CLIPPED,"','",
                                         g_dbs CLIPPED,"',",
                                         l_zs03 CLIPPED,",'",
                                         g_date CLIPPED,"','",l_ztd12 CLIPPED,"','",
                                         l_cmd CLIPPED,";','",
                                         g_user CLIPPED,"','",
                                         g_MODNO CLIPPED,"','Y','N','N','",
                                         g_tiptop_ver CLIPPED,"')"
                   EXECUTE IMMEDIATE l_sql
                   IF sqlca.sqlcode THEN
                      LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED       #FUN-9C0036
                      CALL l_error_list.write(l_sql)
                      LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                      CALL l_error_list.write(l_sql) 
                      ROLLBACK WORK
                      CONTINUE WHILE
                   ELSE
                      IF g_edition="C" THEN
                         LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                   " VALUES('",l_tabname CLIPPED,"','",
                                              g_dbs CLIPPED,"',",
                                              l_zs03 CLIPPED,",'",
                                              g_date CLIPPED,"','",l_ztd12 CLIPPED,"','",
                                              l_cmd CLIPPED,";','",
                                              g_user CLIPPED,"','",
                                              g_MODNO CLIPPED,
                                              "','Y','N','N','",
                                              g_tiptop_ver CLIPPED,"')"
                         EXECUTE IMMEDIATE l_sql
                         IF sqlca.sqlcode THEN
                            LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED    #FUN-9C0036
                            CALL l_error_list.write(l_sql)
                            LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                            CALL l_error_list.write(l_sql) 
                            ROLLBACK WORK
                            CONTINUE WHILE
                         END IF
                      END IF
                  END IF
                  EXECUTE IMMEDIATE l_cmd
                  IF sqlca.sqlcode THEN
                     LET l_sql= g_dbs CLIPPED, COLUMN 13,l_command_bak CLIPPED  #FUN-9C0036
                     CALL l_error_list.write(l_sql)
                     LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                     CALL l_error_list.write(l_sql)
                     ROLLBACK WORK
                     LET l_sql="DELETE FROM zs_file WHERE zs01='",l_tabname CLIPPED,"' ",
                               " AND zs02='", g_dbs CLIPPED,"' ",
                               " AND zs03='",l_zs03 CLIPPED,"'"
                     EXECUTE IMMEDIATE l_sql
                     IF g_edition="C" THEN
                        LET l_sql="DELETE FROM zs_file@",g_std_server CLIPPED,
                                  " WHERE zs01='",l_tabname CLIPPED,"' ",
                                  "   AND zs02='", g_dbs CLIPPED,"' ",
                                  "   AND zs03='",l_zs03 CLIPPED,"'"
                        EXECUTE IMMEDIATE l_sql
                        IF sqlca.sqlcode THEN
                           ROLLBACK WORK
                        END IF
                     END IF
                     CONTINUE WHILE
                  END IF
                END IF
             END IF
             #No.FUN-950079 -- end --

             #No.FUN-A60022 -- start --
             #No.FUN-A90062 ---start
             COMMIT WORK

             FOR l_i = 1 TO l_idx.getLength() 
                EXECUTE IMMEDIATE l_idx[l_i].sql
                IF sqlca.sqlcode THEN
                   LET l_sql= g_dbs CLIPPED, COLUMN 13,l_idx[l_i].sql CLIPPED  #FUN-9C0036
                   CALL l_error_list.write(l_sql)
                   IF g_db_type="MSV" THEN
                      #No.FUN-A90062 --start --
                      LET l_sql = SQLCA.SQLERRD[2] USING '----------', COLUMN 13, p_zta_msv_errmsg(l_command,SQLCA.SQLERRD[2])
                      #No.FUN-A90062 --end --
                   ELSE
                      LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                   END IF
                   CALL l_error_list.write(l_sql)
                   ROLLBACK WORK
                ELSE
                   IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,l_idx[l_i].sql) THEN 
                      ROLLBACK WORK
                   END IF
                END IF
             END FOR

             IF NOT cl_null(q_def_cmd) THEN 
                EXECUTE IMMEDIATE q_def_cmd
                IF sqlca.sqlcode THEN
                   LET l_sql= g_dbs CLIPPED, COLUMN 13,q_def_cmd CLIPPED  #FUN-9C0036
                   CALL l_error_list.write(l_sql)
                   IF g_db_type="MSV" THEN
                      #No.FUN-A90062 --start --
                      LET l_sql = SQLCA.SQLERRD[2] USING '----------', COLUMN 13, p_zta_msv_errmsg(l_command,SQLCA.SQLERRD[2])
                      #No.FUN-A90062 --end --
                   ELSE
                      LET l_sql = sqlca.sqlcode USING '----------', COLUMN 13,cl_getmsg(sqlca.sqlcode,g_lang)
                   END IF
                   CALL l_error_list.write(l_sql)
                   ROLLBACK WORK
                   CONTINUE WHILE
                ELSE
                   IF NOT p_insert_zs_file(g_zta.zta02 CLIPPED,g_zta.zta01 CLIPPED,q_def_cmd) THEN 
                      ROLLBACK WORK
                      CONTINUE WHILE
                   END IF
                END IF
             END IF
             #No.FUN-A90062 ---end
             #No.FUN-A60022 -- end --

             #No.FUN-990043 -- start --
             LET l_sql = l_command_bak CLIPPED
             IF l_sql.getIndexOf('alter table',1) > 0 AND 
                l_sql.getIndexOf('constraint',1) = 0 THEN
                CALL p_zta_parse_view(l_tabname,'u',l_cmd)
             END IF
             #No.FUN-990043 -- end --
 
          END IF
         #start FUN-6A0052 add 
          LET l_sql="SELECT * FROM zta_file",
                    " WHERE zta01='",l_tabname CLIPPED,"'",
                    "   AND zta02='",g_dbs CLIPPED,"'"
          PREPARE p_zta_imp_sqlfile_1_pre6 FROM l_sql
          EXECUTE p_zta_imp_sqlfile_1_pre6 INTO g_zta.*
         #end FUN-6A0052 add 
          CALL p_zta_show()
         #start FUN-6A0052 add
         #產生單一SCH檔
          CALL p_zta_gsql_file(l_tabname,g_dbs) RETURNING l_result
         #end FUN-6A0052 add
          LET l_i=l_i+1
       END WHILE
 
       CALL l_channel.close()

       #FUN-A60022 -- start --
       LET l_str= os.Path.join(g_dir.tempdir CLIPPED,"zta_alter.out")
       IF os.Path.separator() = "/" THEN
          LET l_str="chmod 777 ",l_str," 2>/dev/null"
          RUN l_str
       ELSE
          LET l_str="attrib -r ",l_str," >nul 2>nul"
          RUN l_str
       END IF
       LET l_str="cat ",os.Path.join(g_dir.tempdir CLIPPED,"zta_alter_err")," |wc -l> ",os.Path.join(g_dir.tempdir CLIPPED,"zta_alter.out")
       RUN l_str
       LET l_str= os.Path.join(g_dir.tempdir CLIPPED,"zta_alter.out")
       LET l_readfile=base.channel.create()
       CALL l_readfile.openfile(l_str,"r")
       WHILE l_readfile.read(l_out)
       END WHILE
       CALL l_readfile.close()
display "l_out:",l_out
       IF l_out.trim()!='3' THEN
          IF os.Path.separator() = "/" THEN  
            #LET l_str="$FGLRUN $TOP/azz/42r/p_view.42r ", os.Path.join(g_dir.tempdir CLIPPED,"zta_alter_err")," 66"   #FUN-B30176  mark
             LET l_str=FGL_GETENV("FGLRUN") ," ",FGL_GETENV("TOP"),os.Path.separator(),"azz",os.Path.separator(),          #FUN-B30176  #TQC-B70185 add " "
                        "42r",os.Path.separator(),"p_view.42r ",os.Path.join(g_dir.tempdir CLIPPED,"zta_alter_err")," 66"  #FUN-B30176 
          ELSE
             LET l_str="%FGLRUN% %TOP%\\azz\\42r\\p_view.42r ", os.Path.join(g_dir.tempdir CLIPPED,"zta_alter_err")," 66" 
          END IF     
        #No.FUN-A60022---end
          RUN l_str
       ELSE
         #start TQC-710048 modify
         #CALL fgl_winmessage("Info","Alter Success","Info")
          IF cl_null(g_errmsg) THEN
             LET g_errmsg = g_dbs CLIPPED                             #FUN-9C0036
          ELSE
             LET g_errmsg = g_errmsg CLIPPED,"/",g_dbs CLIPPED        #FUN-9C0036
          END IF
         #end TQC-710048 modify
       END IF
       IF NOT cl_null(l_tablist) THEN                          #FUN-730016
          IF g_zta.zta02='ds' THEN
           #No.FUN-A60022---start
             IF os.Path.separator() = "/" THEN  
                ERROR "r.s2 ds"
                RUN "r.s2 ds" WITHOUT WAITING
             ELSE
                ERROR "rs2 ds"
                RUN "rs2 ds" WITHOUT WAITING
             END IF
           #No.FUN-A60022---end
          END IF
          CALL p_zta_q(l_tablist)         #FUN-A80029
       END IF
    ELSE
       display "l_file is null"
       RETURN
    END IF
  END IF             #FUN-6A0052 add
 END FOR             #FUN-6A0052 add

 #No.FUN-9A0077 -- start --
 IF l_ods_tab.getLength() > 0 THEN
    FOR l_i = 1 TO l_ods_tab.getlength()
        FOR l_j = 1 TO l_ods_tab_t.getlength()
            IF l_ods_tab[l_i] = l_ods_tab_t[l_j] THEN
               LET l_m = 1
               EXIT FOR
            END IF
        END FOR
        IF l_m <> 1 THEN
           LET l_ods_tab_t[l_ods_tab_t.getLength()+1] = l_ods_tab[l_i]
        END IF
        LET l_m = 0
    END FOR

    FOR l_i = 1 TO l_ods_tab_t.getLength()
       CALL p_zta_cr_parse_view(l_ods_tab_t[l_i],'u')    #No.FUN-9A0077
    END FOR
 END IF 
 #No.FUN-9A0077 -- end --
 #start TQC-710048 add
 IF NOT cl_null(g_errmsg) THEN
    LET g_errmsg = g_errmsg CLIPPED," Alter Success"
    CALL fgl_winmessage("Info",g_errmsg,"info")
 END IF
 #end TQC-710048 add
 
ELSE                 #FUN-6A0052 add
 LET INT_FLAG = 0    #FUN-6A0052 add
 RETURN              #FUN-6A0052 add
END IF               #FUN-6A0052 add
 
    LET g_plant = g_plant_o                         #FUN-6A0052 add
    LET g_dbs   = g_dbs_o                           #FUN-6A0052 add
    CALL p_zta_set_erpdb()        #連結資料庫       #FUN-6A0052 add
    IF NOT cl_null(l_tablist) THEN                          #FUN-730016
       CALL p_zta_q(l_tablist)                         #FUN-6A0052 add
    END IF
END FUNCTION
 
FUNCTION p_zta_seldb1(l_flag)
  DEFINE l_flag          LIKE type_file.chr1,   #A:Alter Table, D:Drop Table
         l_sql           STRING,
         g_i             LIKE type_file.num5,
         l_allow_insert  LIKE type_file.num5,
         l_allow_delete  LIKE type_file.num5 
 
    #開啟視窗找出aooi901裡屬於ERP資料庫的資料庫代碼，
    #讓Alter Table負責人員選擇，然後對這些選擇的資料庫執行Alter Table
    OPEN WINDOW p_zta_seldb1_w AT 12,40 WITH FORM "azz/42f/p_zta_seldb1"
    ATTRIBUTE(STYLE = g_win_style)
 
    CALL cl_ui_locale("p_zta_seldb1")
 
    #No.FUN-990043 -- start --
    IF l_flag = 'A' THEN
      #start TQC-710048 modify
      #LET l_sql = "SELECT 'Y',azp01,azp02,azp03 FROM azp_file",
      #            " WHERE azp053='Y'",
      #            " ORDER BY azp01"
       LET l_sql = "SELECT 'Y',zxy03,azp02,azp03 ",
                   "  FROM zxy_file,azp_file,azw_file",
                   " WHERE zxy03=azp01",
                   "   AND zxy01='",g_user,"'",
                   "   AND azp053='Y'",
                   "   AND azp01=azw01",
                   "   AND azw05=azw06",
                   " ORDER BY zxy03"
      #end TQC-710048 modify
 
    ELSE
      #start TQC-710048 modify
      #LET l_sql = "SELECT 'N',azp01,azp02,azp03 FROM azp_file",
      #            " WHERE azp053='Y'",
      #            " ORDER BY azp01"
       LET l_sql = "SELECT 'N',zxy03,azp02,azp03",
                   "  FROM zxy_file,azp_file,azw_file",
                   " WHERE zxy03=azp01",
                   "   AND zxy01='",g_user,"'",
                   "   AND azp053='Y'",
                   "   AND azp01=azw01",
                   "   AND azw05=azw06",
                   " ORDER BY zxy03"
      #end TQC-710048 modify
 
    END IF
    #No.FUN-990043 -- end --
 
    DECLARE p_zta_seldb1_cs CURSOR FROM l_sql
 
    CALL g_azp.clear()
    LET g_rec_b=0
    LET g_cnt1 = 1
    FOREACH p_zta_seldb1_cs INTO g_azp[g_cnt1].*   #單身 ARRAY 填充
       IF sqlca.sqlcode THEN
          LET g_err="foreach azp data error"
          CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
          EXIT FOREACH
       END IF
       LET g_cnt1 = g_cnt1 + 1
       IF g_cnt1 > g_max_rec THEN
          CALL cl_err("",9035,0)
          EXIT FOREACH
       END IF
    END FOREACH
 
    CALL g_azp.deleteElement(g_cnt1)
    LET g_cnt1 = g_cnt1 - 1
 
    #改成INPUT 
    LET g_rec_b = g_cnt1
    LET l_ac = 0
    LET l_allow_insert = FALSE
    LET l_allow_delete = FALSE
 
    INPUT ARRAY g_azp WITHOUT DEFAULTS FROM s_azp.*
      ATTRIBUTE(COUNT=g_rec_b,MAXCOUNT=g_max_rec,UNBUFFERED,
                INSERT ROW=l_allow_insert,DELETE ROW=l_allow_delete,APPEND ROW=l_allow_insert)
       BEFORE INPUT
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(l_ac)
          END IF
 
       BEFORE ROW
          LET l_ac = ARR_CURR()
 
       AFTER FIELD select
          IF NOT cl_null(g_azp[l_ac].select) THEN
             IF g_azp[l_ac].select NOT MATCHES "[YN]" THEN
                NEXT FIELD select
             END IF
          END IF
 
       AFTER INPUT
          FOR g_i =1 TO g_rec_b
             IF g_azp[g_i].select = 'Y' AND
                NOT cl_null(g_azp[g_i].azp01)  THEN
             END IF
          END FOR
 
       ON ACTION CONTROLR
          CALL cl_show_req_fields()
 
       ON ACTION CONTROLG
          CALL cl_cmdask()
 
       ON ACTION select_all
          FOR g_i = 1 TO g_rec_b
              LET g_azp[g_i].select="Y"
          END FOR
 
       ON ACTION cancel_all
          FOR g_i = 1 TO g_rec_b
              LET g_azp[g_i].select="N"
          END FOR
 
       AFTER ROW
          IF INT_FLAG THEN
             EXIT INPUT
          END IF
 
       ON IDLE g_idle_seconds
          CALL cl_on_idle()
          CONTINUE INPUT
 
       ON ACTION about         #MOD-4C0121
          CALL cl_about()      #MOD-4C0121
 
       ON ACTION help          #MOD-4C0121
          CALL cl_show_help()  #MOD-4C0121
 
    END INPUT
    CLOSE WINDOW p_zta_seldb1_w
 
END FUNCTION
 
FUNCTION p_zta_seldb2(p_flag)
  DEFINE p_flag          LIKE type_file.chr1  #C:Create Table, S:Synonym Table #FUN-660178
  DEFINE l_sql           STRING,
         g_i             LIKE type_file.num5,
         l_allow_insert  LIKE type_file.num5,
         l_allow_delete  LIKE type_file.num5 
  DEFINE l_azw09         LIKE azw_file.azw09                                      #FUN-9C0036
  DEFINE l_tab_syn_o     LIKE zta_file.zta07,     # 備份 T/S建議 (Table/Synonym)  #FUN-9C0036
         l_syn_db_o      LIKE zta_file.zta17      # 備份 Synonym DB               #FUN-9C0036
  DEFINE l_cnt           LIKE type_file.num5                                      #FUN-9C0036

    #開啟視窗找出aooi901裡屬於ERP資料庫的資料庫代碼，
    #讓Alter Table負責人員選擇，然後對這些選擇的資料庫執行Alter Table
    OPEN WINDOW p_zta_seldb2_w AT 12,40 WITH FORM "azz/42f/p_zta_seldb2"
    ATTRIBUTE(STYLE = g_win_style)
 
    CALL cl_ui_locale("p_zta_seldb2")
 
   #start TQC-710048 modify
   #LET l_sql = "SELECT 'Y',azp01,azp02,azp03,'T','' FROM azp_file",
   #            " WHERE azp053='Y'",
   #            " ORDER BY azp01"
   #FUN-660178 
   #No.FUN-990043 -- start --
   #No.FUN-9C0036 -- start --
   #IF p_flag = "C" THEN
   #   LET l_sql = "SELECT 'Y',zxy03,azp02,azp03,'T','' FROM zxy_file,azp_file,azw_file",
   #               " WHERE zxy03=azp01",
   #               "   AND zxy01='",g_user,"'",
   #               "   AND azp053='Y'",
   #               "   AND azp01=azw01",
   #               "   AND azw05=azw06",
   #               " ORDER BY zxy03"
   #ELSE
   #   LET l_sql = "SELECT 'Y',zxy03,azp02,azp03,'S','",g_syn.azp03 CLIPPED,"'",
   #               "  FROM zxy_file,azp_file,azw_file",
   #               " WHERE zxy03=azp01",
   #               "   AND zxy01='",g_user,"'",
   #               "   AND azp053='Y'",
   #               "   AND azp03 <> '",g_syn.azp03 CLIPPED,"'",
   #               "   AND azp01=azw01",
   #               "   AND azw05=azw06",
   #               " ORDER BY zxy03"
   #END IF
    CASE p_flag
      WHEN "C"   #匯入Create 的 SQL 檔功能
         LET l_sql = "SELECT DISTINCT 'Y','','',azw05,'T','',azw09 FROM zxy_file,azw_file,zta_file",
                     " WHERE zxy01='",g_user,"'",
                     "   AND zxy03=azw01",
                     "   AND azwacti='Y'",
                     "   AND azw05=zta02",
                     "   AND azw05=azw06",
                     " ORDER BY azw05"
      WHEN "S"   #同步建立 Synonym 功能
         LET l_sql = "SELECT DISTINCT 'Y','','',azw05,'S','",g_syn.azp03 CLIPPED,"',azw09 ",
                     "  FROM zxy_file,azw_file,zta_file",
                     " WHERE zxy01='",g_user,"'",
                     "   AND zxy03=azw01",
                     "   AND azwacti='Y'",
                     "   AND azw05=zta02",
                     "   AND azw05=azw06",
                     "   AND azw05 <> '",g_syn.azp03 CLIPPED,"'",
                     " ORDER BY azw05"
      OTHERWISE  #刪除/Alter Table 功能
         LET l_sql = "SELECT DISTINCT 'Y','','',azw05,'','',azw09 ",
                     "  FROM zxy_file,azw_file,zta_file",
                     " WHERE zxy01='",g_user,"'",
                     "   AND zxy03=azw01",
                     "   AND azwacti='Y'",
                     "   AND azw05=zta02",
                     "   AND azw05=azw06",
                     " ORDER BY azw05"
    END CASE
   #No.FUN-9C0036 -- end --
   #No.FUN-990043 -- end --
   #END FUN-660178 
   #end TQC-710048 modify
 
    DECLARE p_zta_seldb2_cs CURSOR FROM l_sql
 
    CALL g_azp1.clear()
    LET g_rec_b=0
    LET g_cnt1 = 1
    FOREACH p_zta_seldb2_cs INTO g_azp1[g_cnt1].*,l_azw09   #單身 ARRAY 填充
       IF sqlca.sqlcode THEN
          LET g_err="foreach azp1 data error"
          CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
          EXIT FOREACH
       END IF
       
       #No.FUN-A60022 -- start --
       #zta_file-zte_file 此檔案為檔案架構修整記錄維護作業(p_zta)的主要設定檔，不可刪除!
       IF p_flag = "D" AND g_zta.zta01 MATCHES "zt[a-e]_file" AND
          g_azp1[g_cnt1].azp03 = 'ds' 
       THEN
          LET g_azp1[g_cnt1].select = 'N'
       END IF
       #No.FUN-A60022 -- end --

       #FUN-A60050 -- start --
       #檔案類型設定為 "Z:系統檔" 時，必須一律 synonym ds
       IF g_table_type = 'Z' AND g_azp1[g_cnt1].azp03 <> 'ds' THEN
          LET g_azp1[g_cnt1].tab_syn='S'
          LET g_azp1[g_cnt1].syn_db ='ds' 
       ELSE
          #FUN-9C0036 -- start --
          #若有財務DB, 預設財務模組的 Table 必須 synonym 至財務 DB.
          IF (g_financial_module.getIndexOf(g_create_module CLIPPED,1) > 0) AND
             (p_flag = 'C' OR p_flag = 'S') AND 
             (g_azp1[g_cnt1].azp03 <> l_azw09) 
          THEN
             LET g_azp1[g_cnt1].tab_syn='S'
             LET g_azp1[g_cnt1].syn_db = l_azw09 CLIPPED
          END IF
          #FUN-9C0036 -- end --
       END IF
       #FUN-A60050 -- end --

       LET g_cnt1 = g_cnt1 + 1
       IF g_cnt1 > g_max_rec THEN
          CALL cl_err("",9035,0)
          EXIT FOREACH
       END IF
    END FOREACH
 
    CALL g_azp1.deleteElement(g_cnt1)
    LET g_cnt1 = g_cnt1 - 1
 
    #改成INPUT 
    LET g_rec_b = g_cnt1
    LET l_ac = 0
    LET l_allow_insert = FALSE
    LET l_allow_delete = FALSE
   
    #FUN-9C0036 -- start --
    IF p_flag = "D" OR p_flag = "A" THEN
        CALL cl_set_comp_visible("azp01,azp02,tab_syn,syn_db",FALSE)      
    ELSE
        CALL cl_set_comp_visible("azp01,azp02",FALSE)      
    END IF
    #FUN-9C0036 -- end --

    INPUT ARRAY g_azp1 WITHOUT DEFAULTS FROM s_azp1.*
      ATTRIBUTE(COUNT=g_rec_b,MAXCOUNT=g_max_rec,UNBUFFERED,
                INSERT ROW=l_allow_insert,DELETE ROW=l_allow_delete,APPEND ROW=l_allow_insert)
       BEFORE INPUT
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(l_ac)
          END IF
 
       BEFORE ROW
          LET l_ac = ARR_CURR()
          CALL p_zta_set_entry_seldb2()
          CALL p_zta_set_no_entry_seldb2()
          LET l_tab_syn_o = g_azp1[l_ac].tab_syn    #FUN-9C0036
          LET l_syn_db_o  = g_azp1[l_ac].syn_db     #FUN-9C0036

       #No.FUN-A60022 -- start --
       ON CHANGE select
          #zta_file-zte_file 此檔案為檔案架構修整記錄維護作業(p_zta)的主要設定檔，不可刪除!
          IF p_flag = "D" AND g_zta.zta01 MATCHES "zt[a-e]_file" AND
             g_azp1[l_ac].azp03 = 'ds' AND g_azp1[l_ac].select = "Y" 
          THEN
             CALL cl_err(g_zta.zta01,'zta-052',0)   
             LET g_azp1[l_ac].select = "N"
             NEXT FIELD select
          END IF
       #No.FUN-A60022 -- end --

       AFTER FIELD select
          IF NOT cl_null(g_azp1[l_ac].select) THEN
             IF g_azp1[l_ac].select NOT MATCHES "[YN]" THEN
                NEXT FIELD select
             END IF
          END IF
 
       BEFORE FIELD tab_syn
          CALL p_zta_set_entry_seldb2()
 
       #FUN-9C0036 -- start --
       #AFTER FIELD tab_syn                  #FUN-9C0036 mark
       ON CHANGE tab_syn                     
          IF g_azp1[l_ac].tab_syn = 'T' THEN 
             #FUN-A60050 -- start --
             #檔案類型設定為 "Z:系統檔" 時，必須一律 synonym ds
             IF g_table_type = 'Z' AND g_azp1[l_ac].azp03 <> 'ds' THEN
                LET g_azp1[l_ac].tab_syn = l_tab_syn_o
                LET g_azp1[l_ac].syn_db = l_syn_db_o
                CALL cl_err(g_azp1[l_ac].azp03 CLIPPED,"zta-050",0)
                NEXT FIELD tab_syn
             END IF
             #FUN-A60050 -- end --
              
             #若有財務DB, 財務模組的 Table 必須 synonym 至財務 DB.
             IF g_financial_module.getIndexOf(g_create_module CLIPPED,1) > 0 THEN
                SELECT COUNT(*) INTO l_cnt FROM azw_file 
                 WHERE azw05=g_azp1[l_ac].azp03  AND azw06=azw05 AND azw05=azw09
                IF l_cnt = 0  THEN 
                   LET g_azp1[l_ac].tab_syn = l_tab_syn_o
                   LET g_azp1[l_ac].syn_db = l_syn_db_o
                   CALL cl_err(g_azp1[l_ac].azp03 CLIPPED,"zta-047",0)
                   NEXT FIELD tab_syn
                END IF
             END IF
             
             CALL cl_set_comp_required("syn_db",FALSE)
             LET g_azp1[l_ac].syn_db = ''
             DISPLAY BY NAME g_azp1[l_ac].syn_db
             CALL p_zta_set_no_entry_seldb2()
          ELSE
             CALL cl_set_comp_required("syn_db",TRUE)
             CALL p_zta_set_entry_seldb2()
             CALL p_zta_set_no_entry_seldb2()
             NEXT FIELD syn_db
          END IF
       
       AFTER FIELD syn_db
          IF NOT cl_null(g_azp1[l_ac].syn_db) THEN
             #FUN-A60050 -- start --
             #檔案類型設定為 "Z:系統檔" 時，必須一律 synonym ds
             IF g_table_type = 'Z' AND g_azp1[l_ac].syn_db <> 'ds' THEN
                LET g_azp1[l_ac].syn_db = l_syn_db_o
                CALL cl_err(g_azp1[l_ac].azp03 CLIPPED,"zta-050",0)
                NEXT FIELD syn_db
             END IF
             #FUN-A60050 -- end --

             #若有財務DB, 財務模組的 Table 必須 synonym 至財務 DB.
             IF g_financial_module.getIndexOf(g_create_module CLIPPED,1) > 0 THEN
                SELECT COUNT(*) INTO l_cnt FROM azw_file 
                 WHERE azw05=g_azp1[l_ac].azp03  AND azw06=azw05 AND azw05=azw09
                IF l_cnt = 0  THEN 
                   SELECT COUNT(*) INTO l_cnt FROM azw_file 
                    WHERE azw05=g_azp1[l_ac].azp03  AND azw05<>azw09 AND azw09=g_azp1[l_ac].syn_db
                   IF l_cnt = 0 THEN 
                      LET g_azp1[l_ac].syn_db = l_syn_db_o
                      CALL cl_err(g_azp1[l_ac].azp03 CLIPPED,"zta-047",0)
                      NEXT FIELD syn_db
                   END IF
                END IF
             END IF
        
             #判斷輸入的db是否存在
             SELECT COUNT(*) INTO l_cnt FROM azw_file,zta_file
              WHERE azw05=zta02 AND azw05=azw06 AND azwacti='Y' AND azw05=g_azp1[l_ac].syn_db
             IF l_cnt = 0  THEN 
                CALL cl_err3("sel","azw_file",g_azp1[l_ac].syn_db CLIPPED,"",100,"","sel azw",0)   #No.FUN-660081
                NEXT FIELD syn_db
             END IF
          END IF
       #FUN-9C0036 -- end --
 
       AFTER INPUT
          FOR g_i =1 TO g_rec_b
             IF g_azp1[g_i].select = 'Y' AND
                NOT cl_null(g_azp1[g_i].azp01)  THEN
             END IF
          END FOR
 
       ON ACTION CONTROLR
          CALL cl_show_req_fields()
 
       ON ACTION CONTROLG
          CALL cl_cmdask()
 
       ON ACTION select_all
          FOR g_i = 1 TO g_rec_b
              LET g_azp1[g_i].select="Y"
          END FOR
 
       ON ACTION cancel_all
          FOR g_i = 1 TO g_rec_b
              LET g_azp1[g_i].select="N"
          END FOR
 
       AFTER ROW
          IF INT_FLAG THEN
             EXIT INPUT
          END IF
          #FUN-9C0036 -- start --
          #將這一段判斷移至 INT_FLAG 之後
          IF g_azp1[l_ac].tab_syn = 'S' AND 
             cl_null(g_azp1[l_ac].syn_db) THEN
             NEXT FIELD syn_db
          END IF
          #FUN-9C0036 -- end --

 
       ON IDLE g_idle_seconds
          CALL cl_on_idle()
          CONTINUE INPUT
 
       ON ACTION about         #MOD-4C0121
          CALL cl_about()      #MOD-4C0121
 
       ON ACTION help          #MOD-4C0121
          CALL cl_show_help()  #MOD-4C0121
 
    END INPUT
    CLOSE WINDOW p_zta_seldb2_w
 
END FUNCTION
#end FUN-6A0052 add
 
FUNCTION p_zta_gensql()
  DEFINE l_n                LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_n1               LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_i                LIKE type_file.num5,          #檢查重複用    #No.FUN-680135 SMALLINT
         l_cmd              LIKE zs_file.zs06,
         l_str              STRING,
         l_sql              STRING,
         l_sql_create_tab   STRING,
         l_sql_create_idx   ARRAY[10] of STRING,
         l_ztb03            LIKE ztb_file.ztb03,
         l_ztb04            LIKE ztb_file.ztb04,
         l_ztb06            LIKE ztb_file.ztb06,
         l_ztb07            LIKE ztb_file.ztb07,
         l_ztb08            LIKE ztb_file.ztb08,
         l_ztb09            LIKE ztb_file.ztb09,
         l_ztb11            LIKE ztb_file.ztb11,
         l_gaq03            LIKE gaq_file.gaq03,
         l_ztc03            LIKE ztc_file.ztc03,
         l_ztc04            LIKE ztc_file.ztc04,
         l_ztc06            LIKE ztc_file.ztc06,
         l_zs03             LIKE zs_file.zs03,
         l_count            LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_gensql_channel   base.channel,
         l_msg              STRING                        #FUN-6A0052 add
 
#No.FUN-730016
DEFINE l_ztd         RECORD 
                          ztd03     LIKE ztd_file.ztd03,
                          ztd04     LIKE ztd_file.ztd04,
                          ztd05     LIKE ztd_file.ztd05,
                          ztd06     LIKE ztd_file.ztd06,
                          ztd07     LIKE ztd_file.ztd07,
                          ztd08     LIKE ztd_file.ztd08,
                          ztd09     LIKE ztd_file.ztd09,
                          ztd10     LIKE ztd_file.ztd10,
                          ztd11     LIKE ztd_file.ztd11,
                          ztd12     LIKE ztd_file.ztd12,
                          ztd13     LIKE ztd_file.ztd13,
                          ztd14     LIKE ztd_file.ztd14,
                          ztd15     LIKE ztd_file.ztd15,
                          ztd16     LIKE ztd_file.ztd16,
                          ztd17     LIKE ztd_file.ztd17
                     END RECORD,
         l_n2               LIKE type_file.num5,          #No.FUN-680135 SMALLINT
         l_sql_create_con   DYNAMIC ARRAY of STRING
#END No.FUN-730016
DEFINE   l_ztb11_str   STRING                             #No.TQC-860023
DEFINE   l_ztc03_str   STRING                             #No:FUN-A50004
 
  IF cl_null(g_zta.zta01) THEN
     CALL cl_err("",-400,0)
     RETURN
  END IF
  IF g_zta.zta10='Y' THEN
     CALL cl_err("","zta-001",0)
     RETURN
  END IF
  IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
  IF g_action_choice <> "create_synonym" OR g_action_choice IS NULL #FUN-660178
  THEN
     #start FUN-6A0052 add
     #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
      IF cl_null(g_MODNO) THEN
         PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 start
            ON IDLE g_idle_seconds
               CALL cl_on_idle()
         END PROMPT
#TQC-860017 end  
         display g_MODNO
      END IF
     #end FUN-6A0052 add
  END IF
  IF g_zta.zta07="S" THEN
     BEGIN WORK

     LET l_sql="SELECT COUNT(*) FROM ztb_file",          #No.FUN-A60022
               " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
               "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
               "   AND ztb05='C'"
     PREPARE p_zta_gensql_pre2 FROM l_sql
     EXECUTE p_zta_gensql_pre2 INTO l_zs03
     FREE p_zta_gensql_pre2
     LET l_count = l_zs03   #No.FUN-A60022

     #No.FUN-A60022---start
     LET l_sql="SELECT max(zs03)+1 FROM zs_file",
               " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
               "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
     PREPARE p_zta_gensql_pre1 FROM l_sql
     EXECUTE p_zta_gensql_pre1 INTO l_zs03
     FREE p_zta_gensql_pre1
     IF l_zs03 IS NULL THEN
        LET l_zs03 = 1
     END IF

     #IF g_db_type="IFX" THEN
     #CASE g_db_type              #FUN-730016
     # WHEN "IFX"                 #FUN-730016  
     #   LET l_cmd="create synonym ",g_zta.zta01 CLIPPED," for ", g_zta.zta17 CLIPPED,":",g_zta.zta01 CLIPPED,";"
     #
     # WHEN "ORA"                 #FUN-730016  
     #   LET l_cmd="create synonym ",g_zta.zta01 CLIPPED," for ", g_zta.zta17 CLIPPED,".",g_zta.zta01 CLIPPED,";"
 
     # WHEN "MSV"                 #FUN-730016  
     #END CASE                    #FUN-730016

     LET l_cmd="create synonym ",g_zta.zta01 CLIPPED," for ",s_dbstring(g_zta.zta17),g_zta.zta01 CLIPPED,";"
   #No.FUN-A60022---end
     IF l_count > 0 THEN
        LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ",
                 " VALUES('",g_zta.zta01 CLIPPED,"','",
                             g_zta.zta02 CLIPPED,"',",
                             l_zs03 CLIPPED,",'",
                             g_date CLIPPED,"','c','",
                             l_cmd CLIPPED,"','",
                             g_user CLIPPED,"','",
                             g_MODNO CLIPPED,"','Y','N','N','",
                             g_tiptop_ver CLIPPED,"')"
     ELSE
        LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ",
                 " VALUES('",g_zta.zta01 CLIPPED,"','",
                             g_zta.zta02 CLIPPED,"',",
                             l_zs03 CLIPPED,",'",
                             g_date CLIPPED,"','p','",
                             l_cmd CLIPPED,"','",
                             g_user CLIPPED,"','",
                             g_MODNO CLIPPED,"','Y','N','N','",
                             g_tiptop_ver CLIPPED,"')"
     END IF
     EXECUTE IMMEDIATE l_sql
     IF sqlca.sqlcode THEN
        LET g_err="insert zs error(gensql):"
        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
        CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
        ROLLBACK WORK
        RETURN
     ELSE
        LET l_sql="UPDATE zta_file SET zta10='Y'",
                  " WHERE zta01='",g_zta.zta01 CLIPPED,"'",
                  "   AND zta02='",g_zta.zta02 CLIPPED,"'"
        EXECUTE IMMEDIATE l_sql
        IF sqlca.SQLERRD[3] != 1 THEN
           ROLLBACK WORK
           RETURN
        END IF
     END IF
     IF g_edition="C" THEN
        IF l_count > 0 THEN
           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,"(zs01,zs02,",
                     "zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ",
                     "VALUES('",g_zta.zta01 CLIPPED,"','",
                                g_zta.zta02 CLIPPED,"',",
                                l_zs03 CLIPPED,",'",
                                g_date CLIPPED,"','c','",
                                l_cmd CLIPPED,"','",
                                g_user CLIPPED,"','",
                                g_MODNO CLIPPED,"',",
                                "'Y','N','N','",
                                g_tiptop_ver CLIPPED,"')"
        ELSE
           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,"(zs01,zs02,",
                     "zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ",
                     "VALUES('",g_zta.zta01 CLIPPED,"','",
                                g_zta.zta02 CLIPPED,"',",
                                l_zs03 CLIPPED,",'",
                                g_date CLIPPED,"','p','",
                                l_cmd CLIPPED,"','",
                                g_user CLIPPED,"','",
                                g_MODNO CLIPPED,"',",
                                "'Y','N','N','",
                                g_tiptop_ver CLIPPED,"')"
        END IF
        EXECUTE IMMEDIATE l_sql
     END IF
     IF sqlca.sqlcode THEN
        LET g_err="insert zs@std_server error(gensql):"
        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
        CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
        ROLLBACK WORK
        RETURN
     END IF
     LET l_sql="SELECT zs06 FROM zs_file",
               " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
               "   AND zs02='",g_zta.zta02 CLIPPED,"'",
               "   AND zs03='",l_zs03 CLIPPED,"'"
     PREPARE p_zta_gensql_pre3 FROM l_sql
     EXECUTE p_zta_gensql_pre3 INTO l_cmd
     FREE p_zta_gensql_pre3
     FOR l_i=1 TO LENGTH(l_cmd)
         IF l_cmd[l_i,l_i] =';' THEN
            LET l_cmd[l_i,l_i]=' '
            EXIT FOR
         END IF
     END FOR
################因synonym是寫成sql語法的所以直接執行可###########
     EXECUTE IMMEDIATE l_cmd
     IF sqlca.sqlcode THEN
        LET g_err="DDL command error(gensql):",l_cmd
        CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
#       ERROR "CREATE SYNONYM FAIL"
        ROLLBACK WORK
#        LET l_str=g_dir.top CLIPPED,"/error.out"
#        LET g_err_channel=base.channel.create()
#        CALL g_err_channel.openfile( l_str, "r" )
#        LET l_i=1
#        WHILE g_err_channel.read(l_err[l_i])
#           LET l_i=l_i+1
#        END WHILE
#        CALL g_err_channel.close()
#        FOR l_ln=3 TO l_i-1
#            LET l_err[2]=l_err[2] CLIPPED,"\n",l_err[l_ln] CLIPPED
#        END FOR
#        CALL fgl_winmessage("Error Info", l_err[2] CLIPPED, "error info")
#        ROLLBACK WORK
     ELSE
         #FUN-660178
         IF g_action_choice = "create_synonym" THEN
             IF cl_null(g_errmsg) THEN
                LET g_errmsg = g_dbs  CLIPPED                             #FUN-9C0036
             ELSE
                LET g_errmsg = g_errmsg CLIPPED,"/",g_dbs CLIPPED         #FUN-9C0036
             END IF
             COMMIT WORK
         ELSE
 
              #start TQC-710048 modify
              #CALL fgl_winmessage("Info","Create Synonym Success","Info")
               IF cl_null(g_errmsg) THEN
                  LET g_errmsg = g_dbs CLIPPED," Create Synonym Success"              #FUN-9C0036
               ELSE
                  LET g_errmsg = g_errmsg CLIPPED,"/",g_dbs CLIPPED," Create Synonym Success"   #FUN-9C0036
               END IF
              #end TQC-710048 modify
              COMMIT WORK
              CALL p_zta_show()
         END IF
         #IF g_action_choice <> "import_create_sqlfile" OR g_ods_end = TRUE THEN  #FUN-A60050 --mark
            CALL p_zta_parse_view(g_zta.zta01,'a','')    #No.FUN-9A0077
         #END IF    #FUN-A60050 --mark
         LET g_zta.zta10='Y'
        #END FUN-660178
     END IF
  ELSE       ############# TABLE的情況 ###############
     IF p_zta_question_msg("zta-017","zta-016") THEN
        LET l_sql="SELECT COUNT(*) FROM ztb_file",
                  " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                  "   AND ztb02='",g_zta.zta02 CLIPPED,"'"
        PREPARE p_zta_gensql_pre4 FROM l_sql
        EXECUTE p_zta_gensql_pre4 INTO l_n
        FREE p_zta_gensql_pre4
        LET l_sql="SELECT COUNT(*) FROM ztc_file",
                  " WHERE ztc01='",g_zta.zta01 CLIPPED,"'",
                  "   AND ztc02='",g_zta.zta02 CLIPPED,"'"
        PREPARE p_zta_gensql_pre5 FROM l_sql
        EXECUTE p_zta_gensql_pre5 INTO l_n1
        FREE p_zta_gensql_pre5
 
        #FUN-730016  
        LET l_sql="SELECT COUNT(*) FROM ztd_file",
                  " WHERE ztd01='",g_zta.zta01 CLIPPED,"'",
                  "   AND ztd02='",g_zta.zta02 CLIPPED,"'"
        PREPARE p_zta_gensql_pre8 FROM l_sql
        EXECUTE p_zta_gensql_pre8 INTO l_n2
        FREE p_zta_gensql_pre8
        #END FUN-730016  
 
        IF l_n>0 THEN
           LET g_sql="SELECT ztb03,ztb04,ztb06,ztb07,ztb08,ztb09,ztb11,gaq03 ",
                     "  FROM ztb_file LEFT OUTER JOIN gaq_file ",
                     "    ON ztb03=gaq01 AND gaq02='",g_lang CLIPPED,"'",
                     " WHERE ztb01 ='",g_zta.zta01,"'",  #單頭
                     "   AND ztb02 ='",g_zta.zta02,"'",  #單頭
                     " ORDER BY ztb10"
           DECLARE ztb_a CURSOR FROM g_sql     #CURSOR
           LET g_sql="SELECT ztc03,ztc04,ztc06",
                     "  FROM ztc_file",
                     " WHERE ztc01 ='",g_zta.zta01,"'",  #單頭
                     "   AND ztc02 ='",g_zta.zta02,"'"   #單頭
           DECLARE ztc_a CURSOR FROM g_sql     #CURSOR
 
           #FUN-730016  
           LET g_sql="SELECT ztd03,ztd04,ztd05,ztd06,ztd07,ztd08,ztd09,ztd10,ztd11,ztd12,ztd13,ztd14,ztd15,ztd16,ztd17",
                     "  FROM ztd_file",
                     " WHERE ztd01 ='",g_zta.zta01,"'",  #單頭
                     "   AND ztd02 ='",g_zta.zta02,"'"   #單頭
           DECLARE ztd_a CURSOR FROM g_sql     #CURSOR
           #END FUN-730016  
 
           FOR l_i=1 TO 6
              IF g_zta.zta01[l_i,l_i] = '_' THEN
                 EXIT FOR
              END IF
           END FOR
           IF g_zta.zta02="ds" THEN

              #No.FUN-A60022---start
              #LET l_str = fgl_getenv(g_zta.zta03)                          #No.FUN-A60050
              LET l_str = p_zta_set_db_type("sch")   #FUN-A80029

              LET l_str = fgl_getenv(g_zta.zta03),"/",l_str,"/", g_zta.zta01 CLIPPED,".sch.src"
              #No.FUN-A60022---end
              LET l_gensql_channel=base.channel.create()
              CALL l_gensql_channel.setdelimiter("")
              CALL l_gensql_channel.openfile(l_str CLIPPED, "w" )
 
--         在.src的檔裡暫定不提供雜項說明
--            IF g_db_type="IFX" THEN
--               CALL l_gensql_channel.write("{")
--            ELSE
--               CALL l_gensql_channel.write("/*")
--            END IF
--            CALL l_gensql_channel.write("================================================================================")
--            LET l_str = "檔案名稱:",g_gat03 CLIPPED
--            CALL l_gensql_channel.write(l_str)
--            LET l_str = "檔案目的:",g_gat04 CLIPPED
--            CALL l_gensql_channel.write(l_str)
#             LET l_str = "檔案來源:",g_zta.zta13 CLIPPED
#             CALL l_gensql_channel.write(l_str)
--            LET l_str = "上游檔案:",g_zta.zta11 CLIPPED
--            CALL l_gensql_channel.write(l_str)
--            LET l_str = "下游檔案:",g_zta.zta12 CLIPPED
--            CALL l_gensql_channel.write(l_str)
#             LET l_str = "注意事項:",g_zta.zta16 CLIPPED
#             CALL l_gensql_channel.write(l_str)
--            CALL l_gensql_channel.write("============.========================.==========================================")
--            IF g_db_type="IFX" THEN
--               CALL l_gensql_channel.write("}")
--            ELSE
--               CALL l_gensql_channel.write("*/")
--            END IF
              LET l_str = "create table ",g_zta.zta01 CLIPPED
              CALL l_gensql_channel.write(l_str)
              CALL l_gensql_channel.write("(")
           END IF
           LET l_sql_create_tab="create table ",g_zta.zta01 CLIPPED
           LET l_sql_create_tab=l_sql_create_tab CLIPPED,"("
           LET l_i=0
           FOREACH ztb_a INTO l_ztb03,l_ztb04,l_ztb06,l_ztb07,l_ztb08,l_ztb09,l_ztb11,l_gaq03
              IF sqlca.sqlcode THEN
                 LET g_err="foreach ztb_a error(gensql):"
                 CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                 EXIT FOREACH
              END IF
 
              #No.TQC-860023 -- start --
              #若預設值為' '(單一空白時),應顯示 ' '
              IF l_ztb11 IS NOT NULL AND cl_null(l_ztb11) THEN
                 LET l_ztb11_str = " "     
              ELSE
                 LET l_ztb11_str = l_ztb11 CLIPPED
              END IF
              #No.TQC-860023 -- end --

              LET l_i=l_i+1
              IF l_i != l_n THEN
                 IF l_ztb04='varchar2' OR
                    l_ztb04='varchar' OR                    #No.FUN-A60022---add
                    l_ztb04='nvarchar' OR                   #No.FUN-A60022---add
                    l_ztb04='char' OR
                    l_ztb04='number' OR
                    l_ztb04='decimal' THEN
                    IF l_ztb09='Y' THEN
                       IF l_ztb11 IS NULL OR
                          ((l_ztb04='number' OR l_ztb04='decimal' ) AND cl_null(l_ztb11)) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") NOT NULL,"
                       ELSE
                         #LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT '",l_ztb11 CLIPPED,"' NOT NULL,"   #TQC-820004 mark
                          IF l_ztb04 MATCHES "*char*" THEN #TQC-820004
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,")  DEFAULT '",l_ztb11_str,"' NOT NULL,"    #No.TQC-860023
                          ELSE
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT ",l_ztb11 CLIPPED," NOT NULL," #TQC-820004
                          END IF
                       END IF
                    ELSE
                       IF l_ztb11 IS NULL OR
                          ((l_ztb04='number' OR l_ztb04='decimal' ) AND cl_null(l_ztb11)) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,"),"
                       ELSE
                         #LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT '",l_ztb11 CLIPPED,"',"   #TQC-820004 mark
                          IF l_ztb04 MATCHES "*char*" THEN #TQC-820004
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,")  DEFAULT '",l_ztb11_str,"',"    #No.TQC-860023
                          ELSE
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT ",l_ztb11 CLIPPED,"," #TQC-820004
                          END IF
                       END IF
                    END IF
                 ELSE
                    IF l_ztb09='Y' THEN
                       IF l_ztb11 IS NULL OR cl_null(l_ztb11) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED," NOT NULL,"
                       ELSE
                          #TQC-810014
                        #No.FUN-A60022---start
                          IF ((l_ztb04='date' OR l_ztb04='datetime') AND
                             ((g_db_type = 'MSV' AND l_ztb11 = 'getdate()') OR
                             (g_db_type = 'IFX' AND l_ztb11 = 'today') OR
                              (g_db_type = 'ORA' AND l_ztb11 = 'sysdate'))) OR
                              l_ztb04 = 'integer' OR l_ztb04 = 'smallint'            ##No.MOD-840661
                          THEN
                        #No.FUN-A60022---end
                             LET l_str=l_ztb04 CLIPPED, " DEFAULT ",l_ztb11 CLIPPED," NOT NULL,"
                          ELSE
                             LET l_str=l_ztb04 CLIPPED ," DEFAULT '",l_ztb11 CLIPPED,"' NOT NULL,"
                          END IF
                          #END TQC-810014
                       END IF
                    ELSE
                       IF l_ztb11 IS NULL OR cl_null(l_ztb11) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED,","
                       ELSE
                          #TQC-810014
                        #No.FUN-A60022---start
                          IF ((l_ztb04='date' OR l_ztb04='datetime') AND
                             ((g_db_type = 'MSV' AND l_ztb11 = 'getdate()') OR
                             (g_db_type = 'IFX' AND l_ztb11 = 'today') OR
                              (g_db_type = 'ORA' AND l_ztb11 = 'sysdate'))) OR
                              l_ztb04 = 'integer' OR l_ztb04 = 'smallint'            ##No.MOD-840661
                          THEN
                        #No.FUN-A60022---end
                             LET l_str=l_ztb04 CLIPPED ," DEFAULT ",l_ztb11 CLIPPED,","
                          ELSE
                             LET l_str=l_ztb04 CLIPPED ," DEFAULT '",l_ztb11 CLIPPED,"',"
                          END IF
                          #END TQC-810014
                       END IF
                    END IF
                 END IF
                 LET l_sql_create_tab=l_sql_create_tab CLIPPED,
                                      l_ztb03 CLIPPED," ",
                                      l_str CLIPPED
              ELSE
                 IF l_ztb04='varchar2' OR
                    l_ztb04='varchar' OR        #No.FUN-A60022---add
                    l_ztb04='nvarchar' OR       #No.FUN-A60022---add
                    l_ztb04='char' OR
                    l_ztb04='number' OR
                    l_ztb04='decimal' THEN
                    IF l_ztb09='Y' THEN
                       IF l_ztb11 IS NULL OR
                          ((l_ztb04='number' OR l_ztb04='decimal' ) AND cl_null(l_ztb11)) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") NOT NULL"
                       ELSE
                         #LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT '",l_ztb11 CLIPPED,"' NOT NULL"   #TQC-820004 mark
                          IF l_ztb04 MATCHES "*char*" THEN #TQC-820004
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT '",l_ztb11_str,"' NOT NULL"    #No.TQC-860023
                          ELSE
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT ",l_ztb11 CLIPPED," NOT NULL" #TQC-820004
                          END IF
                       END IF
                    ELSE
                       IF l_ztb11 IS NULL OR
                          ((l_ztb04='number' OR l_ztb04='decimal' ) AND cl_null(l_ztb11)) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,")"
                       ELSE
                         #LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT '",l_ztb11 CLIPPED,"'"   #TQC-820004 mark
                          IF l_ztb04 MATCHES "*char*" THEN #TQC-820004
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT '",l_ztb11_str,"'"    #No.TQC-860023
                          ELSE
                             LET l_str=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,") DEFAULT ",l_ztb11 CLIPPED   #TQC-820004
                          END IF
                       END IF
                    END IF
                 ELSE
                    IF l_ztb09='Y' THEN
                       IF l_ztb11 IS NULL OR cl_null(l_ztb11) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED," NOT NULL"
                       ELSE
                          #TQC-810014
                        #No.FUN-A60022---start
                          IF ((l_ztb04='date' OR l_ztb04='datetime') AND
                             ((g_db_type = 'MSV' AND l_ztb11 = 'getdate()') OR
                             (g_db_type = 'IFX' AND l_ztb11 = 'today') OR
                              (g_db_type = 'ORA' AND l_ztb11 = 'sysdate'))) OR
                              l_ztb04 = 'integer' OR l_ztb04 = 'smallint'            ##No.MOD-840661
                          THEN
                        #No.FUN-A60022---end
                              LET l_str=l_ztb04 CLIPPED ," DEFAULT ",l_ztb11 CLIPPED," NOT NULL"
                          ELSE
                              LET l_str=l_ztb04 CLIPPED ," DEFAULT '",l_ztb11 CLIPPED,"' NOT NULL"
                          END IF
                       END IF
                    ELSE
                       IF l_ztb11 IS NULL OR cl_null(l_ztb11) THEN   #No.MOD-840661
                          LET l_str=l_ztb04 CLIPPED
                       ELSE
                          #TQC-810014
                        #No.FUN-A60022---start
                          IF ((l_ztb04='date' OR l_ztb04='datetime') AND
                             ((g_db_type = 'MSV' AND l_ztb11 = 'getdate()') OR
                             (g_db_type = 'IFX' AND l_ztb11 = 'today') OR
                              (g_db_type = 'ORA' AND l_ztb11 = 'sysdate'))) OR
                              l_ztb04 = 'integer' OR l_ztb04 = 'smallint'            ##No.MOD-840661
                          THEN
                        #No.FUN-A60022---end
                              LET l_str=l_ztb04 CLIPPED ," DEFAULT ",l_ztb11 CLIPPED
                          ELSE
                              LET l_str=l_ztb04 CLIPPED ," DEFAULT '",l_ztb11 CLIPPED,"'"
                          END IF
                          #END TQC-810014
                       END IF
                    END IF
                 END IF
                 #FUN-A60022 -- end --
                 LET l_sql_create_tab=l_sql_create_tab CLIPPED,
                                      l_ztb03 CLIPPED," ",
                                      l_str CLIPPED
#                 IF l_ztb04='datetime' THEN
#                    LET l_ztb04=l_ztb04 CLIPPED,"(",l_ztb06 CLIPPED," TO ",
#                                l_ztb07 CLIPPED,"),"
#                 ELSE
#                    IF l_ztb04='varchar' OR l_ztb04='decimal' THEN
#                       LET l_ztb04=l_ztb04 CLIPPED,"(",l_ztb08 CLIPPED,"),"
#                    ELSE
#                       LET l_ztb04=l_ztb04 CLIPPED,","
#                    END IF
#                 END IF
              END IF
-- 在   .src的檔裡暫定不提供雜項說明
              #IF g_db_type="IFX" THEN
              CASE g_db_type              #FUN-730016
               WHEN "IFX"                 #FUN-730016  
                 LET l_str =l_ztb03 CLIPPED,COLUMN 15,l_str CLIPPED
--                            ,COLUMN 38,"{",l_gaq03[1,40],COLUMN 79,"}"
              
               WHEN "ORA"                 #FUN-730016  
                 LET l_str =l_ztb03 CLIPPED,COLUMN 15,l_str CLIPPED
--                            ,COLUMN 38,"/*",l_gaq03[1,40],COLUMN 79,"*/"
 
               WHEN "MSV"                 #FUN-730016  
               #No.FUN-A60022---start
                 LET l_str =l_ztb03 CLIPPED,COLUMN 15,l_str CLIPPED
--                            ,COLUMN 38,"/*",l_gaq03[1,40],COLUMN 79,"*/"
               #No.FUN-A60022---end
              END CASE                    #FUN-730016
              IF g_zta.zta02="ds" THEN
                 CALL l_gensql_channel.write(l_str)
              END IF
           END FOREACH
           IF g_zta.zta02="ds" THEN
              CALL l_gensql_channel.write(");")
--              CALL l_gensql_channel.write("")
           END IF
           LET l_sql_create_tab=l_sql_create_tab CLIPPED,")"
           IF l_n1>0 THEN
              LET l_n1=0
              FOREACH ztc_a INTO l_ztc03,l_ztc04,l_ztc06
                 IF sqlca.sqlcode THEN
                    LET g_err="foreach ztc_a error(gensql):"
                    CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                    EXIT FOREACH
                 END IF
                 LET l_n1=l_n1+1

                 #----------FUN-A50004 modify start----------------------
                 LET l_ztc03_str = l_ztc03
                 IF (l_ztc03_str.getIndexOf('_pk', 1) < 1) THEN
                 #----------FUN-A50004 modify end------------------------
                    IF l_ztc06="Y" THEN
                       LET l_str ="create unique index ",l_ztc03 CLIPPED," on ",
                                  g_zta.zta01 CLIPPED," (",l_ztc04 CLIPPED,");"
                       LET l_sql_create_idx[l_n1]="create unique index ",
                                                 l_ztc03 CLIPPED," on ",
                                                 g_zta.zta01 CLIPPED,
                                                 " (",l_ztc04 CLIPPED,")"
                    ELSE
                       LET l_str ="create        index ",l_ztc03 CLIPPED," on ",
                                  g_zta.zta01 CLIPPED," (",l_ztc04 CLIPPED,");"
                       LET l_sql_create_idx[l_n1]="create        index ",
                                                 l_ztc03 CLIPPED," on ",
                                                 g_zta.zta01 CLIPPED,
                                                 " (",l_ztc04 CLIPPED,")"
                    END IF
                    IF g_zta.zta02="ds" THEN
                       CALL l_gensql_channel.write(l_str)
                    END IF
                 END IF     #FUN-A50004
              END FOREACH
           END IF
           IF l_n2>0 THEN
              LET l_n2=0
              FOREACH ztd_a INTO l_ztd.*
                 IF sqlca.sqlcode THEN
                    LET g_err="foreach ztd_a error(gensql):"
                    CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                    EXIT FOREACH
                 END IF
                 LET l_n2=l_n2+1
                 LET l_str = p_zta_ztd_setsql(l_ztd.*)
                 LET l_sql_create_con[l_n2]=  l_str
                 LET l_sql_create_con[l_n2] = cl_replace_str(l_sql_create_con[l_n2] CLIPPED,";","")
                 IF g_zta.zta02="ds" THEN
                    CALL l_gensql_channel.write(l_str)
                 END IF
              END FOREACH
           END IF
           IF g_zta.zta02="ds" THEN
              #MOD-7B0054
              IF g_db_type="IFX" THEN
                 LET l_str="alter table ",g_zta.zta01 CLIPPED," modify lock mode(row);"
                 CALL l_gensql_channel.write(l_str)
              END IF
              LET l_str="grant select on ",g_zta.zta01 CLIPPED," to tiptopgp;" #No.FUN-9B0011
              CALL l_gensql_channel.write(l_str)
              LET l_str="grant update on ",g_zta.zta01 CLIPPED," to tiptopgp;" #No.FUN-9B0011
              CALL l_gensql_channel.write(l_str)
              LET l_str="grant delete on ",g_zta.zta01 CLIPPED," to tiptopgp;" #No.FUN-9B0011
              CALL l_gensql_channel.write(l_str)
              LET l_str="grant insert on ",g_zta.zta01 CLIPPED," to tiptopgp;" #No.FUN-9B0011
              CALL l_gensql_channel.write(l_str)
            #No.FUN-A60022---start
              IF g_db_type = "MSV" THEN
                  LET l_str="grant references on ",g_zta.zta01 CLIPPED," to public;"  #FUN-B50010
                  CALL l_gensql_channel.write(l_str)
                 #LET l_str="grant references on ",g_zta.zta01 CLIPPED," to ods;" #FUN-B50010
                 #CALL l_gensql_channel.write(l_str)                              #FUN-B50010
              ELSE
                  LET l_str="grant index on ",g_zta.zta01 CLIPPED," to public;"  #No.FUN-9B0011 #FUN-B50010
                  CALL l_gensql_channel.write(l_str)
                 #LET l_str="grant index on ",g_zta.zta01 CLIPPED," to ods;"  #No.FUN-9C0036 #FUN-B50010
                 #CALL l_gensql_channel.write(l_str)                          #FUN-B50010
              END IF
              LET l_str="grant select on ",g_zta.zta01 CLIPPED," to ods;" #No.FUN-9C0036
              CALL l_gensql_channel.write(l_str)
            #No.FUN-A60022---end
              #END MOD-7B0054
              CALL l_gensql_channel.close()
           END IF
        END IF
 
        BEGIN WORK
        IF l_n>0 THEN
           LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                     " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                     "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
           PREPARE p_zta_gensql_pre6 FROM l_sql
           EXECUTE p_zta_gensql_pre6 INTO l_zs03
           FREE p_zta_gensql_pre6
           IF l_zs03 IS NULL THEN
              LET l_zs03 = 1
           END IF
           LET l_sql="SELECT COUNT(*) FROM ztb_file",
                     " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                     "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
                     "   AND ztb05='c'"
           PREPARE p_zta_gensql_pre7 FROM l_sql
           EXECUTE p_zta_gensql_pre7 INTO l_count
           FREE p_zta_gensql_pre7
           FOR l_i=1 TO 6
              IF g_zta.zta01[l_i,l_i] = '_' THEN
                 EXIT FOR
              END IF
           END FOR
           LET l_cmd="create table ",g_zta.zta01 CLIPPED,"{$",UPSHIFT(g_zta.zta03) CLIPPED,  #No.FUN-A60050
                     "/sch/",g_zta.zta01 CLIPPED,".sch.src}"
#                     "/sch/",g_zta.zta01[1,l_i-1],".sch}"
           EXECUTE IMMEDIATE l_sql_create_tab
           IF sqlca.sqlcode THEN
              FOR l_i=1 TO 6
                 IF g_zta.zta01[l_i,l_i] = '_' THEN
                    EXIT FOR
                 END IF
              END FOR

              #No.FUN-A60022---start
              #LET l_str = fgl_getenv(g_zta.zta03)                          #No.FUN-A60050
              LET l_str = p_zta_set_db_type("sch")  #FUN-A80029

              LET l_str = "rm ",fgl_getenv(g_zta.zta03) ,"/",l_str,"/",
                          g_zta.zta01 CLIPPED,".sch.src"
              #No.FUN-A60022---end
              LET g_err="DDL command error(gensql):",l_sql_create_tab
              CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
              ROLLBACK WORK
           ELSE
              IF l_count > 0 THEN
                  LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                          " VALUES('",g_zta.zta01 CLIPPED,"','",
                                      g_zta.zta02 CLIPPED,"',",
                                      l_zs03 CLIPPED,",'",
                                      g_date CLIPPED,"','c','",
                                      l_cmd CLIPPED,"','",
                                      g_user CLIPPED,"','",
                                      g_MODNO CLIPPED,"','Y','N','N','",
                                      g_tiptop_ver CLIPPED,"')"
              ELSE
                  LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                          " VALUES('",g_zta.zta01 CLIPPED,"','",
                                      g_zta.zta02 CLIPPED,"',",
                                      l_zs03 CLIPPED,",'",
                                      g_date CLIPPED,"','p','",
                                      l_cmd CLIPPED,"','",
                                      g_user CLIPPED,"','",
                                      g_MODNO CLIPPED,"','Y','N','N','",
                                      g_tiptop_ver CLIPPED,"')"
              END IF
              EXECUTE IMMEDIATE l_sql
              IF sqlca.sqlcode THEN
                 LET g_err="insert zs error(gensql):"
                 #CALL cl_er�(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                 CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                 ROLLBACK WORK
                 RETURN
              ELSE
                 LET l_sql="UPDATE zta_file SET zta10='Y'",
                           " WHERE zta01='",g_zta.zta01 CLIPPED,"'",
                           "   AND zta02='",g_zta.zta02 CLIPPED,"'"
                 EXECUTE IMMEDIATE l_sql
                 IF sqlca.sqlerrd[3] = 0 THEN
                    LET g_err="update zta error(gensql):"
                    #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                    CALL cl_err3("upd","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                    ROLLBACK WORK
                    RETURN
                 END IF
              END IF
              IF g_edition="C" THEN
                 IF l_count > 0 THEN
                    LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                              " VALUES('",g_zta.zta01 CLIPPED,"','",
                                         g_zta.zta02 CLIPPED,"',",
                                         l_zs03 CLIPPED,",'",
                                         g_date CLIPPED,"','c','",
                                         l_cmd CLIPPED,"','",
                                         g_user CLIPPED,"','",
                                         g_MODNO CLIPPED,
                                         "','Y','N','N','",
                                         g_tiptop_ver CLIPPED,"')"
                 ELSE
                    LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                              " VALUES('",g_zta.zta01 CLIPPED,"','",
                                         g_zta.zta02 CLIPPED,"',",
                                         l_zs03 CLIPPED,",'",
                                         g_date CLIPPED,"','p','",
                                         l_cmd CLIPPED,"','",
                                         g_user CLIPPED,"','",
                                         g_MODNO CLIPPED,
                                         "','Y','N','N','",
                                         g_tiptop_ver CLIPPED,"')"
                 END IF
                 EXECUTE IMMEDIATE l_sql
              END IF
              IF sqlca.sqlcode THEN
                 LET g_err="insert zs@std_server error(gensql):"
                 #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                 CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                 ROLLBACK WORK
                 RETURN
              END IF
              #IF g_db_type="IFX" THEN
              CASE g_db_type                                   #FUN-730016
               WHEN "IFX"                                      #FUN-730016  
                 LET l_sql="alter table ",g_zta.zta02 CLIPPED,":",g_zta.zta01 CLIPPED,
                           " modify lock mode(row)"
                 EXECUTE IMMEDIATE l_sql
                 
               WHEN "ORA"                                      #FUN-730016  
 
               WHEN "MSV"                                      #FUN-730016  
              END CASE                                         #FUN-730016

              LET l_sql="grant select on ",g_zta.zta01 CLIPPED,
                        " to tiptopgp"  #No.FUN-9B0011
              EXECUTE IMMEDIATE l_sql
              LET l_sql="grant update on ",g_zta.zta01 CLIPPED,
                        " to tiptopgp"  #No.FUN-9B0011
              EXECUTE IMMEDIATE l_sql
              LET l_sql="grant delete on ",g_zta.zta01 CLIPPED,
                        " to tiptopgp"  #No.FUN-9B0011
              EXECUTE IMMEDIATE l_sql
              LET l_sql="grant insert on ",g_zta.zta01 CLIPPED,
                        " to tiptopgp"  #No.FUN-9B0011
              EXECUTE IMMEDIATE l_sql
            #No.FUN-A60022---start
              IF g_db_type = 'MSV' THEN
                 LET l_sql="grant references on ",g_zta.zta01 CLIPPED,
                           " to public"  #No.FUN-9B0011 #FUN-B50010
                 EXECUTE IMMEDIATE l_sql
                #FUN-B50010-start-
                #LET l_sql="grant references on ",g_zta.zta01 CLIPPED,
                #          " to ods"  #No.FUN-9C0036
                #EXECUTE IMMEDIATE l_sql
                #FUN-B50010-end-
              ELSE
                 LET l_sql="grant index on ",g_zta.zta01 CLIPPED,
                           " to public"  #No.FUN-9B0011           #FUN-B50010
                 EXECUTE IMMEDIATE l_sql
                #LET l_sql="grant index on ",g_zta.zta01 CLIPPED, #FUN-B50010
                #          " to ods"  #No.FUN-9C0036              #FUN-B50010
                #EXECUTE IMMEDIATE l_sql                          #FUN-B50010
              END IF
              LET l_sql="grant select on ",g_zta.zta01 CLIPPED,
                        " to ods"  #No.FUN-9C0036
              EXECUTE IMMEDIATE l_sql
            #No.FUN-A60022---end
 
##      暫時先mark,這是在開發中期時決定除了ds之外的table不留ztb單身
#              IF g_zta.zta02!='ds' THEN
#                 DELETE FROM ztb_file WHERE ztb01=g_zta.zta01
#                                        AND ztb02=g_zta.zta02
#              END IF
              FOR l_n1=1 TO 10
                  IF cl_null(l_sql_create_idx[l_n1]) THEN
                     EXIT FOR
                  END IF
                  EXECUTE IMMEDIATE l_sql_create_idx[l_n1]
                  IF sqlca.sqlcode THEN
                     FOR l_i=1 TO 6
                        IF g_zta.zta01[l_i,l_i] = '_' THEN
                           EXIT FOR
                        END IF
                     END FOR
                     #No.FUN-A60022---start
                     #LET l_str = fgl_getenv(g_zta.zta03)                          #No.FUN-A60050
                     LET l_str = p_zta_set_db_type("sch")  #FUN-A80029

                     LET l_str = "rm ",fgl_getenv(g_zta.zta03) ,"/",l_str,"/",
                                 g_zta.zta01 CLIPPED,".sch.src"
                     #No.FUN-A60022---end
                     LET g_err="DDL command error(gensql):",l_sql_create_idx[l_n1]
                     CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                     ROLLBACK WORK
                     EXIT FOR
                  ELSE
                     CONTINUE FOR
                  END IF
              END FOR
              
              #No.FUN-730016
              FOR l_n2 =1 TO l_sql_create_con.getLength()
                  IF cl_null(l_sql_create_con[l_n2]) THEN
                     EXIT FOR
                  END IF
                  EXECUTE IMMEDIATE l_sql_create_con[l_n2]
                  IF sqlca.sqlcode THEN
                     LET g_err="DDL command error(gensql):",l_sql_create_con[l_n2]
                     CALL p_zta_c_err(l_sql_create_con[l_n2],g_err)                       #FUN-A90062
                     ROLLBACK WORK
                     IF g_db_type="IFX" THEN
                        RETURN
                     ELSE
                        EXIT FOR
                     END IF
                  ELSE
                     CONTINUE FOR
                  END IF
              END FOR
              #END No.FUN-730016
 
              IF sqlca.sqlcode=0 THEN
                 CALL fgl_winmessage("Info","Create Table Success","info")
##      暫時先mark,這是在開發中期時決定除了ds之外的table不留ztc單身
#                 IF g_zta.zta02!='ds' THEN
#                    DELETE FROM ztc_file WHERE ztc01=g_zta.zta01
#                                           AND ztc02=g_zta.zta02
#                 END IF
                 COMMIT WORK
                 CALL p_zta_parse_view(g_zta.zta01,'a','')    #FUN-990043
                 LET g_zta.zta10='Y'
                 CALL p_zta_show()
              END IF
           END IF
        END IF
     END IF
  END IF
END FUNCTION
 
FUNCTION find_sqlfile(p_zs06)
    DEFINE p_zs06       LIKE zs_file.zs06,
           l_file       LIKE type_file.chr50,    #No.FUN-680135 VARCHAR(50)
           l_p1, l_p2   LIKE type_file.num5      #No.FUN-680135 SMALLINT
 
    FOR g_i = 1 TO LENGTH(p_zs06)
        IF p_zs06[g_i] = "{" THEN
           LET l_p1 = g_i + 1
        END IF
        IF p_zs06[g_i] = "}" THEN
           LET l_p2 = g_i - 1
           LET l_file = p_zs06[l_p1, l_p2]
           EXIT FOR
        END IF
    END FOR
 
    RETURN l_file
END FUNCTION
 
 
FUNCTION p_zta_dbqry_bp(p_ud)
DEFINE   p_ud       LIKE type_file.chr1          #No.FUN-680135 VARCHAR(1)
 
   IF p_ud <> "G" OR g_action_choice = "field_body" 
      OR g_action_choice = "index_body" 
      OR g_action_choice = "constraint_body"             #FUN-730016
   THEN
      IF g_dba_priv != '1' THEN
         LET g_action_choice=''
      END IF
      RETURN
   END IF
 
   LET g_action_choice = " "
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   DISPLAY ARRAY ga_table_data TO s_table_data.* ATTRIBUTE (COUNT = g_dbqry_rec_b,UNBUFFERED)
 
#       BEFORE DISPLAY
#         CALL cl_navigator_setting( g_curs_index, g_row_count )
 
       BEFORE ROW
          LET l_ac = ARR_CURR()
 
       ON ACTION inputsql
          LET g_action_choice="inputsql"
          EXIT DISPLAY
       ON ACTION locale
          CALL cl_dynamic_locale()
          EXIT DISPLAY
       ON ACTION exit                             # Esc.結束
          LET g_action_choice="exit"
          EXIT DISPLAY
       ON ACTION exporttoexcel
          LET g_action_choice = 'exporttoexcel'
          EXIT DISPLAY
       ON ACTION controlg
          LET g_action_choice="controlg"
          EXIT DISPLAY
       ON ACTION cancel
           LET INT_FLAG=FALSE 		#MOD-570244	mars
          LET g_action_choice="exit"
          EXIT DISPLAY
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
    END DISPLAY
    CALL cl_set_act_visible("accept,cancel", TRUE)
END FUNCTION
 
FUNCTION p_zta_bp(p_ud)
 
   DEFINE   p_ud   LIKE type_file.chr1          #No.FUN-680135 VARCHAR(1)
 
   IF p_ud <> "G" OR g_action_choice = "field_body" 
      OR g_action_choice = "index_body" 
      OR g_action_choice = "constraint_body"             #FUN-730016
   THEN
      IF g_dba_priv != '1' OR cl_null(g_dba_priv) THEN
         LET g_action_choice=''
      END IF
      RETURN
   END IF
 
   LET g_action_choice = " "
   CALL cl_set_act_visible("accept,cancel", FALSE)
   
   DISPLAY ARRAY g_ztb TO s_ztb.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
 
       BEFORE DISPLAY
         CALL cl_navigator_setting( g_curs_index, g_row_count )
         CALL DIALOG.setActionActive("control-b", TRUE)            #TQC-770082
 
       BEFORE ROW
          LET l_ac = ARR_CURR()
 
       #FUN-730016
       ON ACTION index                            # Index Page
          LET g_page_choice = "index"         
          EXIT DISPLAY
 
       ON ACTION constraint                       # Constraint Page
          LET g_page_choice = "constraint"         
          EXIT DISPLAY
       #END FUN-730016
 
       ON ACTION insert                           # A.輸入
          LET g_action_choice="insert"
          EXIT DISPLAY
       ON ACTION query                            # Q.查詢
          LET g_action_choice="query"
          EXIT DISPLAY
       ON ACTION modify                           # U.更改
          LET g_action_choice="modify"
          EXIT DISPLAY
       ON ACTION output                           # U.更改
          LET g_action_choice="output"
          EXIT DISPLAY
       ON ACTION delete                           # R.取消
          LET g_action_choice="delete"
          EXIT DISPLAY
       ON ACTION first                            # 第一筆
        #No.FUN-A60022---start
          #CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('F')          
          #CALL cl_set_act_visible("accept,cancel", FALSE)
          #CALL p_zta_ztc_refresh()                   
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
        #No.FUN-A60022---end 
 
       ON ACTION previous                         # P.上筆
        #No.FUN-A60022---start
          #CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('P')
          #CALL cl_set_act_visible("accept,cancel", FALSE)
          #CALL p_zta_ztc_refresh()
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
        #No.FUN-A60022---start
 
       ON ACTION jump                             # 指定筆
        #No.FUN-A60022---start
          #CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('/')
          
           #CALL cl_set_act_visible("accept,cancel", FALSE)
           #CALL p_zta_ztc_refresh()
          
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
        #No.FUN-A60022---end
 
       ON ACTION next                             # N.下筆
        #No.FUN-A60022---start
          #CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('N')
          #CALL cl_set_act_visible("accept,cancel", FALSE)
          #CALL p_zta_ztc_refresh()
        #No.FUN-A60022---end 
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
        #No.FUN-A60022---start
 
       ON ACTION last                             # 最終筆
        #No.FUN-A60022---start
          #CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('L')
           #CALL cl_set_act_visible("accept,cancel", FALSE)
           #CALL p_zta_ztc_refresh()
         
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_b != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
        #No.FUN-A60022---end 
 
       ON ACTION help                             # H.說明
          LET g_action_choice="help"
          EXIT DISPLAY
       ON ACTION locale
          CALL cl_dynamic_locale()
          EXIT DISPLAY
       ON ACTION exit                             # Esc.結束
          LET g_action_choice="exit"
          EXIT DISPLAY
 
       ON ACTION select_db
          LET g_action_choice="select_db"
          EXIT DISPLAY
 
       ON ACTION zta_import
          LET g_action_choice="zta_import"
          EXIT DISPLAY
 
       ON ACTION create_table
          LET g_action_choice="create_table"
          EXIT DISPLAY
 
       ON ACTION field_body
          LET g_action_choice="field_body"
          EXIT DISPLAY
 
       ON ACTION index_body
          LET g_page_choice = "index"                       #FUN-730016
          LET g_action_choice="index_body"
          EXIT DISPLAY
 
       ##FUN-730016
       ON ACTION constraint_body
          LET g_action_choice="constraint_body"
          LET l_ac_ztd  = 1
          EXIT DISPLAY
       ##END FUN-730016
 
       ON ACTION maintain_field_description
          LET g_action_choice="maintain_field_description"
          EXIT DISPLAY
 
       ON ACTION maintain_table_description
          LET g_action_choice="maintain_table_description"
          EXIT DISPLAY
 
       ON ACTION generate_single_sqlfile
          LET g_action_choice="generate_single_sqlfile"
          EXIT DISPLAY
 
       ON ACTION generate_batch_sqlfile
          LET g_action_choice="generate_batch_sqlfile"
          EXIT DISPLAY
 
       #FUN-660178 
       ON ACTION create_synonym
          LET g_action_choice="create_synonym"
          EXIT DISPLAY
       #END FUN-660178 
 
       ON ACTION import_alter_sqlfile
          LET g_action_choice="import_alter_sqlfile"
          EXIT DISPLAY
 
      ON ACTION exporttoexcel
         LET g_action_choice = 'exporttoexcel'
         EXIT DISPLAY
 
       ON ACTION import_create_sqlfile
          LET g_action_choice="import_create_sqlfile"
          EXIT DISPLAY
 
#       ON ACTION link_database_setup
#          LET g_action_choice="link_database_setup"
#          EXIT DISPLAY
 
#       ON ACTION link_database
#          LET g_action_choice="link_database"
#          EXIT DISPLAY
 
       ON ACTION diff_database
          LET g_action_choice="diff_database"
          EXIT DISPLAY
 
       #No.FUN-9B0011 -- start --
       ON ACTION diff_views
          LET g_action_choice="diff_views"        #系統設定與虛擬資料庫 views 的差異比對
          EXIT DISPLAY
       #No.FUN-9B0011 -- end --

       ON ACTION generate_database_guide
          LET g_action_choice="generate_database_guide"
          EXIT DISPLAY
 
       ON ACTION schema_modify_list
          LET g_action_choice="schema_modify_list"
          EXIT DISPLAY
 
#       ON ACTION alter_lockmode
#          LET g_action_choice="alter_lockmode"
#          EXIT DISPLAY
 
       ON ACTION kill_lock
          LET g_action_choice="kill_lock"
          EXIT DISPLAY
 
       ON ACTION accept
          LET g_action_choice="field_body"
          LET l_ac = ARR_CURR()
          EXIT DISPLAY

       #Begin:FUN-C10031
       #Begin:FUN-BA0082
       ON ACTION database_query
          LET g_action_choice="database_query"
          EXIT DISPLAY
       #End:FUN-BA0082
       #End:FUN-C10031
 
       ON ACTION controlg
          LET g_action_choice="controlg"
          EXIT DISPLAY
 
       #ON KEY(tab)
       ON KEY(control-b)                          #TQC-770082
          LET g_action_choice="controlb"
          EXIT DISPLAY
 
       ON ACTION cancel
             LET INT_FLAG=FALSE 	      	  #MOD-570244	mars
          LET g_action_choice="exit"
          EXIT DISPLAY
       ON ACTION drop_table                       # D.Drop table
          LET g_action_choice="drop_table"
          EXIT DISPLAY
 
      #TQC-680020
      #ON ACTION gen_program                       # D.Drop table
      #   LET g_action_choice="gen_program"
      #   EXIT DISPLAY
      #END TQC-680020
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
    END DISPLAY
    CALL cl_set_act_visible("accept,cancel", TRUE)
END FUNCTION
 
#FUN-730016
FUNCTION p_zta_d_bp(p_ud)
 
   DEFINE   p_ud   LIKE type_file.chr1          #No.FUN-680135 VARCHAR(1)
 
   IF p_ud <> "G" OR g_action_choice = "field_body" 
      OR g_action_choice = "index_body" 
      OR g_action_choice = "constraint_body"             #FUN-730016
   THEN
      IF g_dba_priv != '1' THEN
         LET g_action_choice=''
      END IF
      RETURN
   END IF
 
   LET g_action_choice = " "
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d,UNBUFFERED)
 
       BEFORE DISPLAY
         CALL cl_navigator_setting( g_curs_index, g_row_count )
         CALL DIALOG.setActionActive("control-b", TRUE)            #TQC-770082
 
       BEFORE ROW
          LET l_ac_ztc = ARR_CURR()
 
       ON ACTION field                            # Field Page
          LET g_page_choice = "field"         
          EXIT DISPLAY
 
       ON ACTION constraint                       # Constraint Page
          LET g_page_choice = "constraint"         
          EXIT DISPLAY
 
       ON ACTION insert                           # A.輸入
          LET g_action_choice="insert"
          EXIT DISPLAY
       ON ACTION query                            # Q.查詢
          LET g_action_choice="query"
          EXIT DISPLAY
       ON ACTION modify                           # U.更改
          LET g_action_choice="modify"
          EXIT DISPLAY
       ON ACTION output                           # U.更改
          LET g_action_choice="output"
          EXIT DISPLAY
       ON ACTION delete                           # R.取消
          LET g_action_choice="delete"
          EXIT DISPLAY
       ON ACTION first                            # 第一筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('F')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL p_zta_ztc_refresh()
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
 
       ON ACTION previous                         # P.上筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('P')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL p_zta_ztc_refresh()
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
 
       ON ACTION jump                             # 指定筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('/')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL p_zta_ztc_refresh()
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
 
       ON ACTION next                             # N.下筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('N')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL p_zta_ztc_refresh()
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
 
       ON ACTION last                             # 最終筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('L')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL p_zta_ztc_refresh()
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
          END IF
 
       ON ACTION help                             # H.說明
          LET g_action_choice="help"
          EXIT DISPLAY
       ON ACTION locale
          CALL cl_dynamic_locale()
          EXIT DISPLAY
       ON ACTION exit                             # Esc.結束
          LET g_action_choice="exit"
          EXIT DISPLAY
 
       ON ACTION select_db
          LET g_action_choice="select_db"
          EXIT DISPLAY
 
       ON ACTION zta_import
          LET g_action_choice="zta_import"
          EXIT DISPLAY
 
       ON ACTION create_table
          LET g_action_choice="create_table"
          EXIT DISPLAY
 
       ON ACTION field_body
          LET g_action_choice="field_body"
          EXIT DISPLAY
 
       ON ACTION index_body
          LET g_page_choice = "index"                       #FUN-730016
          LET g_action_choice="index_body"
          EXIT DISPLAY
 
       ##FUN-730016
       ON ACTION constraint_body
          LET g_action_choice="constraint_body"
          LET l_ac_ztd  = 1
          EXIT DISPLAY
       #END FUN-730016
 
 
       ON ACTION maintain_field_description
          LET g_action_choice="maintain_field_description"
          EXIT DISPLAY
 
       ON ACTION maintain_table_description
          LET g_action_choice="maintain_table_description"
          EXIT DISPLAY
 
       ON ACTION generate_single_sqlfile
          LET g_action_choice="generate_single_sqlfile"
          EXIT DISPLAY
 
       ON ACTION generate_batch_sqlfile
          LET g_action_choice="generate_batch_sqlfile"
          EXIT DISPLAY
 
       #FUN-660178 
       ON ACTION create_synonym
          LET g_action_choice="create_synonym"
          EXIT DISPLAY
       #END FUN-660178 
 
       ON ACTION import_alter_sqlfile
          LET g_action_choice="import_alter_sqlfile"
          EXIT DISPLAY
 
      ON ACTION exporttoexcel
         LET g_action_choice = 'exporttoexcel'
         EXIT DISPLAY
 
       ON ACTION import_create_sqlfile
          LET g_action_choice="import_create_sqlfile"
          EXIT DISPLAY
 
#       ON ACTION link_database_setup
#          LET g_action_choice="link_database_setup"
#          EXIT DISPLAY
 
#       ON ACTION link_database
#          LET g_action_choice="link_database"
#          EXIT DISPLAY
 
       ON ACTION diff_database
          LET g_action_choice="diff_database"
          EXIT DISPLAY

       #No.FUN-9B0011 -- start --
       ON ACTION diff_views
          LET g_action_choice="diff_views"        #系統設定與虛擬資料庫 views 的差異比對
          EXIT DISPLAY
       #No.FUN-9B0011 -- end --
 
       ON ACTION generate_database_guide
          LET g_action_choice="generate_database_guide"
          EXIT DISPLAY
 
       ON ACTION schema_modify_list
          LET g_action_choice="schema_modify_list"
          EXIT DISPLAY
 
#       ON ACTION alter_lockmode
#          LET g_action_choice="alter_lockmode"
#          EXIT DISPLAY
 
       ON ACTION kill_lock
          LET g_action_choice="kill_lock"
          EXIT DISPLAY
 
       ON ACTION accept
          LET g_action_choice="index_body"
          LET l_ac_ztc = ARR_CURR()
          EXIT DISPLAY

       #Begin:FUN-C10031
       #Begin:FUN-BA0082
       ON ACTION database_query
          LET g_action_choice="database_query"
          EXIT DISPLAY
       #End:FUN-BA0082
       #End:FUN-C10031
 
       ON ACTION controlg
          LET g_action_choice="controlg"
          EXIT DISPLAY
 
       #ON KEY(tab)
       ON KEY(control-b)                          #TQC-770082
          LET g_action_choice="controlb"
          EXIT DISPLAY
 
       ON ACTION cancel
             LET INT_FLAG=FALSE 		#MOD-570244	mars
          LET g_action_choice="exit"
          EXIT DISPLAY
       ON ACTION drop_table                       # D.Drop table
          LET g_action_choice="drop_table"
          EXIT DISPLAY
 
      #TQC-680020
      #ON ACTION gen_program                       # D.Drop table
      #   LET g_action_choice="gen_program"
      #   EXIT DISPLAY
      #END TQC-680020
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
    END DISPLAY
    CALL cl_set_act_visible("accept,cancel", TRUE)
END FUNCTION
 
FUNCTION p_zta_c_bp(p_ud)
 
   DEFINE   p_ud   LIKE type_file.chr1          #No.FUN-680135 VARCHAR(1)
 
   IF p_ud <> "G" OR g_action_choice = "field_body" 
      OR g_action_choice = "index_body" 
      OR g_action_choice = "constraint_body"             #FUN-730016
   THEN
      IF g_dba_priv != '1' THEN
         LET g_action_choice=''
      END IF
      RETURN
   END IF
 
   LET g_action_choice = " "
   CALL cl_set_act_visible("accept,cancel", FALSE)
 
   DISPLAY ARRAY g_ztd TO s_ztd.* ATTRIBUTE(COUNT=g_rec_c,UNBUFFERED)
 
       BEFORE DISPLAY
         CALL cl_navigator_setting( g_curs_index, g_row_count )
         CALL DIALOG.setActionActive("control-b", TRUE)            #TQC-770082
       #No.FUN-A60022---start
         CASE g_db_type 
           WHEN "IFX"
            CALL cl_set_comp_visible("ztd11", FALSE)
           WHEN "MSV" 
            CALL cl_set_comp_visible("ztd08,ztd09,ztd11", FALSE)
         END CASE
       #No.FUN-A60022---end
 
       BEFORE ROW
          LET l_ac_ztd = ARR_CURR()
          CALL p_ztd_group_show()
      
       ON ACTION field                            # Field Page
          LET g_page_choice = "field"         
          EXIT DISPLAY
 
       ON ACTION index                            # Index Page
          LET g_page_choice = "index"         
          EXIT DISPLAY
 
       ON ACTION insert                           # A.輸入
          LET g_action_choice="insert"
          EXIT DISPLAY
       ON ACTION query                            # Q.查詢
          LET g_action_choice="query"
          EXIT DISPLAY
       ON ACTION modify                           # U.更改
          LET g_action_choice="modify"
          EXIT DISPLAY
       ON ACTION output                           # U.更改
          LET g_action_choice="output"
          EXIT DISPLAY
       ON ACTION delete                           # R.取消
          LET g_action_choice="delete"
          EXIT DISPLAY
 
       ON ACTION first                            # 第一筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('F')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
             LET l_ac_ztd = 1
          END IF
          CALL p_ztd_group_show()
 
       ON ACTION previous                         # P.上筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('P')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
             LET l_ac_ztd = 1
          END IF
          CALL p_ztd_group_show()
 
       ON ACTION jump                             # 指定筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('/')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
             LET l_ac_ztd = 1
          END IF
          CALL p_ztd_group_show()
 
       ON ACTION next                             # N.下筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('N')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
             LET l_ac_ztd = 1
          END IF
          CALL p_ztd_group_show()
 
       ON ACTION last                             # 最終筆
          CALL cl_set_act_visible("accept,cancel", TRUE)
          CALL p_zta_fetch('L')
          CALL cl_set_act_visible("accept,cancel", FALSE)
          CALL cl_navigator_setting(g_curs_index, g_row_count)   ###add in 040517
          IF g_rec_d != 0 THEN
             CALL fgl_set_arr_curr(1)  ######add in 040505
             LET l_ac_ztd = 1
          END IF
          CALL p_ztd_group_show()
 
       ON ACTION help                             # H.說明
          LET g_action_choice="help"
          EXIT DISPLAY
       ON ACTION locale
          CALL cl_dynamic_locale()
          EXIT DISPLAY
       ON ACTION exit                             # Esc.結束
          LET g_action_choice="exit"
          EXIT DISPLAY
 
       ON ACTION select_db
          LET g_action_choice="select_db"
          EXIT DISPLAY
 
       ON ACTION zta_import
          LET g_action_choice="zta_import"
          EXIT DISPLAY
 
       ON ACTION create_table
          LET g_action_choice="create_table"
          EXIT DISPLAY
 
       ON ACTION field_body
          LET g_action_choice="field_body"
          EXIT DISPLAY
 
       ON ACTION index_body
          LET g_page_choice = "index"                       #FUN-730016
          LET g_action_choice="index_body"
          EXIT DISPLAY
 
       ##FUN-730016
       ON ACTION constraint_body
          LET g_action_choice="constraint_body"
          LET l_ac_ztd  = 1
          EXIT DISPLAY
       #END FUN-730016
 
 
       ON ACTION maintain_field_description
          LET g_action_choice="maintain_field_description"
          EXIT DISPLAY
 
       ON ACTION maintain_table_description
          LET g_action_choice="maintain_table_description"
          EXIT DISPLAY
 
       ON ACTION generate_single_sqlfile
          LET g_action_choice="generate_single_sqlfile"
          EXIT DISPLAY
 
       ON ACTION generate_batch_sqlfile
          LET g_action_choice="generate_batch_sqlfile"
          EXIT DISPLAY
 
       #FUN-660178 
       ON ACTION create_synonym
          LET g_action_choice="create_synonym"
          EXIT DISPLAY
       #END FUN-660178 
 
       ON ACTION import_alter_sqlfile
          LET g_action_choice="import_alter_sqlfile"
          EXIT DISPLAY
 
      ON ACTION exporttoexcel
         LET g_action_choice = 'exporttoexcel'
         EXIT DISPLAY
 
       ON ACTION import_create_sqlfile
          LET g_action_choice="import_create_sqlfile"
          EXIT DISPLAY
 
#       ON ACTION link_database_setup
#          LET g_action_choice="link_database_setup"
#          EXIT DISPLAY
 
#       ON ACTION link_database
#          LET g_action_choice="link_database"
#          EXIT DISPLAY
 
       ON ACTION diff_database
          LET g_action_choice="diff_database"
          EXIT DISPLAY

       #No.FUN-9B0011 -- start --
       ON ACTION diff_views
          LET g_action_choice="diff_views"        #系統設定與虛擬資料庫 views 的差異比對
          EXIT DISPLAY
       #No.FUN-9B0011 -- end --
 
       ON ACTION generate_database_guide
          LET g_action_choice="generate_database_guide"
          EXIT DISPLAY
 
       ON ACTION schema_modify_list
          LET g_action_choice="schema_modify_list"
          EXIT DISPLAY
 
#       ON ACTION alter_lockmode
#          LET g_action_choice="alter_lockmode"
#          EXIT DISPLAY
 
       ON ACTION kill_lock
          LET g_action_choice="kill_lock"
          EXIT DISPLAY
 
       ON ACTION accept
          LET g_action_choice="constraint_body"
          LET l_ac_ztd = ARR_CURR()
          EXIT DISPLAY

       #Begin:FUN-C10031
       #Begin:FUN-BA0082
       ON ACTION database_query
          LET g_action_choice="database_query"
          EXIT DISPLAY
       #End:FUN-BA0082
       #End:FUN-C10031
 
       ON ACTION controlg
          LET g_action_choice="controlg"
          EXIT DISPLAY
 
       #ON KEY(tab)
       ON KEY(control-b)                          #TQC-770082
          LET g_action_choice="controlb"
          EXIT DISPLAY
 
       ON ACTION cancel
             LET INT_FLAG=FALSE 		#MOD-570244	mars
          LET g_action_choice="exit"
          EXIT DISPLAY
       ON ACTION drop_table                       # D.Drop table
          LET g_action_choice="drop_table"
          EXIT DISPLAY
 
       #FUN-7A0029
       ON ACTION view_key                          # 瀏覽Constraint 欄位資料
          LET g_action_choice="view_key"
          EXIT DISPLAY
       #END FUN-7A0029
 
      #TQC-680020
      #ON ACTION gen_program                       # D.Drop table
      #   LET g_action_choice="gen_program"
      #   EXIT DISPLAY
      #END TQC-680020
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
    END DISPLAY
    CALL cl_set_comp_visible("view_key", FALSE)              #FUN-7A0029
    CALL cl_set_act_visible("accept,cancel", TRUE)
END FUNCTION
 
FUNCTION p_ztd_group_show()
DEFINE lw_w                  ui.window
DEFINE ln_w                  om.DomNode
DEFINE l_node                om.DomNode
DEFINE l_node2               om.DomNode
DEFINE l_page                om.DomNode
DEFINE l_group               om.DomNode
DEFINE ls_hboxs              om.NodeList
DEFINE ls_pages              om.NodeList
DEFINE ls_groups             om.NodeList
DEFINE l_tok                 base.StringTokenizer
DEFINE l_cnt                 LIKE type_file.num10
DEFINE l_str                 STRING
 
   CALL g_ztd_fk.clear()
   DISPLAY '' TO FORMONLY.condition
 
   LET lw_w=ui.window.getcurrent()
   LET ln_w = lw_w.getNode()
   LET ls_pages = ln_w.selectBypath("//Page[@name=\"page5\"]")
   LET l_page = ls_pages.item(1)
 
   LET ls_hboxs = l_page.selectByTagName("HBox")
   LET l_node  = ls_hboxs.item(1)
   LET l_node2 = ls_hboxs.item(2)
 
   CALL cl_set_comp_visible("view_key", FALSE)              #FUN-7A0029
   IF l_ac_ztd > 0  AND g_rec_c > 0 THEN
      IF NOT cl_null(g_ztd[l_ac_ztd].ztd04) THEN
         IF g_ztd[l_ac_ztd].ztd04 = "C" THEN
             LET ls_groups = l_node2.selectByTagName("Group")
             LET l_group  = ls_groups.item(1)
             CALL l_node.setAttribute("hidden", 1)
             CALL l_node2.setAttribute("hidden", 0)
             CALL cl_set_comp_visible("group3", TRUE)
             CALL cl_set_comp_visible("group2", FALSE)
         ELSE
             CALL l_node.setAttribute("hidden", 0)
             CALL l_node2.setAttribute("hidden", 1)
             CALL cl_set_comp_visible("group2", TRUE)
             CALL cl_set_comp_visible("group3", FALSE)
         END IF
         CALL cl_set_comp_visible("gr9,gr21", FALSE)
         
         IF g_ztd[l_ac_ztd].ztd04 = "C" THEN
               DISPLAY g_ztd[l_ac_ztd].ztd05  TO FORMONLY.condition
         ELSE
            #抓取 PK Columns
            LET l_tok = base.StringTokenizer.createExt(g_ztd[l_ac_ztd].ztd13 CLIPPED,",","",TRUE)
            LET l_cnt = 0
            WHILE l_tok.hasMoreTokens()
                 LET l_str = l_tok.nextToken() 
                 LET l_cnt = l_cnt + 1
                 LET g_ztd_fk[l_cnt].colname = l_str
            END WHILE
            
            #抓取 PK Positions
            LET l_tok = base.StringTokenizer.createExt(g_ztd[l_ac_ztd].ztd14 CLIPPED,",","",TRUE)
            LET l_cnt = 0
            WHILE l_tok.hasMoreTokens()
                 LET l_str = l_tok.nextToken() 
                 LET l_cnt = l_cnt + 1
                 LET g_ztd_fk[l_cnt].rposition = l_str
            END WHILE
         
            IF g_ztd[l_ac_ztd].ztd04 = 'R' THEN
               #抓取 FK Columns
               LET l_tok = base.StringTokenizer.createExt(g_ztd[l_ac_ztd].ztd15 CLIPPED,",","",TRUE)
               LET l_cnt = 0
               WHILE l_tok.hasMoreTokens()
                    LET l_str = l_tok.nextToken() 
                    LET l_cnt = l_cnt + 1
                    LET g_ztd_fk[l_cnt].rzad06 = g_ztd[l_ac_ztd].ztd06
                    LET g_ztd_fk[l_cnt].rzad07 = g_ztd[l_ac_ztd].ztd07
                    LET g_ztd_fk[l_cnt].rcolname = l_str
                    LET g_ztd_fk[l_cnt].rtabname = g_ztd[l_ac_ztd].ztd17
               END WHILE
               
              ##抓取 FK Positions
              #LET l_tok = base.StringTokenizer.createExt(g_ztd[l_ac_ztd].ztd16 CLIPPED,",","",TRUE)
              #LET l_cnt = 0
              #WHILE l_tok.hasMoreTokens()
              #     LET l_str = l_tok.nextToken() 
              #     LET l_cnt = l_cnt + 1
              #     LET g_ztd_fk[l_cnt].rposition = l_str
              #END WHILE
         
            END IF
            DISPLAY ARRAY g_ztd_fk TO s_ref.* ATTRIBUTE(COUNT=l_cnt,UNBUFFERED)
              BEFORE DISPLAY
                IF g_ztd[l_ac_ztd].ztd04 = 'R' THEN
                   CALL cl_set_comp_visible("rzad06,rzad07,rtabname,rcolname", TRUE)    
                ELSE
                   CALL cl_set_comp_visible("rzad06,rzad07,rtabname,rcolname", FALSE)   
                END IF
                EXIT DISPLAY
            END DISPLAY
         END IF
      ELSE
         CALL l_node.setAttribute("hidden", 1)
         CALL l_node2.setAttribute("hidden", 0)
         CALL cl_set_comp_visible("group3", FALSE)
         CALL cl_set_comp_visible("group2", FALSE)
         CALL cl_set_comp_visible("gr9", TRUE)
      END IF
      #FUN-7A0029
      IF g_ztd[l_ac_ztd].ztd04 != "C" THEN
         CALL cl_set_comp_visible("view_key", TRUE)
      END IF
      #END FUN-7A0029
   ELSE
      CALL l_node.setAttribute("hidden", 1)
      CALL l_node2.setAttribute("hidden", 0)
      CALL cl_set_comp_visible("group3", FALSE)
      CALL cl_set_comp_visible("group2", FALSE)
      CALL cl_set_comp_visible("gr9", TRUE)
   END IF
   IF g_page_choice != "constraint" OR g_page_choice IS NULL
   THEN
      CALL cl_set_comp_visible("page3,page4", FALSE)
      CALL ui.interface.refresh()
      CALL cl_set_comp_visible("page3,page4", TRUE)
      LET g_page_choice = "constraint"
   END IF
END FUNCTION  
 
FUNCTION p_zta_c_err(p_cmd,p_str)
DEFINE p_cmd           STRING                      #No.FUN-A90062
DEFINE p_str           STRING
DEFINE l_ze01          LIKE ze_file.ze01,
       ls_msg          STRING,
       lsb_msg         base.StringBuffer,
       lch_detail      base.Channel
DEFINE l_str           STRING,                   
       l_cmd           STRING
DEFINE l_cnt           LIKE type_file.num10
DEFINE l_ze03          LIKE type_file.chr1000      #No.FUN-A60022---add
DEFINE l_lang          LIKE type_file.chr6         #No.FUN-A60022---add

 
    #IF g_db_type="IFX" THEN
    CASE g_db_type                                   #FUN-730016
     WHEN "IFX"                                      #FUN-730016  
       LET l_str = SQLCA.SQLCODE
    
     WHEN "ORA"                                      #FUN-730016  
       LET l_ze01 = '-',SQLCA.SQLERRD[2] USING '<<<<<<<<<<'
       SELECT COUNT(*) INTO l_cnt FROM ze_file where ze01= l_ze01
       IF l_cnt = 0 THEN
          LET l_str = ""
       ELSE
          LET l_str = l_ze01
       END IF 
 
     WHEN "MSV"                                      #FUN-730016  
        #No.FUN-A60022---start  
        #No.FUN-A90062 --start --
        LET l_str = p_zta_msv_errmsg(p_cmd,SQLCA.SQLERRD[2])
        LET p_str = p_str, " ", l_str
        #No.FUN-A90062 --end --
        #No.FUN-A60022---end

    END CASE                                         #FUN-730016
    IF NOT cl_null(l_str) THEN
       CALL cl_err(p_str,l_str.trim(),1)
    ELSE
       LET l_str = l_ze01
       LET l_cmd = "oerr ora ", l_str.subString(2,l_str.getLength())
  
       LET lch_detail = base.Channel.create()
       LET lsb_msg = base.StringBuffer.create()
        
       CALL lsb_msg.append(p_str || "\n")
 
       CALL lch_detail.openPipe(l_cmd, "r")
       WHILE lch_detail.read(ls_msg)
          CALL lsb_msg.append(ls_msg || "\n")
       END WHILE
       CALL lch_detail.close()
       LET ls_msg = lsb_msg.toString()
       CALL cl_err(ls_msg,'',1)
       CALL cl_msgany(0,0,ls_msg)
    END IF
 
END FUNCTION
#END FUN-730016
 
FUNCTION p_zta_bp_refresh()
 
   DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
      BEFORE DISPLAY
         EXIT DISPLAY
   END DISPLAY
   DISPLAY ARRAY g_ztb TO s_ztb.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
  #TQC-860017 start
 
      ON ACTION about
         CALL cl_about()
 
      ON ACTION controlg
         CALL cl_cmdask()
 
      ON ACTION help
         CALL cl_show_help()
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
   END DISPLAY
#TQC-860017 end
END FUNCTION
 
 
FUNCTION p_zta_ztc_refresh()
 
   DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_d)
      BEFORE DISPLAY
         EXIT DISPLAY
   END DISPLAY
 
END FUNCTION
 
 
FUNCTION p_zta_dp_refresh()
 
   DISPLAY ARRAY g_ztc TO s_ztc.* ATTRIBUTE(COUNT=g_rec_b,UNBUFFERED)
      BEFORE DISPLAY
         EXIT DISPLAY
   END DISPLAY
 
END FUNCTION
 
 
FUNCTION p_zta_delall()
 
   IF g_zta.zta10 != 'Y' THEN
      SELECT COUNT(*) INTO g_cnt FROM ztb_file
       WHERE ztb01 = g_zta.zta01
         AND ztb02 = g_zta.zta02
      IF g_cnt = 0 THEN                   # 未輸入單身資料, 是否取消單頭資料
         CALL cl_getmsg("9044",g_lang) RETURNING g_msg
         ERROR g_msg CLIPPED
         DELETE FROM zta_file
          WHERE zta01 = g_zta.zta01
            AND zta02 = g_zta.zta02
         CLEAR FORM
      END IF
   END IF
 
END FUNCTION
 
 
FUNCTION p_zta_u()
DEFINE l_sql             STRING
DEFINE l_dbs             DYNAMIC ARRAY OF LIKE zta_file.zta02     #FUN-9C0036
DEFINE l_dbs_o           LIKE zta_file.zta02,                     #FUN-9C0036
       l_cnt             LIKE type_file.num5,                     #FUN-9C0036
       l_i               LIKE type_file.num5                      #FUN-9C0036
DEFINE l_plant_status    LIKE type_file.num5                      #FUN-9C0036
DEFINE l_plant_status_o  LIKE type_file.num5                      #FUN-9C0036

 
   IF cl_null(g_zta.zta01) THEN
      CALL cl_err("",-400,0)
      RETURN
   END IF
 
   IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
   MESSAGE ""
   CALL cl_opmsg("u")
   BEGIN WORK
 
   OPEN p_zta_cl USING g_zta.zta01,g_zta.zta02
   IF sqlca.sqlcode THEN
      LET g_err="open lock cursor error(u):p_zta_cl"
      CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
      RETURN
   END IF
 
   FETCH p_zta_cl INTO g_zta.*               # 對DB鎖定
   IF sqlca.sqlcode THEN
      LET g_err="fetch lock cursor error(u):p_zta_cl"
      CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
      RETURN
   END IF
 
   #判斷Table是否具有Plant欄位
   CALL cl_table_exist_plant(g_zta.zta01) RETURNING g_plant_status  #No.FUN-990043
   CALL p_zta_zta17(g_zta.zta01)                                    #No.FUN-9A0077                                   
 
   LET g_zta_t.* = g_zta.*
   CALL p_zta_show()                          # 顯示最新資料
   WHILE TRUE
      CALL p_zta_i("u")                      # 欄位更改
      IF INT_FLAG THEN
         LET INT_FLAG = 0
         LET g_zta.*=g_zta_t.*
         CALL p_zta_show()
         CALL cl_err("",9001,0)
         EXIT WHILE
      END IF
      LET l_sql="UPDATE zta_file SET zta01='",g_zta.zta01 CLIPPED,"',",
                                    "zta02='",g_zta.zta02 CLIPPED,"',",
                                    "zta03='",g_zta.zta03 CLIPPED,"',",     #No.FUN-A60050
                                    "zta05='",g_zta.zta05 CLIPPED,"',",
                                    "zta06='",g_zta.zta06 CLIPPED,"',",
                                    "zta07='",g_zta.zta07 CLIPPED,"',",
                                    "zta08='",g_zta.zta08 CLIPPED,"',",
                                    "zta09='",g_zta.zta09 CLIPPED,"',",     #No.FUN-A60050
                                    "zta10='",g_zta.zta10 CLIPPED,"',",
                                    "zta11='",g_zta.zta11 CLIPPED,"',",
                                    "zta12='",g_zta.zta12 CLIPPED,"',",
                                    "zta13='",g_zta.zta13 CLIPPED,"',",
                                    "zta14='",g_zta.zta14 CLIPPED,"',",
                                    "zta15='",g_zta.zta15 CLIPPED,"',",
                                    "zta16='",g_zta.zta16 CLIPPED,"',",
                                    "zta17='",g_zta.zta17 CLIPPED,"',",
                                    "zta18='",g_zta.zta18 CLIPPED,"' ",     #No.FUN-A60050
                " WHERE zta01='",g_zta.zta01 CLIPPED,"' AND zta02 ='",g_zta.zta02 CLIPPED,"'"       # COLAUTH?
      EXECUTE IMMEDIATE l_sql
      IF sqlca.sqlcode THEN
         LET g_err="update zta error(u):"
         #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
         CALL cl_err3("upd","zta_file",g_zta_t.zta01,g_zta_t.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
         CONTINUE WHILE
      END IF

      #No.FUN-A60050 -- start --
      #當其他資料庫的 zta03, zta09, zta18 的資料與新建立的不相同時，則更改與目前相同
      SELECT COUNT(*) INTO l_cnt FROM zta_file 
       WHERE zta01=g_zta.zta01 AND 
            (zta03 != g_zta.zta03 OR zta09 != g_zta.zta09 OR zta18 != g_zta.zta18 
             OR zta03 IS NULL OR zta09 IS NULL OR zta18 IS NULL)
      IF l_cnt > 0 THEN 
         LET l_sql="UPDATE zta_file SET zta03='",g_zta.zta03 CLIPPED,"',",
                                       "zta09='",g_zta.zta09 CLIPPED,"',",
                                       "zta18='",g_zta.zta18 CLIPPED,"' ",   
                   " WHERE zta01='",g_zta.zta01 CLIPPED,"'"    
         EXECUTE IMMEDIATE l_sql
         IF sqlca.sqlcode THEN
            LET g_err="update zta error(u):"
            CALL cl_err3("upd","zta_file",g_zta_t.zta01,'',SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
            ROLLBACK WORK
            CONTINUE WHILE
         END IF
      END IF
      #No.FUN-A60050 -- end --

      EXIT WHILE
   END WHILE
   CLOSE p_zta_cl
   COMMIT WORK
   
   #No.FUN-990043 -- start --
   #修改類型後，必須重新建立 view 或synonym
   IF (g_zta.zta10='Y') AND (g_zta.zta09 <> g_zta_t.zta09 AND 
      ((g_zta.zta09 MATCHES "[TS]" AND g_zta_t.zta09 NOT MATCHES "[TS]") OR 
      (g_zta.zta09 NOT MATCHES "[TS]" AND g_zta_t.zta09 MATCHES "[TS]"))) AND 
      (g_view_no_in.getIndexOf(g_zta.zta03 CLIPPED,1) = 0 )     #FUN-9C0036  #No.FUN-A60050
   THEN
      IF g_plant_status = 0 THEN
         LET g_plant_status = -1
      END IF
      LET g_ods_end = FALSE                                          #FUN-9A0077

      #FUN-9C0036 -- start --
      #確認每個資料庫，是否必須改建立view/synonym
      LET l_dbs_o = g_dbs CLIPPED
      LET l_sql = "SELECT UNIQUE  zta02 FROM zta_file, azw_file",
                  " WHERE zta01 = '",g_zta.zta01 CLIPPED,"'",
                  "  AND zta02=azw05",
                  "  AND zta07='T'",
                  "  AND azwacti='Y'",
                  " ORDER BY zta02"
      DECLARE zta02_cs CURSOR FROM l_sql
      LET l_cnt = 1
      FOREACH zta02_cs INTO l_dbs[l_cnt]
         LET l_cnt = l_cnt + 1
      END FOREACH
      LET l_cnt = l_cnt -1

      LET l_plant_status_o = g_plant_status
      #判斷Table是否具有Plant欄位
      CALL cl_table_exist_plant(g_zta.zta01) RETURNING g_plant_status  #No.FUN-990043
      LET l_plant_status = g_plant_status

      FOR l_i = 1 TO l_cnt
         LET g_dbs = l_dbs[l_i] CLIPPED
         #刪除舊的 view/synonym
         LET g_plant_status = l_plant_status_o
         CALL p_zta_parse_view(g_zta.zta01,'d','') 

         #建立新的 view/synonym
         LET g_plant_status = l_plant_status
         CALL p_zta_parse_view(g_zta.zta01,'a','') 
      END FOR
      LET g_dbs = l_dbs_o CLIPPED
      CALL p_zta_set_erpdb()               #FUN-B50010 add 
      CALL p_zta_cl()                      #FUN-B50010 add
      #FUN-9C0036 -- end --
   END IF
   #No.FUN-990043 -- end --
END FUNCTION
 
FUNCTION p_zta_drop_table()
    DEFINE l_cmd      LIKE zs_file.zs06,
           l_sql      STRING,
           l_i        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
           l_count    LIKE type_file.num5,     #No.FUN-680135 SMALLINT
           l_zs03     LIKE zs_file.zs03,
           l_cascade  LIKE type_file.chr1      #No.FUN-680135 VARCHAR(1)
 
    IF cl_null(g_zta.zta01) THEN
       CALL cl_err("",-400,0)
       RETURN
    END IF
    CALL p_zta_show()
    BEGIN WORK
    OPEN p_zta_cl USING g_zta.zta01,g_zta.zta02
    IF sqlca.sqlcode THEN
       LET g_err="open lock cursor error(r):"
       CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
       ROLLBACK WORK
       RETURN
    END IF
    FETCH p_zta_cl INTO g_zta.*
    IF sqlca.sqlcode THEN
       LET g_err="fetch lock cursor error(r):"
       CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
       ROLLBACK WORK
       RETURN
    END IF
    IF g_zta.zta10='Y' THEN
       IF p_zta_question_msg("zta-005","zta-004") THEN
          LET l_cascade=cl_confirm('zta-021') -- 0為no 1為yes
          DELETE FROM zta_file WHERE zta01=g_zta.zta01 AND zta02=g_zta.zta02
          IF sqlca.sqlerrd[3]=0 THEN
             LET g_err="delete zta error(r):"
             #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
             CALL cl_err3("del","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
             ROLLBACK WORK
          ELSE
             DELETE FROM ztb_file WHERE ztb01=g_zta.zta01 AND ztb02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztb error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztb_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
             DELETE FROM ztc_file WHERE ztc01=g_zta.zta01 AND ztc02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztc error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztc_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
 
             IF l_cascade='1' THEN  -- 如果要刪除相關資料的話才執行
#             IF g_zta.zta02='ds' THEN
                DELETE FROM gat_file WHERE gat01=g_zta.zta01
                IF sqlca.sqlcode THEN
                   LET g_err="delete gat error(r):"
                   #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                   CALL cl_err3("del","gat_file",g_zta.zta01,"",SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                   ROLLBACK WORK
                END IF
                FOR l_i=1 TO g_ztb.getLength()
                    DELETE FROM gaq_file WHERE gaq01=g_ztb[l_i].ztb03
                    IF sqlca.sqlcode THEN
                       LET g_err="delete gaq error(r):"
                       #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                       CALL cl_err3("del","gaq_file",g_ztb[l_i].ztb03,"",SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                       ROLLBACK WORK
                    END IF
                END FOR
             END IF
             LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                       " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                       "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
             PREPARE p_zta_drop_table_pre1 FROM l_sql
             EXECUTE p_zta_drop_table_pre1 INTO l_zs03
             FREE p_zta_drop_table_pre1
             IF l_zs03 IS NULL THEN
                LET l_zs03 = 1
             END IF
             LET l_sql="SELECT COUNT(*) FROM ztb_file",
                       " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                       "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
                       "   AND ztb05='C'"
             PREPARE p_zta_drop_table_pre2 FROM l_sql
             EXECUTE p_zta_drop_table_pre2 INTO l_count
             FREE p_zta_drop_table_pre2
             IF g_zta.zta07='T' THEN
                LET l_cmd="drop table ",g_zta.zta01 CLIPPED,";"
             ELSE
                LET l_cmd="drop synonym ",g_zta.zta01 CLIPPED,";"
             END IF
             IF l_count > 0 THEN
                 LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                         " VALUES('",g_zta.zta01 CLIPPED,"','",
                                     g_zta.zta02 CLIPPED,"',",
                                     l_zs03 CLIPPED,",'",
                                     g_date CLIPPED,"','c','",
                                     l_cmd CLIPPED,"','",
                                     g_user CLIPPED,"','",
                                     g_MODNO CLIPPED,"','Y','N','N','",
                                     g_tiptop_ver CLIPPED,"')"
             ELSE
                 LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                         " VALUES('",g_zta.zta01 CLIPPED,"','",
                                     g_zta.zta02 CLIPPED,"',",
                                     l_zs03 CLIPPED,",'",
                                     g_date CLIPPED,"','p','",  #No.FUN-990043
                                     l_cmd CLIPPED,"','",
                                     g_user CLIPPED,"','",
                                     g_MODNO CLIPPED,"','Y','N','N','",
                                     g_tiptop_ver CLIPPED,"')"
             END IF
             EXECUTE IMMEDIATE l_sql
             IF sqlca.sqlcode THEN
                LET g_err="insert zs error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                ROLLBACK WORK
                RETURN
             ELSE
                IF g_edition="C" THEN
                   IF l_count > 0 THEN
                      LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                " VALUES('",g_zta.zta01 CLIPPED,"','",
                                           g_zta.zta02 CLIPPED,"',",
                                           l_zs03 CLIPPED,",'",
                                           g_date CLIPPED,"','c','",
                                           l_cmd CLIPPED,"','",
                                           g_user CLIPPED,"','",
                                           g_MODNO CLIPPED,"',",
                                           "'Y','N','N','",
                                           g_tiptop_ver CLIPPED,"')"
                   ELSE
                      LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                " VALUES('",g_zta.zta01 CLIPPED,"','",
                                           g_zta.zta02 CLIPPED,"',",
                                           l_zs03 CLIPPED,",'",
                                           g_date CLIPPED,"','p','",
                                           l_cmd CLIPPED,"','",
                                           g_user CLIPPED,"','",
                                           g_MODNO CLIPPED,"',",
                                           "'Y','N','N','",
                                           g_tiptop_ver CLIPPED,"')"
                   END IF
                   EXECUTE IMMEDIATE l_sql
                END IF
                IF sqlca.sqlcode THEN
                   LET g_err="insert zs@std_server error(r):"
                   #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                   CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                   ROLLBACK WORK
                   RETURN
                ELSE
                   LET l_sql="SELECT zs06 FROM zs_file",
                             " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                             "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                             "   AND zs03='",l_zs03 CLIPPED,"'"
                   PREPARE p_zta_drop_table_pre3 FROM l_sql
                   EXECUTE p_zta_drop_table_pre3 INTO l_cmd
                   FREE p_zta_drop_table_pre3
                   FOR l_i=1 TO LENGTH(l_cmd)
                       IF l_cmd[l_i,l_i] = ';' THEN
                          LET l_cmd[l_i,l_i]=' '
                          EXIT FOR
                       END IF
                   END FOR
                   EXECUTE IMMEDIATE l_cmd
                   IF sqlca.sqlcode THEN
                      LET g_err="DDL command fail(r):",l_cmd CLIPPED
                      CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                      ROLLBACK WORK
                      RETURN
                   ELSE
                      IF l_cascade='1' THEN  -- 如果要刪除相關資料的話才執行
#                      IF g_zta.zta02='ds' THEN
                         #No.FUN-A60022---start
                         #LET l_cmd = fgl_getenv(g_zta.zta03)                          #No.FUN-A60050
                         LET l_cmd = p_zta_set_db_type("sch")  #FUN-A80029

                         LET l_cmd = "rm ",fgl_getenv(g_zta.zta03) ,"/",l_cmd,"/",
                                     g_zta.zta01 CLIPPED,".sch"
                         #No.FUN-A60022---end
                         RUN l_cmd
                      END IF
                      IF g_zta.zta07='S' THEN
                         CALL fgl_winmessage("Info","Drop Synonym Success","info")
                      ELSE
                         CALL fgl_winmessage("Info","Drop Table Success","info")
                      END IF
                   END IF
                END IF
             END IF
             INITIALIZE g_zta.* TO NULL
             CLEAR FORM
             CALL g_ztb.clear()
             CALL g_ztc.clear()
             CALL g_ztd.clear()                               #No.FUN-730016
             OPEN p_zta_count
             FETCH p_zta_count INTO g_row_count
             DISPLAY g_row_count TO FORMONLY.cnt
             OPEN p_zta_cs
             IF g_curs_index = g_row_count + 1 THEN
                LET g_jump = g_row_count
                CALL p_zta_fetch('L')
             ELSE
                LET g_jump = g_curs_index
                LET mi_no_ask=TRUE
                CALL p_zta_fetch('/')
             END IF
          END IF
       END IF
    ELSE
       CAll cl_err("","zta-019",1)
    END IF
    CLOSE p_zta_cl
    COMMIT WORK
END FUNCTION
 
#start FUN-6A0052 add
FUNCTION p_zta_drop_table_1()
    DEFINE l_cmd      LIKE zs_file.zs06,
           l_sql      STRING,
           l_i        LIKE type_file.num5,     #No.FUN-680135 SMALLINT
           l_count    LIKE type_file.num5,     #No.FUN-680135 SMALLINT
           l_zs03     LIKE zs_file.zs03,
           l_cascade  LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
           l_msg      STRING,                  #FUN-6A0052 add
           l_qflag    LIKE type_file.chr1      #FUN-6A0052 add
 
   #FUN-9A0077 -- start --
   IF cl_null(g_zta.zta01) THEN
      CALL cl_err("",-400,0)
      RETURN
   END IF
   #FUN-9A0077 -- end --

   IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
  
   #FUN-9C0036 -- start --
   #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
    IF g_zta.zta10='Y' THEN
       IF cl_null(g_MODNO)  THEN
          PROMPT "input MODNO:" FOR g_MODNO
             ON IDLE g_idle_seconds
                CALL cl_on_idle()
          END PROMPT
          display g_MODNO
       END IF
    END IF
   #FUN-9C0036 -- end --
 
   #start FUN-6A0052 add
    LET g_plant_o = g_plant
    LET g_dbs_o = g_dbs
    LET g_zta01_d_o = g_zta.zta01
    LET l_qflag = 'Y'
    LET g_errmsg = ''   #TQC-710048 add
 
   #CALL p_zta_seldb1("D")   #選擇要Drop那些資料庫              #FUN-9C0036 mark
    CALL p_zta_seldb2("D")   #選擇要Drop那些資料庫              #FUN-9C0036 add
 
    IF NOT INT_FLAG THEN
      IF p_zta_question_msg("zta-005","zta-004") THEN

        #判斷Table是否具有Plant欄位
        CALL cl_table_exist_plant(g_zta.zta01) RETURNING g_plant_status  #No.FUN-990043

        CALL p_zta_zta17(g_zta.zta01)                                    #No.FUN-9A0077                                   
        LET g_ods_end = FALSE                                            #FUN-9A0077
 
        FOR l_ac=1 TO g_cnt1
          #FUN-9A0077 -- start --
          IF l_ac = g_cnt1 THEN
             LET g_ods_end = TRUE
          END IF
          #FUN-9A0077 -- end --
          IF g_azp1[l_ac].select='Y' THEN          #要Alter該資料庫   #FUN-9C0036
            LET g_plant = g_azp1[l_ac].azp01 CLIPPED   #FUN-9C0036
            LET g_dbs   = g_azp1[l_ac].azp03 CLIPPED   #FUN-9C0036
            CALL p_zta_set_erpdb()                #連結資料庫
            IF (SQLCA.SQLCODE) THEN CONTINUE FOR END IF      #TQC-710048 add
 
            LET g_forupd_sql = "SELECT * FROM zta_file WHERE zta01=? AND zta02=? FOR UPDATE"  #FUN-9A0064
            LET g_forupd_sql = cl_forupd_sql(g_forupd_sql)
            DECLARE p_zta_cl_1 CURSOR FROM g_forupd_sql      # LOCK CURSOR
 
            INITIALIZE g_zta.* TO NULL
 
            LET g_zta.zta01 = g_zta01_d_o
 
            SELECT zta01,zta02 INTO g_zta.zta01,g_zta.zta02 FROM zta_file
             WHERE zta01=g_zta.zta01
               AND zta02=g_dbs
 
            SELECT * INTO g_zta.* FROM zta_file
             WHERE zta01=g_zta.zta01 AND zta02=g_zta.zta02
            IF sqlca.sqlcode THEN
               LET g_err="select zta data error(fetch):"
               #FUN-7A0029
               CALL cl_err3("sel","zta_file",g_zta.zta01 CLIPPED,g_dbs CLIPPED,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081 #FUN-9C0036
               LET g_plant = g_plant_o
               LET g_dbs   = g_dbs_o
               CALL p_zta_set_erpdb()        #連結資料庫
               INITIALIZE g_zta.* TO NULL
               CLEAR FORM
               CALL g_ztb.clear()
               CALL g_ztc.clear()
               CALL g_ztd.clear()                                   #No.FUN-730016
               OPEN p_zta_count
               DISPLAY 0 TO FORMONLY.cnt
               #END FUN-7A0029
               ROLLBACK WORK
               RETURN
            END IF
 
   #end FUN-6A0052 add
            IF cl_null(g_zta.zta01) THEN
              #CALL cl_err("",-400,0)
              #RETURN
               CONTINUE FOR
            END IF
            CALL p_zta_show()
 
            BEGIN WORK
            OPEN p_zta_cl_1 USING g_zta.zta01,g_zta.zta02   #FUN-6A0052 modify
            IF sqlca.sqlcode THEN
               LET g_err="open lock cursor error(r):"
               CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
               ROLLBACK WORK
               RETURN
            END IF
            FETCH p_zta_cl_1 INTO g_zta.*       #FUN-6A0052 modify
            IF sqlca.sqlcode THEN
               LET g_err="fetch lock cursor error(r):"
               CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
               ROLLBACK WORK
               RETURN
            END IF
            IF g_zta.zta10='Y' THEN
              #IF p_zta_question_msg("zta-005","zta-004") THEN   #FUN-6A0052 mark
               IF l_qflag = 'Y' THEN
                  LET l_cascade=cl_confirm('zta-021') -- 0為no 1為yes
                  LET l_qflag = 'N'
               END IF
               DELETE FROM zta_file WHERE zta01=g_zta.zta01 AND zta02=g_zta.zta02
               IF sqlca.sqlerrd[3]=0 THEN
                  LET g_err="delete zta error(r):"
                  #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                  CALL cl_err3("del","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                  ROLLBACK WORK
               ELSE
                  DELETE FROM ztb_file WHERE ztb01=g_zta.zta01 AND ztb02=g_zta.zta02
                  IF sqlca.sqlcode THEN
                     LET g_err="delete ztb error(r):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                     CALL cl_err3("del","ztb_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                     ROLLBACK WORK
                  END IF
                  DELETE FROM ztc_file WHERE ztc01=g_zta.zta01 AND ztc02=g_zta.zta02
                  IF sqlca.sqlcode THEN
                     LET g_err="delete ztc error(r):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                     CALL cl_err3("del","ztc_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                     ROLLBACK WORK
                  END IF
 
                  #No.FUN-730016
                  DELETE FROM ztd_file WHERE ztd01=g_zta.zta01 AND ztd02=g_zta.zta02
                  IF sqlca.sqlcode THEN
                     LET g_err="delete ztd error(r):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                     CALL cl_err3("del","ztd_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                     ROLLBACK WORK
                  END IF
                  #END No.FUN-730016
 
                  #No.FUN-7A0029
                  UPDATE zte_file set zte04= ''
                   WHERE zte01 = g_zta.zta01 AND zte02 = 'ds'
                  #END No.FUN-7A0029
 
                  IF l_cascade='1' THEN  -- 如果要刪除相關資料的話才執行
#                  IF g_zta.zta02='ds' THEN
                     DELETE FROM gat_file WHERE gat01=g_zta.zta01
                     IF sqlca.sqlcode THEN
                        LET g_err="delete gat error(r):"
                        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                        CALL cl_err3("del","gat_file",g_zta.zta01,"",SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                        ROLLBACK WORK
                     END IF
                     FOR l_i=1 TO g_ztb.getLength()
                         DELETE FROM gaq_file WHERE gaq01=g_ztb[l_i].ztb03
                         IF sqlca.sqlcode THEN
                            LET g_err="delete gaq error(r):"
                            #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                            CALL cl_err3("del","gaq_file",g_ztb[l_i].ztb03,"",SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                            ROLLBACK WORK
                         END IF
                     END FOR
                  END IF
                  LET l_sql="SELECT max(zs03)+1 FROM zs_file",
                            " WHERE zs01 = '",g_zta.zta01 CLIPPED,"'",
                            "   AND zs02 = '",g_zta.zta02 CLIPPED,"'"
                  PREPARE p_zta_drop_table_1_pre1 FROM l_sql
                  EXECUTE p_zta_drop_table_1_pre1 INTO l_zs03
                  FREE p_zta_drop_table_1_pre1
                  IF l_zs03 IS NULL THEN
                     LET l_zs03 = 1
                  END IF
                  LET l_sql="SELECT COUNT(*) FROM ztb_file",
                            " WHERE ztb01='",g_zta.zta01 CLIPPED,"'",
                            "   AND ztb02='",g_zta.zta02 CLIPPED,"'",
                            "   AND ztb05='C'"
                  PREPARE p_zta_drop_table_1_pre2 FROM l_sql
                  EXECUTE p_zta_drop_table_1_pre2 INTO l_count
                  FREE p_zta_drop_table_1_pre2
                  IF g_zta.zta07='T' THEN
                     LET l_cmd="drop table ",g_zta.zta01 CLIPPED,";"
                  ELSE
                     LET l_cmd="drop synonym ",g_zta.zta01 CLIPPED,";"
                  END IF
                  IF l_count > 0 THEN
                      LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                              " VALUES('",g_zta.zta01 CLIPPED,"','",
                                          g_zta.zta02 CLIPPED,"',",
                                          l_zs03 CLIPPED,",'",
                                          g_date CLIPPED,"','c','",
                                          l_cmd CLIPPED,"','",
                                          g_user CLIPPED,"','",
                                          g_MODNO CLIPPED,"','Y','N','N','",
                                          g_tiptop_ver CLIPPED,"')"
                  ELSE
                      LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
                              " VALUES('",g_zta.zta01 CLIPPED,"','",
                                          g_zta.zta02 CLIPPED,"',",
                                          l_zs03 CLIPPED,",'",
                                          g_date CLIPPED,"','p','",  #No.FUN-990043 
                                          l_cmd CLIPPED,"','",
                                          g_user CLIPPED,"','",
                                          g_MODNO CLIPPED,"','Y','N','N','",
                                          g_tiptop_ver CLIPPED,"')"
                  END IF
                  EXECUTE IMMEDIATE l_sql
                  IF sqlca.sqlcode THEN
                     LET g_err="insert zs error(r):"
                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                     CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                     ROLLBACK WORK
                     RETURN
                  ELSE
                     IF g_edition="C" THEN
                        IF l_count > 0 THEN
                           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                     " VALUES('",g_zta.zta01 CLIPPED,"','",
                                                g_zta.zta02 CLIPPED,"',",
                                                l_zs03 CLIPPED,",'",
                                                g_date CLIPPED,"','c','",
                                                l_cmd CLIPPED,"','",
                                                g_user CLIPPED,"','",
                                                g_MODNO CLIPPED,"',",
                                                "'Y','N','N','",
                                                g_tiptop_ver CLIPPED,"')"
                        ELSE
                           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                                     " VALUES('",g_zta.zta01 CLIPPED,"','",
                                                g_zta.zta02 CLIPPED,"',",
                                                l_zs03 CLIPPED,",'",
                                                g_date CLIPPED,"','p','",
                                                l_cmd CLIPPED,"','",
                                                g_user CLIPPED,"','",
                                                g_MODNO CLIPPED,"',",
                                                "'Y','N','N','",
                                                g_tiptop_ver CLIPPED,"')"
                        END IF
                        EXECUTE IMMEDIATE l_sql
                     END IF
                     IF sqlca.sqlcode THEN
                        LET g_err="insert zs@std_server error(r):"
                        #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)  #No.FUN-660081
                        CALL cl_err3("ins","zs_file",g_zta.zta01,l_zs03,SQLCA.sqlcode,"",g_err,1)   #No.FUN-660081
                        ROLLBACK WORK
                        RETURN
                     ELSE
                        LET l_sql="SELECT zs06 FROM zs_file",
                                  " WHERE zs01='",g_zta.zta01 CLIPPED,"'",
                                  "   AND zs02='",g_zta.zta02 CLIPPED,"'",
                                  "   AND zs03='",l_zs03 CLIPPED,"'"
                        PREPARE p_zta_drop_table_1_pre3 FROM l_sql
                        EXECUTE p_zta_drop_table_1_pre3 INTO l_cmd
                        FREE p_zta_drop_table_1_pre3
                        FOR l_i=1 TO LENGTH(l_cmd)
                            IF l_cmd[l_i,l_i] = ';' THEN
                               LET l_cmd[l_i,l_i]=' '
                               EXIT FOR
                            END IF
                        END FOR
                        EXECUTE IMMEDIATE l_cmd
                        IF sqlca.sqlcode THEN
                           LET g_err="DDL command fail(r):",l_cmd CLIPPED
                           CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
                           ROLLBACK WORK
                           #FUN-7A0029
                           LET g_plant = g_plant_o
                           LET g_dbs   = g_dbs_o
                           CALL p_zta_set_erpdb()        #連結資料庫
                           #END FUN-7A0029
                           RETURN
                        ELSE
                           IF l_cascade='1' THEN  -- 如果要刪除相關資料的話才執行
#                           IF g_zta.zta02='ds' THEN
                              #No.FUN-A60022---start
                              #LET l_cmd = fgl_getenv(g_zta.zta03)                          #No.FUN-A60050
                              LET l_cmd = p_zta_set_db_type("sch")  #FUN-A80029

                              LET l_cmd = "rm ",fgl_getenv(g_zta.zta03) ,"/",l_cmd,"/",
                                          g_zta.zta01 CLIPPED,".sch"
                              #No.FUN-A60022---end
                              RUN l_cmd
                           END IF
                           IF g_zta.zta07='S' THEN
                             #start TQC-710048 modify
                             #CALL fgl_winmessage("Info","Drop Synonym Success","info")
                              IF cl_null(g_errmsg) THEN
                                 LET g_errmsg = g_dbs CLIPPED," Drop Synonym Success"           #FUN-9C0036
                              ELSE
                                 LET g_errmsg = g_errmsg CLIPPED,"/",g_dbs CLIPPED," Drop Synonym Success"   #FUN-9C0036
                              END IF
                             #end TQC-710048 modify
                           ELSE
                             #start TQC-710048 modify
                             #CALL fgl_winmessage("Info","Drop Table Success","info")     #FUN-6A0052 mark
                              IF cl_null(g_errmsg) THEN
                                 LET g_errmsg = g_dbs CLIPPED," Drop Table Success"          #FUN-9C0036
                              ELSE
                                 LET g_errmsg = g_errmsg CLIPPED,"/",g_dbs CLIPPED," Drop Table Success"      #FUN-9C0036
                              END IF
                             #end TQC-710048 modify
                           END IF
                        END IF
                     END IF
                  END IF
                 #INITIALIZE g_zta.* TO NULL
                 #CLEAR FORM
                 #CALL g_ztb.clear()
                 #CALL g_ztc.clear()
                 #OPEN p_zta_count
                 #FETCH p_zta_count INTO g_row_count
                 #DISPLAY g_row_count TO FORMONLY.cnt
                 #OPEN p_zta_cs
                 #IF g_curs_index = g_row_count + 1 THEN
                 #   LET g_jump = g_row_count
                 #   CALL p_zta_fetch('L')
                 #ELSE
                 #   LET g_jump = g_curs_index
                 #   LET mi_no_ask=TRUE
                 #   CALL p_zta_fetch('/')
                 #END IF
               END IF
              #END IF   #FUN-6A0052 mark
            ELSE
               CAll cl_err("","zta-019",1)
               CONTINUE FOR
            END IF
            CLOSE p_zta_cl_1    #FUN-6A0052 modify
            COMMIT WORK
            #No.FUN-9A0077 -- start --
            CALL p_zta_parse_view(g_zta.zta01,'d',l_cmd)  #FUN-990043
 
   #start FUN-6A0052 add
          ELSE
            IF g_ods_end = TRUE THEN
               CALL p_zta_cr_parse_view(g_zta.zta01,'d')    #No.FUN-9A0077
            END IF
            #No.FUN-9A0077 -- end --
          END IF
        END FOR
       #start TQC-710048 add
        IF NOT cl_null(g_errmsg) THEN
           CALL fgl_winmessage("Info",g_errmsg,"info")
        END IF
       #end TQC-710048 add
 
      END IF
    ELSE
      LET INT_FLAG = 0
      RETURN
    END IF
 
    LET g_plant = g_plant_o
    LET g_dbs   = g_dbs_o
    CALL p_zta_set_erpdb()        #連結資料庫
    INITIALIZE g_zta.* TO NULL
    CLEAR FORM
    CALL g_ztb.clear()
    CALL g_ztc.clear()
    CALL g_ztd.clear()                                   #No.FUN-730016
    OPEN p_zta_count
    DISPLAY 0 TO FORMONLY.cnt
   #end FUN-6A0052 add
 
END FUNCTION
#end FUN-6A0052 add
 
FUNCTION p_zta_r()
 
    IF cl_null(g_zta.zta01) THEN CALL cl_err("",-400,0) RETURN END IF
 
    IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
    CALL p_zta_show()
    BEGIN WORK
    OPEN p_zta_cl USING g_zta.zta01,g_zta.zta02
    IF sqlca.sqlcode THEN
       LET g_err="open lock cursor error(r):"
       CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
       ROLLBACK WORK
       RETURN
    END IF
    FETCH p_zta_cl INTO g_zta.*
    IF sqlca.sqlcode THEN
       LET g_err="fetch lock cursor error(r):"
       CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
       ROLLBACK WORK
       RETURN
    END IF
    IF g_zta.zta10='Y' THEN   -- 這個if僅只是為了訊息顯示的不同,內容並無差異
       IF cl_confirm('zta-020') THEN
          DELETE FROM zta_file WHERE zta01=g_zta.zta01 AND zta02=g_zta.zta02
          IF sqlca.sqlerrd[3]=0 THEN
             LET g_err="delete zta error(r):"
             #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
             CALL cl_err3("del","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
             ROLLBACK WORK
          ELSE
             DELETE FROM ztb_file WHERE ztb01=g_zta.zta01 AND ztb02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztb error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztb_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
             DELETE FROM ztc_file WHERE ztc01=g_zta.zta01 AND ztc02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztc error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztc_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
             #No.FUN-730016
             DELETE FROM ztd_file WHERE ztd01=g_zta.zta01 AND ztd02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztd error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztd_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
             #END No.FUN-730016
--           IF g_zta.zta02='ds' THEN  #暫時不主動刪除相關資料
--              DELETE FROM gat_file WHERE gat01=g_zta.zta01
--              IF sqlca.sqlcode THEN
--                 LET g_err="delete gat error(r):"
--                 #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                   CALL cl_err3("del","gat_file",g_zta.zta01,"",SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
--                 ROLLBACK WORK
--              END IF
--              FOR l_i=1 TO g_ztb.getLength()
--                  DELETE FROM gaq_file WHERE gaq01=g_ztb[l_i].ztb03
--                  IF sqlca.sqlcode THEN
--                     LET g_err="delete gaq error(r):"
--                     #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
--                     ROLLBACK WORK
--                  END IF
--              END FOR
--           END IF
             INITIALIZE g_zta.* TO NULL
             CLEAR FORM
             CALL g_ztb.clear()
             CALL g_ztc.clear()
             CALL g_ztd.clear()                                 #No.FUN-730016
             OPEN p_zta_count
             #FUN-B50065-add-start--
             IF STATUS THEN
                CLOSE p_zta_cs
                CLOSE p_zta_count
                COMMIT WORK
                RETURN
             END IF
             #FUN-B50065-add-end--
             FETCH p_zta_count INTO g_row_count
             #FUN-B50065-add-start--
             IF STATUS OR (cl_null(g_row_count) OR  g_row_count = 0 ) THEN
                CLOSE p_zta_cs
                CLOSE p_zta_count
                COMMIT WORK
                RETURN
             END IF
             #FUN-B50065-add-end--
             DISPLAY g_row_count TO FORMONLY.cnt
             OPEN p_zta_cs
             IF g_curs_index = g_row_count + 1 THEN
                LET g_jump = g_row_count
                CALL p_zta_fetch('L')
             ELSE
                LET g_jump = g_curs_index
                LET mi_no_ask=TRUE
                CALL p_zta_fetch('/')
             END IF
          END IF
       END IF
    ELSE
       IF cl_delete() THEN
          DELETE FROM zta_file WHERE zta01=g_zta.zta01 AND zta02=g_zta.zta02
          IF sqlca.sqlerrd[3]=0 THEN
             LET g_err="delete zta error(r):"
             #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
             CALL cl_err3("del","zta_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
             ROLLBACK WORK
          ELSE
             DELETE FROM ztb_file WHERE ztb01=g_zta.zta01 AND ztb02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztb error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztb_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
             DELETE FROM ztc_file WHERE ztc01=g_zta.zta01 AND ztc02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztc error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztc_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
             #No.FUN-730016
             DELETE FROM ztd_file WHERE ztd01=g_zta.zta01 AND ztd02=g_zta.zta02
             IF sqlca.sqlcode THEN
                LET g_err="delete ztd error(r):"
                #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                CALL cl_err3("del","ztd_file",g_zta.zta01,g_zta.zta02,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                ROLLBACK WORK
             END IF
             #END No.FUN-730016
--           IF g_zta.zta02='ds' THEN  #暫時不主動刪除相關資料
--              DELETE FROM gat_file WHERE gat01=g_zta.zta01
--              IF sqlca.sqlcode THEN
--                 LET g_err="delete gat error(r):"
--                 CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
--                 ROLLBACK WORK
--              END IF
--              FOR l_i=1 TO g_ztb.getLength()
--                  DELETE FROM gaq_file WHERE gaq01=g_ztb[l_i].ztb03
--                  IF sqlca.sqlcode THEN
--                     LET g_err="delete gaq error(r):"
--                     CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)
--                     ROLLBACK WORK
--                  END IF
--              END FOR
--           END IF
             INITIALIZE g_zta.* TO NULL
             CLEAR FORM
             CALL g_ztb.clear()
             CALL g_ztc.clear()
             CALL g_ztd.clear()                                 #No.FUN-730016
             OPEN p_zta_count
             FETCH p_zta_count INTO g_row_count
             DISPLAY g_row_count TO FORMONLY.cnt
             OPEN p_zta_cs
             IF g_curs_index = g_row_count + 1 THEN
                LET g_jump = g_row_count
                CALL p_zta_fetch('L')
             ELSE
                LET g_jump = g_curs_index
                LET mi_no_ask=TRUE
                CALL p_zta_fetch('/')
             END IF
          END IF
       END IF
    END IF
    CLOSE p_zta_cl
    COMMIT WORK
END FUNCTION
 
 
FUNCTION p_zta_imp()
   DEFINE l_zta             RECORD
                                 zta01   LIKE  zta_file.zta01,
                                 zta02   LIKE  zta_file.zta02,
                                 zta05   LIKE  zta_file.zta05,
                                 zta06   LIKE  zta_file.zta06,
                                 zta07   LIKE  zta_file.zta07,
                                 zta17   LIKE  zta_file.zta17,
                                 zta03   LIKE  zta_file.zta03,          #FUN-A60050
                                 zta09   LIKE  zta_file.zta09,          #FUN-A60050
                                 zta18   LIKE  zta_file.zta18           #FUN-A60050
                            END RECORD,
          l_tabname         LIKE type_file.chr50,    #No.FUN-680135 VARCHAR(30)
          l_count           LIKE type_file.num5,     #計算table筆數     #No.FUN-680135 SMALLINT
          l_count_s         LIKE type_file.num5,     #計算synonym筆數   #No.FUN-680135 SMALLINT
          l_count_v         LIKE type_file.num5,     #計算view筆數      #No.FUN-9C0036 
          l_sql             STRING,
          l_err_fname       STRING,
          l_cmd             STRING,
          l_zs03            LIKE zs_file.zs03,
          l_date            LIKE type_file.dat,      #No.FUN-680135 DATE
          i                 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
          j                 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
          l_a               LIKE type_file.num5,     #No.FUN-680135 SMALLINT
#          ch                base.channel,
          l_error_list      base.channel,
          l_success         LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
          l_jump            LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
          l_chkupdate       LIKE type_file.chr1,     #No.FUN-680135 VARCHAR(1)
          l_system_table    STRING,                  #系統table   #FUN-9C0036
          l_str             STRING,                  #No.FUN-A60022---add
          l_start           INTEGER,                 #No.FUN-A60022---add
          l_end             INTEGER                  #No.FUN-A60022---add

   #FUN-9C0036 -- start --
   IF g_bgjob='N' OR cl_null(g_bgjob) THEN
       WHILE TRUE
            PROMPT '(1)update all tables (2)add new table (0)exit' FOR l_chkupdate
#TQC-860017 START
             ON IDLE G_IDLE_SECONDS
                CALL CL_ON_IDLE()
          END PROMPT
#TQC-860017 END  
          IF INT_FLAG OR l_chkupdate='0' THEN
             LET INT_FLAG=0
             RETURN
          END IF
          IF cl_null(l_chkupdate) THEN
             CONTINUE WHILE
          ELSE
             IF l_chkupdate!='1' AND l_chkupdate!='2' THEN
                CONTINUE WHILE
             ELSE
                EXIT WHILE
             END IF
          END IF
      END WHILE
   ELSE  
      LET l_chkupdate=g_argv4
   END IF 
   #FUN-9C0036 -- end --

   #取得 Table 清單
   CASE g_db_type                                   #FUN-730016
    WHEN "IFX"                                      #FUN-730016  
      IF l_chkupdate='1' THEN
         #No.FUN-810041
         #LET l_sql=' SELECT TABNAME',
         #          '   FROM SYSTABLES',
         #          '  WHERE (TABNAME MATCHES "??_file" OR ',
         #          '         TABNAME MATCHES "???_file" OR ',
         #          '         TABNAME MATCHES "????_file" OR ',
         #          '         TABNAME MATCHES "tc_??_file" OR ',
         #          '         TABNAME MATCHES "tc_???_file" OR ',
         #          '         TABNAME MATCHES "tc_????_file" OR ',
         #          '         TABNAME MATCHES "aps*" ) ',
         #          '    AND TABTYPE="T" ',
         #          '  ORDER BY TABNAME'
         LET l_sql ="SELECT tabname ",
                    "  FROM systables ",
                    " WHERE ((TABNAME like '%_file' AND ",
                    "         length(TABNAME) between 7 and 15) OR ",
                    "        TABNAME MATCHES 'aps*' ) ",
                    "    AND TABTYPE='T' ",
                    "  ORDER BY TABNAME"
      ELSE
        #LET l_sql=' SELECT TABNAME',
        #          '   FROM SYSTABLES',
        #          '  WHERE (TABNAME MATCHES "??_file" OR ',
        #          '         TABNAME MATCHES "???_file" OR ',
        #          '         TABNAME MATCHES "????_file" OR ',
        #          '         TABNAME MATCHES "tc_??_file" OR ',
        #          '         TABNAME MATCHES "tc_???_file" OR ',
        #          '         TABNAME MATCHES "tc_????_file" OR ',
        #          '         TABNAME MATCHES "aps*" ) ',
        #          '    AND TABTYPE="T" ',
        #          '    AND TABNAME NOT IN(SELECT zta01 FROM zta_file ',
        #                            ' WHERE zta02="',g_dbs CLIPPED,'" ',
        #                            '   AND zta01 is not null) ',
        #          '  ORDER BY TABNAME'
         LET l_sql ="SELECT tabname ",
                    "  FROM systables ",
                    " WHERE ((TABNAME like '%_file' AND ",
                    "         length(TABNAME) between 7 and 15) OR ",
                    "        TABNAME MATCHES 'aps*' ) ",
                    "    AND TABTYPE='T' ",
                    "    AND TABNAME NOT IN(SELECT zta01 FROM zta_file ",
                                      " WHERE zta02='",g_dbs CLIPPED,"' ",
                                      "   AND zta01 is not null) ",
                    "  ORDER BY TABNAME"
      END IF
   
    WHEN "ORA"                                      #FUN-730016  
      IF l_chkupdate='1' THEN
        #LET l_sql="SELECT lower(table_name)",
        #          "  FROM user_tables ",
        #          " WHERE (table_name LIKE '__/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'TC/___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/____/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/_____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'APS%' ) ",
        #          " ORDER BY 1"
         LET l_sql="SELECT lower(table_name) ",
                   "  FROM user_tables ",
                   " WHERE (table_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(table_name) between 7 and 15) OR ",
                   "       (table_name LIKE 'APS%' ) ",
                   " ORDER BY 1"
      ELSE
        #LET l_sql="SELECT lower(table_name)",
        #          "  FROM user_tables ",
        #          " WHERE (table_name LIKE '__/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'TC/___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/____/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/_____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'APS%' ) ",
        #          "  AND lower(table_name) NOT IN(SELECT zta01 FROM zta_file",
        #                            " WHERE zta02='",g_dbs CLIPPED,"' ",
        #                            "   AND zta01 is not null) ",
        #          " ORDER BY 1"
         LET l_sql="SELECT lower(table_name) ",
                   "  FROM user_tables ",
                   " WHERE ((table_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(table_name) between 7 and 15) OR ",
                   "       (table_name LIKE 'APS%' )) ",
                   "  AND lower(table_name) NOT IN(SELECT zta01 FROM zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",
                                     "   AND zta01 is not null) ",
                   " ORDER BY 1"
      END IF
 
    WHEN "MSV"                                      #FUN-730016  
    #No.FUN-A60022---start
      IF l_chkupdate='1' THEN
         LET l_sql="SELECT lower(sys.objects.name) ",
                   "  FROM sys.objects ",
                   " WHERE type='U' AND (lower(sys.objects.name) like '%/_file' ESCAPE '/' ",
                    "  AND      len(sys.objects.name) between 7 and 15) OR ",
                   "       (lower(sys.objects.name) LIKE 'aps%' ) ",
                   " ORDER BY 1"
      ELSE
         LET l_sql="SELECT lower(sys.objects.name) ",
                   "  FROM sys.objects ",
                   " WHERE type='U' AND ((lower(sys.objects.name) like '%/_file' ESCAPE '/' ",
                   "  AND  len(sys.objects.name) between 7 and 15) OR ",
                   "       (lower(sys.objects.name) LIKE 'aps%' )) ",
                   "  AND lower(sys.objects.name) NOT IN(SELECT lower(zta01) FROM zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",
                                     "   AND zta01 is not null) ",
                   " ORDER BY 1"
      END IF
    #No.FUN-A60022---end
   END CASE                                         #FUN-730016
   DECLARE p_zta_imp CURSOR FROM l_sql
 
   #取得 Table 清單總筆數
   CASE g_db_type                                   #FUN-730016
    WHEN "IFX"                                      #FUN-730016  
      IF l_chkupdate='1' THEN
        #LET l_sql=' SELECT COUNT(TABNAME)',
        #          '   FROM SYSTABLES',
        #          '  WHERE (TABNAME MATCHES "??_file" OR ',
        #          '         TABNAME MATCHES "???_file" OR ',
        #          '         TABNAME MATCHES "????_file" OR ',
        #          '         TABNAME MATCHES "tc_??_file" OR ',
        #          '         TABNAME MATCHES "tc_???_file" OR ',
        #          '         TABNAME MATCHES "tc_????_file" OR ',
        #          '         TABNAME MATCHES "aps*" ) ',
        #          '    AND TABTYPE="T" '
         LET l_sql ="SELECT COUNT(TABNAME) ",
                    "  FROM systables ",
                    " WHERE ((TABNAME like '%_file' AND ",
                    "         length(TABNAME) between 7 and 15) OR ",
                    "        TABNAME MATCHES 'aps*' ) ",
                    "    AND TABTYPE='T' "
      ELSE
        #LET l_sql=' SELECT COUNT(TABNAME)',
        #          '   FROM SYSTABLES',
        #          '  WHERE (TABNAME MATCHES "??_file" OR ',
        #          '         TABNAME MATCHES "???_file" OR ',
        #          '         TABNAME MATCHES "????_file" OR ',
        #          '         TABNAME MATCHES "tc_??_file" OR ',
        #          '         TABNAME MATCHES "tc_???_file" OR ',
        #          '         TABNAME MATCHES "tc_????_file" OR ',
        #          '         TABNAME MATCHES "aps*" ) ',
        #          '    AND TABTYPE="T" ',
        #          '    AND TABNAME NOT IN(SELECT zta01 FROM zta_file ',
        #                            ' WHERE zta02="',g_dbs CLIPPED,'" ',
        #                            '   AND zta01 is not null) '
         LET l_sql ="SELECT COUNT(TABNAME) ",
                    "  FROM SYSTABLES ",
                    " WHERE ((TABNAME like '%_file' AND ",
                    "         length(TABNAME) between 7 and 15) OR ",
                    "        TABNAME MATCHES 'aps*' ) ",
                    "    AND TABTYPE='T' ",
                    "    AND TABNAME NOT IN(SELECT zta01 FROM zta_file ",
                                      " WHERE zta02='",g_dbs CLIPPED,"' ",
                                      "   AND zta01 is not null) "
      END IF
   
    WHEN "ORA"                                      #FUN-730016  
      IF l_chkupdate='1' THEN
        #LET l_sql="SELECT COUNT(1)",
        #          "  FROM user_tables ",
        #          " WHERE (table_name LIKE '__/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'TC/___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/____/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/_____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'APS%' ) "
         LET l_sql="SELECT COUNT(1) ",
                   "  FROM user_tables ",
                   " WHERE (table_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(table_name) between 7 and 15) OR ",
                   "       (table_name LIKE 'APS%' ) "
      ELSE
        #LET l_sql="SELECT COUNT(1)",
        #          "  FROM user_tables ",
        #          " WHERE (table_name LIKE '__/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE '____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'TC/___/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/____/_FILE' ESCAPE '/' OR ",
        #          "        table_name LIKE 'TC/_____/_FILE' ESCAPE '/' OR  ",
        #          "        table_name LIKE 'APS%' ) ",
        #          "  AND lower(table_name) NOT IN(SELECT zta01 FROM zta_file",
        #                            " WHERE zta02='",g_dbs CLIPPED,"' ",
        #                            "   AND zta01 is not null) "
         LET l_sql="SELECT COUNT(1)",
                   "  FROM user_tables ",
                   " WHERE ((table_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(table_name) between 7 and 15) OR ",
                   "       (table_name LIKE 'APS%' )) ",
                   "  AND lower(table_name) NOT IN(SELECT zta01 FROM zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",
                                     "   AND zta01 is not null) "
         #END No.FUN-810041
      END IF
 
    WHEN "MSV"      #FUN-770027
   #No.FUN-A60022---start
     # IF l_chkupdate='1' THEN
     #    LET l_sql=' SELECT COUNT(NAME)',
     #              '   FROM SYS.TABLES',
     #              '  WHERE (NAME MATCHES "??_file" OR ',
     #              '         NAME MATCHES "???_file" OR ',
     #              '         NAME MATCHES "????_file" OR ',
     #              '         NAME MATCHES "tc_??_file" OR ',
     #              '         NAME MATCHES "tc_???_file" OR ',
     #              '         NAME MATCHES "tc_????_file" OR ',
     #              '         NAME MATCHES "aps*" ) '
     # ELSE
     #    LET l_sql=' SELECT COUNT(NAME)',
     #              '   FROM SYS.TABLES',
     #              '  WHERE (NAME MATCHES "??_file" OR ',
     #              '         NAME MATCHES "???_file" OR ',
     #              '         NAME MATCHES "????_file" OR ',
     #              '         NAME MATCHES "tc_??_file" OR ',
     #              '         NAME MATCHES "tc_???_file" OR ',
     #              '         NAME MATCHES "tc_????_file" OR ',
     #              '         NAME MATCHES "aps*" ) ',
     #              '    AND NAME NOT IN(SELECT zta01 FROM zta_file ',
     #                                  ' WHERE zta02="',g_dbs CLIPPED,'" ',
     #                                    ' AND zta01 is not null) '
     # END IF
      
      IF l_chkupdate='1' THEN     
         LET l_sql="SELECT COUNT(*) ",
                   "  FROM sys.objects ",
                   " WHERE type='U' AND (lower(sys.objects.name) like '%/_file' ESCAPE '/' AND ",
                   "        len(sys.objects.name) between 7 and 15) OR ",
                   "       (lower(sys.objects.name) LIKE 'aps%' ) "
      ELSE
         LET l_sql="SELECT COUNT(*)",
                   "  FROM sys.objects ",
                   " WHERE type='U' AND ((lower(sys.objects.name) like '%/_file' ESCAPE '/' AND ",
                   "        len(sys.objects.name) between 7 and 15) OR ",
                   "       (lower(sys.objects.name) LIKE 'aps%' )) ",
                   "  AND lower(sys.objects.name) NOT IN(SELECT lower(zta01) FROM zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",
                                     "   AND zta01 is not null) "
      END IF
   #No.FUN-A60022---end
   END CASE                                         #FUN-730016
   DECLARE p_zta_imp_cnt CURSOR FROM l_sql
   OPEN p_zta_imp_cnt
   FETCH p_zta_imp_cnt INTO l_count
   FREE p_zta_imp_cnt
   display "TABLE COUNT:",l_count

   #取得 Synonym 資料筆數
   CASE g_db_type                                   #FUN-730016
    WHEN "IFX"                                      #FUN-730016  
      #No.FUN-810041
      IF l_chkupdate='1' THEN
         LET l_sql="select count(tabname) from syssyntable",
                   " WHERE ((TABNAME like '%_file' AND ",
                   "         length(TABNAME) between 7 and 15) OR ",
                   "        TABNAME MATCHES 'aps*' ) "
      ELSE
         LET l_sql="select count(tabname) from syssyntable",
                   " where tabname not in(select zta01 from zta_file",
                                  " WHERE zta02='",g_dbs CLIPPED,"' ",
                                  "   AND zta01 is not null) AND ",
                   "      ((TABNAME like '%_file' AND ",
                   "         length(TABNAME) between 7 and 15) OR ",
                   "        TABNAME MATCHES 'aps*' ) "
      END IF
   
    WHEN "ORA"                                      #FUN-730016  
      IF l_chkupdate='1' THEN
         LET l_sql="select count(1) from user_synonyms",
                   " WHERE (synonym_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(synonym_name) between 7 and 15) OR ",
                   "       (synonym_name LIKE 'APS%' ) "
      ELSE
         LET l_sql="select count(1) from user_synonyms",
                   " where lower(synonym_name) not in(select zta01 from zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",
                                     "   AND zta01 is not null) AND ",
                   "      ((synonym_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(synonym_name) between 7 and 15) OR ",
                   "       (synonym_name LIKE 'APS%' )) "
      END IF
      #END No.FUN-810041
 
    WHEN "MSV"                                      #FUN-730016  
    #No.FUN-A60022---start
      IF l_chkupdate='1' THEN     
         LET l_sql="SELECT COUNT(*) ",
                   "  FROM sys.synonyms ",
                   " WHERE  (lower(sys.synonyms.name) like '%/_file' ESCAPE '/' AND ",
                   "        len(sys.synonyms.name) between 7 and 15) OR ",
                   "       (lower(sys.synonyms.name) LIKE 'aps%' ) "
      ELSE
         LET l_sql="SELECT COUNT(*)",
                   "  FROM sys.synonyms ",
                   " WHERE  ((lower(sys.synonyms.name) like '%/_file' ESCAPE '/' AND ",
                   "        len(sys.synonyms.name) between 7 and 15) OR ",
                   "       (lower(sys.synonyms.name) LIKE 'aps%' )) ",
                   "  AND lower(sys.synonyms.name) NOT IN(SELECT lower(zta01) FROM zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",
                                     "   AND zta01 is not null) "
      END IF
    #No.FUN-A60022---end
   END CASE                                         #FUN-730016
   PREPARE p_zta_imp_s_cnt FROM l_sql
   EXECUTE p_zta_imp_s_cnt INTO l_count_s
   FREE p_zta_imp_s_cnt
   display "SYNONYM COUNT:",l_count_s

   #FUN-9C0036 -- start --
   #取得 View 資料筆數
   CASE g_db_type      
    WHEN "IFX"  
      #GP5.2 沒有 ifx, 暫不處理        
   
    WHEN "ORA"                              
      IF l_chkupdate='1' THEN
         LET l_sql="select count(1)",
                   "  from user_views",
                   " WHERE (view_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(view_name) between 7 and 15) OR ",
                   "       (view_name LIKE 'APS%' ) "
      ELSE
         LET l_sql="select count(1)",
                   "  from user_views",
                   " where lower(view_name) not in(select zta01 from zta_file",
                                  " WHERE zta02='",g_dbs CLIPPED,"' ", 
                                  "   AND zta01 is not null) AND ",    
                "      ((view_name like '%/_FILE' ESCAPE '/' AND ",
                "        length(view_name) between 7 and 15) OR ",
                "       (view_name LIKE 'APS%' )) "
      END IF
 
    WHEN "MSV"         
      #No.FUN-A60022--start
      IF l_chkupdate='1' THEN
         LET l_sql="select count(1)",
                   "  from sys.views",
                   " WHERE (name like '%/_file' ESCAPE '/' AND ",
                   "        len(name) between 7 and 15) OR ",
                   "       (name LIKE 'aps%' ) "
      ELSE
         LET l_sql="select count(1)",
                   "  from sys.views",
                   " where lower(name) not in(select zta01 from zta_file",
                                  " WHERE zta02='",g_dbs CLIPPED,"' ", 
                                  "   AND zta01 is not null) AND ",    
                "      ((name like '%/_file' ESCAPE '/' AND ",
                "        len(name) between 7 and 15) OR ",
                "       (name LIKE 'aps%' )) "
      END IF
      #No.FUN-A60022--end
   END CASE            
   PREPARE p_zta_imp_v_cnt FROM l_sql
   EXECUTE p_zta_imp_v_cnt INTO l_count_v
   FREE p_zta_imp_v_cnt
   display "VIEW COUNT:",l_count_v
   #FUN-9C0036 -- start --


   IF (l_count+l_count_s+l_count_v)=0 THEN    #所有筆數加總   #FUN-9C0036
      CALL cl_err('','zta-023',1)
      DISPLAY "err:zta-023"
      RETURN
   ELSE
      #FUN-9C0036 -- start --
      IF g_bgjob='N' OR cl_null(g_bgjob) THEN
         CALL cl_progress_bar(l_count+l_count_s+l_count_v)    #FUN-9C0036
      END IF
      #FUN-9C0036 -- end --
   END IF
   LET l_a=0
   LET l_zta.zta02=g_dbs CLIPPED
   #暫時先不設zta17
   LET l_zta.zta05=g_today CLIPPED
   LET l_zta.zta06=g_user CLIPPED
   LET l_zta.zta07='T'
   LET l_date=TODAY USING "yymmdd"
   LET l_success='y'
   LET l_jump='n'
 
#################zta import error list channel start##################
   LET l_err_fname = g_dir.tempdir,"/","zta_err_lst"
   LET l_error_list=base.channel.create()
   CALL l_error_list.setdelimiter("")
   CALL l_error_list.openfile(l_err_fname CLIPPED, "w" )
   CALL l_error_list.write("table_name  db_name  command")
 
#   IF g_db_type="ORA" THEN
#      LET l_sql="$TOP/ora/bin/up_priv.sh ",g_dbs CLIPPED
#      RUN l_sql
#   END IF
   display "IMPORT zta_file table start:",TIME
   FOREACH p_zta_imp INTO l_tabname
     IF sqlca.sqlcode THEN
        LET g_err="foreach p_zta_imp error(imp):"
        CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
        DISPLAY g_err,sqlca.sqlcode
        EXIT FOREACH
     END IF
     LET l_zta.zta01=l_tabname
--     LET ch = base.Channel.create()
 
--     ####### 利用sch檔搜尋系統別 #############
--   LET l_sql="cd $TOP;find -name ",l_zta.zta01 CLIPPED,
--             ".sch|cut -d'/' -f 2"
--   CALL ch.openPipe(l_sql,"r")
--   IF NOT ch.read([l_zta.zta03]) THEN
--      LET l_zta.zta03=''
--   END IF
--   CALL ch.close()
--   IF l_zta.zta03 = '' THEN
--      LET l_sql="cd $CUST;find -name ",l_zta.zta01 CLIPPED,
--                ".sch|cut -d'/' -f 2"
--      CALL ch.openPipe(l_sql,"r")
--      IF NOT ch.read([l_zta.zta03]) THEN
--         LET l_zta.zta03=''
--      END IF
--      CALL ch.close()
--   END IF
 
 
     #FUN-9C0036 -- start --
     IF g_bgjob='N' OR cl_null(g_bgjob) THEN
        CALL cl_progressing("Import : " || l_zta.zta01 )
     END IF
     #FUN-9C0036 -- end --

     #FUN-A60050 -- start --
     #抓取模組別及檔案類型
     LET l_zta.zta03=''
     LET l_zta.zta09=''
     LET l_zta.zta18='N'
     SELECT UNIQUE zta03,zta09,zta18 INTO l_zta.zta03,l_zta.zta09,l_zta.zta18 FROM zta_file 
      WHERE zta01=l_zta.zta01 AND zta03 IS NOT NULL AND zta09 IS NOT NULL
     IF cl_null(l_zta.zta03) OR cl_null(l_zta.zta09) THEN
        SELECT UNIQUE gat06,gat07 INTO l_zta.zta03,l_zta.zta09 FROM gat_file 
         WHERE gat01=l_zta.zta01 AND gat06 IS NOT NULL AND gat07 IS NOT NULL

        SELECT UNIQUE zta18 INTO l_zta.zta18 FROM zta_file WHERE zta01=l_zta.zta01
     END IF
     #FUN-A60050 -- end --

     LET l_jump='n'
     LET l_a=l_a+1
     LET l_sql="INSERT INTO zta_file(zta01,zta02,zta05,zta06,zta07,zta17,zta10,zta03,zta09,zta18) ",      #FUN-A60050
              " VALUES('",l_zta.zta01 CLIPPED,"','",
                          l_zta.zta02 CLIPPED,"','",
                          l_zta.zta05 CLIPPED,"','",
                          l_zta.zta06 CLIPPED,"','",
                          l_zta.zta07 CLIPPED,"','",
                          l_zta.zta17 CLIPPED,"','Y','",             #FUN-A60050
                          l_zta.zta03 CLIPPED,"','",                 #FUN-A60050
                          l_zta.zta09 CLIPPED,"','",                 #FUN-A60050
                          l_zta.zta18 CLIPPED,"')"                   #FUN-A60050
     PREPARE p_zta_imp_pre3 FROM l_sql
     EXECUTE p_zta_imp_pre3
     IF sqlca.sqlcode THEN
        #IF sqlca.sqlcode=-239 AND l_chkupdate='1' THEN              #TQC-790092
        IF cl_sql_dup_value(SQLCA.SQLCODE) AND l_chkupdate='1' THEN  #TQC-790092
           LET l_sql="UPDATE zta_file SET zta05='",l_zta.zta05 CLIPPED,"',",
                                         "zta06='",l_zta.zta06 CLIPPED,"',",
                                         "zta07='",l_zta.zta07 CLIPPED,"',",
                                         "zta17='",l_zta.zta17 CLIPPED,"',",
                                         "zta10='Y'",
                     " WHERE zta01='",l_zta.zta01 CLIPPED,"'",
                     "   AND zta02='",l_zta.zta02 CLIPPED,"'"
           PREPARE p_zta_imp_pre10 FROM l_sql
           EXECUTE p_zta_imp_pre10
           IF sqlca.sqlerrd[3] = 0  THEN
              #-----MOD-6C0061---------
              #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
              #          column 22,"update zta_file"
              LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                        column 27,"update zta_file"
              #-----END MOD-6C0061-----
              CALL l_error_list.write(l_sql)
              LET l_success='n'
              LET l_jump='y'
              CONTINUE FOREACH
           END IF
        ELSE
#          CALL cl_err("insert zta_file:",sqlca.sqlcode,1)
#          EXIT FOREACH
           #-----MOD-6C0061---------
           #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
           #          column 22,"insert into zta_file"
           LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                     column 27,"insert into zta_file"
           #-----END MOD-6C0061-----
           CALL l_error_list.write(l_sql)
           LET l_success='n'
           LET l_jump='y'
           CONTINUE FOREACH
        END IF
     END IF
     FREE p_zta_imp_pre3
     LET l_sql="SELECT MAX(zs03)+1 FROM zs_file",
               " WHERE zs01='",l_zta.zta01 CLIPPED,"'",
               "   AND zs02='",l_zta.zta02 CLIPPED,"'"
     PREPARE p_zta_imp_pre1 FROM l_sql
     EXECUTE p_zta_imp_pre1 INTO l_zs03
     FREE p_zta_imp_pre1
     IF l_zs03 IS NULL THEN
        LET l_zs03=1
     END IF
      LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,zs08,zs09,zs10,zs11,zs12) ", #No.MOD-470041
              " VALUES('",l_zta.zta01 CLIPPED,"','",
                          l_zta.zta02 CLIPPED,"',",
                          l_zs03 CLIPPED,",'",
                          l_date CLIPPED,"','p','load from systables','",
                          g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"
     PREPARE p_zta_imp_pre4 FROM l_sql
     EXECUTE p_zta_imp_pre4
     IF sqlca.sqlcode THEN
#        CALL cl_err("insert zs_file:",sqlca.sqlcode,1)
#        EXIT FOREACH
         #-----MOD-6C0061---------
         #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
         #          column 22,"insert into zs_file"
         LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                   column 27,"insert into zs_file"
         #-----END MOD-6C0061-----
         CALL l_error_list.write(l_sql)
         LET l_success='n'
         DELETE FROM zta_file
          WHERE zta01=l_zta.zta01
            AND zta02=l_zta.zta02
         LET l_jump='y'
         CONTINUE FOREACH
     END IF
     FREE p_zta_imp_pre4
     IF g_edition = 'C' THEN
        #IF g_db_type="IFX" THEN
        CASE g_db_type                                   #FUN-730016
         WHEN "IFX"                                      #FUN-730016  
           LET l_sql="INSERT INTO ds@",g_std_server CLIPPED,".dbo.zs_file ",
               " VALUES('",l_zta.zta01 CLIPPED,"','",
                          l_zta.zta02 CLIPPED,"',",
                          l_zs03 CLIPPED,",",
                          l_date CLIPPED,",'p','load from systables','",
                          g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"
        
         WHEN "ORA"                                      #FUN-730016  
           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
               " VALUES('",l_zta.zta01 CLIPPED,"','",
                          l_zta.zta02 CLIPPED,"',",
                          l_zs03 CLIPPED,",'",
                          l_date CLIPPED,"','p','load from systables','",
                          g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"
 
         WHEN "MSV"                                      #FUN-730016  
         #No.FUN-A60022---start
           LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
               " VALUES('",l_zta.zta01 CLIPPED,"','",
                          l_zta.zta02 CLIPPED,"',",
                          l_zs03 CLIPPED,",'",
                          l_date CLIPPED,"','p','load from systables','",
                          g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"
         #No.FUN-A60022---end
        END CASE                                         #FUN-730016
 
        PREPARE p_zta_imp_pre5 FROM l_sql
        EXECUTE p_zta_imp_pre5
        IF sqlca.sqlcode THEN
#           CALL cl_err("insert std_server zs_file:",sqlca.sqlcode,1)
#           EXIT FOREACH
            #-----MOD-6C0061---------
            #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
            #          column 22,"insert into std_server.dbo.zs_file"
            LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                      column 27,"insert into std_server.dbo.zs_file"
            #-----END MOD-6C0061-----
            CALL l_error_list.write(l_sql)
            LET l_success='n'
            DELETE FROM zta_file
             WHERE zta01=l_zta.zta01
               AND zta02=l_zta.zta02
            DELETE FROM zs_file
             WHERE zs01=l_zta.zta01
               AND zs02=l_zta.zta02
               AND zs03=l_zs03
            LET l_jump='y'
            CONTINUE FOREACH
        END IF
        FREE p_zta_imp_pre5
     END IF
   END FOREACH
 
   display "IMPORT zta_file table END:",TIME
   #################非ds資料庫之synonym table專用 BEGIN##################
   IF l_count_s != 0 THEN
      #IF g_db_type="IFX" THEN
      CASE g_db_type                                   #FUN-730016
       WHEN "IFX"                                      #FUN-730016  
         #No.FUN-810041
         IF l_chkupdate='1' THEN
            LET l_sql="select tabname,dbname from syssyntable",
                      " WHERE ((TABNAME like '%_file' AND ",
                      "         length(TABNAME) between 7 and 15) OR ",
                      "        TABNAME MATCHES 'aps*' ) "
         ELSE
            LET l_sql="select tabname,dbname from syssyntable",
                      " where tabname not in(select zta01 from zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",  #FUN-990043
                                     "   AND zta01 is not null) AND ",     #FUN-990043
                       "      ((TABNAME like '%_file' AND ",
                       "         length(TABNAME) between 7 and 15) OR ",
                       "        TABNAME MATCHES 'aps*' ) "
         END IF
      
       WHEN "ORA"                                      #FUN-730016  
         IF l_chkupdate='1' THEN
            LET l_sql="select lower(synonym_name),lower(table_owner) ",
                      "  from user_synonyms",
                      " WHERE (synonym_name like '%/_FILE' ESCAPE '/' AND ",
                      "        length(synonym_name) between 7 and 15) OR ",
                      "       (synonym_name LIKE 'APS%' ) "
         ELSE
            LET l_sql="select lower(synonym_name),lower(table_owner) ",
                      "  from user_synonyms",
                      " where lower(synonym_name) not in(select zta01 from zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ",  #FUN-990043
                                     "   AND zta01 is not null) AND ",     #FUN-990043
                   "      ((synonym_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(synonym_name) between 7 and 15) OR ",
                   "       (synonym_name LIKE 'APS%' )) "
            #END No.FUN-810041
         END IF
 
       WHEN "MSV"                                      #FUN-730016  
         #No.FUN-A60022---start
         IF l_chkupdate='1' THEN     
            LET l_sql="SELECT name,base_object_name ",
                      "  FROM sys.synonyms ",
                      " WHERE  (lower(sys.synonyms.name) like '%/_file' ESCAPE '/' AND ",
                      "        len(sys.synonyms.name) between 7 and 15) OR ",
                      "       (lower(sys.synonyms.name) LIKE 'aps%' ) "
         ELSE
            LET l_sql="SELECT name, base_object_name",
                      "  FROM sys.synonyms ",
                      " WHERE  ((lower(sys.synonyms.name) like '%/_file' ESCAPE '/' AND ",
                      "        len(sys.synonyms.name) between 7 and 15) OR ",
                      "       (lower(sys.synonyms.name) LIKE 'aps%' )) ",
                      "  AND lower(sys.synonyms.name) NOT IN(SELECT lower(zta01) FROM zta_file",
                                        " WHERE zta02='",g_dbs CLIPPED,"' ",
                                        "   AND zta01 is not null) "
         END IF
         #No.FUN-A60022---end
      END CASE                                         #FUN-730016
      DECLARE p_zta_imp_s CURSOR FROM l_sql
      LET l_zta.zta02=g_dbs CLIPPED
      #暫時先不設zta17
      LET l_zta.zta05=g_today CLIPPED
      LET l_zta.zta06=g_user CLIPPED
      LET l_zta.zta07='S'
      display "IMPORT zta_file synonym START:",TIME
      FOREACH p_zta_imp_s INTO l_zta.zta01,l_zta.zta17
        IF sqlca.sqlcode THEN
           LET g_err="foreach p_zta_imp_s errors(imp):"
           CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
           DISPLAY g_err,sqlca.sqlcode
           EXIT FOREACH
        END IF
        # FUN-A60022---start
        IF g_db_type = "MSV" THEN
           LET l_str=l_zta.zta17
           LET l_start=l_str.getIndexOf('_',1)
           LET l_end=l_str.getIndexOf(']',1)
           LET l_zta.zta17=l_str.subString(l_start+1,l_end-1)
        END IF
        # FUN-A60022---end

--      LET ch = base.Channel.create()
--      IF l_zta.zta01[1,3]='aps' AND l_zta.zta01!='aps_file' THEN
--         LET l_sql="cd $TOP;find -name ",l_zta.zta01 CLIPPED,
--                   ".sql|cut -d'/' -f 2"
--      ELSE
--         FOR i=1 TO 10
--             IF l_zta.zta01[i,i] = '_' THEN
--                LET l_sql=l_zta.zta01[1,i-1]
--             END IF
--         END FOR
--         LET l_sql="cd $TOP;find -name c_",l_sql CLIPPED,
--                   ".sql|cut -d'/' -f 2"
--      END IF
--      CALL ch.openPipe(l_sql,"r")
--      IF NOT ch.read([l_zta.zta03]) THEN
--         LET l_zta.zta03=''
--      END IF
--      CALL ch.close()
        #FUN-9C0036 -- start --
        IF g_bgjob='N' OR cl_null(g_bgjob) THEN
           CALL cl_progressing("Import : " || l_zta.zta01 )
        END IF
        #FUN-9C0036 -- end --

        #FUN-A60050 -- start --
        LET l_zta.zta03=''
        LET l_zta.zta09=''
        LET l_zta.zta18='N'
        #抓取模組別及檔案類型
        SELECT UNIQUE zta03,zta09,zta18 INTO l_zta.zta03,l_zta.zta09,l_zta.zta18 FROM zta_file 
         WHERE zta01=l_zta.zta01 AND zta03 IS NOT NULL AND zta09 IS NOT NULL
        IF cl_null(l_zta.zta03) OR cl_null(l_zta.zta09) THEN
           SELECT UNIQUE gat06,gat07 INTO l_zta.zta03,l_zta.zta09 FROM gat_file 
            WHERE gat01=l_zta.zta01 AND gat06 IS NOT NULL AND gat07 IS NOT NULL

           SELECT UNIQUE zta18 INTO l_zta.zta18 FROM zta_file WHERE zta01=l_zta.zta01
        END IF
        #FUN-A60050 -- end --

        LET l_sql="INSERT INTO zta_file(zta01,zta02,zta05,zta06,zta07,zta17,zta10,zta03,zta09,zta18) ",      #FUN-A60050
                 " VALUES('",l_zta.zta01 CLIPPED,"','",
                             l_zta.zta02 CLIPPED,"','",
                             l_zta.zta05 CLIPPED,"','",
                             l_zta.zta06 CLIPPED,"','",
                             l_zta.zta07 CLIPPED,"','",
                             l_zta.zta17 CLIPPED,"','Y','",             #FUN-A60050
                             l_zta.zta03 CLIPPED,"','",                 #FUN-A60050
                             l_zta.zta09 CLIPPED,"','",                 #FUN-A60050
                             l_zta.zta18 CLIPPED,"')"                   #FUN-A60050
        PREPARE p_zta_imp_pre6 FROM l_sql
        EXECUTE p_zta_imp_pre6
        IF sqlca.sqlcode THEN
           #IF sqlca.sqlcode='-239' AND l_chkupdate='1' THEN            #TQC-790092
           IF cl_sql_dup_value(SQLCA.SQLCODE) AND l_chkupdate='1' THEN  #TQC-790092
              LET l_sql="UPDATE zta_file SET zta05='",l_zta.zta05 CLIPPED,"',",
                                            "zta06='",l_zta.zta06 CLIPPED,"',",
                                            "zta07='",l_zta.zta07 CLIPPED,"',",
                                            "zta17='",l_zta.zta17 CLIPPED,"',",
                                            "zta10='Y'",
                        " WHERE zta01='",l_zta.zta01 CLIPPED,"'",
                        "   AND zta02='",l_zta.zta02 CLIPPED,"'"
              PREPARE p_zta_imp_pre11 FROM l_sql
              EXECUTE p_zta_imp_pre11
              IF sqlca.sqlerrd[3] = 0  THEN
#                 CALL cl_err( 'insert zta_file:',sqlca.sqlcode,1)
                 #-----MOD-6C0061---------
                 #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
                 #          column 22,"update zta_file(synonym)"
                 LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                           column 27,"update zta_file(synonym)"
                 #-----END MOD-6C0061-----
                 CALL l_error_list.write(l_sql)
                 LET l_success='n'
                 CONTINUE FOREACH
              END IF
           ELSE
#              CALL cl_err( 'insert zta_file:',sqlca.sqlcode,1)
              #-----MOD-6C0061---------
              #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
              #          column 22,"insert into zta_file(synonym)"
              LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                        column 27,"insert into zta_file(synonym)"
              #-----END MOD-6C0061-----
              CALL l_error_list.write(l_sql)
              LET l_success='n'
              CONTINUE FOREACH
           END IF
        END IF
        FREE p_zta_imp_pre6
        LET l_sql="SELECT MAX(zs03)+1 FROM zs_file",
                  " WHERE zs01='",l_zta.zta01 CLIPPED,"'",
                  "   AND zs02='",l_zta.zta02 CLIPPED,"'"
        PREPARE p_zta_imp_pre2 FROM l_sql
        EXECUTE p_zta_imp_pre2 INTO l_zs03
        FREE p_zta_imp_pre2
        IF l_zs03 IS NULL THEN
           LET l_zs03=1
        END IF
        LET l_sql="INSERT INTO zs_file(zs01,zs02,zs03,zs04,zs05,zs06,zs07,",
                  "                    zs08,zs09,zs10,zs11,zs12)",
                  " VALUES('",l_zta.zta01 CLIPPED,"','",
                             l_zta.zta02 CLIPPED,"',",
                             l_zs03 CLIPPED,",'",
                             l_date CLIPPED,"','p','load from systables','",
                             g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"
        PREPARE p_zta_imp_pre7 FROM l_sql
        EXECUTE p_zta_imp_pre7
        IF sqlca.sqlcode THEN
#           CALL cl_err("insert zs_file:",sqlca.sqlcode,1)
#           EXIT FOREACH
            #-----MOD-6C0061---------
            #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
            #          column 22,"insert into zs_file"
            LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                      column 27,"insert into zs_file"
            #-----END MOD-6C0061-----
            CALL l_error_list.write(l_sql)
            LET l_success='n'
            DELETE FROM zta_file
             WHERE zta01=l_zta.zta01
               AND zta02=l_zta.zta02
            CONTINUE FOREACH
        END IF
        FREE p_zta_imp_pre7
        IF g_edition='C' THEN
           #IF g_db_type="IFX" THEN
           CASE g_db_type                                   #FUN-730016
            WHEN "IFX"                                      #FUN-730016  
              LET l_sql="INSERT INTO ds@",g_std_server CLIPPED,".dbo.zs_file ",
                        " VALUES('",l_zta.zta01 CLIPPED,"','",
                                   l_zta.zta02 CLIPPED,"',",
                                   l_zs03 CLIPPED,",",
                                   l_date CLIPPED,",'p','load from systables','",
                                   g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"
           
            WHEN "ORA"                                      #FUN-730016  
              LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                        " VALUES('",l_zta.zta01 CLIPPED,"','",
                                   l_zta.zta02 CLIPPED,"',",
                                   l_zs03 CLIPPED,",'",
                                   l_date CLIPPED,"','p','load from systables','",
                                   g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"
 
            WHEN "MSV"                                      #FUN-730016  
            #No.FUN-A60022---start
              LET l_sql="INSERT INTO zs_file@",g_std_server CLIPPED,
                        " VALUES('",l_zta.zta01 CLIPPED,"','",
                                   l_zta.zta02 CLIPPED,"',",
                                   l_zs03 CLIPPED,",'",
                                   l_date CLIPPED,"','p','load from systables','",
                                   g_user CLIPPED,"','','Y','N','N','",g_tiptop_ver CLIPPED,"')"

            #No.FUN-A60022---end
           END CASE                                         #FUN-730016
           PREPARE p_zta_imp_pre8 FROM l_sql
           EXECUTE p_zta_imp_pre8
           IF sqlca.sqlcode THEN
#              CALL cl_err("insert std_server zs_file:",sqlca.sqlcode,1)
#              EXIT FOREACH
               #-----MOD-6C0061---------
               #LET l_sql=l_zta.zta01 CLIPPED,column 13,l_zta.zta02 CLIPPED,
               #          column 22,"insert into std_server.dbo.zs_file"
               LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                         column 27,"insert into std_server.dbo.zs_file"
               #-----END MOD-6C0061-----
               CALL l_error_list.write(l_sql)
               LET l_success='n'
               DELETE FROM zta_file
                WHERE zta01=l_zta.zta01
                  AND zta02=l_zta.zta02
               DELETE FROM zs_file
                WHERE zs01=l_zta.zta01
                  AND zs02=l_zta.zta02
                  AND zs03=l_zs03
               CONTINUE FOREACH
           END IF
           FREE p_zta_imp_pre8
        END IF
      END FOREACH
      display "IMPORT zta_file synonym END:",TIME
   END IF
   #################非ds資料庫之synonym table專用 END ##################
 
   #FUN-9C0036 -- start --
   #################  虛擬資料庫之 VIEW 專用 END   ##################
   #FUN-9C0036 -- end --
   IF l_count_v != 0 THEN

      #取得 view 清單
      CASE g_db_type                                 
       WHEN "IFX"                                    
       WHEN "ORA"                                    
         LET l_system_table = "user_views"
         IF l_chkupdate='1' THEN
            LET l_sql="select lower(view_name),''",
                      "  from user_views",
                      " WHERE (view_name like '%/_FILE' ESCAPE '/' AND ",
                      "        length(view_name) between 7 and 15) OR ",
                      "       (view_name LIKE 'APS%' ) "
         ELSE
            LET l_sql="select lower(view_name),'' ",
                      "  from user_views",
                      " where lower(view_name) not in(select zta01 from zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ", 
                                     "   AND zta01 is not null) AND ",    
                   "      ((view_name like '%/_FILE' ESCAPE '/' AND ",
                   "        length(view_name) between 7 and 15) OR ",
                   "       (view_name LIKE 'APS%' )) "
         END IF
 
       WHEN "MSV"                                    
         #No.FUN-A60022--start
         IF l_chkupdate='1' THEN
            LET l_sql="select lower(a.name), lower(b.referenced_database_name)",
                      "  from sys.views a, sys.sql_expression_dependencies b",
                      " WHERE a.name = b.referenced_entity_name AND ",
                      "       ((name like '%/_file' ESCAPE '/' AND ",
                      "        len(name) between 7 and 15) OR ",
                      "       (name LIKE 'aps%' )) "
         ELSE
            LET l_sql="select lower(a.name), lower(b.referenced_database_name)",
                    "  from sys.views a, sys.sql_expression_dependencies b",
                      " WHERE a.name = b.referenced_entity_name AND ",
                      "       (lower(name) not in(select zta01 from zta_file",
                                     " WHERE zta02='",g_dbs CLIPPED,"' ", 
                                     "   AND zta01 is not null) AND ",    
                   "      ((name like '%/_file' ESCAPE '/' AND ",
                   "        len(name) between 7 and 15) OR ",
                   "       (name LIKE 'aps%' ))) "
         END IF
         #No.FUN-A60022--end
      END CASE                                      
      DECLARE p_zta_imp_v CURSOR FROM l_sql
      LET l_zta.zta02=g_dbs CLIPPED
      LET l_zta.zta05=g_today CLIPPED
      LET l_zta.zta06=g_user CLIPPED
      LET l_zta.zta07='V'
      LET l_zta.zta17=""

      display "IMPORT zta_file synonym START:",TIME
      FOREACH p_zta_imp_v INTO l_zta.zta01,l_zta.zta17           #FUN-A60022
        IF sqlca.sqlcode THEN
           LET g_err="foreach p_zta_imp_v errors(imp):"
           CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
           DISPLAY g_err,sqlca.sqlcode
           EXIT FOREACH
        END IF
        IF g_bgjob='N' OR cl_null(g_bgjob) THEN
           CALL cl_progressing("Import : " || l_zta.zta01 )
        END IF

        #FUN-A80029 -- start --
        IF g_db_type = "MSV" THEN
            LET l_str = l_zta.zta17 CLIPPED
            LET l_zta.zta17 = l_str.subString(LENGTH(g_mssqlarea CLIPPED || "_")+1,l_str.getLength())
        ELSE
            SELECT DISTINCT azw05 INTO l_zta.zta17 FROM azw_file WHERE azw06=g_dbs
        END IF
        #FUN-A80029 -- end --

        #FUN-A60050 -- start --
        LET l_zta.zta03=''
        LET l_zta.zta09=''
        LET l_zta.zta18='N'
        #抓取模組別及檔案類型
        SELECT UNIQUE zta03,zta09,zta18 INTO l_zta.zta03,l_zta.zta09,l_zta.zta18 FROM zta_file 
         WHERE zta01=l_zta.zta01 AND zta03 IS NOT NULL AND zta09 IS NOT NULL
        IF cl_null(l_zta.zta03) OR cl_null(l_zta.zta09) THEN
           SELECT UNIQUE gat06,gat07 INTO l_zta.zta03,l_zta.zta09 FROM gat_file 
            WHERE gat01=l_zta.zta01 AND gat06 IS NOT NULL AND gat07 IS NOT NULL

           SELECT UNIQUE zta18 INTO l_zta.zta18 FROM zta_file WHERE zta01=l_zta.zta01
        END IF
        #FUN-A60050 -- end --

        LET l_sql="INSERT INTO zta_file(zta01,zta02,zta05,zta06,zta07,zta17,zta10,zta03,zta09,zta18) ",      #FUN-A60050
                 " VALUES('",l_zta.zta01 CLIPPED,"','",
                             l_zta.zta02 CLIPPED,"','",
                             l_zta.zta05 CLIPPED,"','",
                             l_zta.zta06 CLIPPED,"','",
                             l_zta.zta07 CLIPPED,"','",
                             l_zta.zta17 CLIPPED,"','Y','",             #FUN-A60050
                             l_zta.zta03 CLIPPED,"','",                 #FUN-A60050
                             l_zta.zta09 CLIPPED,"','",                 #FUN-A60050
                             l_zta.zta18 CLIPPED,"')"                   #FUN-A60050
        PREPARE p_zta_imp_view_pre FROM l_sql
        EXECUTE p_zta_imp_view_pre
        IF sqlca.sqlcode THEN
           IF cl_sql_dup_value(SQLCA.SQLCODE) AND l_chkupdate='1' THEN  
              LET l_sql="UPDATE zta_file SET zta05='",l_zta.zta05 CLIPPED,"',",
                                            "zta06='",l_zta.zta06 CLIPPED,"',",
                                            "zta07='",l_zta.zta07 CLIPPED,"',",
                                            "zta17='",l_zta.zta17 CLIPPED,"',",
                                            "zta10='Y'",
                        " WHERE zta01='",l_zta.zta01 CLIPPED,"'",
                        "   AND zta02='",l_zta.zta02 CLIPPED,"'"
              PREPARE p_zta_imp_view_pre2 FROM l_sql
              EXECUTE p_zta_imp_view_pre2
              IF sqlca.sqlerrd[3] = 0  THEN
                 LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                           column 27,"update zta_file(view)"
                 CALL l_error_list.write(l_sql)
                 LET l_success='n'
                 FREE p_zta_imp_view_pre2
                 CONTINUE FOREACH
              END IF
              FREE p_zta_imp_view_pre2
           ELSE
              LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                        column 27,"insert into zta_file(view)"
              CALL l_error_list.write(l_sql)
              LET l_success='n'
              FREE p_zta_imp_view_pre
              CONTINUE FOREACH
           END IF
        END IF
        FREE p_zta_imp_view_pre

        #將load動作記錄至 p_zs 
        LET l_sql = "load from ",l_system_table
        IF NOT p_insert_zs_file(l_zta.zta02 CLIPPED,l_zta.zta01 CLIPPED,l_sql) THEN 
            LET l_sql=l_zta.zta01 CLIPPED,column 16,l_zta.zta02 CLIPPED,
                      column 27,"insert into zs_file"
            CALL l_error_list.write(l_sql)
            LET l_success='n'
            DELETE FROM zta_file WHERE zta01=l_zta.zta01 AND zta02=l_zta.zta02
            CONTINUE FOREACH
        END IF
        FREE p_zta_imp_pre7
      END FOREACH
      display "IMPORT zta_file synonym END:",TIME
   END IF
   #################虛擬資料庫之 VIEW 專用 END   ##################
   #FUN-9C0036 -- end --

   CALL l_error_list.close()
   LET l_cmd="chmod 777 ",l_err_fname CLIPPED,">/dev/null 2>&1"  -- 確保權限開啟
   RUN l_cmd

   #FUN-9C0036 -- start --
   IF g_bgjob='N' OR cl_null(g_bgjob) THEN
      IF l_success='n' THEN
        #LET l_cmd="$FGLRUN $TOP/azz/42r/p_view.42r ",l_err_fname," 66"            #FUN-B30176 mark  
         LET l_cmd=FGL_GETENV("FGLRUN") ," ",FGL_GETENV("TOP"),os.Path.separator(),"azz",os.Path.separator(),   #FUN-B30176 #TQC-B70185 add " "
                   "42r",os.Path.separator(),"p_view.42r ",l_err_fname," 66"                     #FUN-B30176
         RUN l_cmd
      ELSE
         CALL cl_err('','zta-024',1)
      END IF
   END IF
   #FUN-9C0036 -- end --
END FUNCTION
 
 
#FUNCTION p_zta_copy()
#   DEFINE l_zta           RECORD LIKE zta_file.*,
#          l_oldno,l_newno LIKE zta_file.zta01
#
#    IF g_zta.zta01 IS NULL THEN
#       CALL cl_err("",-400,0)
#       RETURN
#    END IF
#    INPUT l_newno FROM zta01
#       AFTER FIELD zta01
#          IF l_newno IS NULL THEN
#             NEXT FIELD zta01
#          END IF
#          SELECT count(*) INTO g_cnt FROM zta_file
#           WHERE zta01 = l_newno
#          IF g_cnt > 0 THEN
#             CALL cl_err(l_newno,-239,0)
#             NEXT FIELD zta01
#          END IF
#    END INPUT
#    IF INT_FLAG THEN
#       LET INT_FLAG = 0
#       DISPLAY BY NAME g_zta.zta01 ATTRIBUTE(YELLOW)
#       RETURN
#    END IF
#    LET l_zta.* = g_zta.*
#    LET l_zta.zta01  =l_newno   #資料鍵值
#    LET l_zta.zta05  =g_today   #產生日期
#    LET l_zta.zta06  =g_user    #產生者
#    INSERT INTO zta_file VALUES (l_zta.*)
#    IF sqlca.sqlcode THEN
#       CALL cl_err(l_newno,sqlca.sqlcode,0)
#    ELSE
#       MESSAGE "ROW(",l_newno,") O.K" ATTRIBUTE(REVERSE)
#       LET l_oldno = g_zta.zta01
#       SELECT rowid,* INTO  g_zta.* FROM zta_file
#                      WHERE zta01 = l_newno
#       CALL p_zta_u()
#       SELECT rowid,* INTO  g_zta.* FROM zta_file
#                      WHERE zta01 = l_oldno
#    END IF
#    CALL p_zta_show()
#END FUNCTION
 
FUNCTION p_zta_out()
    DEFINE
        l_name   LIKE type_file.chr20,         # External(Disk) file name #No.FUN-680135 VARCHAR(20)
        sr  RECORD
                 order1 LIKE gat_file.gat06,   #No.FUN-680135 VARCHAR(3)
                 order2 LIKE zta_file.zta01,   #No.FUN-680135 VARCHAR(10)
                 zta01  LIKE zta_file.zta01,   #檔案編號
                 gat03  LIKE gat_file.gat03,   #檔案名稱
                 zta03  LIKE zta_file.zta03,   #系統別      #No.FUN-A60050
                 zta04  LIKE zta_file.zta04,   #使用別
                 zta05  LIKE zta_file.zta05,   #產生日期
                 zta06  LIKE zta_file.zta06,   #產生者
                 zta07  LIKE zta_file.zta07,   #No.FUN-680135 VARCHAR(7)   #Synonym Or Table
                 zta02  LIKE zta_file.zta02,   #database
                 zta18  LIKE zta_file.zta18    #多語系檔案  #No.FUN-A60050
            END RECORD,
        l_sql    STRING
DEFINE  l_cmd    STRING                        #TQC-7C0051
  
    IF g_wc IS NULL THEN
       CALL cl_err("","9057",0) RETURN
    END IF
    CALL cl_outnam("p_zta") RETURNING l_name
    LET l_name = DOWNSHIFT(g_zta.zta03) CLIPPED,"_2.txt"     #No.FUN-A60050
 
    #TQC-7C0051
    LET l_cmd = "rm -f ",l_name CLIPPED,"* 2>/dev/null"
    RUN l_cmd
    #END TQC-7C0051
 
    LET l_sql="SELECT zo02 FROM zo_file",
              " WHERE zo01 = '",g_lang CLIPPED,"'"
    PREPARE p_zta_out_pre1 FROM l_sql
    EXECUTE p_zta_out_pre1 INTO g_company
    FREE p_zta_out_pre1
#    DECLARE p_zta_za_cur CURSOR FOR
#            SELECT za02,za05 FROM za_file
#             WHERE za01 = "p_zta" AND za03 = g_lang
#    FOREACH p_zta_za_cur INTO g_i,l_za05
#       LET g_x[g_i] = l_za05
#    END FOREACH
    LET g_chapter=0
    MENU "" ATTRIBUTE(STYLE="popup")
       ON ACTION Manual_Chapter_User_Manual
          LET g_chapter=1
          EXIT MENU
       ON ACTION Manual_Chapter_DB_guide
          LET g_chapter=2
          EXIT MENU
       ON ACTION Table_structure
          LET g_chapter=3
          EXIT MENU
#TQC-860017 start
       ON IDLE g_idle_seconds
          CALL cl_on_idle()
          CONTINUE MENU
#TQC-860017 end
    END MENU
    IF g_chapter=0 THEN
       RETURN
    END IF
    CALL cl_wait()
    SELECT zz17,zz05 INTO g_len,g_zz05 FROM zz_file WHERE zz01 = "p_zta"
    IF g_len = 0 OR g_len IS NULL THEN LET g_len = 80 END IF
    FOR g_i = 1  TO g_len LET g_dash[g_i,g_i] = "=" END FOR
    FOR g_i = 11 TO g_len LET g_dash2[g_i,g_i] = "-" END FOR
    LET g_sql="SELECT '','',zta01,gat03,zta03,zta04,zta05,zta06,zta07,zta02,zta18",  #No.FUN-A60050
              "  FROM zta_file LEFT OUTER JOIN gat_file ",   # 組合出 SQL 指令
              "    ON zta01=gat01 AND gat02='",g_lang CLIPPED,"'",
              " WHERE ",g_wc CLIPPED, " ORDER BY zta01 " #NO:TQC-BB0049 進行排序
    DECLARE p_zta_co                         # SCROLL CURSOR
         CURSOR FROM g_sql
 
    IF g_chapter MATCHES "[12]" THEN
       START REPORT p_zta_rep TO l_name
    ELSE
       START REPORT p_zta_rep3 TO l_name
    END IF
 
    FOREACH p_zta_co INTO sr.*
        IF sqlca.sqlcode THEN
           LET g_err="foreach p_zta_co error(out):"
            CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
            EXIT FOREACH
        END IF
        IF  g_chr = "2"  THEN                 #move sort data
           LET sr.order1 = sr.zta03           #No.FUN-A60050
           LET sr.order2 = sr.zta01
        ELSE
           LET sr.order1 = " "
           LET sr.order2 = sr.zta01
        END IF
        IF g_chapter MATCHES "[12]"  THEN
           OUTPUT TO REPORT p_zta_rep(sr.*)
        ELSE
           CALL p_zta_out3(sr.*)
        END IF
 
    END FOREACH
 
    IF g_chapter MATCHES "[12]" THEN
       FINISH REPORT p_zta_rep
    ELSE
       FINISH REPORT p_zta_rep3
    END IF
 
    CLOSE p_zta_co
    ERROR ""
    CALL cl_prt(l_name," ","1",g_len)
END FUNCTION
 
 
FUNCTION p_zta_out3(sr)
   DEFINE
      l_sql      STRING,
      l_i        LIKE type_file.num5,          #No.FUN-680135 SMALLINT
      l_length   LIKE type_file.chr20,         #No.FUN-680135 VARCHAR(10)
      sr    RECORD
                 order1 LIKE gat_file.gat06,   #No.FUN-680135 VARCHAR(3)
                 order2 LIKE zta_file.zta01,   #No.FUN-680135 VARCHAR(10)
                 zta01  LIKE zta_file.zta01,   #檔案編號
                 gat03  LIKE gat_file.gat03,   #檔案名稱
                 zta03  LIKE zta_file.zta03,   #系統別      #No.FUN-A60050
                 zta04  LIKE zta_file.zta04,   #使用別
                 zta05  LIKE zta_file.zta05,   #產生日期
                 zta06  LIKE zta_file.zta06,   #產生者
                 zta07  LIKE zta_file.zta07,   #No.FUN-680135 VARCHAR(7) #Synonym Or Table
                 zta02  LIKE zta_file.zta02,   #database
                 zta18  LIKE zta_file.zta18    #多語系檔案  #No.FUN-A60050
            END RECORD,
      sr1   RECORD
                 colname    LIKE ztb_file.ztb03,     #No.FUN-680135 VARCHAR(30)      #欄位編號
                 coltype    LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(15)      #型態
                 coltype2   LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(10)
                 collength  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                 colscale   LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                 collength1 LIKE ztb_file.ztb08,     #No.FUN-680135 VARCHAR(10)
                 gaq03      LIKE gaq_file.gaq03,      #說明
                 collength2 LIKE type_file.num5    #No.FUN-A60022---add
            END RECORD
#      sr1 RECORD
#          colname    VARCHAR(128),                     #欄位編號
#          coltype    SMALLINT,                      #型態
#          coltype2   VARCHAR(10),
#          collength  SMALLINT,
#          collength1 VARCHAR(10),
#          gaq03      LIKE  gaq_file.gaq03           #說明
#                     END RECORD
 
   LET g_key1 = sr.zta01
   LET g_key2 = ""
   FOR g_cnt = 1 TO 10
       IF g_key1[g_cnt,g_cnt]="_"  THEN
          LET g_cnt = 10
       ELSE
          LET g_key2[g_cnt,g_cnt]=g_key1[g_cnt,g_cnt]
       END IF
   END FOR
   #IF g_db_type="IFX" THEN
   CASE g_db_type                                   #FUN-730016
    WHEN "IFX"                                      #FUN-730016  
      LET l_sql=" SELECT colno,colname,coltype,'',collength,'','',gaq03",
                " FROM ",sr.zta02 CLIPPED,":systables a,",
                         sr.zta02 CLIPPED,":syscolumns b,OUTER ",
                         sr.zta02 CLIPPED,".dbo.gaq_file",
                " WHERE tabname='",sr.zta01 CLIPPED,"'",
                "   AND a.tabid=b.tabid",
                "   AND colname=gaq01 ",
                "   AND (gaq02='",g_lang CLIPPED,"' OR gaq02 IS NULL)",
                " ORDER BY colno"
   
    WHEN "ORA"                                      #FUN-730016  
      IF sr.zta07[1,1] = "T" THEN
         LET l_sql="SELECT column_id,lower(column_name),lower(data_type),'',",
                   "       to_char(decode(data_precision,null,data_length,data_precision),'9999.99'),",
                   "       data_scale,'',gaq03",
                   "  FROM all_tab_columns LEFT OUTER JOIN gaq_file ",
                   "    ON lower(column_name)=gaq01 ",
                   "   AND gaq02='",g_lang CLIPPED,"' ",
                   " WHERE lower(table_name)='",sr.zta01 CLIPPED,"'",
                   "   AND lower(owner) = '",sr.zta02 CLIPPED,"'",
                   " ORDER BY 1"
      END IF
 
    WHEN "MSV"    #FUN-770027
    #No.FUN-A60022---start
      #LET l_sql=" SELECT b.column_id,b.name,coltype,'',b.max_length,'','',gaq03",
      #          " FROM ",sr.zta02 CLIPPED,":sys.objects a,",
      #                   sr.zta02 CLIPPED,":sys.columns b,OUTER ",
      #                   sr.zta02 CLIPPED,".dbo.gaq_file ",
      #          " WHERE a.name='",sr.zta01 CLIPPED,"' ",
      #          "   AND a.object_id=b.object_id ",
      #          "   AND b.name=gaq01 ",
      #          "   AND (gaq02='",g_lang CLIPPED,"' OR gaq02 IS NULL) ",
      #          " ORDER BY b.column_id "    
      LET l_sql =" SELECT b.column_id,b.name,c.name,' ',b.max_length,b.scale,' ',gaq03,b.precision "
                ,"   FROM ",g_mssqlarea CLIPPED,"_",sr.zta02 CLIPPED,".sys.objects a "
                ," LEFT OUTER JOIN ",g_mssqlarea CLIPPED,"_",sr.zta02 CLIPPED,".sys.columns b on a.object_id = b.object_id "
                ," LEFT OUTER JOIN ",g_mssqlarea CLIPPED,"_",sr.zta02 CLIPPED,".sys.systypes c on b.user_type_id = c.xusertype "
                ," LEFT OUTER JOIN gaq_file d ON ( d.gaq01=b.name and d.gaq02='",g_lang CLIPPED,"' OR d.gaq02 IS NULL) "
                ,"  WHERE a.name ='",sr.zta01,"'"
                ," ORDER BY b.column_id"  
    #No.FUN-A60022---end 
   END CASE                                         #FUN-730016
 
   IF sr.zta07[1,1] = 'T' THEN
#      PREPARE p_zta2_out FROM l_sql
#      IF sqlca.sqlcode THEN
#         CALL cl_err("prepare:",sqlca.sqlcode,1) EXIT PROGRAM
#      END IF
#      DECLARE p_zta2_cs_out CURSOR FOR p_zta2_out
      DECLARE p_zta2_cs_out CURSOR FROM l_sql
   END IF
   #IF g_db_type="IFX" THEN
   CASE g_db_type                                   #FUN-730016
    WHEN "IFX"                                      #FUN-730016  
      FOREACH p_zta2_cs_out INTO g_i,sr1.*
         IF sqlca.sqlcode THEN
            LET g_err="foreach p_zta2_cs_out error(out3):"
            CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1) EXIT FOREACH
         END IF
         CASE sr1.coltype
              WHEN 0   LET sr1.coltype = "CHAR"
              WHEN 1   LET sr1.coltype = "SINT"
              WHEN 2   LET sr1.coltype = "INT "
              WHEN 5   LET sr1.coltype = "DEC "
                       LET l_length=sr1.collength/256
                       LET sr1.colscale=sr1.collength mod 256 CLIPPED
                       FOR l_i=1 TO 10
                           IF l_length[l_i,l_i]="." THEN
                              LET sr1.collength=l_length[1,l_i-1] CLIPPED
                              EXIT FOR
                           END IF
                       END FOR
              WHEN 7   LET sr1.coltype = "DATE"
              WHEN 256 LET sr1.coltype = "CHAR"
              WHEN 257 LET sr1.coltype = "SINT"
              WHEN 258 LET sr1.coltype = "INT "
              WHEN 261 LET sr1.coltype = "DEC "
                       LET l_length=sr1.collength/256
                       LET sr1.colscale=sr1.collength mod 256 CLIPPED
                       FOR l_i=1 TO 10
                           IF l_length[l_i,l_i]="." THEN
                              LET sr1.collength=l_length[1,l_i-1] CLIPPED
                              EXIT FOR
                           END IF
                       END FOR
              WHEN 262 LET sr1.coltype = "SERI"
              OTHERWISE LET sr1.coltype2 = sr1.coltype
         END CASE
         IF sr.zta07[1,1] = 'S' THEN
            LET sr.zta07='Synonym'
         ELSE
            LET sr.zta07='Table'
         END IF
         OUTPUT TO REPORT p_zta_rep3(sr.*,sr1.*)
      END FOREACH
   
    WHEN "ORA"                                      #FUN-730016  
      IF sr.zta07[1,1]="T" THEN
         FOREACH p_zta2_cs_out INTO g_i,sr1.*
            IF sqlca.sqlcode THEN
               LET g_err="foreach p_zta2_cs_out error(out3):"
               CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1) EXIT FOREACH
            END IF
            CASE
                 WHEN sr1.coltype="varchar2"
                      LET sr1.collength1=sr1.collength CLIPPED
                 WHEN sr1.coltype="char"
                      LET sr1.collength1=sr1.collength CLIPPED
                 WHEN sr1.coltype="number"
                      LET sr1.collength1 = sr1.collength CLIPPED
                      LET l_length = sr1.colscale CLIPPED
                      LET sr1.collength1 = sr1.collength1 CLIPPED,l_length CLIPPED
            END CASE
            LET sr.zta07='Table'
            OUTPUT TO REPORT p_zta_rep3(sr.*,sr1.*)
         END FOREACH
      ELSE
         LET sr.zta07='Synonym'
         OUTPUT TO REPORT p_zta_rep3(sr.*,sr1.*)
      END IF
 
    WHEN "MSV"                                      #FUN-730016  
    #No.FUN-A60022---start  
      IF sr.zta07[1,1]="T" THEN
         FOREACH p_zta2_cs_out INTO g_i,sr1.*
            IF sqlca.sqlcode THEN
               LET g_err="foreach p_zta2_cs_out error(out3):"
               CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1) EXIT FOREACH
            END IF
            CASE
              WHEN sr1.coltype="varchar"
                LET sr1.collength1=sr1.collength CLIPPED
              WHEN sr1.coltype="nvarchar"
                LET sr1.collength=sr1.collength/2 CLIPPED
                LET sr1.collength1=sr1.collength
              WHEN sr1.coltype="char"
                LET sr1.collength1=sr1.collength CLIPPED
              WHEN sr1.coltype="decimal"
                IF sr1.colscale !=0 THEN
                   LET sr1.collength1 = sr1.collength2 CLIPPED
                   LET l_length = sr1.colscale CLIPPED
                   LET sr1.collength1 = sr1.collength1 CLIPPED,",",l_length CLIPPED
                ELSE 
         	   LET sr1.collength1=sr1.collength2 CLIPPED
                END IF                
            END CASE
            LET sr.zta07='Table'
            OUTPUT TO REPORT p_zta_rep3(sr.*,sr1.*)
         END FOREACH
      ELSE
         LET sr.zta07='Synonym'
         OUTPUT TO REPORT p_zta_rep3(sr.*,sr1.*)
      END IF   
    #No.FUN-A60022---end 
   END CASE                                         #FUN-730016
 
END FUNCTION
 
REPORT p_zta_rep(sr)
    DEFINE
        n              LIKE type_file.num5,               #No.FUN-680135 SMALLINT
        l_trailer_sw   LIKE type_file.chr1,               #No.FUN-680135 VARCHAR(1)
        sr      RECORD order1      LIKE gat_file.gat06,   #No.FUN-680135 VARCHAR(3)
                       order2      LIKE zta_file.zta01,   #No.FUN-680135 VARCHAR(10)
                       zta01       LIKE zta_file.zta01,   #檔案編號
                       gat03       LIKE gat_file.gat03,   #檔案名稱
                       zta03       LIKE zta_file.zta03,   #系統別      #No.FUN-A60050
                       zta04       LIKE zta_file.zta04,   #使用別
                       zta05       LIKE zta_file.zta05,   #產生日期
                       zta06       LIKE zta_file.zta06,   #產生者
                       zta07       LIKE zta_file.zta07,   #No.FUN-680135 VARCHAR(7)  #Synonym Or Table
                       zta02       LIKE zta_file.zta02,   #database
                       zta18       LIKE zta_file.zta18    #多語系檔案  #No.FUN-A60050
                  END RECORD,
        l_chr          LIKE type_file.chr1                #No.FUN-680135 VARCHAR(1)
 
   OUTPUT
       TOP MARGIN g_top_margin
       LEFT MARGIN g_left_margin
       BOTTOM MARGIN g_bottom_margin
       PAGE LENGTH g_page_line
 
    ORDER BY  sr.order1,sr.order2
    FORMAT
    PAGE HEADER
          IF g_lang="0" THEN
                  IF g_chapter = "1"
                     THEN PRINT "  2.3 檔案總覽"
                     ELSE PRINT "  2 檔案總覽"
                  END IF
          ELSE
              IF g_lang="2" THEN
                  IF g_chapter = "1"
                     THEN PRINT "  2.3 檔案總覽"
                     ELSE PRINT "  2 檔案總覽"
                  END IF
              ELSE
                  IF g_chapter = "1"
                  THEN PRINT "  2.3 TABLE LIST"
                  ELSE PRINT "  2 TABLE LIST"
                  END IF
              END IF
           END IF
            PRINT g_x[11],g_x[12]
            PRINT g_x[13],COLUMN 59,g_x[14]
            LET l_trailer_sw = "y"
        ON EVERY ROW
            PRINT g_x[15] CLIPPED,g_x[16] CLIPPED
            PRINT COLUMN  3,"│",sr.zta01 CLIPPED,
                  COLUMN 17,"│",sr.gat03 CLIPPED,
                  COLUMN 59,"│",
                  COLUMN 75,"│"
 
        ON LAST ROW
           LET sr.zta01 = NULL LET sr.gat03 = NULL
           PRINT g_x[15],g_x[16]
           LET n = LINENO
           WHILE n < 54
            PRINT COLUMN  3,"│",sr.zta01 CLIPPED,
                  COLUMN 17,"│",sr.gat03 CLIPPED,
                  COLUMN 59,"│",
                  COLUMN 75,"│"
            LET n = n + 1
           END WHILE
        PAGE TRAILER
           PRINT g_x[17],g_x[18]
           PRINT
END REPORT
 
REPORT p_zta_rep3(sr,sr1)
    DEFINE
        n              LIKE type_file.num5,          #No.FUN-680135 SMALLINT
        l_trailer_sw   LIKE type_file.chr1,          #No.FUN-680135 VARCHAR(1)
        l_a            LIKE type_file.chr1,          #No.FUN-680135 VARCHAR(1)
        sr        RECORD
                       order1 LIKE gat_file.gat06,   #No.FUN-680135 VARCHAR(3)
                       order2 LIKE zta_file.zta01,   #No.FUN-680135 VARCHAR(10)
                       zta01  LIKE zta_file.zta01,   #檔案編號
                       gat03  LIKE gat_file.gat03,   #檔案名稱
                       zta03  LIKE zta_file.zta03,   #系統別      #No.FUN-A60050
                       zta04  LIKE zta_file.zta04,   #使用別
                       zta05  LIKE zta_file.zta05,   #產生日期
                       zta06  LIKE zta_file.zta06,   #產生者
                       zta07  LIKE zta_file.zta07,   #No.FUN-680135 VARCHAR(7) #Synonym Or Table
                       zta02  LIKE zta_file.zta02,   #database
                       zta18  LIKE zta_file.zta18    #多語系檔案  #No.FUN-A60050
                  END RECORD,
        sr1       RECORD
                       colname    LIKE ztb_file.ztb03,     #No.FUN-680135 VARCHAR(30)   #欄位編號
                       coltype    LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(15)   #型態
                       coltype2   LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(10)   #just for informix
                       collength  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       colscale   LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       collength1 LIKE ztb_file.ztb08,     #No.FUN-680135 VARCHAR(10)
                       gaq03      LIKE gaq_file.gaq03,      #說明
                       collength2 LIKE type_file.num5    #No.FUN-A60022---add 
                  END RECORD
#        sr1 RECORD
#          colname    VARCHAR(128),                           #欄位編號
#          coltype    SMALLINT,                            #型態
#          coltype2   VARCHAR(10),
#          collength  SMALLINT,
#          collength1 VARCHAR(10),
#          gaq03      LIKE gaq_file.gaq03                  #說明
#                     END RECORD
 
   OUTPUT
       TOP MARGIN g_top_margin
       LEFT MARGIN g_left_margin
       BOTTOM MARGIN g_bottom_margin
       PAGE LENGTH g_page_line
 
#    ORDER BY sr.zta01,sr1.colname
 
    FORMAT
        PAGE HEADER
            PRINT COLUMN (g_len - LENGTH(g_x[1]) )/2,g_x[1] CLIPPED
            PRINT COLUMN (g_len - 5 - LENGTH(g_user)),"FROM:",g_user
            PRINT g_x[2] CLIPPED,g_today," ",TIME,
                  COLUMN (g_len - 10 ),"PAGE:",PAGENO USING "<<<"
            PRINT g_dash[1,g_len], g_dash[1,15]                         #NO:TQC-BB0049
            LET g_x[24] = "檔案編號         檔 案 名 稱     檔案類型"   #NO:TQC-BB0049
            PRINT COLUMN 1,g_x[24] CLIPPED,
                  COLUMN 48,g_x[25] CLIPPED                             #NO:TQC-BB0049
          # PRINT g_x[26],g_x[27]
            PRINT g_dash[1,g_len], g_dash[1,15]                         #NO:TQC-BB0049
            LET l_trailer_sw = "y"
            LET l_a = "N"
 
        BEFORE GROUP OF sr.zta01
            PRINT COLUMN 1,sr.zta01[1,15],                         #NO:TQC-BB0049 檔名增加為15字元(原為8字元)
                  COLUMN 18,sr.gat03[1,30],                        #NO:TQC-BB0049
                  COLUMN 34,sr.zta07 CLIPPED,                      #NO:TQC-BB0049
                  COLUMN 48,sr.zta02 CLIPPED,                      #NO:TQC-BB0049
                  COLUMN 58,sr.zta03 CLIPPED,                      #No.FUN-A60050 #NO:TQC-BB0049
                  COLUMN 67,sr.zta18 CLIPPED,                      #No.FUN-A60050 #NO:TQC-BB0049
                  COLUMN 80,sr.zta05 USING "YYYY/MM/DD"            #No.FUN-A60050 #NO:TQC-BB0049
            PRINT
            IF sr.zta07[1,1] = "T" THEN
               PRINT 7 SPACE, g_x[26],g_x[27]                      #NO:TQC-BB0049
               PRINT COLUMN 18, g_dash2[11,g_len], g_dash2[11,18]  #NO:TQC-BB0049
            END IF
            LET l_a = "Y"
 
        ON EVERY ROW
            NEED 4 LINES
            IF l_a = "N" THEN
               PRINT COLUMN 1,sr.zta01[1,15],                      #NO:TQC-BB0049
                     COLUMN 18,sr.gat03[1,30],                     #NO:TQC-BB0049
                     COLUMN 34,sr.zta07 CLIPPED,                   #NO:TQC-BB0049
                     COLUMN 48,sr.zta02 CLIPPED,                   #NO:TQC-BB0049
                     COLUMN 58,sr.zta03 CLIPPED,                   #No.FUN-A60050 #NO:TQC-BB0049
                     COLUMN 67,sr.zta18 CLIPPED,                   #No.FUN-A60050 #NO:TQC-BB0049
                     COLUMN 80,sr.zta05 USING "YYYY/MM/DD"         #No.FUN-A60050 #NO:TQC-BB0049
               PRINT
               IF sr.zta07[1,1] = 'T' THEN
                  PRINT 7 SPACE, g_x[26],g_x[27]                   #NO:TQC-BB0049
                  PRINT COLUMN 18,g_dash2[11,g_len],g_dash2[11,18] #NO:TQC-BB0049
               END IF
            END IF
            IF sr.zta07[1,1] = 'T' THEN
               CASE
                  WHEN sr1.coltype="varchar2" or sr1.coltype="CHAR"		
                       PRINT COLUMN 18,sr1.colname[1,12],                   #NO:TQC-BB0049
                             COLUMN 30,sr1.coltype[1,8],                    #NO:TQC-BB0049
                             COLUMN 42,sr1.collength USING "####",          #NO:TQC-BB0049
                             COLUMN 49,sr1.gaq03                            #NO:TQC-BB0049
                  WHEN sr1.coltype="number" or sr1.coltype="DEC"
                       PRINT COLUMN 18,sr1.colname[1,12],                   #NO:TQC-BB0049
                             COLUMN 30,sr1.coltype[1,8],                    #NO:TQC-BB0049
                             COLUMN 42,sr1.collength USING "##",",",        #NO:TQC-BB0049
                                       sr1.colscale USING "&",              #NO:TQC-BB0049
                             COLUMN 49,sr1.gaq03                            #NO:TQC-BB0049
                  OTHERWISE
                       PRINT COLUMN 18,sr1.colname[1,12],                   #NO:TQC-BB0049
                             COLUMN 30,sr1.coltype[1,8],                    #NO:TQC-BB0049
#                             COLUMN 39,sr1.collength USING "####",         #NO:TQC-BB0049
                             COLUMN 49,sr1.gaq03                            #NO:TQC-BB0049
               END CASE
            ELSE
            END IF
            LET l_a = "Y"
        AFTER GROUP OF sr.zta01
            PRINT
 
        ON LAST ROW
           PRINT g_dash[1,g_len],g_dash[1,15]                               #NO:TQC-BB0049
        PAGE TRAILER
           PRINT
END REPORT
                                                #產生資料庫手冊
FUNCTION p_zta_out4()
    DEFINE
        l_name           LIKE type_file.chr20,  # External(Disk) file name #No.FUN-680135 VARCHAR(20)
      sr   RECORD order1 LIKE gat_file.gat06,   #No.FUN-680135 VARCHAR(3)
                  order2 LIKE zta_file.zta01,   #No.FUN-680135 VARCHAR(10)
                  zta01  LIKE zta_file.zta01,   #檔案編號
                  gat03  LIKE gat_file.gat03,   #檔案名稱
                  gat04  LIKE gat_file.gat04,   #檔案目的
                  zta11  LIKE zta_file.zta11,   #上游檔案
                  zta12  LIKE zta_file.zta12,   #下游檔案
                  zta03  LIKE zta_file.zta03,   #系統別        #No.FUN-A60050
                  zta04  LIKE zta_file.zta04,   #使用別
                  zta05  LIKE zta_file.zta05,   #產生日期
                  zta06  LIKE zta_file.zta06,   #產生者
                  zta07  LIKE zta_file.zta07,   #No.FUN-680135 VARCHAR(7) #Synonym Or Table
                  zta02  LIKE zta_file.zta02,   #database
                  gaq03  LIKE gaq_file.gaq03,   #欄位說明
                  zta18  LIKE zta_file.zta18    #多語系檔案    #No.FUN-A60050
             END RECORD,
        l_sql     STRING
 
    IF g_wc IS NULL THEN
       CALL cl_err("","9057",0) RETURN
    END IF
    CALL cl_outnam("p_zta") RETURNING l_name
    LET l_sql="SELECT zo02 FROM zo_file",
              " WHERE zo01 = '",g_lang CLIPPED,"'"
    PREPARE p_zta_out4_pre1 FROM l_sql
    EXECUTE p_zta_out4_pre1 INTO g_company
    FREE p_zta_out4_pre1
#    DECLARE p_zta_za_cur4 CURSOR FOR
#            SELECT za02,za05 FROM za_file
#             WHERE za01 = "p_zta" AND za03 = g_lang
#    FOREACH p_zta_za_cur4 INTO g_i,l_za05
#       LET g_x[g_i] = l_za05
#    END FOREACH
    CALL cl_wait()
    SELECT zz17,zz05 INTO g_len,g_zz05 FROM zz_file WHERE zz01 = "p_zta"
    IF g_len = 0 OR g_len IS NULL THEN LET g_len = 80 END IF
    FOR g_i = 1  TO g_len LET g_dash[g_i,g_i] = "=" END FOR
    FOR g_i = 11 TO g_len LET g_dash2[g_i,g_i] = "-" END FOR
    LET g_sql="SELECT '','',zta01,gat03,gat04,zta11,zta12,zta03,zta04,zta05,zta06,zta07,zta02,zta18 ", #No.FUN-A60050
              " FROM zta_file LEFT OUTER JOIN gat_file ",          # 組合出 SQL 指令
              "   ON zta01=gat01 AND gat02='",g_lang CLIPPED,"'",
              " WHERE ",g_wc CLIPPED,
              " ORDER BY zta01"
    PREPARE p_zta_p4 FROM g_sql                # RUNTIME 編譯
    DECLARE p_zta_co4                         # SCROLL CURSOR
         SCROLL CURSOR WITH HOLD FOR p_zta_p4 #新增scroll字樣by qazzaq
    LET l_name = DOWNSHIFT(g_zta.zta03) CLIPPED,"_3.txt"   #No.FUN-A60050
    FOREACH p_zta_co4 INTO sr.*
        IF sqlca.sqlcode THEN
           LET g_err="foreach p_zta_co4 error(out4):"
           CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1)
           EXIT FOREACH
        END IF
        START REPORT p_zta_rep5 TO l_name
        LET sr.order1=sr.zta03                          #No.FUN-A60050
        CALL p_zta_out5(sr.*)
        FINISH REPORT p_zta_rep5
        LET g_cmd = "cat ",l_name CLIPPED," >> p_zta.tmp"
        RUN g_cmd  #No.FUN-B80091 將Return修改為Run
    END FOREACH
    LET g_cmd = "mv -f p_zta.tmp ",l_name CLIPPED
    RUN g_cmd
   # CALL p_zta_out5(sr.*)
   CLOSE p_zta_co4
   ERROR ""
   CALL cl_prt(l_name," ","1",g_len)
END FUNCTION
 
FUNCTION p_zta_out5(sr)
   DEFINE
      l_sql1   STRING,
#     l_name   VARCHAR(04),
      sr  RECORD
               order1 LIKE gat_file.gat06,   #No.FUN-680135 VARCHAR(3)
               order2 LIKE zta_file.zta01,   #No.FUN-680135 VARCHAR(10)
               zta01  LIKE zta_file.zta01,   #檔案編號
               gat03  LIKE gat_file.gat03,   #檔案名稱
               gat04  LIKE gat_file.gat04,   #檔案目的
               zta11  LIKE zta_file.zta11,   #上游檔案
               zta12  LIKE zta_file.zta12,   #下游檔案
               zta03  LIKE zta_file.zta03,   #系統別    #No.FUN-A60050
               zta04  LIKE zta_file.zta04,   #使用別
               zta05  LIKE zta_file.zta05,   #產生日期
               zta06  LIKE zta_file.zta06,   #產生者
               zta07  LIKE zta_file.zta07,   #No.FUN-680135 VARCHAR(8) #Synonym Or Table
               zta02  LIKE zta_file.zta02,   #database
               gaq03  LIKE gaq_file.gaq03,   #欄位說明
               zta18  LIKE zta_file.zta18    #多語系檔案    #No.FUN-A60050
          END RECORD,
      sr1 RECORD
               colname    LIKE ztb_file.ztb03,     #No.FUN-680135 VARCHAR(30)  #欄位編號
               coltype    LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(15)  #型態
               coltype2   LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(10)
               collength  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
               colscale   LIKE type_file.num5,     #No.FUN-680135 SMALLINT
               collength1 LIKE ztb_file.ztb08,     #No.FUN-680135 VARCHAR(10)
               gaq03      LIKE gaq_file.gaq03,     #說明
               nullable   LIKE type_file.chr2,      #No.FUN-680135 VARCHAR(2)
               collength2 LIKE type_file.num5    #No.FUN-A60022---add
          END RECORD,
      l_length            LIKE type_file.chr20     #No.FUN-680135 VARCHAR(10)
 
 
   LET g_key1 = sr.zta01
   LET g_key2 = ""
   FOR g_cnt = 1 TO 10
       IF g_key1[g_cnt,g_cnt]="_"  THEN
          LET g_cnt = 10
       ELSE
          LET g_key2[g_cnt,g_cnt]=g_key1[g_cnt,g_cnt]
       END IF
   END FOR
   #IF g_db_type="IFX" THEN
   CASE g_db_type                                   #FUN-730016
    WHEN "IFX"                                      #FUN-730016  
      LET l_sql1="SELECT colno,colname,coltype,'',collength,'','',gaq03,''",
                 " FROM ",sr.zta02 CLIPPED,":systables a,",
                          sr.zta02 CLIPPED,":syscolumns b, OUTER ",
                          sr.zta02 CLIPPED,".dbo.gaq_file",
                 " WHERE tabname='",sr.zta01,"'",
                 "   AND a.tabid=b.tabid",
                 "   AND colname=gaq01 ",
                 "   AND (gaq02='",g_lang CLIPPED,"' OR gaq02 IS NULL)",
                 " ORDER BY colno"
   
    WHEN "ORA"                                      #FUN-730016  
      LET l_sql1="SELECT column_id,lower(column_name),lower(data_type),'',",
                 "       to_char(decode(data_precision,null,data_length,data_precision),'9999.99'),",
                 "       data_scale,'',gaq03,nullable",
                 "  FROM all_tab_columns LEFT OUTER JOIN gaq_file ",
                 "    ON lower(column_name)=gaq01 ",
                 "   AND gaq02='",g_lang CLIPPED,"' ",
                 " WHERE lower(table_name)='",sr.zta01 CLIPPED,"'",
                 "   AND lower(owner) = '",sr.zta02 CLIPPED,"'",
                 " ORDER BY 1"
 
    WHEN "MSV"     #FUN-770027
    #No.FUN-A60022---start
      #LET l_sql1=" SELECT b.column_id,b.name,coltype,'',b.max_length,'','',gaq03,''",
      #           " FROM ",sr.zta02 CLIPPED,":sys.objects a,",
      #                    sr.zta02 CLIPPED,":sys.columns b, OUTER ",
      #                    sr.zta02 CLIPPED,".dbo.gaq_file",
      #           " WHERE a.name='",sr.zta01,"'",
      #           "   AND a.object_id=b.object_id",
      #           "   AND b.name=gaq01 ",
      #           "   AND (gaq02='",g_lang CLIPPED,"' OR gaq02 IS NULL)",
      #           " ORDER BY b.column_id"
     
      LET l_sql1=" SELECT b.column_id,b.name,c.name,' ',b.max_length,b.scale,' ',gaq03,b.is_nullable,b.precision "
                ,"   FROM ",g_mssqlarea CLIPPED,"_",sr.zta02 CLIPPED,".sys.objects a "
                ," LEFT OUTER JOIN ",g_mssqlarea CLIPPED,"_",sr.zta02 CLIPPED,".sys.columns b on a.object_id = b.object_id "
                ," LEFT OUTER JOIN ",g_mssqlarea CLIPPED,"_",sr.zta02 CLIPPED,".sys.systypes c on b.user_type_id = c.xusertype "
                ," LEFT OUTER JOIN gaq_file d ON ( d.gaq01=b.name and d.gaq02='",g_lang CLIPPED,"' OR d.gaq02 IS NULL) "
                ,"  WHERE a.name ='",sr.zta01,"'"
                ," ORDER BY b.column_id"     
    #No.FUN-A60022---end
   END CASE                                         #FUN-730016
 
#   PREPARE p_zta5_out FROM l_sql1
#   IF sqlca.sqlcode THEN
#      CALL cl_err("prepare:",sqlca.sqlcode,1) EXIT PROGRAM
#   END IF
#   DECLARE p_zta5_cs_out CURSOR FOR p_zta5_out
   DECLARE p_zta5_cs_out CURSOR FROM l_sql1
#--
 # START REPORT p_zta_rep5 TO l_name
   FOREACH p_zta5_cs_out INTO g_i,sr1.*
      IF sqlca.sqlcode THEN
         LET g_err="foreach p_zta5_cs_out error(out5):"
         CALL cl_err(g_err CLIPPED,sqlca.sqlcode,1) EXIT FOREACH
      END IF
      #IF g_db_type="IFX" THEN
      CASE g_db_type                                   #FUN-730016
       WHEN "IFX"                                      #FUN-730016  
         CASE sr1.coltype
              WHEN 0   LET sr1.coltype = "char"
                       LET sr1.collength1=sr1.collength
                       LET sr1.nullable=''
              WHEN 1   LET sr1.coltype = "smallint"
                       LET sr1.nullable=''
              WHEN 2   LET sr1.coltype = "integer"
                       LET sr1.nullable=''
              WHEN 5   LET sr1.coltype = "decimal"
                       LET sr1.nullable=''
                       LET sr1.collength1 = sr1.collength / 256 USING "<<", ",",
                               sr1.collength MOD 256 USING "&"
#                       LET l_length=sr1.collength/256
#                       FOR l_i=1 TO 10
#                           IF l_length[l_i,l_i]="." THEN
#                              LET sr1.collength1="(",l_length[1,l_i-1] CLIPPED,","
#                              EXIT FOR
#                           END IF
#                       END FOR
#                       LET sr1.collength=sr1.collength mod 256
#                       LET l_length=sr1.collength CLIPPED
#                       LET sr1.collength1 = sr1.collength1 CLIPPED,l_length CLIPPED,")"
              WHEN 7   LET sr1.coltype = "date"
                       LET sr1.nullable=''
              WHEN 256 LET sr1.coltype = "char"
                       LET sr1.collength1=sr1.collength
                       LET sr1.nullable='Ｖ'
              WHEN 257 LET sr1.coltype = "smallint"
                       LET sr1.nullable='Ｖ'
              WHEN 258 LET sr1.coltype = "integer"
                       LET sr1.nullable='Ｖ'
              WHEN 261 LET sr1.coltype = "decimal"
                       LET sr1.collength1 = sr1.collength / 256 USING "<<", ",",
                               sr1.collength MOD 256 USING "&"
                       LET sr1.nullable='Ｖ'
#                       LET l_length=sr1.collength/256
#                       FOR l_i=1 TO 10
#                           IF l_length[l_i,l_i]="." THEN
#                              LET sr1.collength1="(",l_length[1,l_i-1] CLIPPED,","
#                              EXIT FOR
#                           END IF
#                       END FOR
#                       LET sr1.collength=sr1.collength mod 256
#                       LET l_length=sr1.collength CLIPPED
#                       LET sr1.collength1 = sr1.collength1 CLIPPED,l_length CLIPPED,")"
              WHEN 262 LET sr1.coltype2 = "serial"
                       LET sr1.nullable='Ｖ'
              OTHERWISE LET sr1.coltype = sr1.coltype
         END CASE
      
       WHEN "ORA"                                      #FUN-730016  
         IF sr1.nullable[1,1]='Y' THEN
            LET sr1.nullable=''
         ELSE
            LET sr1.nullable='Ｖ'
         END IF
         CASE
              WHEN sr1.coltype="varchar2"
                   LET sr1.collength1=sr1.collength CLIPPED
              WHEN sr1.coltype="char"
                   LET sr1.collength1=sr1.collength CLIPPED
              WHEN sr1.coltype="number"
                   LET sr1.collength1 = sr1.collength CLIPPED
                   LET l_length = sr1.colscale CLIPPED
                   LET sr1.collength1 = sr1.collength1 CLIPPED,",",l_length CLIPPED
         END CASE
 
       WHEN "MSV"                                      #FUN-730016  
       #No.FUN-A60022---start
         IF sr1.nullable[1,1]='1' THEN
            LET sr1.nullable=''
         ELSE
            LET sr1.nullable='Y'
         END IF
         CASE
              WHEN sr1.coltype="varchar"
                LET sr1.collength1=sr1.collength CLIPPED
              WHEN sr1.coltype="nvarchar"
                LET sr1.collength=sr1.collength/2 CLIPPED
                LET sr1.collength1=sr1.collength
              WHEN sr1.coltype="char"
                LET sr1.collength1=sr1.collength CLIPPED
              WHEN sr1.coltype="decimal"
                IF sr1.colscale !=0 THEN
                   LET sr1.collength1 = sr1.collength2 CLIPPED
                   LET l_length = sr1.colscale CLIPPED
                   LET sr1.collength1 = sr1.collength1 CLIPPED,",",l_length CLIPPED
                ELSE 
         	         LET sr1.collength1=sr1.collength2 CLIPPED
                END IF                
         END CASE
       #No.FUN-A60022---end 
      END CASE                                         #FUN-730016
 
      OUTPUT TO REPORT p_zta_rep5(sr.*,sr1.*)
   END FOREACH
 #  FINISH REPORT p_zta_rep5
 
#DROP TABLE sql_file
END FUNCTION
 
REPORT p_zta_rep5(sr,sr1)
    DEFINE
        n,i,j,l_cnt    LIKE type_file.num5,            #No.FUN-680135 SMALLINT
        l_trailer_sw   LIKE type_file.chr1,            #No.FUN-680135 VARCHAR(1)
        l_ztc     DYNAMIC ARRAY of RECORD
                       ztc06     LIKE  ztc_file.ztc06,
                       ztc03     LIKE  ztc_file.ztc03,
                       ztc04     LIKE  ztc_file.ztc04,
                       ztc05     LIKE  ztc_file.ztc05
                  END RECORD,
        l_ztc04_t      LIKE ztc_file.ztc04,
        l_part    RECORD
                       part1  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part2  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part3  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part4  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part5  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part6  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part7  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part8  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part9  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part10 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part11 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part12 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part13 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part14 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part15 LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                       part16 LIKE type_file.num5      #No.FUN-680135 SMALLINT
                  END RECORD,
        l_sql          STRING,
        sr        RECORD
                       order1 LIKE gat_file.gat06,     #No.FUN-680135 VARCHAR(3)
                       order2 LIKE zta_file.zta01,     #No.FUN-680135 VARCHAR(10)
                       zta01  LIKE zta_file.zta01,     #檔案編號
                       gat03  LIKE gat_file.gat03,     #檔案名稱
                       gat04  LIKE gat_file.gat04,     #檔案目的
                       zta11  LIKE zta_file.zta11,     #上游檔案
                       zta12  LIKE zta_file.zta12,     #下游檔案
                       zta03  LIKE zta_file.zta03,   #系統別    #No.FUN-A60050
                       zta04  LIKE zta_file.zta04,     #使用別
                       zta05  LIKE zta_file.zta05,     #產生日期
                       zta06  LIKE zta_file.zta06,     #產生者
                       zta07  LIKE zta_file.zta07,     #No.FUN-680135 VARCHAR(7) #Synonym Or Table
                       zta02  LIKE zta_file.zta02,     #database
                       gaq03  LIKE gaq_file.gaq03,     #欄位說明
                       zta18  LIKE zta_file.zta18      #多語系檔案    #No.FUN-A60050
                  END RECORD,
        sr1       RECORD
                   colname    LIKE ztb_file.ztb03,     #No.FUN-680135 VARCHAR(30) #欄位編號
                   coltype    LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(15) #型態
                   coltype2   LIKE ztb_file.ztb04,     #No.FUN-680135 VARCHAR(10)
                   collength  LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                   colscale   LIKE type_file.num5,     #No.FUN-680135 SMALLINT
                   collength1 LIKE ztb_file.ztb08,     #No.FUN-680135 VARCHAR(10)
                   gaq03      LIKE gaq_file.gaq03,     #說明
                   nullable   LIKE type_file.chr2,     #No.FUN-680135 VARCHAR(2)
                   collength2 LIKE type_file.num5    #No.FUN-A60022---add
                  END RECORD
 
   OUTPUT
#       TOP OF PAGE "^L"
       TOP MARGIN g_top_margin
       LEFT MARGIN g_left_margin
       BOTTOM MARGIN g_bottom_margin
       PAGE LENGTH g_page_line
 
    ORDER BY sr.zta01,sr1.colname
 
    FORMAT
        PAGE HEADER
            LET l_trailer_sw = "n"
 
        BEFORE GROUP OF sr.zta01
            SKIP TO TOP OF PAGE
            PRINT COLUMN 1,g_x[28] CLIPPED,g_x[29] CLIPPED,g_x[59] CLIPPED
            PRINT COLUMN 1,g_x[30] CLIPPED,
                  COLUMN 3,g_x[42] CLIPPED,
                  COLUMN 13,sr.zta01 CLIPPED,
                  COLUMN 79,g_x[30] CLIPPED
            PRINT COLUMN 1,g_x[31] CLIPPED,g_x[32] CLIPPED,g_x[58] CLIPPED
            PRINT COLUMN 1,g_x[30] CLIPPED,
                  COLUMN 3,g_x[43] CLIPPED,
                  COLUMN 13,sr.gat03 CLIPPED,
                  COLUMN 79,g_x[30] CLIPPED
-- 取消資料庫手冊的檔案目的列印TQC-590029
--            PRINT COLUMN 1,g_x[31] CLIPPED,g_x[32] CLIPPED,g_x[58] CLIPPED
--            PRINT COLUMN 1,g_x[30] CLIPPED,
--                  COLUMN 3,g_x[52] CLIPPED,
--                  COLUMN 13,sr.gat04 CLIPPED,
--                  COLUMN 79,g_x[30] CLIPPED
 
            PRINT COLUMN 1,g_x[33] CLIPPED,g_x[34] CLIPPED,g_x[60] CLIPPED
            PRINT COLUMN 1,g_x[30] CLIPPED,
                  COLUMN 3,g_x[44] CLIPPED,
                  COLUMN 13,g_x[30] CLIPPED,
                  COLUMN 15,g_x[45] CLIPPED,
                  COLUMN 23,g_x[30] CLIPPED,
                  COLUMN 24,g_x[46] CLIPPED,
                  COLUMN 79,g_x[30] CLIPPED
 
            #IF g_db_type="IFX" THEN
            CASE g_db_type                                   #FUN-730016
             WHEN "IFX"                                      #FUN-730016  
               LET l_sql="SELECT DISTINCT idxname,idxtype,ztc05,part1,part2,part3,",
                         "       part4,part5,part6,part7,part8,part9,part10,",
                         "       part11,part12,part13,part14,part15,part16 ",
                         "  FROM systables a, sysindexes c ",
                         "       LEFT OUTER JOIN ztc_file",
                         "    ON ztc02='",g_dbs CLIPPED,"'",
                         "   AND ztc03=idxname ",
                         " WHERE tabname='",sr.zta01 CLIPPED,"'",
                         "   AND a.tabid=c.tabid"
            
             WHEN "ORA"                                      #FUN-730016  
               LET l_sql="SELECT DISTINCT lower(index_name),uniqueness,ztc05",
                         "  FROM user_indexes LEFT OUTER JOIN ztc_file ",
                         "    ON ztc02='",g_dbs CLIPPED,"'",
                         "   AND ztc03=lower(index_name) ",
                         " WHERE lower(table_name)='",sr.zta01 CLIPPED,"'"
 
             WHEN "MSV"          #FUN-770027
             #No.FUN-A60022---start
               #LET l_sql="SELECT DISTINCT c.name,idxtype,ztc05,part1,part2,part3,",
               #          "       part4,part5,part6,part7,part8,part9,part10,",
               #          "       part11,part12,part13,part14,part15,part16 ",
               #          "  FROM sys.objects a, sys.indexes c ",
               #          "       LEFT OUTER JOIN ztc_file",
               #          "    ON ztc02='",g_dbs CLIPPED,"'",
               #          "   AND ztc03=c.name ",
               #          " WHERE a.name='",sr.zta01 CLIPPED,"'",
               #          "   AND a.object_id=c.object_id"
                
               LET l_sql=" SELECT DISTINCT c.name,c.is_unique,ztc05",
                         " FROM sys.objects a, sys.indexes c LEFT OUTER JOIN ztc_file ",
                         "  ON ztc02='",g_zta.zta17 CLIPPED,"'",
                         " AND ztc03=c.name ",
                         " WHERE a.object_id=c.object_id ",
                         " AND a.name ='",g_zta.zta01 CLIPPED,"'"
            #No.FUN-A60022---end
            END CASE                                         #FUN-730016
 
            DECLARE p_zta_rep5_idx CURSOR FROM l_sql
            CALL l_ztc.clear()
            LET l_cnt=1
            FOREACH p_zta_rep5_idx INTO l_ztc[l_cnt].ztc03,l_ztc[l_cnt].ztc06,
                                  l_ztc[l_cnt].ztc05,l_part.*
                IF sqlca.sqlcode THEN
                   EXIT FOREACH
                END IF
                IF l_ztc[l_cnt].ztc05 IS NULL THEN
                   LET l_ztc[l_cnt].ztc05='p'
                END IF
                #IF g_db_type="IFX" THEN
                CASE g_db_type                                   #FUN-730016
                 WHEN "IFX"                                      #FUN-730016  
                   LET l_sql="SELECT colname FROM systables,syscolumns ",
                       " WHERE tabname='",sr.zta01 CLIPPED,"'",
                       "   AND systables.tabid=syscolumns.tabid ",
                       " AND colno in (",l_part.part1,",",
                       l_part.part2,",",l_part.part3,",",l_part.part4,",",
                       l_part.part5,",",l_part.part6,",",l_part.part7,",",
                       l_part.part8,",",l_part.part9,",",l_part.part10,",",
                       l_part.part11,",",l_part.part12,",",l_part.part13,",",
                       l_part.part14,",",l_part.part15,",",l_part.part16,
                       ")"
                
                 WHEN "ORA"                                      #FUN-730016  
                   LET l_sql="SELECT lower(column_name)",
                       "  FROM user_indexes a,user_ind_columns b",
                       " WHERE lower(a.table_name)='",sr.zta01 CLIPPED,"'",
                       "   AND lower(a.index_name)='",l_ztc[l_cnt].ztc03 CLIPPED,"'",
                       "   AND a.index_name=b.index_name",
                       " ORDER BY column_position"
 
                 WHEN "MSV"   #FUN-770027
                 #No.FUN-A60022---start
                   #LET l_sql=" SELECT name ",
                   #            " FROM sys.indexes a,sys.columns b ",
                   #           " WHERE a.name='",sr.zta01 CLIPPED,"' ",
                   #             " AND c.name='",l_ztc[l_cnt].ztc03 CLIPPED,"' ",
                   #             " AND a.object_id=b.object_id ",
                   #           " ORDER BY b.column_id "
                   
                   LET l_sql=" SELECT d.name FROM sys.objects a ,sys.indexes b,sys.index_columns c,sys.columns d ",
                             " WHERE a.object_id=b.object_id ",
                             " AND b.object_id=c.object_id ",
                             " AND c.object_id =d.object_id ",
                             " AND b.index_id=c.index_id ",
                             " AND c.column_id=d.column_id ",
                             " AND a.name ='",g_zta.zta01 CLIPPED,"'",
                             " AND b.name ='",l_ztc[l_cnt].ztc03 CLIPPED,"'"
                 #No.FUN-A60022---end
                END CASE                                         #FUN-730016
 
                DECLARE p_zta_rep5_idx1 CURSOR FROM l_sql
                LET l_ztc[l_cnt].ztc04=''
                FOREACH p_zta_rep5_idx1 INTO l_ztc04_t
                   IF sqlca.sqlcode THEN
                      EXIT FOREACH
                   END IF
                   IF l_ztc[l_cnt].ztc04 IS NULL THEN
                      LET l_ztc[l_cnt].ztc04=l_ztc04_t CLIPPED
                   ELSE
                      LET l_ztc[l_cnt].ztc04=l_ztc[l_cnt].ztc04 CLIPPED,",",
                                             l_ztc04_t CLIPPED
                   END IF
                END FOREACH
                IF l_ztc[l_cnt].ztc06="U" OR l_ztc[l_cnt].ztc06 = "1" THEN  #No.FUN-A60022
                   LET l_ztc[l_cnt].ztc06="Y"
                ELSE
                   LET l_ztc[l_cnt].ztc06="N"
                END IF
                LET l_cnt=l_cnt+1
            END FOREACH
            CALL l_ztc.deleteElement(l_cnt)
 
#            LET l_sql="SELECT ztc06,ztc03,ztc04,ztc05 FROM ztc_file",
#                      " WHERE ztc01='",sr.zta01 CLIPPED,"'",
#                      "   AND ztc02='ds'"
#            PREPARE p_zta_rep5_p FROM l_sql
#            DECLARE p_zta_rep5_c CURSOR FOR p_zta_rep5_p
#            LET j=1
#            CALL l_ztc.clear()
#            FOREACH p_zta_rep5_c INTO l_ztc[j].*
#                IF sqlca.sqlcode THEN
#                   EXIT FOREACH
#                END IF
#                LET j=j+1
#            END FOREACH
            FOR g_i = 1 TO 20
                IF l_ztc[g_i].ztc03 IS NULL THEN EXIT FOR END IF
                PRINT COLUMN 1,g_x[35] CLIPPED,g_x[34] CLIPPED,g_x[60] CLIPPED
                PRINT COLUMN 1,g_x[30] CLIPPED,
                      COLUMN 3,l_ztc[g_i].ztc03 CLIPPED,
                      COLUMN 13,g_x[30] CLIPPED,
                      COLUMN 15,l_ztc[g_i].ztc06 CLIPPED,
                      COLUMN 23,g_x[30] CLIPPED,
                      COLUMN 25,l_ztc[g_i].ztc04 CLIPPED,
                      COLUMN 79,g_x[30] CLIPPED
            END FOR
            IF l_ztc[1].ztc03 IS NULL THEN
               PRINT COLUMN 1,g_x[35] CLIPPED,g_x[34] CLIPPED,g_x[60] CLIPPED
               PRINT COLUMN 1,g_x[30] CLIPPED,
                     COLUMN 13,g_x[30] CLIPPED,
                     COLUMN 23,g_x[30] CLIPPED,
                     COLUMN 71,g_x[30] CLIPPED,
                     COLUMN 79,g_x[30] CLIPPED
            END IF
            PRINT COLUMN 1,g_x[36] CLIPPED,g_x[37] CLIPPED,g_x[62] CLIPPED
            PRINT COLUMN 1,g_x[30] CLIPPED,
                  COLUMN 3,g_x[47] CLIPPED,
                  COLUMN 13,g_x[30] CLIPPED,
                  COLUMN 15,g_x[48] CLIPPED,
                  COLUMN 55,g_x[30] CLIPPED,
                  COLUMN 56,g_x[49] CLIPPED,
                  COLUMN 71,g_x[30] CLIPPED,
                  COLUMN 72,g_x[55] CLIPPED,
                  COLUMN 79,g_x[30] CLIPPED
 
         ON EVERY ROW
#           IF LINENO=53 THEN
#              PRINT COLUMN 1, g_x[30] CLIPPED,
#                    COLUMN 13,g_x[30] CLIPPED,
#                    COLUMN 55,g_x[30] CLIPPED,
#                    COLUMN 73,g_x[30] CLIPPED
#           END IF
           LET n=LINENO
           IF n<1 THEN
               PRINT COLUMN 1,g_x[50] CLIPPED,g_x[51] CLIPPED,g_x[61] CLIPPED
               PRINT COLUMN 1,g_x[30] CLIPPED,
                     COLUMN 3,g_x[47] CLIPPED,
                     COLUMN 13,g_x[30] CLIPPED,
                     COLUMN 15,g_x[48] CLIPPED,
                     COLUMN 55,g_x[30] CLIPPED,
                     COLUMN 56,g_x[49] CLIPPED,
                     COLUMN 71,g_x[30] CLIPPED,
                     COLUMN 72,g_x[55] CLIPPED,
                     COLUMN 79,g_x[30] CLIPPED
               PRINT COLUMN 1,g_x[38] CLIPPED,g_x[39] CLIPPED,g_x[56] CLIPPED
           ELSE
               PRINT COLUMN 1,g_x[38] CLIPPED,g_x[39] CLIPPED,g_x[56] CLIPPED
           END IF
             IF sr1.colname IS NOT NULL THEN
                IF sr1.coltype = 'varchar2' OR sr1.coltype = 'number' OR
                   sr1.coltype = 'varchar' OR   #No.FUN-A60022---add
                   sr1.coltype = 'text' OR sr1.coltype = 'nvarchar' OR      #No.FUN-A60022---add
                   sr1.coltype = 'char' OR sr1.coltype = 'decimal' THEN
                   PRINT COLUMN 1,g_x[30] CLIPPED,
                         COLUMN 3,sr1.colname[1,10] CLIPPED,
                         COLUMN 13,g_x[30] CLIPPED,
                         COLUMN 14,sr1.gaq03[1,40] CLIPPED,
                         COLUMN 55,g_x[30] CLIPPED,
                         COLUMN 56,sr1.coltype CLIPPED,"(",sr1.collength1 CLIPPED,")",
                         COLUMN 71,g_x[30] CLIPPED,
                         COLUMN 75,sr1.nullable CLIPPED,
                         COLUMN 79,g_x[30] CLIPPED
                ELSE
                   PRINT COLUMN 1,g_x[30] CLIPPED,
                         COLUMN 3,sr1.colname[1,10] CLIPPED,
                         COLUMN 13,g_x[30] CLIPPED,
                         COLUMN 14,sr1.gaq03[1,40] CLIPPED,
                         COLUMN 55,g_x[30] CLIPPED,
                         COLUMN 56,sr1.coltype CLIPPED,
                         COLUMN 71,g_x[30] CLIPPED,
                         COLUMN 75,sr1.nullable CLIPPED,
                         COLUMN 79,g_x[30] CLIPPED
                END IF
             ELSE
                PRINT COLUMN 1, g_x[30] CLIPPED,
                      COLUMN 13,g_x[30] CLIPPED,
                      COLUMN 55,g_x[30] CLIPPED,
                      COLUMN 71,g_x[30] CLIPPED,
                      COLUMN 79,g_x[30] CLIPPED
             END IF
        AFTER GROUP OF sr.zta01
           IF LINENO>1 THEN
              PRINT COLUMN 1,g_x[38] CLIPPED,g_x[39] CLIPPED,g_x[56] CLIPPED
              LET  n = LINENO
              WHILE n < 60
                  PRINT COLUMN 1, g_x[30] CLIPPED,
                        COLUMN 13,g_x[30] CLIPPED,
                        COLUMN 55,g_x[30] CLIPPED,
                        COLUMN 71,g_x[30] CLIPPED,
                        COLUMN 79,g_x[30] CLIPPED
                  LET n = n + 1
              END WHILE
           END IF
 
       PAGE TRAILER
           PRINT COLUMN 1,g_x[40] CLIPPED,g_x[41] CLIPPED,g_x[57] CLIPPED
 
END REPORT
 
FUNCTION p_zta_set_entry(p_cmd)
 DEFINE p_cmd   LIKE type_file.chr1      #No.FUN-680135 VARCHAR(1)
 
    IF p_cmd = 'a' AND ( NOT g_before_input_done ) THEN
       CALL cl_set_comp_entry("zta01,zta02,zta07,zta17",TRUE)
#       CALL cl_set_comp_entry("zta01,zta02,zta03,zta07,zta17",TRUE)
    END IF
 
    IF INFIELD(zta07) THEN
       CALL cl_set_comp_entry("zta17",TRUE)
    END IF
 
END FUNCTION
 
#start FUN-6A0052 add
FUNCTION p_zta_set_entry_seldb2()
 
  IF g_action_choice <> "create_synonym" OR g_action_choice IS NULL #FUN-660178
  THEN
    IF g_azp1[l_ac].azp03 != 'ds' THEN
       CALL cl_set_comp_entry("tab_syn,syn_db",TRUE)
    END IF
  END IF
 
END FUNCTION
 
FUNCTION p_zta_set_no_entry_seldb2()
 
  IF g_action_choice <> "create_synonym" OR g_action_choice IS NULL #FUN-660178
  THEN
    IF g_azp1[l_ac].azp03 = 'ds' THEN
       CALL cl_set_comp_entry("tab_syn,syn_db",FALSE)
    END IF
 
    IF INFIELD(tab_syn) THEN
       IF g_azp1[l_ac].tab_syn <> "S" THEN
          CALL cl_set_comp_entry("syn_db",FALSE)
       END IF
    END IF 
  END IF
 
END FUNCTION
#end FUN-6A0052 add
 
FUNCTION p_zta_dff()
    DEFINE l_welcome   LIKE type_file.chr1000,  #No.FUN-680135 VARCHAR(200)
           l_str       STRING,
           l_result    LIKE type_file.chr5      #No.FUN-680135 VARCHAR(5)
    DEFINE l_n         LIKE type_file.num5      #FUN-9C0036 


    OPEN WINDOW p_zta_dff_w AT 12,40 WITH FORM "azz/42f/p_zta_dff"
    ATTRIBUTE(STYLE = g_win_style)
 
   #CALL cl_ui_init()
    CALL cl_ui_locale("p_zta_dff")   #FUN-9C0036
 
    LET l_welcome ="Please select DataBase to generate diff data in p_zta."
 
    MESSAGE " "
    CLEAR FORM                                   # 清螢幕欄位內容
    INITIALIZE g_dff.* LIKE dff_file.*
    CALL cl_opmsg('a')
    INPUT {g_dff.dff01,}g_dff.dff03,g_dff.dff04,l_welcome WITHOUT DEFAULTS
          FROM {dff01,}dff03,dff04,formonly.welcome HELP 1
        AFTER FIELD dff03
             IF cl_null(g_dff.dff03) THEN
                NEXT FIELD dff03
             END IF
             #FUN-9C0036 -- start --
             #SELECT DISTINCT azp03 FROM azp_file WHERE azp01=g_dff.dff03
             #IF STATUS THEN
             #   #CALL cl_err('sel azp:',STATUS,0)  #No.FUN-660081
             #   CALL cl_err3("sel","azp_file",g_dff.dff03,"",SQLCA.sqlcode,"","sel azp",0)   #No.FUN-660081
             #   NEXT FIELD dff03
             #END IF
             #判斷資料庫是否由 azw_file 的設定
             SELECT count(*) INTO l_n from azw_file WHERE azwacti = 'Y' AND azw05 = g_dff.dff03 AND azw05=azw06
             IF l_n = 0 THEN
                CALL cl_err3("sel","azw_file",g_dff.dff03 CLIPPED,"",100,"","sel azw",0)   #No.FUN-660081
                NEXT FIELD dff03
             END IF
             #FUN-9C0036 -- start --
        AFTER FIELD dff04
             IF NOT cl_null(g_dff.dff04) THEN
                #FUN-9C0036 -- start --
                #SELECT DISTINCT azp03 FROM azp_file WHERE azp01=g_dff.dff04
                #IF STATUS THEN
                #   #CALL cl_err('sel azp:',STATUS,0) #No.FUN-660081
                #   CALL cl_err3("sel","azp_file",g_dff.dff04,"",SQLCA.sqlcode,"","sel azp",0)   #No.FUN-660081
                #   NEXT FIELD dff04
                #END IF
                #判斷資料庫是否由 azw_file 的設定
                SELECT count(*) INTO l_n from azw_file WHERE azwacti = 'Y' AND azw05 = g_dff.dff04 AND azw05=azw06
                IF l_n = 0 THEN
                   CALL cl_err3("sel","azw_file",g_dff.dff04 CLIPPED,"",100,"","sel azw",0)   #No.FUN-660081
                   NEXT FIELD dff03
                END IF
                #FUN-9C0036 -- start --
             END IF
 
        BEFORE FIELD welcome
             IF cl_null(g_dff.dff04) THEN
                NEXT FIELD dff04
             ELSE
                ACCEPT INPUT
             END IF
 
        ON ACTION controlp
           CASE
             WHEN INFIELD(dff03)
                # 產生查詢畫面的參數初始化.
                CALL cl_init_qry_var()
                #FUN-9C0036 -- start --
                #LET g_qryparam.form = "q_azp4zta"   #TQC-6C0129
                #LET g_qryparam.form = "q_azp4zta2"  #TQC-6C0129
                LET g_qryparam.form = "q_azw11"
                LET g_qryparam.construct = 'N'
                LET g_qryparam.default1 = g_dff.dff03
                LET g_qryparam.arg1 = g_user CLIPPED
                #FUN-9C0036 -- end -- 
                CALL cl_create_qry() RETURNING g_dff.dff03
                DISPLAY g_dff.dff03 TO dff03
                NEXT FIELD dff03
             WHEN INFIELD(dff04)
                # 產生查詢畫面的參數初始化.
                CALL cl_init_qry_var()
                #FUN-9C0036 -- start --
                #LET g_qryparam.form = "q_azp4zta"   #TQC-6C0129
                #LET g_qryparam.form = "q_azp4zta2"  #TQC-6C0129
                LET g_qryparam.form = "q_azw11"
                LET g_qryparam.construct = 'N'
                LET g_qryparam.default1 = g_dff.dff04
                LET g_qryparam.arg1 = g_user CLIPPED
                #FUN-9C0036 -- end -- 
                CALL cl_create_qry() RETURNING g_dff.dff04
                DISPLAY g_dff.dff04 TO dff04
                NEXT FIELD dff04
           END CASE
 
        ON ACTION locale
           CALL cl_dynamic_locale()
#TQC-860017 start
 
        ON ACTION about
           CALL cl_about()
 
        ON ACTION controlg
           CALL cl_cmdask()
 
        ON ACTION help
           CALL cl_show_help()
 
        ON IDLE g_idle_seconds
           CALL cl_on_idle()
           CONTINUE INPUT
#TQC-860017 end
      END INPUT

      #FUN-9C0036 -- start --
      #此段不需要, Mark 掉
      #SELECT DISTINCT azp03 INTO g_dff.dff03 FROM azp_file WHERE azp01=g_dff.dff03
      #SELECT DISTINCT azp03 INTO g_dff.dff04 FROM azp_file WHERE azp01=g_dff.dff04
      #FUN-9C0036 -- end --
 
      IF INT_FLAG THEN
         LET INT_FLAG=0
         CLOSE WINDOW p_zta_dff_w
         RETURN
      END IF
 
      IF cl_sure(0,0) THEN
       CALL cl_wait()
 
         IF cl_null(g_dff.dff03) OR cl_null(g_dff.dff04) THEN
            CLOSE WINDOW p_zta_dff_w
            RETURN
         END IF
       #No.FUN-A60022---start
         IF os.Path.separator() = "/" THEN  
            RUN "cd $FGLDBPATH" RETURNING l_result
         ELSE
            RUN "cd %FGLDBPATH%" RETURNING l_result
         END IF
       #No.FUN-A60022---end

         IF l_result!='0' THEN
            CALL cl_err('','zta-022',1)
            CLOSE WINDOW p_zta_dff_w
            RETURN
         END IF
       #No.FUN-A60022---start
         #IF g_db_type="IFX" THEN
         IF os.Path.separator() = "/" THEN  
            CASE g_db_type                                   #FUN-730016
             WHEN "IFX"                                      #FUN-730016  
              LET l_str="cd $FGLDBPATH;fgldbsch -db ",g_dff.dff04 CLIPPED," -ie"
 
             WHEN "ORA"                                      #FUN-730016  
              LET l_str="cd $FGLDBPATH;fgldbsch -db ",g_dff.dff04 CLIPPED,
                        " -ow ",g_dff.dff04 CLIPPED," -ie"
            END CASE                                          #FUN-730016
         ELSE
            LET l_str="cd %FGLDBPATH% && fgldbsch -db ",g_dff.dff04 CLIPPED," -ie" 
         END IF
       #No.FUN-A60022---end
 
         RUN l_str RETURNING l_result
         IF l_result!=0 THEN
            CALL cl_err('','zta-022',1)
         ELSE 
          #No.FUN-A60022---start
            #IF g_db_type="IFX" THEN
            IF os.Path.separator() = "/" THEN  
               CASE g_db_type                                   #FUN-730016
                WHEN "IFX"                                      #FUN-730016  
                  LET l_str="cd $FGLDBPATH;fgldbsch -db ",g_dff.dff03 CLIPPED," -ie"
 
                WHEN "ORA"                                      #FUN-730016  
                  LET l_str="cd $FGLDBPATH;fgldbsch -db ",g_dff.dff03 CLIPPED,
                            " -ow ",g_dff.dff03 CLIPPED," -ie"
               END CASE                                         #FUN-730016
            ELSE
               LET l_str="cd %FGLDBPATH% && fgldbsch -db ",g_dff.dff03 CLIPPED," -ie"
            END IF
          #No.FUN-A60022---end
 
            RUN l_str RETURNING l_result
            IF l_result!=0 THEN
               CALL cl_err('','zta-022',1)
            ELSE
               CALL p_zta_diffdb_tab_schema_withfile(g_dff.dff04,g_dff.dff03)
#               CALL p_zta_diffdb_idx_schema_withfile(g_dff.dff04,g_dff.dff03)
            END IF
         END IF
      ELSE
         CLOSE WINDOW p_zta_dff_w
         RETURN
      END IF
      CLOSE WINDOW p_zta_dff_w
 
#    ERROR " "
END FUNCTION
 
 
FUNCTION p_zta_set_no_entry(p_cmd)
  DEFINE p_cmd   LIKE type_file.chr1    #No.FUN-680135 VARCHAR(1)
 
    IF p_cmd = 'u' AND g_chkey = 'N' AND ( NOT g_before_input_done ) THEN
       CALL cl_set_comp_entry("zta01,zta02,zta07,zta17",FALSE)
#       CALL cl_set_comp_entry("zta01,zta02,zta03,zta07,zta17",FALSE)
    END IF
 
    IF INFIELD(zta07) THEN
       IF g_zta.zta07 <> "S" THEN
          CALL cl_set_comp_entry("zta17",FALSE)
       END IF
    END IF
 
END FUNCTION
 
FUNCTION p_zta_dbqry_menu()
DEFINE l_sel LIKE type_file.chr1        #No.FUN-680135 VARCHAR(1)
DEFINE w ui.Window                      #MOD-890209
DEFINE n om.DomNode                     #MOD-890209
 
    LET l_sel='I'
    CALL p_dbqry_buildForm()
    LET g_str = null             #FUN-830143
    CALL ga_table_data.clear()   #FUN-830143
 
WHILE TRUE
      CALL p_zta_dbqry_bp("G")
 
      CASE g_action_choice
        WHEN "inputsql"
             CALL p_zta_dbqry(l_sel) RETURNING l_sel
        WHEN "exporttoexcel"
#MOD-890209---start---
           LET w = ui.Window.getCurrent()
           LET n = w.getNode()
           CALL cl_export_to_excel(n,base.TypeInfo.create(ga_table_data),'','')
#MOD-890209---end---
           #CALL cl_export_to_excel(ui.Interface.getRootNode(),base.TypeInfo.create(ga_table_data),'','')   #MOD-890209 mark
        WHEN "exit"
             EXIT WHILE
        WHEN "controlg"
             CALL cl_cmdask()
      END CASE
END WHILE
CLOSE WINDOW p_dbqry_table
 
END FUNCTION
 
 
FUNCTION p_zta_dbqry(l_sel)
    DEFINE l_text      STRING
    DEFINE l_str       STRING
    DEFINE l_sql       STRING
    DEFINE l_tmp       STRING
    DEFINE l_execmd    STRING
    DEFINE l_tok       base.StringTokenizer
    DEFINE l_start     LIKE type_file.num5          #No.FUN-680135 SMALLINT
    DEFINE l_end       LIKE type_file.num5          #No.FUN-680135 SMALLINT
    DEFINE l_feld_tmp  LIKE type_file.chr1000       #No.FUN-680135 VARCHAR(55)
    DEFINE l_feld      DYNAMIC ARRAY OF STRING
    DEFINE l_length    DYNAMIC ARRAY OF LIKE type_file.num5        #No.FUN-680135 SMALLINT
    DEFINE l_feld_t    DYNAMIC ARRAY OF STRING
    DEFINE l_tab       DYNAMIC ARRAY OF STRING
    DEFINE l_tab_alias DYNAMIC ARRAY OF STRING
    DEFINE l_i         LIKE type_file.num5          #No.FUN-680135 SMALLINT
    DEFINE l_j         LIKE type_file.num5          #No.FUN-680135 SMALLINT
    DEFINE l_k         LIKE type_file.num5          #No.FUN-680135 SMALLINT
    DEFINE ln_table_column, ln_edit,ln_w om.DomNode
    DEFINE ls_items    om.NodeList
    DEFINE ls_colname  STRING
    DEFINE lw_w        ui.window
    DEFINE l_feld_cnt  LIKE type_file.num5          #No.FUN-680135 SMALLINT
    DEFINE l_tab_cnt   LIKE type_file.num5          #No.FUN-680135 SMALLINT
    DEFINE l_colname   LIKE gaq_file.gaq01,         #No.FUN-680135 VARCHAR(20)
           l_colnamec  LIKE gaq_file.gaq03,         #No.FUN-680135 VARCHAR(50)
           l_collen    LIKE type_file.num5,         #No.FUN-680135 SMALLINT
           l_coltype   LIKE type_file.chr3,         #No.FUN-680135 VARCHAR(3)
           l_sel       LIKE type_file.chr1,         #No.FUN-680135 VARCHAR(1)
           l_str_len   LIKE type_file.num10,        #CHI-910011 add
           l_index     LIKE type_file.num10,        #CHI-910011 add
           l_where     STRING                       #CHI-910011 add
    DEFINE l_feld_id   DYNAMIC ARRAY OF LIKE type_file.chr30      #No.FUN-720026
 
    CALL cl_set_act_visible("accept,cancel", TRUE)
#    LET l_sel='I'
    INPUT g_str,l_sel WITHOUT DEFAULTS FROM text1,selmethod HELP 1
        BEFORE INPUT
            LET l_text = null
 
        AFTER INPUT
            IF INT_FLAG=0 THEN
               LET l_str=g_str.toLowerCase()            #FUN-830143 去掉mark
               #--CHI-910011--start--
               LET l_str_len = g_str.getLength()
               LET l_index = l_str.getIndexOf('where',1)
               IF l_index <> 0 THEN
                  LET l_where = g_str.subString(l_index+5 , l_str_len)
                  LET l_str = l_str.subString(1,l_index+4),l_where
               END IF
               #--CHI-910011--end--
               #LET l_str=p_zta_cut_spaces(l_str)        #FUN-830143 #CHI-960098
               LET l_str = l_str.trim()                  #CHI-960098
               LET l_end = l_str.getIndexOf(';',1)
               IF l_end != 0 THEN
                  LET l_str=l_str.subString(1,l_end-1)
               END IF
               LET l_tok = base.StringTokenizer.createExt(l_str CLIPPED,"\n","",TRUE)
               WHILE l_tok.hasMoreTokens()
                     LET l_tmp=l_tok.nextToken()
                     IF l_text is null THEN
                        LET l_text = l_tmp.trim()
                     ELSE
                        LET l_text = l_text CLIPPED,' ',l_tmp.trim()
                     END IF
#                     display "dbquery_sql:",l_text
               END WHILE
               LET l_tmp=l_text
               LET l_execmd=l_tmp
{               LET l_tmp=p_zta_cut_spaces(l_tmp)
               LET l_end = l_tmp.getIndexOf(';',1)
               IF l_end != 0 THEN
                  LET l_tmp=l_tmp.subString(1,l_end-1)
               END IF     }
               LET l_str=l_tmp
#               LET l_tmp=l_text
               LET l_start = l_tmp.getIndexOf('select',1)
               IF l_start=0 THEN
                  CALL cl_err('can not execute this command!','!',0)
                  EXIT INPUT
               END IF
               LET l_end   = l_tmp.getIndexOf('from',1)
#               display "l_start:",l_start
#               display "l_end:",l_end
               LET l_str=l_str.subString(l_start+7,l_end-2)
               LET l_str=l_str.trim()
               LET l_tok = base.StringTokenizer.createExt(l_str CLIPPED,",","",TRUE)
               LET l_i=1
               WHILE l_tok.hasMoreTokens()
                     LET l_feld[l_i]=l_tok.nextToken()
                     LET l_feld[l_i]=l_feld[l_i].trim()
                     LET l_i=l_i+1
#                     display "feld",l_i-1,":",l_feld[l_i-1]
               END WHILE
               LET l_feld_cnt=l_i-1
 
 
               LET l_str=l_tmp
               LET l_start = l_str.getIndexOf('from',1)
               LET l_end   = l_str.getIndexOf('where',1)
               IF l_end=0 THEN
                  LET l_end   = l_str.getIndexOf('group',1)
                  IF l_end=0 THEN
                     LET l_end   = l_str.getIndexOf('order',1)
                     IF l_end=0 THEN
                        LET l_end=l_str.getLength()
                        LET l_str=l_str.subString(l_start+5,l_end)
                     ELSE
                        LET l_str=l_str.subString(l_start+5,l_end-2)
                     END IF
                  ELSE
                     LET l_str=l_str.subString(l_start+5,l_end-2)
                  END IF
               ELSE
                  LET l_str=l_str.subString(l_start+5,l_end-2)
               END IF
               LET l_str=l_str.trim()
               LET l_tok = base.StringTokenizer.createExt(l_str CLIPPED,",","",TRUE)
               LET l_j=1
               WHILE l_tok.hasMoreTokens()
                     LET l_tab[l_j]=l_tok.nextToken()
                     LET l_tab[l_j]=l_tab[l_j].trim()
                     IF l_tab[l_j].getIndexOf(' ',1) THEN
                        DISPLAY 'qazzaq:',l_tab[l_j].getIndexOf(' ',1)
                        LET l_tab_alias[l_j]=l_tab[l_j].subString(l_tab[l_j].getIndexOf(' ',1)+1,l_tab[l_j].getLength())
                        LET l_tab[l_j]=l_tab[l_j].subString(1,l_tab[l_j].getIndexOf(' ',1)-1)
                     END IF
                     LET l_j=l_j+1
#                     display "tab",l_j-1,":",l_tab[l_j-1],":",l_tab_alias[l_j-1]
               END WHILE
               LET l_tab_cnt=l_j-1
 
               CALL cl_query_prt_temptable()     #No.FUN-A60085
         
               FOR l_i=1 TO l_feld_cnt
                   IF l_feld[l_i]='*' THEN
                      LET l_str=l_tmp
                      LET l_start = l_str.getIndexOf('from',1)
                      LET l_end   = l_str.getIndexOf('where',1)
                      IF l_end=0 THEN
                         LET l_end   = l_str.getIndexOf('group',1)
                         IF l_end=0 THEN
                            LET l_end   = l_str.getIndexOf('order',1)
                            IF l_end=0 THEN
                               LET l_end=l_str.getLength()
                               LET l_str=l_str.subString(l_start+5,l_end)
                            ELSE
                               LET l_str=l_str.subString(l_start+5,l_end-2)
                            END IF
                         ELSE
                            LET l_str=l_str.subString(l_start+5,l_end-2)
                         END IF
                      ELSE
                         LET l_str=l_str.subString(l_start+5,l_end-2)
                      END IF
                      LET l_str=l_str.trim()
                      LET l_tok = base.StringTokenizer.createExt(l_str CLIPPED,",","",TRUE)
                      FOR l_j=1 TO l_tab_cnt 
                         #CALL p_dbqry_getlength(l_tab[l_j],l_sel,'m')
                          CALL cl_query_prt_getlength(l_tab[l_j],l_sel,'m','0')   #No.FUN-990043
                          DECLARE p_zta_dbqry_insert_d_ifx CURSOR FOR
                                  SELECT xabc02,xabc03,xabc04 FROM xabc ORDER BY xabc01
                          FOREACH p_zta_dbqry_insert_d_ifx INTO l_feld_id[l_i],l_feld_tmp,l_length[l_i]  #No.FUN-720026 #No.FUN-990043
                             LET l_feld[l_i]=l_feld_tmp
                             LET l_i=l_i+1
                          END FOREACH
                          LET l_feld_cnt=l_i-1
                      END FOR
                      EXIT FOR   #確保避免因人為的sql錯誤產生多除的顯示欄位
                   ELSE
                      IF l_feld[l_i].getIndexOf('.',1) THEN
                         IF l_feld[l_i].subString(l_feld[l_i].getIndexOf('.',1)+1,l_feld[l_i].getLength())='*' THEN
                            FOR l_j=1 TO l_tab_cnt
                                IF l_tab_alias[l_j] is null THEN
                                   IF l_tab[l_j]=l_feld[l_i].subString(1,l_feld[l_i].getIndexOf('.',1)-1) THEN
                                      LET l_k=l_i   #備份l_i的值
                                      CALL l_feld.deleteElement(l_i) #刪除xxx.*那筆資料
                                      CALL l_length.deleteElement(l_i) #刪除xxx.*那筆資料
                                      CALL l_feld.insertElement(l_i)
                                      CALL l_length.insertElement(l_i)
                                     #CALL p_dbqry_getlength(l_tab[l_j],l_sel,'m')
                                      CALL cl_query_prt_getlength(l_tab[l_j],l_sel,'m','0')   #No.FUN-990043
                                      DECLARE p_zta_dbqry_insert_d1_ifx CURSOR FOR 
                                              SELECT xabc02,xabc03,xabc04 FROM xabc ORDER BY xabc01 DESC
                                      FOREACH p_zta_dbqry_insert_d1_ifx INTO l_feld_id[l_i],l_feld_tmp,l_length[l_i] #No.FUN-720026 #No.FUN-990043
                                         LET l_feld[l_i]=l_feld_tmp
                                         CALL l_feld.insertElement(l_i)
                                         CALL l_length.insertElement(l_i)
                                         LET l_k=l_k+1
                                         LET l_feld_cnt=l_feld_cnt+1
                                      END FOREACH
                                      CALL l_feld.deleteElement(l_i) #刪除xxx.*那筆資料
                                      CALL l_length.deleteElement(l_i) #刪除xxx.*那筆資料
                                      LET l_feld_cnt=l_feld_cnt-1
                                      LET l_i=l_k-1
                                   END IF
                                ELSE
                                   IF l_tab_alias[l_j]=l_feld[l_i].subString(1,l_feld[l_i].getIndexOf('.',1)-1) THEN
                                      LET l_k=l_i   #備份l_i的值
                                      CALL l_feld.deleteElement(l_i) #刪除xxx.*那筆資料
                                      CALL l_length.deleteElement(l_i) #刪除xxx.*那筆資料
                                      CALL l_feld.insertElement(l_i)
                                      CALL l_length.insertElement(l_i)
                                     #CALL p_dbqry_getlength(l_tab[l_j],l_sel,'m')
                                      CALL cl_query_prt_getlength(l_tab[l_j],l_sel,'m','0')   #No.FUN-990043
                                      DECLARE p_zta_dbqry_insert_d2_ifx CURSOR FOR 
                                              SELECT xabc02,xabc03,xabc04 FROM xabc ORDER BY xabc01 DESC
                                      FOREACH p_zta_dbqry_insert_d2_ifx INTO l_feld_id[l_i],l_feld_tmp,l_length[l_i]  #No.FUN-720026 #No.FUN-990043
                                         LET l_feld[l_i]=l_feld_tmp
                                         CALL l_feld.insertElement(l_i)
                                         CALL l_length.insertElement(l_i)
                                         LET l_k=l_k+1
                                         LET l_feld_cnt=l_feld_cnt+1
                                      END FOREACH
                                      CALL l_feld.deleteElement(l_i) #刪除xxx.*那筆資料
                                      CALL l_length.deleteElement(l_i) #刪除xxx.*那筆資料
                                      LET l_feld_cnt=l_feld_cnt-1
                                      LET l_i=l_k-1
                                   END IF
                                END IF 
                            END FOR
                         ELSE
                            LET l_feld[l_i]=l_feld[l_i].subString(l_feld[l_i].getIndexOf('.',1)+1,l_feld[l_i].getLength())
                            LET l_length[l_i]=''
                           #CALL p_dbqry_getlength(l_feld[l_i],l_sel,'s')
                            CALL cl_query_prt_getlength(l_feld[l_i],l_sel,'s','0')   #No.FUN-990043
                            DECLARE p_zta_dbqry_d_ifx CURSOR FOR 
                                    SELECT xabc02,xabc03,xabc04 FROM xabc ORDER BY xabc01 DESC
                            FOREACH p_zta_dbqry_d_ifx INTO l_feld_id[l_i],l_feld_tmp,l_length[l_i] #No.FUN-720026 #No.FUN-990043
                               LET l_feld[l_i]=l_feld_tmp
                            END FOREACH
                         END IF
                      ELSE
                         LET l_length[l_i]=''
                        #CALL p_dbqry_getlength(l_feld[l_i],l_sel,'s')
                         CALL cl_query_prt_getlength(l_feld[l_i],l_sel,'s','0')   #No.FUN-990043
                         DECLARE p_zta_dbqry_d1_ifx CURSOR FOR 
                                 SELECT xabc02,xabc03,xabc04 FROM xabc ORDER BY xabc01 DESC
                         FOREACH p_zta_dbqry_d1_ifx INTO l_feld_id[l_i],l_feld_tmp,l_length[l_i] #No.FUN-720026 #No.FUN-990043
                            LET l_feld[l_i]=l_feld_tmp
                         END FOREACH
                      END IF
                   END IF
               END FOR
 
 
               LET lw_w=ui.window.getcurrent()
               LET ln_w = lw_w.getNode()
               LET ls_items=ln_w.selectByTagName("TableColumn")
               FOR l_i = 1 TO l_feld_cnt
                   LET ln_table_column = ls_items.item(l_i)
                   LET ls_colname = "field", l_i USING "&&&"
#                   IF l_i=1 THEN
#                      CALL ln_table_column.setAttribute("width",1 )
#                   END IF
                   CALL ln_table_column.setAttribute("colName", ls_colname)
                   CALL ln_table_column.setAttribute("name", "formonly." || l_feld_id[l_i])    #No.FUN-720026
                   CALL ln_table_column.setAttribute("text", l_feld[l_i])
                   CALL ln_table_column.setAttribute("hidden", 0)
                   LET ln_edit = ln_table_column.getChildByIndex(1)
                   CALL ln_edit.setAttribute("width", l_length[l_i])
--                   CALL ln_edit.setAttribute("width", l_length[l_i])
-- #                   LET ln_edit = ln_table_column.createChild("Edit")
-- #                  CALL ln_edit.setAttribute("tag", l_feld[l_i])
               END FOR
               FOR l_i = l_feld_cnt+1 TO GI_MAX_COLUMN_COUNT
                   LET ln_table_column = ls_items.item(l_i)
#                   LET ln_table_column = ln_table.createChild("TableColumn")
                   LET ls_colname = "field", l_i USING "&&&"
                   CALL ln_table_column.setAttribute("colName", ls_colname)
                   CALL ln_table_column.setAttribute("name", "formonly." || ls_colname)
                   CALL ln_table_column.setAttribute("text", ls_colname)
                   CALL ln_table_column.setAttribute("noEntry", 1)
                   CALL ln_table_column.setAttribute("hidden", 1)
-- #                   LET ln_edit = ln_table_column.createChild("Edit")
--                   LET ln_edit = ln_table_column.getChildByIndex(1)
--                   CALL ln_edit.setAttribute("width", GI_COLUMN_WIDTH)
-- #                  CALL ln_edit.setAttribute("tag", "unused")
               END FOR
 
#               PREPARE table_pre FROM l_tmp
               PREPARE table_pre FROM l_execmd
               IF SQLCA.SQLCODE THEN
                  CALL cl_err('','zta-028',1)
               END IF
               DECLARE table_cur CURSOR FOR table_pre
               IF SQLCA.SQLCODE THEN
                  CALL cl_err('','zta-028',1)
               END IF
 
               LET l_i = 1
               CALL ga_table_data.clear()
               FOREACH table_cur INTO ga_table_data[l_i].*
                   IF SQLCA.SQLCODE THEN
                      CALL cl_err('','zta-028',1)
                   END IF
                   LET l_i=l_i+1
                   #FUN-990043 -- start --
                   IF l_i > g_max_rec THEN
                      CALL cl_err("",9035,0)
                      EXIT FOREACH
                   END IF
                   #FUN-990043 -- end --
 
               END FOREACH
               IF SQLCA.SQLCODE THEN
                  CALL cl_err('',sqlca.sqlcode,1)
               END IF
               CALL ga_table_data.deleteElement(l_i)  #CHI-910066 add
               LET g_dbqry_rec_b = l_i - 1
 
               DISPLAY ARRAY ga_table_data TO s_table_data.* ATTRIBUTE ( COUNT = g_dbqry_rec_b)
 
 
               BEFORE DISPLAY
                      EXIT DISPLAY
{                   AFTER DISPLAY
                       IF INT_FLAG = TRUE THEN
#                         CALL p_dbqry_unhideColumn()
--                          LET INT_FLAG = FALSE
                          EXIT DISPLAY
                       END IF}
               END DISPLAY
               IF INT_FLAG=1 THEN
                  EXIT INPUT
               END IF
            END IF
       #TQC-860017 start
 
       ON ACTION about
          CALL cl_about()
 
       ON ACTION controlg
          CALL cl_cmdask()
 
       ON ACTION help
          CALL cl_show_help()
 
       ON IDLE g_idle_seconds
          CALL cl_on_idle()
          CONTINUE INPUT
       #TQC-860017 end       
    END INPUT
    RETURN l_sel
END FUNCTION
 
#p_flag = s 表single只查field
#p_flag = m 表multi查table所有的field
FUNCTION p_dbqry_getlength(p_tab,p_sel,p_flag)
DEFINE p_tab        STRING
DEFINE l_sql        STRING
DEFINE l_sn         LIKE type_file.num5     #No.FUN-680135 SMALLINT
DEFINE p_flag       LIKE type_file.chr1     #No.FUN-680135 VARCHAR(1) 
DEFINE l_feldname   LIKE type_file.chr1000  #No.FUN-680135 VARCHAR(55)
DEFINE l_colname    LIKE gaq_file.gaq01,    #No.FUN-680135 VARCHAR(20)
       l_colnamec   LIKE gaq_file.gaq03,    #No.FUN-680135 VARCHAR(50)
       l_collen     LIKE type_file.num5,    #No.FUN-680135 SMALLINT
       l_coltype    LIKE type_file.chr3,    #No.FUN-680135 VARCHAR(3)
       p_sel        LIKE type_file.chr1     #No.FUN-680135 VARCHAR(1)
 
    DROP TABLE xabc
#No.FUN-680135 --start
#   CREATE TEMP TABLE xabc
#   (
#     xabc01 SMALLINT,
#     xabc02 VARCHAR(55),
#     xabc03 SMALLINT
#   )
 
    CREATE TEMP TABLE xabc(
      xabc01 LIKE type_file.num5,  
      xabc02 LIKE type_file.chr1000,
      xabc03 LIKE type_file.num5,
      xabc04 LIKE type_file.chr1000)      #欄位ID  #No.FUN-720026
#No.FUN-680135 --end
    LET l_sn=1
    IF p_flag='m' THEN
       #IF g_db_type="IFX" THEN
       CASE g_db_type                                   #FUN-730016
        WHEN "IFX"                                      #FUN-730016  
          LET l_sql="SELECT c.colname,c.coltype,c.collength FROM syscolumns c,systables t",
                    " WHERE c.tabid=t.tabid AND t.tabname='",p_tab CLIPPED,"'",
                    " ORDER BY c.colno "
          DECLARE p_dbqry_getlength_d_ifx CURSOR FROM l_sql
          FOREACH p_dbqry_getlength_d_ifx INTO l_colname,l_coltype,l_collen
             CASE WHEN l_coltype='1' or l_coltype='257'
                       LET l_collen=5
                  WHEN l_coltype='2' or l_coltype='258'
                       LET l_collen=10
                  WHEN l_coltype='5' or l_coltype='261'
                       LET l_collen=20
                  WHEN l_coltype='7' or l_coltype='263'
                       LET l_collen=10
             END CASE
             CASE
               WHEN p_sel='N'
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  IF cl_null(l_colnamec) THEN
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)  #No.FUN-720026
                     LET l_sn=l_sn+1
                  ELSE
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colnamec,l_collen,l_colname) #No.FUN-720026
                     LET l_sn=l_sn+1
                  END IF
               WHEN p_sel='I'
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)     #No.FUN-720026
                  LET l_sn=l_sn+1
               OTHERWISE
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  LET l_feldname=l_colname CLIPPED,'(',l_colnamec CLIPPED,')'
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_feldname,l_collen,l_colname)    #No.FUN-720026
                  LET l_sn=l_sn+1
             END CASE
          END FOREACH
       
        WHEN "ORA"                                      #FUN-730016  
          LET l_sql="SELECT lower(column_name),decode(data_type,'VARCHAR2',data_length,'DATE',10,'NUMBER',data_PRECISION) FROM user_tab_columns",
                    " WHERE lower(table_name)='",p_tab CLIPPED,"'",
                    " ORDER BY column_id "
          DECLARE p_dbqry_getlength_d CURSOR FROM l_sql
          FOREACH p_dbqry_getlength_d INTO l_colname,l_collen
             CASE
               WHEN p_sel='N'
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  IF cl_null(l_colnamec) THEN
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)       #No.FUN-720026
                     LET l_sn=l_sn+1
                  ELSE
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colnamec,l_collen,l_colname)      #No.FUN-720026
                     LET l_sn=l_sn+1
                  END IF
               WHEN p_sel='I'
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)          #No.FUN-720026 
                  LET l_sn=l_sn+1
               OTHERWISE
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname||'('||l_colnamec||')',l_collen)   #No.FUN-720026
                  LET l_sn=l_sn+1
             END CASE
          END FOREACH
 
        WHEN "MSV"                                      #FUN-730016  
       END CASE                                         #FUN-730016
 
    ELSE
       #IF g_db_type="IFX" THEN
       CASE g_db_type                                   #FUN-730016
        WHEN "IFX"                                      #FUN-730016  
          LET l_sql="SELECT c.colname,c.coltype,c.collength FROM syscolumns c",
                    " WHERE c.colname='",p_tab CLIPPED,"'",
                    " ORDER BY c.colno desc"
          DECLARE p_dbqry_getlength_d1_ifx CURSOR FROM l_sql
          FOREACH p_dbqry_getlength_d1_ifx INTO l_colname,l_coltype,l_collen
             CASE WHEN l_coltype='1' or l_coltype='257'
                       LET l_collen=5
                  WHEN l_coltype='2' or l_coltype='258'
                       LET l_collen=10
                  WHEN l_coltype='5' or l_coltype='261'
                       LET l_collen=20
                  WHEN l_coltype='7' or l_coltype='263'
                       LET l_collen=10
             END CASE
             CASE
               WHEN p_sel='N'
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  IF cl_null(l_colnamec) THEN
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)   #No.FUN-720026
                  ELSE
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colnamec,l_collen,l_colname)  #No.FUN-720026
                  END IF
               WHEN p_sel='I'
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)                #No.FUN-720026
               OTHERWISE
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  LET l_feldname=l_colname CLIPPED,'(',l_colnamec CLIPPED,')'
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_feldname,l_collen,l_colname)     #No.FUN-720026
             END CASE
          END FOREACH
          IF cl_null(l_colname) AND (l_collen=0) THEN
             LET l_feldname=p_tab
             INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_feldname,20,l_feldname)   #No.FUN-720026 #CHI-910066 放大預設長度至20
          END IF
       
        WHEN "ORA"                                      #FUN-730016  
          LET l_sql="SELECT lower(column_name),decode(data_type,'VARCHAR2',data_length,'DATE',10,'NUMBER',data_PRECISION) FROM user_tab_columns",
                    " WHERE lower(column_name)='",p_tab CLIPPED,"'",
                    " ORDER BY column_id desc"
          DECLARE p_dbqry_getlength_d1 CURSOR FROM l_sql
          FOREACH p_dbqry_getlength_d1 INTO l_colname,l_collen
             CASE
               WHEN p_sel='N'
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  IF cl_null(l_colnamec) THEN
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)  #No.FUN-720026
                  ELSE
                     INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colnamec,l_collen,l_colname) #No.FUN-720026
                  END IF
               WHEN p_sel='I'
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname,l_collen,l_colname)     #No.FUN-720026
               OTHERWISE
                  SELECT gaq03 INTO l_colnamec
                    FROM gaq_file
                   WHERE gaq01=l_colname
                     AND gaq02=g_i
                  INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_colname||'('||l_colnamec||')',l_collen,l_colname) #No.FUN-720026
             END CASE
          END FOREACH
          IF cl_null(l_colname) AND (l_collen=0) THEN  #for count(*)之類的用途
             LET l_feldname=p_tab
             INSERT INTO xabc(xabc01,xabc02,xabc03,xabc04) VALUES(l_sn,l_feldname,20,l_feldname)  #No.FUN-720026 #CHI-910066 放大預設長度至20
          END IF
 
        WHEN "MSV"                                      #FUN-730016  
       END CASE                                         #FUN-730016
    END IF
END FUNCTION
 
 
FUNCTION p_dbqry_buildForm()
    DEFINE lw_win   ui.Window
    DEFINE lf_form  ui.Form
    DEFINE ln_win,  ln_form, ln_vbox om.DomNode
 
 
#    OPEN WINDOW p_dbqry_table WITH FORM "azz/42f/p_dummy" #ATTRIBUTE ( STYLE = "dialog" )
    OPEN WINDOW p_dbqry_table WITH FORM "azz/42f/p_dummy" ATTRIBUTE(STYLE = g_win_style)
 
   #CALL cl_ui_init()
    CALL cl_ui_locale("p_dummy")                   #MOD-7B0029
 
    LET lw_win = ui.Window.getCurrent()
    LET ln_win = lw_win.getNode()
    CALL ln_win.setAttribute("text", "DataBase Query: " || g_dbs CLIPPED)  #FUN-9C0036
#   LET ln_form = ln_win.createChild("Form")
    LET lf_form = lw_win.getForm()
    LET ln_form = lf_form.getNode()
    CALL ln_form.setAttribute("name", "p_dbqry")
    LET ln_vbox = ln_form.createChild("VBox")
    CALL p_dbqry_buildTable(ln_vbox)
#   CALL p_dbqry_buildRecordView(ln_form)
 
END FUNCTION
 
FUNCTION p_dbqry_buildTable(pn_vbox)
    DEFINE pn_vbox    om.DomNode
    DEFINE ln_table,ln_table_column, ln_edit om.DomNode
    DEFINE ln_grid,ln_FormField, ln_TextEdit,ln_RadioGroup,ln_Item om.DomNode
    DEFINE li_i       LIKE type_file.num10   #No.FUN-680135 INTEGER
    DEFINE ls_colname STRING
 
 
    LET ln_grid = pn_vbox.createChild("Grid")
    LET ln_formfield = ln_grid.createChild("FormField")
    CALL ln_formfield.setAttribute("colName","text1")
    CALL ln_formfield.setAttribute("name","formonly.text1")
    LET ln_textedit = ln_formfield.createChild("TextEdit")
    CALL ln_textedit.setAttribute("gridHeight","5")
    CALL ln_textedit.setAttribute("height","5")
    CALL ln_textedit.setAttribute("width","156")
    CALL ln_textedit.setAttribute("style","fixedFont")
    CALL ln_textedit.setAttribute("stretch","both")
#    LET ln_text = pn_vbox.createChild("TextEdit")
#    CALL ln_text.setAtribute(
    LET ln_table = pn_vbox.createChild("Table")
#   CALL ln_table.setAttribute("unhidableColumns", 1)
#   CALL ln_table.setAttribute("wantColumnsVisible", 1)
    CALL ln_table.setAttribute("tabName", "s_table_data")
    CALL ln_table.setAttribute("pageSize", 10)
    CALL ln_table.setAttribute("size", 10)
    CALL ln_table.setAttribute("unhidableColumns", 1)
    FOR li_i = 1 TO GI_MAX_COLUMN_COUNT
        LET ln_table_column = ln_table.createChild("TableColumn")
        LET ls_colname = "field", li_i USING "&&&"
        CALL ln_table_column.setAttribute("colName", ls_colname)
        CALL ln_table_column.setAttribute("name", "formonly." || ls_colname)
        CALL ln_table_column.setAttribute("text", ls_colname)
        CALL ln_table_column.setAttribute("noEntry", 1)
        CALL ln_table_column.setAttribute("hidden", 1)
        CALL ln_table_column.setAttribute("tabIndex", li_i)        #TQC-710089
        LET ln_edit = ln_table_column.createChild("Edit")
        CALL ln_edit.setAttribute("width", GI_COLUMN_WIDTH)
#       CALL ln_edit.setAttribute("tag", "unused")
    END FOR
    LET ln_grid = pn_vbox.createChild("Grid")
    LET ln_formfield = ln_grid.createChild("FormField")
    CALL ln_formfield.setAttribute("colName","selmethod")
    CALL ln_formfield.setAttribute("name","formonly.selmethod")
    LET ln_radiogroup = ln_formfield.createChild("RadioGroup")
    CALL ln_radiogroup.setAttribute("orientation","horizontal")
    LET ln_item = ln_radiogroup.createChild("Item")
    CALL ln_item.setAttribute("name","I")
    CALL ln_item.setAttribute("text","show Field ID")
    LET ln_item = ln_radiogroup.createChild("Item")
    CALL ln_item.setAttribute("name","N")
    CALL ln_item.setAttribute("text","show Field Name")
    LET ln_item = ln_radiogroup.createChild("Item")
    CALL ln_item.setAttribute("name","A")
    CALL ln_item.setAttribute("text","show Field ID+Name")
END FUNCTION
 
FUNCTION p_dbqry_buildRecordView(pn_form)
    DEFINE pn_form om.DomNode
    DEFINE ln_recview, ln_link om.DomNode
    DEFINE ls_colname STRING
    DEFINE li_i LIKE type_file.num10   #No.FUN-680135 INTEGER
 
 
    LET ln_recview = pn_form.createChild("RecordView")
    CALL ln_recview.setAttribute("tabName", "formonly")
    FOR li_i = 1 TO GI_MAX_COLUMN_COUNT
        LET ls_colname = "field", li_i USING "&&&"
        LET ln_link = ln_recview.createChild("Link")
        CALL ln_link.setAttribute("colName", ls_colname)
    END FOR
END FUNCTION
 
 
FUNCTION p_dbqry_showAbout()
    DEFINE ls_str STRING
 
 
    LET ls_str = "A simple database query for TIPTOP\n",
                 "\n",
                 "\n",
                 "Version: 0.1"
    MENU "About" ATTRIBUTE ( STYLE = "dialog", COMMENT = ls_str )
         COMMAND "Close"
 
        -- for Windows close event trapped
        COMMAND KEY(INTERRUPT)
            LET g_action_choice = "exit"
            EXIT MENU
 
       ON IDLE g_idle_seconds
          CALL cl_on_idle()
          CONTINUE MENU
 
    END MENU
END FUNCTION
 
 
FUNCTION p_dbqry_hideColumn()
    DEFINE lw_win  ui.Window
    DEFINE ln_win  om.DomNode
    DEFINE ln_edit om.DomNode
    DEFINE ll_edit om.NodeList
    DEFINE li_i    LIKE type_file.num10   #No.FUN-680135 INTEGER
 
 
    LET lw_win = ui.Window.getCurrent()
    LET ln_win = lw_win.getNode()
    LET ll_edit = ln_win.selectByPath("//Edit[@tag=\"unused\"]")
    FOR li_i = 1 TO ll_edit.getLength()
        LET ln_edit = ll_edit.item(li_i)
        CALL ln_edit.setAttribute("hidden", 1)
    END FOR
END FUNCTION
 
FUNCTION p_dbqry_unhideColumn()
    DEFINE lw_win  ui.Window
    DEFINE ln_win  om.DomNode
    DEFINE ln_edit om.DomNode
    DEFINE ll_edit om.NodeList
    DEFINE li_i    LIKE type_file.num10   #No.FUN-680135 INTEGER
 
 
    LET lw_win = ui.Window.getCurrent()
    LET ln_win = lw_win.getNode()
    LET ll_edit = ln_win.selectByPath("//Edit[@tag=\"unused\"]")
    FOR li_i = 1 TO ll_edit.getLength()
        LET ln_edit = ll_edit.item(li_i)
        CALL ln_edit.setAttribute("hidden", 0)
    END FOR
END FUNCTION
 
 
FUNCTION p_zta_question_msg(p_title_code,p_msg_code)
DEFINE   l_msg         LIKE type_file.chr1000 #No.FUN-680135 VARCHAR(100)
DEFINE   l_result      LIKE type_file.num5    #No.FUN-680135 SMALLINT
DEFINE   l_title       LIKE type_file.chr50   #No.FUN-680135 VARCHAR(50)
DEFINE   p_title_code  LIKE azo_file.azo06    #No.FUN-680135 VARCHAR(7)
DEFINE   p_msg_code    LIKE azo_file.azo06    #No.FUN-680135 VARCHAR(7)
 
 
   SELECT ze03 INTO l_title FROM ze_file WHERE ze01 = p_title_code AND ze02 = g_lang
   SELECT ze03 INTO l_msg FROM ze_file WHERE ze01 = p_msg_code AND ze02 = g_lang
 
 
  MENU l_title ATTRIBUTE (STYLE="dialog", COMMENT=l_msg CLIPPED, IMAGE="question")
     ON ACTION yes
        LET l_result = TRUE
        EXIT MENU
     ON ACTION no
        EXIT MENU
     ON IDLE g_idle_seconds
        CALL cl_on_idle()
        CONTINUE MENU
 
  END MENU
 
  IF (INT_FLAG) THEN
     LET INT_FLAG = FALSE
     LET l_result = FALSE
  END IF
 
  RETURN l_result
END FUNCTION
 
 
 
FUNCTION p_zta_diffdb_tab_schema_withfile(p_std_db,p_tag_db)
DEFINE readfile_channel  base.channel,
       l_str             STRING,
       l_right           LIKE type_file.chr1,            #No.FUN-680135 VARCHAR(1)
       l_i               LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_j               LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_k               LIKE type_file.num10,           #No.FUN-680135 INTEGER
       x                 LIKE type_file.num5,            #No.FUN-680135 SMALLINT
       l_std_max         LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_cus_max         LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_command_max     LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_loop            LIKE type_file.chr1,            #No.FUN-680135 VARCHAR(1)
       l_tabname         LIKE type_file.chr20,           #No.FUN-680135 VARCHAR(20)
       l_tabn_chk   RECORD
                         a  LIKE type_file.chr5,         #No.FUN-680135 VARCHAR(5)
                         b  LIKE type_file.chr4          #No.FUN-680135 VARCHAR(4)
                    END RECORD,
       sr           RECORD
                         tabname LIKE ztb_file.ztb01,    #No.FUN-680135 VARCHAR(20)
                         fldname LIKE ztb_file.ztb03,    #No.FUN-680135 VARCHAR(15)
                         oldtype LIKE ztb_file.ztb04,    #No.FUN-680135 VARCHAR(22)
                         newtype LIKE ztb_file.ztb04,    #No.FUN-680135 VARCHAR(22)
                         action  LIKE type_file.chr1000, #No.FUN-680135 VARCHAR(25)
                         command STRING                  #No.FUN-680135 VARCHAR(1000)
                    END RECORD,
       l_command    DYNAMIC ARRAY OF RECORD
                         tabname LIKE ztb_file.ztb01,    #No.FUN-680135 VARCHAR(20)
                         fldname LIKE ztb_file.ztb03,    #No.FUN-680135 VARCHAR(15)
                         oldtype LIKE type_file.chr50, #No.FUN-A60022---modify
                         newtype LIKE type_file.chr50, #No.FUN-A60022---modify
                         action  LIKE type_file.chr1000, #No.FUN-680135 VARCHAR(25)
                         command STRING
                    END RECORD,
       l_std        DYNAMIC ARRAY OF RECORD
                         tabname LIKE ztb_file.ztb01,    #No.FUN-680135 VARCHAR(20)
                         fldname LIKE ztb_file.ztb03,    #No.FUN-680135 VARCHAR(15)
                         type    LIKE ztb_file.ztb04,    #No.FUN-680135 VARCHAR(3)
                         length  LIKE type_file.chr5,    #No.FUN-680135 VARCHAR(5)
                         serial  LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                         check   LIKE type_file.chr1     #No.FUN-680135 VARCHAR(1)
                    END RECORD,
       l_cus        DYNAMIC ARRAY OF RECORD
                         tabname LIKE type_file.chr20,   #No.FUN-680135 VARCHAR(20)
                         fldname LIKE tqw_file.tqw19,    #No.FUN-680135 VARCHAR(15)
                         type    LIKE aag_file.aag31,    #No.FUN-680135 VARCHAR(3)
                         length  LIKE type_file.chr5,    #No.FUN-680135 VARCHAR(5)
                         serial  LIKE type_file.num5,    #No.FUN-680135 SMALLINT
                         check   LIKE type_file.chr1     #No.FUN-680135 VARCHAR(1)
                    END RECORD,
       tok               base.StringTokenizer,
       tabn              base.StringTokenizer,
       l_run_command     STRING,
       p_tag_db          LIKE type_file.chr20,           #No.FUN-680135 VARCHAR(20)
       p_std_db          LIKE type_file.chr20,           #No.FUN-680135 VARCHAR(20)
       l_name            LIKE type_file.chr20,           #No.FUN-680135 VARCHAR(20)
       l_za05            LIKE type_file.chr1000          #No.FUN-680135 VARCHAR(40)
 
 
  #No.FUN-A60022---start

    LET l_str = p_zta_set_db_type("schema")  #FUN-A80029
    IF os.Path.separator() = "/" THEN  
       
      #LET l_str="cd $TOP/",l_str,";diff ",p_tag_db CLIPPED,".sch ",p_std_db CLIPPED,".sch >$TEMPDIR/diffdb.out.",g_pid CLIPPED,";chmod 777 $TEMPDIR/diffdb.out.",g_pid CLIPPED,">/dev/null 2>&1"   #FUN-B30176 mark
       LET l_str="cd ",FGL_GETENV("TOP"),os.Path.separator(),l_str,";diff ",p_tag_db CLIPPED,".sch ",p_std_db CLIPPED,    #FUN-B30176
                  ".sch >",FGL_GETENV("TEMPDIR"),os.Path.separator(),"diffdb.out.",g_pid CLIPPED,";chmod 777 ",           #FUN-B30176
                  FGL_GETENV("TEMPDIR"),os.Path.separator(),"diffdb.out.",g_pid CLIPPED,">",os.Path.separator(),          #FUN-B30176
                  "dev",os.Path.separator(),"null 2>&1"                                                                   #FUN-B30176
    ELSE
       LET l_str="cd %TOP%/",l_str," && diff ",p_tag_db CLIPPED,".sch ",p_std_db CLIPPED,".sch >%TEMPDIR%/diffdb.out.",g_pid CLIPPED," && chmod 777 %TEMPDIR%/diffdb.out.",g_pid CLIPPED,">/dev/null 2>&1"
    END IF
  #No.FUN-A60022---end

    RUN l_str
    CALL fgl_getenv("TEMPDIR") RETURNING l_str
    LET l_str=l_str CLIPPED,"/diffdb.out.",g_pid CLIPPED
    LET readfile_channel=base.channel.create()
    CALL readfile_channel.openfile( l_str, "r" )
    LET l_i=1
    WHILE readfile_channel.read(l_str)
       LET tok = base.StringTokenizer.create(l_str CLIPPED,'^')
       LET l_j=1
       WHILE tok.hasMoreTokens()
             CASE l_j
                WHEN 1
                   LET l_cus[l_i].tabname=tok.nextToken()
                   IF l_cus[l_i].tabname[1,1] NOT MATCHES"[<]" THEN
                      LET l_right='N'
                      EXIT CASE
                   END IF
                   LET tabn=base.StringTokenizer.create(l_cus[l_i].tabname CLIPPED,'_')
                   LET l_right='Y'
                   IF tabn.countTokens()>2 THEN
                      LET l_right='N'
                      EXIT CASE
                   END IF
                   LET l_k=1
                   WHILE tabn.hasMoreTokens()
                         CASE l_k
                            WHEN 1
                              LET l_tabn_chk.a=tabn.nextToken()
                            WHEN 2
                              LET l_tabn_chk.b=tabn.nextToken()
                              IF l_tabn_chk.b!='file' AND l_tabn_chk.a!='< aps' THEN
                                 LET l_right='N'
                                 CONTINUE WHILE
                              END IF
                         END CASE
                         LET l_k=l_k+1
                   END WHILE
                WHEN 2
                   LET l_cus[l_i].fldname=tok.nextToken()
                WHEN 3
                   LET l_cus[l_i].type=tok.nextToken()
                WHEN 4
                   LET l_cus[l_i].length=tok.nextToken()
                WHEN 5
                   LET l_cus[l_i].serial=tok.nextToken()
                   IF l_right='Y' THEN
                      LET l_k=LENGTH(l_cus[l_i].tabname)
                      LET l_cus[l_i].tabname=l_cus[l_i].tabname[3,l_k]
                      LET l_cus[l_i].check='N'
                      LET l_i=l_i+1
                   END IF
             END CASE
             LET l_j=l_j+1
       END WHILE
    END WHILE
    LET l_cus_max=l_i-1
    CALL readfile_channel.close()
    IF l_cus_max=0 THEN
       CALL l_cus.deleteElement(1)
    END IF
 
    CALL fgl_getenv("TEMPDIR") RETURNING l_str
    LET l_str=l_str CLIPPED,"/diffdb.out.",g_pid CLIPPED
    LET readfile_channel=base.channel.create()
    CALL readfile_channel.openfile( l_str, "r" )
    LET l_i=1
    WHILE readfile_channel.read(l_str)
       LET tok = base.StringTokenizer.create(l_str CLIPPED,'^')
       LET l_j=1
       WHILE tok.hasMoreTokens()
             CASE l_j
                WHEN 1
                   LET l_std[l_i].tabname=tok.nextToken()
                   IF l_std[l_i].tabname[1,1] NOT MATCHES"[>]" THEN
                      LET l_right='N'
                      EXIT CASE
                   END IF
                   LET tabn=base.StringTokenizer.create(l_std[l_i].tabname CLIPPED,'_')
                   LET l_right='Y'
                   IF tabn.countTokens()>2 THEN
                      LET l_right='N'
                      EXIT CASE
                   END IF
                   LET l_k=1
                   WHILE tabn.hasMoreTokens()
                         CASE l_k
                            WHEN 1
                              LET l_tabn_chk.a=tabn.nextToken()
                            WHEN 2
                              LET l_tabn_chk.b=tabn.nextToken()
                              IF l_tabn_chk.b!='file' AND l_tabn_chk.a!='> aps' THEN
                                 LET l_right='N'
                                 CONTINUE WHILE
                              END IF
                         END CASE
                         LET l_k=l_k+1
                   END WHILE
                WHEN 2
                   LET l_std[l_i].fldname=tok.nextToken()
                WHEN 3
                   LET l_std[l_i].type=tok.nextToken()
                WHEN 4
                   LET l_std[l_i].length=tok.nextToken()
                WHEN 5
                   LET l_std[l_i].serial=tok.nextToken()
                   IF l_right='Y' THEN
                      LET l_k=LENGTH(l_std[l_i].tabname)
                      LET l_std[l_i].tabname=l_std[l_i].tabname[3,l_k]
                      LET l_std[l_i].check='N'
                      LET l_i=l_i+1
                   END IF
             END CASE
             LET l_j=l_j+1
       END WHILE
    END WHILE
    LET l_std_max=l_i-1
    CALL readfile_channel.close()
    IF l_std_max=0 THEN
       CALL l_std.deleteElement(1)
    END IF
 
#    DECLARE p_zta_dff_za_cur CURSOR FOR
#            SELECT za02,za05 FROM za_file
#             WHERE za01 = "p_zta" AND za03 = g_lang
#    FOREACH p_zta_dff_za_cur INTO g_i,l_za05
#       LET g_x[g_i] = l_za05
#    END FOREACH
    SELECT zz17,zz05 INTO g_len,g_zz05 FROM zz_file WHERE zz01 = 'p_zta'
    IF g_len = 0 OR g_len IS NULL THEN LET g_len = 80 END IF
    FOR g_i = 1 TO g_len LET g_dash[g_i,g_i] = '=' END FOR
    CALL cl_outnam("p_zta") RETURNING l_name
    START REPORT p_zta_dff_rep TO l_name
    LET l_k=1 #紀錄command數目
    FOR l_i=1 TO l_std_max
        FOR l_j=1 TO l_cus_max
            IF l_std[l_i].fldname=l_cus[l_j].fldname AND
               l_std[l_i].tabname=l_cus[l_j].tabname THEN
               LET l_std[l_i].check='Y'
               LET l_cus[l_j].check='Y'
               IF l_std[l_i].type=l_cus[l_j].type THEN
                  IF l_std[l_i].type='7' OR l_std[l_i].type='11' OR
                     l_std[l_i].type='1' OR l_std[l_i].type='2' THEN
                     CONTINUE FOR
                  ELSE
                     IF l_std[l_i].length=l_cus[l_j].length THEN
                        CONTINUE FOR
                     ELSE
                        CASE l_std[l_i].type
                            WHEN 0
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                                 LET l_k=l_k+1
                            WHEN 1
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
                                 #FUN-730016  
                                 #IF g_db_type='IFX' THEN
                                 CASE g_db_type                                  
                                  WHEN "IFX"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' smallint)'
                                  WHEN "ORA"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(5))'
                                  WHEN "MSV"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' smallint' #No.FUN-A60022  #No.FUN-A80029 
                                 END CASE
                                 #END FUN-730016
                                 LET l_k=l_k+1
                            WHEN 2
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
                                 #FUN-730016  
                                 #IF g_db_type='IFX' THEN
                                 CASE g_db_type                                  
                                  WHEN "IFX"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' integer)'
                                  WHEN "ORA"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(10))'
                                  WHEN "MSV"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' integer' #No.FUN-A60022 #No.FUN-A80029
                                 END CASE
                                 #END FUN-730016
                                 LET l_k=l_k+1
                            WHEN 5
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
                                 LET x=l_std[l_i].length/256
                                 LET l_str=x
                                 #FUN-730016  
                                 #IF g_db_type='IFX' THEN
                                 CASE g_db_type                                  
                                  WHEN "IFX"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                  WHEN "ORA"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                  WHEN "MSV"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022 #No.FUN-A80029
                                 END CASE
                                 #END FUN-730016
                                 LET l_str=l_std[l_i].length mod 256
                                 LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,')'
                                 IF g_db_type != 'MSV' THEN
                                    LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                 END IF
                                 LET l_k=l_k+1
                            WHEN 7
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
                                 CASE g_db_type                                  
                                  WHEN "IFX"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date)'
                                  WHEN "ORA"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date)'
                                  WHEN "MSV"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' date'
                                 END CASE
                                 LET l_k=l_k+1
                            WHEN 11
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
                                 #FUN-730016  
                                 #IF g_db_type='IFX' THEN
                                 CASE g_db_type                                  
                                  WHEN "IFX"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' byte)'
                                  WHEN "ORA"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' blob)'
                                  WHEN "MSV"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' byte' #No.FUN-A60022 #No.FUN-A80029
                                 END CASE
                                 #END FUN-730016
                                 LET l_k=l_k+1
                            WHEN 13
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
                                 #FUN-730016  
                                 #IF g_db_type='IFX' THEN
                                 CASE g_db_type                                  
                                  WHEN "IFX"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                                  WHEN "ORA"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                  WHEN "MSV"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'  #No.FUN-A60022 #No.FUN-A80029
                                 END CASE
                                 #END FUN-730016
                                 LET l_k=l_k+1
                            WHEN 201 --非informix db的varchar型態專用
                                 LET l_command[l_k].tabname=l_std[l_i].tabname
                                 LET l_command[l_k].fldname=l_std[l_i].fldname
                                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                 LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                 LET l_command[l_k].action="alter table modify column"
   #No.FUN-A60022---start
                                 #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                 CASE g_db_type                                  
                                  WHEN "IFX"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                                  WHEN "ORA"                                      
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                  WHEN "MSV" 
                                    LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'                               
                                 END CASE
   #No.FUN-A60022---end
                                 LET l_k=l_k+1
                            OTHERWISE
                                 LET x=l_std[l_i].type-256
                                 CASE x
                                     WHEN 0
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
                                          #FUN-730016  
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null)'
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                                           WHEN "MSV"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null' #No.FUN-A60022 #No.FUN-A80029
                                          END CASE
                                          #END FUN-730016
                                          LET l_k=l_k+1
                                     WHEN 1
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
                                          #FUN-730016  
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' smallint not null)'
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(5))'
                                           WHEN "MSV"                                      
                                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' smallint not null' #No.FUN-A60022 #No.FUN-A80029
                                          END CASE
                                          #END FUN-730016
                                          LET l_k=l_k+1
                                     WHEN 2
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
                                          #FUN-730016  
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' integer not null)'
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(10))'
                                           WHEN "MSV"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' integer not null'     #No.FUN-A60022 #No.FUN-A80029
                                          END CASE
                                          #END FUN-730016
                                          LET l_k=l_k+1
                                     WHEN 5
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
                                          LET x=l_std[l_i].length/256
                                          LET l_str=x
                                          #FUN-730016  
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                           WHEN "MSV"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED     #No.FUN-A60022  #No.FUN-A80029
                                          END CASE
                                          LET l_str=l_std[l_i].length mod 256
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null)'
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                                           WHEN "MSV"                                      
                                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null'    #No.FUN-A60022 #No.FUN-A80029
                                          END CASE
                                          #END FUN-730016
                                          LET l_k=l_k+1
                                     WHEN 7
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
                                          #FUN-730016  
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date not null)'
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date)'
                                           WHEN "MSV"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' date  not null' #No.FUN-A60022 #No.FUN-A80029
                                          END CASE
                                          #END FUN-730016
                                          LET l_k=l_k+1
                                     WHEN 11
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
                                          #FUN-730016  
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' byte not null)'
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' blob)'
                                           WHEN "MSV"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' byte not null' #No.FUN-A60022  #No.FUN-A80029
                                          END CASE
                                          #END FUN-730016
                                          LET l_k=l_k+1
                                     WHEN 13
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
                                          #FUN-730016  
                                          #IF g_db_type='IFX' THEN
                                          CASE g_db_type                                  
                                           WHEN "IFX"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                           WHEN "ORA"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                           WHEN "MSV"                                      
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null'    #No.FUN-A60022  #No.FUN-A80029
                                          END CASE
                                          #END FUN-730016
                                          LET l_k=l_k+1
                                     WHEN 201 --非informix db的varchar型態專用
                                          LET l_command[l_k].tabname=l_std[l_i].tabname
                                          LET l_command[l_k].fldname=l_std[l_i].fldname
                                          LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                          LET l_command[l_k].action="alter table modify column"
            #No.FUN-A60022---start
                                          #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                          CASE g_db_type                                  
                                           WHEN "IFX" 
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                                           WHEN "ORA"  
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                           WHEN "MSV" 
                                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar2(',l_std[l_i].length CLIPPED,')'  #No.FUN-A80029
                                          END CASE       
            #No.FUN-A60022---end
                                          LET l_k=l_k+1
                                 END CASE
                        END CASE
                     END IF
                  END IF
               ELSE
                  CASE l_std[l_i].type
                      WHEN 0
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"
                           #FUN-730016  
                           #IF g_db_type='IFX' THEN
                           CASE g_db_type                                  
                            WHEN "IFX"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                            WHEN "ORA"                                      
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') null)'
                              END IF
                            WHEN "MSV"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'      #No.FUN-A60022  #No.FUN-A80029
                           END CASE
                           #END FUN-730016
                           LET l_k=l_k+1
                      WHEN 1
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"
                           #FUN-730016  
                           #IF g_db_type='IFX' THEN
                           CASE g_db_type                                  
                            WHEN "IFX"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' smallint)'
                            WHEN "ORA"                                      
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(5))'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(5) null)'
                              END IF
                            WHEN "MSV"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' smallint)'  #No.FUN-A60022  #No.FUN-A80029
                           END CASE
                           #END FUN-730016
                           LET l_k=l_k+1
                      WHEN 2
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"
                           #FUN-730016  
                           #IF g_db_type='IFX' THEN
                           CASE g_db_type                                  
                            WHEN "IFX"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' integer)'
                            WHEN "ORA"                                      
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(10))'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(10) null)'
                              END IF
                            WHEN "MSV"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' integer'    #No.FUN-A60022  #No.FUN-A80029
                           END CASE
                           #END FUN-730016
                           LET l_k=l_k+1
                      WHEN 5
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"
                           LET x=l_std[l_i].length/256
                           LET l_str=x
                           #FUN-730016  
                           #IF g_db_type='IFX' THEN
                           CASE g_db_type                                  
                            WHEN "IFX"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                              LET l_str=l_std[l_i].length mod 256
                              LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                            WHEN "ORA"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                              LET l_str=l_std[l_i].length mod 256
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                              ELSE
                                 LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') null)'
                              END IF
                            WHEN "MSV"                                      
                              #No.FUN-A60022---start  
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED  #No.FUN-A80029
                              LET l_str=l_std[l_i].length mod 256
                              LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,')'  
                              #No.FUN-A60022---end
                           END CASE
                           #END FUN-730016
                           LET l_k=l_k+1
                      WHEN 7
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"
                           #FUN-730016  
                           #IF g_db_type='IFX' THEN
                           CASE g_db_type                                  
                            WHEN "IFX"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date)'
                            WHEN "ORA"                                      
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date)'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date null)'
                              END IF
                            WHEN "MSV"                                      
                               LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' date' #No.FUN-A60022  #No.FUN-A80029
                           END CASE
                           #END FUN-730016
                           LET l_k=l_k+1
                      WHEN 11
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"
                           #FUN-730016  
                           #IF g_db_type='IFX' THEN
                           CASE g_db_type                                  
                            WHEN "IFX"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' blob)'
                            WHEN "ORA"                                      
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' blob)'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' blob null)'
                              END IF
                            WHEN "MSV"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' byte' #No.FUN-A60022  #No.FUN-A80029
                           END CASE
                           #END FUN-730016
                           LET l_k=l_k+1
                      WHEN 13
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"
                           #FUN-730016  
                           #IF g_db_type='IFX' THEN
                           CASE g_db_type                                  
                            WHEN "IFX"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                            WHEN "ORA"                                      
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') null)'
                              END IF
                            WHEN "MSV"                                      
                              LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')' #No.FUN-A60022  #No.FUN-A80029
                           END CASE
                           #END FUN-730016
                           LET l_k=l_k+1
                      WHEN 201 --非informix db的varchar型態專用
                           LET l_command[l_k].tabname=l_std[l_i].tabname
                           LET l_command[l_k].fldname=l_std[l_i].fldname
                           LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                           LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                           LET l_command[l_k].action="alter table modify column"

                           #No.FUN-A60022---start
                           #IF l_cus[l_j].type < 202 THEN
                           #   LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                           #ELSE
                           #   LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') null)'
                           #END IF
                           CASE g_db_type                                  
                            WHEN "IFX"  
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') null)'
                              END IF                                                             
                            WHEN "ORA"                                      
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') null)'
                              END IF
                            WHEN "MSV"     
                              IF l_cus[l_j].type < 202 THEN
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'      #No.FUN-A80029
                              ELSE
                                 LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') null'  #No.FUN-A80029
                              END IF                             
                           END CASE
                           #No.FUN-A60022---end

                           LET l_k=l_k+1
                      OTHERWISE
                           LET x=l_std[l_i].type-256
                           IF l_cus[l_j].type < 202 THEN
                              CASE x
                                  WHEN 0
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       IF g_db_type = "MSV" THEN 
                                           LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar2(',l_std[l_i].length CLIPPED,') not null'
                                       ELSE
                                           LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null)'
                                       END IF
                                       LET l_k=l_k+1
                                  WHEN 1
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' smallint not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(5) not null)'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' smallint not null'    #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 2
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' integer not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(10) not null)'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' integer not null'    #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 5
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       LET x=l_std[l_i].length/256
                                       LET l_str=x
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED    #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_str=l_std[l_i].length mod 256
                                       IF g_db_type = "MSV"  THEN
                                          LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null'
                                       ELSE
                                          LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null)'
                                       END IF
                                       LET l_k=l_k+1
                                  WHEN 7
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       IF g_db_type = "MSV"  THEN
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' date not null'
                                       ELSE
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date not null)'
                                       END IF
                                       LET l_k=l_k+1
                                  WHEN 11
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' byte not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' blob not null)'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' byte not null' #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 13
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null' #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 201 --非informix db的varchar型態專用
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #No.FUN-A60022---start
                                       #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                        WHEN "MSV"  
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null'  #No.FUN-A80029
                                       END CASE
                                       #No.FUN-A60022---end  
                                       LET l_k=l_k+1
                              END CASE
                           ELSE
                              CASE x
                                  WHEN 0
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null'                                  #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 1
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' smallint not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(5))'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' smallint not null' #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 2
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' integer not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(10))'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' integer not null' #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 5
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       LET x=l_std[l_i].length/256
                                       LET l_str=x
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_str=l_std[l_i].length mod 256
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null'                                  #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 7
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' date)'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' date not null' #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 11
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' byte not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' blob)'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' byte not null' #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 13
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #FUN-730016  
                                       #IF g_db_type='IFX' THEN
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                        WHEN "MSV"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null' #No.FUN-A60022  #No.FUN-A80029
                                       END CASE
                                       #END FUN-730016
                                       LET l_k=l_k+1
                                  WHEN 201 --非informix db的varchar型態專用
                                       LET l_command[l_k].tabname=l_std[l_i].tabname
                                       LET l_command[l_k].fldname=l_std[l_i].fldname
                                       LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                       LET l_command[l_k].action="alter table modify column"
                                       #No.FUN-A60022---start
                                       #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                       CASE g_db_type                                  
                                        WHEN "IFX"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                                        WHEN "ORA"                                      
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' modify(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                                        WHEN "MSV" 
                                          LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' alter column ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'  #No.FUN-A80029
                                       END CASE
                                       #No.FUN-A60022---end 
                                       LET l_k=l_k+1
                              END CASE
                           END IF
                  END CASE
               END IF
            END IF
        END FOR
    END FOR
    LET l_loop='N'
    FOR l_i=1 TO l_std_max
        IF l_std[l_i].check='N' THEN
           LET l_std[l_i].check='Y'
           IF l_std[l_i].serial=1 THEN
              IF l_loop='Y' THEN
                 LET l_command[l_k].tabname=l_tabname
                 LET l_command[l_k].fldname=""
                 LET l_command[l_k].oldtype=""
                 LET l_command[l_k].newtype=""
                 LET l_command[l_k].action="create table"
                 LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                 LET l_k=l_k+1
                 LET l_loop='N'
              END IF
              LET l_loop='Y'
              LET l_tabname=l_std[l_i].tabname
              CASE l_std[l_i].type
                  WHEN 0
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,')'
                  WHEN 1
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       #FUN-730016  
                       #IF g_db_type='IFX' THEN
                       CASE g_db_type                                  
                        WHEN "IFX"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' smallint'
                        WHEN "ORA"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' number(5)'
                        WHEN "MSV"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' smallint' #No.FUN-A60022  #No.FUN-A80029
                       END CASE
                       #END FUN-730016
                  WHEN 2
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       #FUN-730016  
                       #IF g_db_type='IFX' THEN
                       CASE g_db_type                                  
                        WHEN "IFX"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' integer'
                        WHEN "ORA"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' number(10)'
                        WHEN "MSV"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' integer' #No.FUN-A60022  #No.FUN-A80029
                       END CASE
                       #END FUN-730016
                  WHEN 5
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       LET x=l_std[l_i].length/256
                       LET l_str=x
                       #FUN-730016  
                       #IF g_db_type='IFX' THEN
                       CASE g_db_type                                  
                        WHEN "IFX"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                        WHEN "ORA"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                        WHEN "MSV"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                       END CASE
                       #END FUN-730016
                       LET l_str=l_std[l_i].length mod 256
                       LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,')'
                  WHEN 7
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' date'
                  WHEN 11
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       #FUN-730016  
                       #IF g_db_type='IFX' THEN
                       CASE g_db_type                                  
                        WHEN "IFX"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' byte'
                        WHEN "ORA"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' blob'
                        WHEN "MSV"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' byte' #No.FUN-A60022  #No.FUN-A80029
                       END CASE
                       #END FUN-730016
                  WHEN 13
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       #FUN-730016  
                       #IF g_db_type='IFX' THEN
                       CASE g_db_type                                  
                        WHEN "IFX"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,')'
                        WHEN "ORA"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,')'
                        WHEN "MSV"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')' #No.FUN-A60022  #No.FUN-A80029
                       END CASE
                       #END FUN-730016
                  WHEN 201 --非informix db的varchar型態專用
                       LET l_command[l_k].tabname=l_std[l_i].tabname
                       LET l_command[l_k].fldname=l_std[l_i].fldname
                       LET l_command[l_k].oldtype=""
                       LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                       LET l_command[l_k].action="create table"
                       #No.FUN-A60022---start
                       #LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,')'
                       CASE g_db_type                                  
                        WHEN "IFX"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,')'
                        WHEN "ORA"                                      
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,')'
                        WHEN "MSV"  
                          LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')' #No.FUN-A80029
                       END CASE
                       #No.FUN-A60022---end

                  OTHERWISE
                       LET x=l_std[l_i].type-256
                       CASE x
                           WHEN 0
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null'
                           WHEN 1
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                #FUN-730016  
                                #IF g_db_type='IFX' THEN
                                CASE g_db_type                                  
                                 WHEN "IFX"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' smallint not null'
                                 WHEN "ORA"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' number(5) not null'
                                 WHEN "MSV"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' smallint not null' #No.FUN-A60022  #No.FUN-A80029
                                END CASE
                                #END FUN-730016
                           WHEN 2
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                #FUN-730016  
                                #IF g_db_type='IFX' THEN
                                CASE g_db_type                                  
                                 WHEN "IFX"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' integer not null'
                                 WHEN "ORA"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' number(10) not null'
                                 WHEN "MSV"                                      
                                    LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' integer not null' #No.FUN-A60022  #No.FUN-A80029
                                END CASE
                                #END FUN-730016
                           WHEN 5
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                LET x=l_std[l_i].length/256
                                LET l_str=x
                                #FUN-730016  
                                #IF g_db_type='IFX' THEN
                                CASE g_db_type                                  
                                 WHEN "IFX"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                 WHEN "ORA"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                 WHEN "MSV"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                                END CASE
                                #END FUN-730016
                                LET l_str=l_std[l_i].length mod 256
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null'
                           WHEN 7
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' date not null'
                           WHEN 11
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                #FUN-730016  
                                #IF g_db_type='IFX' THEN
                                CASE g_db_type                                  
                                 WHEN "IFX"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' byte not null'
                                 WHEN "ORA"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' blob not null'
                                 WHEN "MSV"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' byte not null' #No.FUN-A60022  #No.FUN-A80029
                                END CASE
                                #END FUN-730016
                           WHEN 13
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                #FUN-730016  
                                #IF g_db_type='IFX' THEN
                                CASE g_db_type                                  
                                 WHEN "IFX"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null'
                                 WHEN "ORA"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null'
                                 WHEN "MSV"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null' #No.FUN-A60022  #No.FUN-A80029
                                END CASE
                                #END FUN-730016
                           WHEN 201 --非informix db的varchar型態專用
                                LET l_command[l_k].tabname=l_std[l_i].tabname
                                LET l_command[l_k].fldname=l_std[l_i].fldname
                                LET l_command[l_k].oldtype=""
                                LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                LET l_command[l_k].action="create table"
                                #No.FUN-A60022---start
                                #LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null'
                                CASE g_db_type                                  
                                 WHEN "IFX"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null'
                                 WHEN "ORA"                                      
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null'
                                 WHEN "MSV" 
                                   LET l_command[l_k].command='create table ',l_std[l_i].tabname CLIPPED,'(',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null'  #No.FUN-A80029
                                END CASE
                                #No.FUN-A60022---end
                       END CASE
              END CASE
           ELSE
              IF l_loop='Y' THEN
                 IF l_tabname=l_std[l_i].tabname THEN
                    CASE l_std[l_i].type
                        WHEN 0
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,')'
                        WHEN 1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' smallint'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' number(5)'
                              WHEN "MSV"                                      
                                #No.FUN-A60022---start
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' smallint' #No.FUN-A80029
                                #No.FUN-A60022---end
                             END CASE
                             #END FUN-730016
                        WHEN 2
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' integer'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' number(10)'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' integer' #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                        WHEN 5
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             LET x=l_std[l_i].length/256
                             LET l_str=x
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                              WHEN "ORA"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                              WHEN "MSV"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                             LET l_str=l_std[l_i].length mod 256
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,')'
                        WHEN 7
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' date'
                        WHEN 11
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' byte'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' blob'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' byte' #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                        WHEN 13
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,')'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,')'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')' #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                        WHEN 201 --非informix db的varchar型態專用
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="create table"
                             #No.FUN-A60022---start
                             #LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,')'
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,')'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,')'
                              WHEN "MSV"  
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'  #No.FUN-A80029
                             END CASE
                             #No.FUN-A60022---end 
                        OTHERWISE
                             LET x=l_std[l_i].type-256
                             CASE x
                                 WHEN 0
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null'
                                 WHEN 1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' smallint not null'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' number(5) not null'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' smallint not null' #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                 WHEN 2
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' integer not null'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' number(10) not null'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' integer not null' #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                 WHEN 5
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      LET x=l_std[l_i].length/256
                                      LET l_str=x
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                      LET l_str=l_std[l_i].length mod 256
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null'
                                 WHEN 7
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' date not null'
                                 WHEN 11
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' byte not null'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' blob not null'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' byte not null' #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                 WHEN 13
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null' #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                 WHEN 201 --非informix db的varchar型態專用
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="create table"
                                      #No.FUN-A60022---start
                                      #LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null'
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null'
                                       WHEN "MSV"   
                                         LET l_command[l_k].command=l_command[l_k].command CLIPPED,', ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null'  #No.FUN-A80029
                                      END CASE
                                      #No.FUN-A60022---end
                             END CASE
                    END CASE
                 ELSE
                    CASE l_std[l_i].type
                        WHEN 0
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             CASE g_db_type                                  
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                              WHEN "MSV"   
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' NVARCHAR(',l_std[l_i].length CLIPPED,')'
                             END CASE
                             LET l_k=l_k+1
                             LET l_loop='N'
                        WHEN 1
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' smallint)'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(5))'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' smallint' #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                             LET l_k=l_k+1
                             LET l_loop='N'
                        WHEN 2
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' integer)'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(10))'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' integer' #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                             LET l_k=l_k+1
                             LET l_loop='N'
                        WHEN 5
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             LET x=l_std[l_i].length/256
                             LET l_str=x
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                              WHEN "MSV"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                             LET l_str=l_std[l_i].length mod 256
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,')'
                             END CASE
                             LET l_k=l_k+1
                             LET l_loop='N'
                        WHEN 7
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date)'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date)'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' date'
                             END CASE
                             LET l_k=l_k+1
                             LET l_loop='N'
                        WHEN 11
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' byte)'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' blob)'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' byte' #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                             LET l_k=l_k+1
                             LET l_loop='N'
                        WHEN 13
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             #FUN-730016
                             #IF g_db_type='IFX' THEN
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                              WHEN "MSV"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'   #No.FUN-A60022  #No.FUN-A80029
                             END CASE
                             #END FUN-730016
                             LET l_k=l_k+1
                             LET l_loop='N'
                        WHEN 201 --非informix db的varchar型態專用
                             LET l_command[l_k].tabname=l_tabname
                             LET l_command[l_k].fldname=""
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=""
                             LET l_command[l_k].action="create table"
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                             LET l_k=l_k+1
                             LET l_command[l_k].tabname=l_std[l_i].tabname
                             LET l_command[l_k].fldname=l_std[l_i].fldname
                             LET l_command[l_k].oldtype=""
                             LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                             LET l_command[l_k].action="alter table add column"
                             #No.FUN-A60022---start
                             #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                             CASE g_db_type                                  
                              WHEN "IFX"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                              WHEN "ORA"                                      
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                              WHEN "MSV"  
                                LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'  #No.FUN-A80029
                             END CASE
                             #No.FUN-A60022---end 
                             LET l_k=l_k+1
                             LET l_loop='N'
                        OTHERWISE
                             LET x=l_std[l_i].type-256
                             CASE x
                                 WHEN 0
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null)'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' VARCHAR2(',l_std[l_i].length CLIPPED,') not null)'
                                       WHEN "MSV"  
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' NVARCHAR(',l_std[l_i].length CLIPPED,') not null'
                                      END CASE
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                                 WHEN 1
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' smallint not null)'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(5) not null)'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' smallint not null' #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                                 WHEN 2
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' integer not null)'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(10) not null)'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' integer not null' #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                                 WHEN 5
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      LET x=l_std[l_i].length/256
                                      LET l_str=x
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                      LET l_str=l_std[l_i].length mod 256
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null)'
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                                 WHEN 7
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date not null)'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date not null)'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' date not null'
                                      END CASE
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                                 WHEN 11
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' byte not null)'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' blob not null)'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' byte not null'  #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                                 WHEN 13
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      #FUN-730016
                                      #IF g_db_type='IFX' THEN
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                       WHEN "ORA"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                       WHEN "MSV"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null'  #No.FUN-A60022  #No.FUN-A80029
                                      END CASE
                                      #END FUN-730016
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                                 WHEN 201 --非informix db的varchar型態專用
                                      LET l_command[l_k].tabname=l_tabname
                                      LET l_command[l_k].fldname=""
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=""
                                      LET l_command[l_k].action="create table"
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
                                      LET l_k=l_k+1
                                      LET l_command[l_k].tabname=l_std[l_i].tabname
                                      LET l_command[l_k].fldname=l_std[l_i].fldname
                                      LET l_command[l_k].oldtype=""
                                      LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                      LET l_command[l_k].action="alter table add column"
                                      #No.FUN-A60022---start
                                      #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                      CASE g_db_type                                  
                                       WHEN "IFX"                                      
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                       WHEN "ORA" 
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'                                     
                                       WHEN "MSV"  
                                         LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null'   #No.FUN-A80029
                                      END CASE  
                                      #No.FUN-A60022---end 
                                      LET l_k=l_k+1
                                      LET l_loop='N'
                             END CASE
                    END CASE
                 END IF
              ELSE
                 CASE l_std[l_i].type
                     WHEN 0
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                           WHEN "ORA" 
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,'))'
                           WHEN "MSV"  
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' NVARCHAR(',l_std[l_i].length CLIPPED,')'
                          END CASE  
                          LET l_k=l_k+1
                     WHEN 1
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          #FUN-730016
                          #IF g_db_type='IFX' THEN
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' smallint)'
                           WHEN "ORA"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(5))'
                           WHEN "MSV"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' smallint' #No.FUN-A60022  #No.FUN-A80029
                          END CASE
                          #END FUN-730016
                          LET l_k=l_k+1
                     WHEN 2
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          #FUN-730016
                          #IF g_db_type='IFX' THEN
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' integer)'
                           WHEN "ORA"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(10))'
                           WHEN "MSV"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' integer'  #No.FUN-A60022  #No.FUN-A80029
                          END CASE
                          #END FUN-730016
                          LET l_k=l_k+1
                     WHEN 5
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          LET x=l_std[l_i].length/256
                          LET l_str=x
                          #FUN-730016
                          #IF g_db_type='IFX' THEN
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                           WHEN "ORA"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                           WHEN "MSV"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                          END CASE
                          #END FUN-730016
                          LET l_str=l_std[l_i].length mod 256
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                           WHEN "ORA"                                      
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,'))'
                           WHEN "MSV"                                      
                             LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,')'
                          END CASE
                          LET l_k=l_k+1
                     WHEN 7
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date)'
                           WHEN "ORA"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date)'
                           WHEN "MSV"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' date'
                          END CASE
                          LET l_k=l_k+1
                     WHEN 11
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          #FUN-730016
                          #IF g_db_type='IFX' THEN
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' byte)'
                           WHEN "ORA"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' blob)'
                           WHEN "MSV"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' byte' #No.FUN-A60022  #No.FUN-A80029
                          END CASE
                          #END FUN-730016
                          LET l_k=l_k+1
                     WHEN 13
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          #FUN-730016
                          #IF g_db_type='IFX' THEN
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                           WHEN "ORA"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                           WHEN "MSV"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')' #No.FUN-A60022  #No.FUN-A80029
                          END CASE
                          #END FUN-730016
                          LET l_k=l_k+1
                     WHEN 201 --非informix db的varchar型態專用
                          LET l_command[l_k].tabname=l_std[l_i].tabname
                          LET l_command[l_k].fldname=l_std[l_i].fldname
                          LET l_command[l_k].oldtype=""
                          LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                          LET l_command[l_k].action="alter table add column"
                          #No.FUN-A60022---start
                          #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                          CASE g_db_type                                  
                           WHEN "IFX"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,'))'
                           WHEN "ORA"                                      
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,'))'
                           WHEN "MSV" 
                             LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,')'   #No.FUN-A80029
                          END CASE
                          #No.FUN-A60022---end
                          LET l_k=l_k+1
                     OTHERWISE
                          LET x=l_std[l_i].type-256
                          CASE x
                              WHEN 0
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null)'
                                    WHEN "MSV" 
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' VARCHAR(',l_std[l_i].length CLIPPED,') not null'
                                   END CASE
                                   LET l_k=l_k+1
                              WHEN 1
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   #FUN-730016
                                   #IF g_db_type='IFX' THEN
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' smallint not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(5) not null)'
                                    WHEN "MSV"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' smallint not null' #No.FUN-A60022  #No.FUN-A80029
                                   END CASE
                                   #END FUN-730016
                                   LET l_k=l_k+1
                              WHEN 2
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   #FUN-730016
                                   #IF g_db_type='IFX' THEN
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' integer not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(10) not null)'
                                    WHEN "MSV"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' integer not null' #No.FUN-A60022  #No.FUN-A80029
                                   END CASE
                                   #END FUN-730016
                                   LET l_k=l_k+1
                              WHEN 5
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   LET x=l_std[l_i].length/256
                                   LET l_str=x
                                   #FUN-730016
                                   #IF g_db_type='IFX' THEN
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' number(',l_str CLIPPED
                                    WHEN "MSV"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' decimal(',l_str CLIPPED #No.FUN-A60022  #No.FUN-A80029
                                   END CASE
                                   #END FUN-730016
                                   LET l_str=l_std[l_i].length mod 256
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null)'
                                    WHEN "MSV"                                      
                                      LET l_command[l_k].command=l_command[l_k].command CLIPPED,',',l_str CLIPPED,') not null'
                                   END CASE
                                   LET l_k=l_k+1
                              WHEN 7
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' date not null)'
                                    WHEN "MSV"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' date not null'
                                   END CASE
                                   LET l_k=l_k+1
                              WHEN 11
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   #FUN-730016
                                   #IF g_db_type='IFX' THEN
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' byte not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' blob not null)'
                                    WHEN "MSV"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' byte not null' #No.FUN-A60022  #No.FUN-A80029
                                   END CASE
                                   #END FUN-730016
                                   LET l_k=l_k+1
                              WHEN 13
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   #FUN-730016
                                   #IF g_db_type='IFX' THEN
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                    WHEN "MSV"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null' #No.FUN-A60022  #No.FUN-A80029
                                   END CASE
                                   #END FUN-730016
                                   LET l_k=l_k+1
                              WHEN 201 --非informix db的varchar型態專用
                                   LET l_command[l_k].tabname=l_std[l_i].tabname
                                   LET l_command[l_k].fldname=l_std[l_i].fldname
                                   LET l_command[l_k].oldtype=""
                                   LET l_command[l_k].newtype=p_zta_dff_parse(l_std[l_i].type,l_std[l_i].length)
                                   LET l_command[l_k].action="alter table add column"
                                   #No.FUN-A60022---start
                                   #LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                   CASE g_db_type                                  
                                    WHEN "IFX"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar(',l_std[l_i].length CLIPPED,') not null)'
                                    WHEN "ORA"                                      
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add(',l_std[l_i].fldname CLIPPED,' varchar2(',l_std[l_i].length CLIPPED,') not null)'
                                    WHEN "MSV"   
                                      LET l_command[l_k].command='alter table ',l_std[l_i].tabname CLIPPED,' add ',l_std[l_i].fldname CLIPPED,' nvarchar(',l_std[l_i].length CLIPPED,') not null'  #No.FUN-A80029
                                   END CASE
                                   #No.FUN-A60022---end
                                   LET l_k=l_k+1
                          END CASE
                 END CASE
              END IF
           END IF
        END IF
    END FOR
    IF l_loop='Y' THEN
       LET l_command[l_k].tabname=l_tabname
       LET l_command[l_k].fldname=""
       LET l_command[l_k].oldtype=""
       LET l_command[l_k].newtype=""
       LET l_command[l_k].action="create table"
       LET l_command[l_k].command=l_command[l_k].command CLIPPED,')'
       LET l_k=l_k+1
    END IF
    LET l_tabname=''
#drop的部份,暫時先拿掉,要用時再去除mark,且需再經過測試
    FOR l_j=1 TO l_cus_max
        IF l_cus[l_j].check='N' THEN
           LET l_cus[l_j].check='Y'
           IF l_cus[l_j].serial=1 THEN
              LET l_command[l_k].tabname=l_cus[l_j].tabname
--              LET l_command[l_k].fldname=l_cus[l_j].fldname
--              LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
              LET l_command[l_k].fldname=""
              LET l_command[l_k].oldtype=""
              LET l_command[l_k].newtype=""
              LET l_command[l_k].action="drop table"
              LET l_tabname=l_cus[l_j].tabname
              LET l_command[l_k].command='drop table ',l_cus[l_j].tabname CLIPPED
              LET l_k=l_k+1
           ELSE
--display "l_cus_fldname:",l_cus[l_j].fldname
--display "l_tabname:",l_tabname
--display "l_cus_tabname:",l_cus[l_j].tabname
              IF l_tabname!=l_cus[l_j].tabname OR l_tabname is null THEN
                 LET l_command[l_k].tabname=l_cus[l_j].tabname
                 LET l_command[l_k].fldname=l_cus[l_j].fldname
                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
                 LET l_command[l_k].newtype=""
                 LET l_command[l_k].action="alter table drop column"
                 CASE g_db_type                                  
                  WHEN "IFX"                                      
                    LET l_command[l_k].command='alter table ',l_cus[l_j].tabname CLIPPED,' drop(',l_cus[l_j].fldname CLIPPED,')'
                  WHEN "ORA"                                      
                    LET l_command[l_k].command='alter table ',l_cus[l_j].tabname CLIPPED,' drop(',l_cus[l_j].fldname CLIPPED,')'
                  WHEN "MSV"   
                    LET l_command[l_k].command='alter table ',l_cus[l_j].tabname CLIPPED,' drop ',l_cus[l_j].fldname CLIPPED
                 END CASE
                 LET l_k=l_k+1
--              ELSE   #### just for p_zta 差異報表 不存command 因無command
--                 LET l_command[l_k].tabname=l_cus[l_j].tabname
--                 LET l_command[l_k].fldname=l_cus[l_j].fldname
--                 LET l_command[l_k].oldtype=p_zta_dff_parse(l_cus[l_j].type,l_cus[l_j].length)
--                 LET l_command[l_k].newtype=""
--                 LET l_command[l_k].action="drop table"
              END IF
           END IF
        END IF
    END FOR
 
    LET l_command_max=l_k-1
 
--    LET readfile_channel=base.channel.create()
--    CALL readfile_channel.setdelimiter("")
--    CALL fgl_getenv("TEMPDIR") RETURNING l_str
--    LET l_str=l_str CLIPPED,"/command"
--    CALL readfile_channel.openfile(l_str CLIPPED, "w" )
    FOR l_k=1 TO l_command_max
--        CALL readfile_channel.write(l_command[l_k].command CLIPPED)
        IF NOT p_zta_dff_synonym_check(l_command[l_k].tabname,p_tag_db) THEN
           LET sr.tabname=l_command[l_k].tabname
           LET sr.fldname=l_command[l_k].fldname
           LET sr.oldtype=l_command[l_k].oldtype
           LET sr.newtype=l_command[l_k].newtype
           LET sr.action=l_command[l_k].action
           LET sr.command=l_command[l_k].command
           OUTPUT TO REPORT p_zta_dff_rep(sr.*)
        END IF
    END FOR
--    CALL readfile_channel.close()
    LET l_run_command="chmod 777 ",l_str CLIPPED,">/dev/null 2>&1"
    RUN l_run_command
 
--    LET readfile_channel=base.channel.create()
--    CALL readfile_channel.setdelimiter("")
--    CALL fgl_getenv("TEMPDIR") RETURNING l_str
--    LET l_str=l_str CLIPPED,"/command.sql"
--    CALL readfile_channel.openfile(l_str CLIPPED, "w" )
--    FOR l_k=1 TO l_command_max
--        LET l_command[l_k].command=l_command[l_k].command CLIPPED,';'
--        CALL readfile_channel.write(l_command[l_k].command CLIPPED)
--    END FOR
--    CALL readfile_channel.close()
--    LET l_run_command="chmod 777 ",l_str CLIPPED
--    RUN l_run_command
--    DISPLAY "已產生sql檔",l_str CLIPPED
    FINISH REPORT p_zta_dff_rep
    CALL cl_prt(l_name," ","1",g_len)
END FUNCTION
 
 
FUNCTION p_zta_diffdb_idx_schema_withfile(p_std_db,p_tag_db)
DEFINE readfile_channel   base.channel,
       tok                base.StringTokenizer,
       l_str              STRING,
       l_right            LIKE type_file.chr1,            #No.FUN-680135 VARCHAR(1)
       l_std         DYNAMIC ARRAY OF RECORD
                          idxname LIKE ztc_file.ztc03,    #No.FUN-680135 VARCHAR(20)
                          unique  LIKE ztc_file.ztc06,    #No.FUN-680135 VARCHAR(1)
                          columns LIKE ztc_file.ztc04,    #No.FUN-680135 VARCHAR(400)
                          tabname LIKE ztc_file.ztc01,    #No.FUN-680135 VARCHAR(15)
                          check   LIKE ztc_file.ztc05     #No.FUN-680135 VARCHAR(1)
                     END RECORD,
       l_cus         DYNAMIC ARRAY OF RECORD
                          idxname LIKE ztc_file.ztc03,    #No.FUN-680135 VARCHAR(20)
                          unique  LIKE ztc_file.ztc06,    #No.FUN-680135 VARCHAR(1)
                          columns LIKE ztc_file.ztc04,    #No.FUN-680135 VARCHAR(400)
                          tabname LIKE ztc_file.ztc01,    #No.FUN-680135 VARCHAR(15)
                          check   LIKE ztc_file.ztc05     #No.FUN-680135 VARCHAR(1)
                     END RECORD,
       l_cus_max          LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_std_max          LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_i                LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_j                LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_k                LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_length           LIKE type_file.num5,            #No.FUN-680135 SMALLINT
       l_command_max      LIKE type_file.num10,           #No.FUN-680135 INTEGER
       l_command          DYNAMIC ARRAY OF STRING,
       l_run_command      STRING,
       p_tag_db           LIKE type_file.chr20,           #No.FUN-680135 VARCHAR(20)
       p_std_db           LIKE type_file.chr20            #No.FUN-680135 VARCHAR(20)
 
    LET l_str="diff ",p_tag_db CLIPPED," ",p_std_db CLIPPED," >$TEMPDIR/diffdb_idx.out.",g_pid CLIPPED,";chmod 777 $TEMPDIR/diffdb_idx.out.",g_pid CLIPPED,">/dev/null 2>&1"
    RUN l_str
    CALL fgl_getenv("TEMPDIR") RETURNING l_str
    LET l_str=l_str CLIPPED,"/diffdb_idx.out.",g_pid CLIPPED
    LET readfile_channel=base.channel.create()
    CALL readfile_channel.openfile( l_str, "r" )
    LET l_i=1
    WHILE readfile_channel.read(l_str)
       LET tok = base.StringTokenizer.create(l_str CLIPPED,'^')
       LET l_j=1
       WHILE tok.hasMoreTokens()
             CASE l_j
                WHEN 1
                   LET l_cus[l_i].idxname=tok.nextToken()
                   IF l_cus[l_i].idxname[1,1] NOT MATCHES"[<]" THEN
                      LET l_right='N'
                      EXIT CASE
                   END IF
                   LET l_right='Y'
                WHEN 2
                   LET l_cus[l_i].unique=tok.nextToken()
                WHEN 3
                   LET l_cus[l_i].columns=tok.nextToken()
                WHEN 4
                   LET l_cus[l_i].tabname=tok.nextToken()
                   IF l_right='Y' THEN
                      LET l_k=LENGTH(l_cus[l_i].idxname)
                      LET l_cus[l_i].idxname=l_cus[l_i].idxname[3,l_k]
                      LET l_cus[l_i].check='N'
                      LET l_i=l_i+1
                   END IF
             END CASE
             LET l_j=l_j+1
       END WHILE
    END WHILE
    LET l_cus_max=l_i-1
    CALL readfile_channel.close()
    IF l_cus_max=0 THEN
       CALL l_cus.deleteElement(1)
    END IF
 
    CALL fgl_getenv("TEMPDIR") RETURNING l_str
    LET l_str=l_str CLIPPED,"/diffdb_idx.out.",g_pid CLIPPED
    LET readfile_channel=base.channel.create()
    CALL readfile_channel.openfile( l_str, "r" )
    LET l_i=1
    WHILE readfile_channel.read(l_str)
       LET tok = base.StringTokenizer.create(l_str CLIPPED,'^')
       LET l_j=1
       WHILE tok.hasMoreTokens()
             CASE l_j
                WHEN 1
                   LET l_std[l_i].idxname=tok.nextToken()
                   IF l_std[l_i].idxname[1,1] NOT MATCHES"[>]" THEN
                      LET l_right='N'
                      EXIT CASE
                   END IF
                   LET l_right='Y'
                WHEN 2
                   LET l_std[l_i].unique=tok.nextToken()
                WHEN 3
                   LET l_std[l_i].columns=tok.nextToken()
                WHEN 4
                   LET l_std[l_i].tabname=tok.nextToken()
                   IF l_right='Y' THEN
                      LET l_k=LENGTH(l_std[l_i].idxname)
                      LET l_std[l_i].idxname=l_std[l_i].idxname[3,l_k]
                      LET l_std[l_i].check='N'
                      LET l_i=l_i+1
                   END IF
             END CASE
             LET l_j=l_j+1
       END WHILE
    END WHILE
    LET l_std_max=l_i-1
    CALL readfile_channel.close()
    IF l_std_max=0 THEN
       CALL l_std.deleteElement(1)
    END IF
    LET l_k=1
    FOR l_i=1 TO l_std_max
        FOR l_j=1 TO l_cus_max
            IF l_std[l_i].idxname=l_cus[l_j].idxname THEN
               LET l_std[l_i].check='Y'
               LET l_cus[l_j].check='Y'
               IF l_std[l_i].unique=l_cus[l_j].unique THEN
                  IF l_std[l_i].columns=l_cus[l_j].columns THEN
                     CONTINUE FOR
                  ELSE
                     LET l_command[l_k]="drop index ",l_cus[l_j].idxname CLIPPED
                     LET l_k=l_k+1
                     IF l_std[l_i].unique='U' THEN
                        LET l_command[l_k]="create unique index ",l_std[l_i].idxname CLIPPED," on ",l_std[l_i].tabname CLIPPED,"(",l_std[l_i].columns CLIPPED,")"
                     ELSE
                        LET l_command[l_k]="create index ",l_std[l_i].idxname CLIPPED," on ",l_std[l_i].tabname CLIPPED,"(",l_std[l_i].columns CLIPPED,")"
                     END IF
                     LET l_k=l_k+1
                  END IF
               ELSE
                  LET l_command[l_k]="drop index ",l_cus[l_j].idxname CLIPPED
                  LET l_k=l_k+1
                  IF l_std[l_i].unique='U' THEN
                     LET l_command[l_k]="create unique index ",l_std[l_i].idxname CLIPPED," on ",l_std[l_i].tabname CLIPPED,"(",l_std[l_i].columns CLIPPED,")"
                  ELSE
                     LET l_command[l_k]="create index ",l_std[l_i].idxname CLIPPED," on ",l_std[l_i].tabname CLIPPED,"(",l_std[l_i].columns CLIPPED,")"
                  END IF
                  LET l_k=l_k+1
               END IF
            END IF
        END FOR
    END FOR
    FOR l_i=1 TO l_std_max
        IF l_std[l_i].check='N' THEN
           LET l_std[l_i].check='Y'
           IF l_std[l_i].unique='U' THEN
              LET l_command[l_k]="create unique index ",l_std[l_i].idxname CLIPPED," on ",l_std[l_i].tabname CLIPPED,"(",l_std[l_i].columns CLIPPED,")"
           ELSE
              LET l_command[l_k]="create index ",l_std[l_i].idxname CLIPPED," on ",l_std[l_i].tabname CLIPPED,"(",l_std[l_i].columns CLIPPED,")"
           END IF
           LET l_k=l_k+1
        END IF
    END FOR
    LET l_command_max=l_k-1
 
LET readfile_channel=base.channel.create()
CALL readfile_channel.setdelimiter("")
CALL fgl_getenv("TEMPDIR") RETURNING l_str
LET l_str=l_str CLIPPED,"/index"
CALL readfile_channel.openfile(l_str CLIPPED, "w" )
FOR l_k=1 TO l_command_max
    CALL readfile_channel.write(l_command[l_k] CLIPPED)
END FOR
CALL readfile_channel.close()
    LET l_run_command="chmod 777 ",l_str CLIPPED,">/dev/null 2>&1"
    RUN l_run_command
 
LET readfile_channel=base.channel.create()
CALL readfile_channel.setdelimiter("")
CALL fgl_getenv("TEMPDIR") RETURNING l_str
LET l_str=l_str CLIPPED,"/index.sql"
CALL readfile_channel.openfile(l_str CLIPPED, "w" )
FOR l_k=1 TO l_command_max
    LET l_command[l_k]=l_command[l_k] CLIPPED,';'
    CALL readfile_channel.write(l_command[l_k] CLIPPED)
END FOR
CALL readfile_channel.close()
    LET l_run_command="chmod 777 ",l_str CLIPPED,">/dev/null 2>&1"
    RUN l_run_command
    DISPLAY "已產生sql檔",l_str CLIPPED
 
{    LET l_str="rm $TEMPDIR/sqlerr_index.log > /dev/null 2>&1"
    RUN l_str
    LET readfile_channel=base.channel.create()
    CALL readfile_channel.setdelimiter("")
    CALL fgl_getenv("TEMPDIR") RETURNING l_str
    LET l_str=l_str CLIPPED,"/",g_date CLIPPED,"/sqlerr_index.log"
    CALL readfile_channel.openfile(l_str CLIPPED, "w" )
    FOR l_k=1 TO l_command_max
#        LET l_length=LENGTH(l_command[l_k])
#        LET l_command[l_k]=l_command[l_k][1,l_length-1]
        EXECUTE IMMEDIATE l_command[l_k]
        IF l_command[l_k][1,4] != "drop" THEN
           IF SQLCA.SQLCODE THEN
              LET l_str=SQLCA.SQLCODE USING "--------",l_command[l_k] CLIPPED
              CALL readfile_channel.write(l_str)
              display l_str
           END IF
        END IF
    END FOR
    CALL readfile_channel.close()
}
END FUNCTION
 
 
FUNCTION p_zta_dff_parse(p_type,p_length)
DEFINE p_type     LIKE type_file.chr3,    #No.FUN-680135 VARCHAR(3)
       p_length   LIKE type_file.chr5,    #No.FUN-680135 VARCHAR(5)
       l_str      STRING,
       x          LIKE type_file.num5,    #No.FUN-680135 SMALLINT
       l_result   LIKE type_file.chr50    #No.FUN-680135 VARCHAR(20) #No.FUN-A60022
 
CASE p_type
     WHEN '0'
          LET l_result="char(",p_length CLIPPED,")"
     WHEN '1'
          #FUN-730016
          #IF g_db_type='IFX' THEN
          CASE g_db_type                                  
           WHEN "IFX"                                      
             LET l_result="smallint"
           WHEN "ORA"                                      
             LET l_result="number(5)"
           WHEN "MSV"                
             LET l_result="smallint"  #No.FUN-A60022                      
          END CASE
          #END FUN-730016
     WHEN '2'
          #FUN-730016
          #IF g_db_type='IFX' THEN
          CASE g_db_type                                  
           WHEN "IFX"                                      
             LET l_result="integer"
           WHEN "ORA"                                      
             LET l_result="number(10)"
           WHEN "MSV"                                      
             LET l_result="integer"      #No.FUN-A60022
          END CASE
          #END FUN-730016
     WHEN '5'
          LET x=p_length/256
          LET l_str=x
          #FUN-730016
          #IF g_db_type='IFX' THEN
          CASE g_db_type                                  
           WHEN "IFX"                                      
             LET l_result="decimal(",l_str CLIPPED,','
           WHEN "ORA"                                      
             LET l_result="number(",l_str CLIPPED,','
           WHEN "MSV"                                      
             LET l_result="decimal(",l_str CLIPPED,','    #No.FUN-A60022
          END CASE
          #END FUN-730016
          LET l_str=p_length mod 256
          LET l_result=l_result CLIPPED,l_str CLIPPED,")"
     WHEN '7'
          LET l_result="date"
     WHEN '11'
          #FUN-730016
          #IF g_db_type='IFX' THEN
          CASE g_db_type                                  
           WHEN "IFX"                                      
             LET l_result="byte"
           WHEN "ORA"                                      
             LET l_result="blob"
           WHEN "MSV"                                      
             LET l_result="byte"         #No.FUN-A60022
          END CASE
          #END FUN-730016
     WHEN '13'
          #FUN-730016
          #IF g_db_type='IFX' THEN
          CASE g_db_type                                  
           WHEN "IFX"                                      
             LET l_result="varchar(",p_length CLIPPED,")"
           WHEN "ORA"                                      
             LET l_result="varchar2(",p_length CLIPPED,")"
           WHEN "MSV"                    
             LET l_result="nvarchar(",p_length CLIPPED,")"    #No.FUN-A60022                  
          END CASE
          #END FUN-730016
     WHEN '201'
          #No.FUN-A60022---start
          #LET l_result="varchar2(",p_length CLIPPED,")"           
          CASE g_db_type                                  
           WHEN "IFX"   
             LET l_result="varchar(",p_length CLIPPED,")"                                   
           WHEN "ORA"  
             LET l_result="varchar2(",p_length CLIPPED,")"                                    
           WHEN "MSV"     
             LET l_result="nvarchar(",p_length CLIPPED,")"                          
          END CASE
          #No.FUN-A60022---end 
     OTHERWISE
          LET x=p_type-256
          CASE x
               WHEN 0
                    LET l_result="char(",p_length CLIPPED,")"
               WHEN 1
                    #FUN-730016
                    #IF g_db_type='IFX' THEN
                    CASE g_db_type                                  
                     WHEN "IFX"                                      
                       LET l_result="smallint"
                     WHEN "ORA"                                      
                       LET l_result="number(5)"
                     WHEN "MSV"                                      
                       LET l_result="smallint"
                    END CASE
                    #END FUN-730016
               WHEN 2
                    #FUN-730016
                    #IF g_db_type='IFX' THEN
                    CASE g_db_type                                  
                     WHEN "IFX"                                      
                       LET l_result="integer"
                     WHEN "ORA"                                      
                       LET l_result="number(10)"
                     WHEN "MSV"                                      
                       LET l_result="integer"
                    END CASE
                    #END FUN-730016
               WHEN 5
                    LET l_str=p_length/256
                    #FUN-730016
                    #IF g_db_type='IFX' THEN
                    CASE g_db_type                                  
                     WHEN "IFX"                                      
                       LET l_result="decimal(",l_str CLIPPED,','
                     WHEN "ORA"                                      
                       LET l_result="number(",l_str CLIPPED,','
                     WHEN "MSV"                                      
                       LET l_result="decimal(",l_str CLIPPED,','
                    END CASE
                    #END FUN-730016
                    LET l_str=p_length mod 256
                    LET l_result=l_result CLIPPED,l_str CLIPPED,")"
               WHEN 7
                    LET l_result="date"
               WHEN 11
                    #FUN-730016
                    #IF g_db_type='IFX' THEN
                    CASE g_db_type                                  
                     WHEN "IFX"                                      
                       LET l_result="byte"
                     WHEN "ORA"                                      
                       LET l_result="blob"
                     WHEN "MSV"                                      
                       LET l_result="byte"       #No.FUN-A60022
                    END CASE
                    #END FUN-730016
               WHEN 13
                    #FUN-730016
                    #IF g_db_type='IFX' THEN
                    CASE g_db_type                                  
                     WHEN "IFX"                                      
                       LET l_result="varchar(",p_length CLIPPED,")"
                     WHEN "ORA"                                      
                       LET l_result="varchar2(",p_length CLIPPED,")"
                     WHEN "MSV"                                      
                       LET l_result="nvarchar(",p_length CLIPPED,")"
                    END CASE
                    #END FUN-730016
               WHEN 201
                    #No.FUN-A60022---start
                    #LET l_result="varchar2(",p_length CLIPPED,")"
                      
                    CASE g_db_type                                  
                     WHEN "IFX"                                      
                       LET l_result="varchar(",p_length CLIPPED,")"
                     WHEN "ORA"   
                       LET l_result="varchar2(",p_length CLIPPED,")"                                   
                     WHEN "MSV" 
                       LET l_result="nvarchar(",p_length CLIPPED,")"                                     
                    END CASE
                    #No.FUN-A60022---end
          END CASE
          IF cl_null(l_result) THEN
             LET l_result=l_result CLIPPED," not null"
          ELSE
             LET l_result="not null"
          END IF
END CASE
RETURN l_result
END FUNCTION
 
 
REPORT p_zta_dff_rep(sr)
DEFINE sr         RECORD
                       tabname LIKE ztb_file.ztb01,    #No.FUN-680135 VARCHAR(20)
                       fldname LIKE ztb_file.ztb03,    #No.FUN-680135 VARCHAR(25)
                       oldtype LIKE ztb_file.ztb04,    #No.FUN-680135 VARCHAR(22)
                       newtype LIKE ztb_file.ztb04,    #No.FUN-680135 VARCHAR(22)
                       action  LIKE type_file.chr30,   #No.FUN-680135 VARCHAR(25) #TQC-6C0116
                       command LIKE type_file.chr1000  #No.FUN-680135 VARCHAR(1000) #TQC-6C0116
                  END RECORD,
       l_trailer_sw    LIKE type_file.num5             #No.FUN-680135 SMALLINT
 
   OUTPUT
       TOP MARGIN g_top_margin
       LEFT MARGIN g_left_margin
       BOTTOM MARGIN g_bottom_margin
       PAGE LENGTH g_page_line
 
    ORDER BY  sr.tabname,sr.fldname
    FORMAT
    PAGE HEADER
         PRINT COLUMN (g_len - LENGTH(g_x[1]) )/2,g_x[63] CLIPPED
         PRINT COLUMN (g_len - 5 - LENGTH(g_user)),"FROM:",g_user
         PRINT g_x[2] CLIPPED,g_today," ",TIME,
               COLUMN (g_len - 10 ),"PAGE:",PAGENO USING "<<<"
         PRINT g_dash[1,g_len]
         PRINT COLUMN 4,g_x[67],COLUMN 21,g_x[64],COLUMN 36,g_x[65],COLUMN 60,g_x[66],COLUMN 84,g_x[68]
         PRINT "---------------  -------------  ----------------------  ----------------------  -------------------------"
 
    BEFORE GROUP OF sr.tabname
         PRINT sr.tabname;
    ON EVERY ROW
         PRINT COLUMN 18,sr.fldname,COLUMN 33,sr.oldtype,COLUMN 57,sr.newtype,COLUMN 81,sr.action
 
    ON LAST ROW
       PRINT g_dash[1,g_len]
       LET l_trailer_sw=1
 
    PAGE TRAILER
       IF l_trailer_sw=0 THEN
          PRINT g_dash[1,g_len]
       ELSE
          SKIP 1 LINE
       END IF
END REPORT
 
#FUN-9B0011 -- start -- 
#此function 移至 p_dif_views.4gl 程式裡 
#FUNCTION p_zta_dff_synonym_check(p_tabname,p_tag_db)
#DEFINE p_tabname   LIKE type_file.chr20,   #No.FUN-680135 VARCHAR(20)
#      l_result    LIKE type_file.chr1,    #No.FUN-680135 VARCHAR(1)
#      p_tag_db    LIKE type_file.chr20    #No.FUN-680135 VARCHAR(20)
#
#      LET l_result='0'
#      #FUN-730016
#      #IF g_db_type='IFX' THEN
#      CASE g_db_type                                  
#       WHEN "IFX"                                      
#         select count(*) into l_result from syssyntable
#          where tabname=p_tabname
#
#       WHEN "ORA"                                      
#         select count(1) into l_result from all_synonyms
#          where lower(synonym_name)=p_tabname and lower(owner)=p_tag_db
#
#       WHEN "MSV"                                      
#      END CASE
#      #END FUN-730016
#      RETURN l_result
#END FUNCTION
#FUN-9B0011 -- end -- 
 
FUNCTION p_zta_exp2excel()
   DEFINE l_sheet,l_cells,l_values  STRING
   DEFINE res,l_i                   LIKE type_file.num5    #No.FUN-680135 SMALLINT
   DEFINE l_bufstr                  base.StringBuffer      #No.FUN-940108
 
   IF cl_null(g_zta.zta01) THEN
      CALL cl_err("",-400,0)
      RETURN
   END IF
 
   LET l_bufstr = base.StringBuffer.create()    #FUN-940108
 
   CALL ui.Interface.frontCall("standard","shellexec",["excel"] ,res)
   CALL checkError(res)
   SLEEP 2
   #LET l_sheet="Sheet1"                   #FUN-C80070 mark
   LET l_sheet=cl_getsheetname() CLIPPED ,'1' #FUN-C80070
   CALL ui.Interface.frontCall("WINDDE","DDEConnect", ["EXCEL",l_sheet], res)
 
 
   LET l_cells ="R2C1"
   LET l_values=g_gat03 CLIPPED||'('||g_zta.zta01 CLIPPED||')'
   CALL ui.Interface.frontCall("WINDDE","DDEPoke",
               ["EXCEL",l_sheet,l_cells,l_values],[res])
   LET l_cells ="R4C1"
   LET l_values="欄位代號"
   CALL ui.Interface.frontCall("WINDDE","DDEPoke",
               ["EXCEL",l_sheet,l_cells,l_values],[res])
   FOR l_i=1 TO g_ztb.getLength()
       LET l_cells=l_cells.subString(1,3)||l_i+1
       LET l_values=g_ztb[l_i].ztb03 CLIPPED
       CALL ui.Interface.frontCall("WINDDE","DDEPoke",
                    ["EXCEL",l_sheet,l_cells,l_values],[res])
   END FOR
   LET l_cells ="R5C1"
   LET l_values="欄寬"
   CALL ui.Interface.frontCall("WINDDE","DDEPoke",
               ["EXCEL",l_sheet,l_cells,l_values],[res])
   FOR l_i=1 TO g_ztb.getLength()
       LET l_cells=l_cells.subString(1,3)||l_i+1
       IF g_ztb[l_i].ztb04="date" or g_ztb[l_i].ztb04="smallint" or
          g_ztb[l_i].ztb04="integer" THEN
          LET l_values=g_ztb[l_i].ztb04 CLIPPED
       ELSE
          LET l_values=g_ztb[l_i].ztb04 CLIPPED||'('||
                       g_ztb[l_i].ztb08 CLIPPED||')'
       END IF
       CALL ui.Interface.frontCall("WINDDE","DDEPoke",
                    ["EXCEL",l_sheet,l_cells,l_values],[res])
   END FOR
   LET l_cells ="R6C1"
   LET l_values="欄位名稱"
   CALL ui.Interface.frontCall("WINDDE","DDEPoke",
               ["EXCEL",l_sheet,l_cells,l_values],[res])
   FOR l_i=1 TO g_ztb.getLength()
       LET l_cells=l_cells.subString(1,3)||l_i+1
       LET l_values=g_ztb[l_i].gaq03 CLIPPED
 
       CALL ui.Interface.frontCall("WINDDE","DDEPoke",
                    ["EXCEL",l_sheet,l_cells,l_values],[res])
   END FOR
  #start FUN-660014 add
   LET l_cells ="R7C1"
   LET l_values="額外說明"
   CALL ui.Interface.frontCall("WINDDE","DDEPoke",
               ["EXCEL",l_sheet,l_cells,l_values],[res])
   FOR l_i=1 TO g_ztb.getLength()
       LET l_cells=l_cells.subString(1,3)||l_i+1
       LET l_values=g_ztb[l_i].gaq05 CLIPPED 
       #--FUN-940108--start--
       CALL l_bufstr.clear()
       CALL l_bufstr.append(l_values)
       CALL l_bufstr.replace("\n",",",0)
       LET l_values = l_bufstr.tostring()
       #--FUN-940108--end--
       CALL ui.Interface.frontCall("WINDDE","DDEPoke",
                    ["EXCEL",l_sheet,l_cells,l_values],[res])
   END FOR
  #end FUN-660014 add
#   CALL ui.Interface.frontCall("WINDDE","DDEPoke", ["EXCEL",l_sheet,l_cells,l_values],[res])
#   LET l_values="5/28/98"
#   CALL ui.Interface.frontCall("WINDDE","DDEPoke", ["EXCEL",l_sheet,"R4C1",l_values],[res])
   CALL ui.Interface.frontCall("WINDDE","DDEFinish", ["EXCEL",l_sheet], [res] )
 
END FUNCTION
 
 
FUNCTION p_zta_cut_spaces(p_str)
DEFINE p_str         STRING,
       l_i           LIKE type_file.num5,          #No.FUN-680135 SMALLINT
       l_flag        LIKE type_file.chr1,          #No.FUN-680135 VARCHAR(1) 
       l_cmd         STRING,
       l_desc_stop   LIKE type_file.num5           #No.FUN-680135 SMALLINT
 
LET l_flag='N'
LET l_desc_stop=-1
LET p_str=p_str.trim()
FOR l_i=1 TO p_str.getLength()
   #IF l_i<=l_desc_stop+1 THEN
    IF (l_i <= (l_desc_stop + 1) AND g_db_type="ORA") OR      #TQC-710034
       (l_i <= l_desc_stop  AND g_db_type="IFX") OR
       (l_i <= (l_desc_stop + 1) AND g_db_type="MSV")         #No.FUN-A60022
    THEN
       CONTINUE FOR
    ELSE
       #IF g_db_type='IFX' THEN
       CASE g_db_type                                  #FUN-730016
        WHEN "IFX"                                     #FUN-730016 
          IF l_i=p_str.getIndexOf('{',l_i) THEN
             LET l_desc_stop=p_str.getIndexOf('}',l_i)
             LET l_cmd=l_cmd,p_str.subString(l_i,l_desc_stop) #TQC-710034
          ELSE
             IF p_str.subString(l_i,l_i) != ' ' THEN
                IF l_cmd.getLength()=0 THEN
                   LET l_cmd=p_str.subString(l_i,l_i)
                ELSE
                   LET l_cmd=l_cmd,p_str.subString(l_i,l_i)
                END IF
                LET l_flag='N'
             ELSE
                IF l_flag='N' THEN
                   LET l_flag='Y'
                   LET l_cmd=l_cmd,p_str.subString(l_i,l_i)
                END IF
             END IF
          END IF
      
        WHEN "ORA"                                      
          IF l_i=p_str.getIndexOf('/*',l_i) THEN
             LET l_desc_stop=p_str.getIndexOf('*/',l_i)
             LET l_cmd=l_cmd,p_str.subString(l_i,l_desc_stop+1)
          ELSE
             IF p_str.subString(l_i,l_i) != ' ' THEN
                IF l_cmd.getLength()=0 THEN
                   LET l_cmd=p_str.subString(l_i,l_i)
                ELSE
                   LET l_cmd=l_cmd,p_str.subString(l_i,l_i)
                END IF
                LET l_flag='N'
             ELSE
                IF l_flag='N' THEN
                   LET l_flag='Y'
                   LET l_cmd=l_cmd,p_str.subString(l_i,l_i)
                END IF
             END IF
          END IF
 
        WHEN "MSV"                                           #FUN-730016
          #No.FUN-A60022---start
          IF l_i=p_str.getIndexOf('/*',l_i) THEN
             LET l_desc_stop=p_str.getIndexOf('*/',l_i)
             LET l_cmd=l_cmd,p_str.subString(l_i,l_desc_stop+1)
          ELSE
             IF p_str.subString(l_i,l_i) != ' ' THEN
                IF l_cmd.getLength()=0 THEN
                   LET l_cmd=p_str.subString(l_i,l_i)
                ELSE
                   LET l_cmd=l_cmd,p_str.subString(l_i,l_i)
                END IF
                LET l_flag='N'
             ELSE
                IF l_flag='N' THEN
                   LET l_flag='Y'
                   LET l_cmd=l_cmd,p_str.subString(l_i,l_i)
                END IF
             END IF
          END IF
          #No.FUN-A60022---end
       END CASE                                              #FUN-730016
    END IF
END FOR
RETURN l_cmd
END FUNCTION
 
FUNCTION p_zta_del_spaces(p_str)
DEFINE p_str    STRING
DEFINE l_cmd    STRING,
       l_i      LIKE type_file.num5,         #No.FUN-680135 SMALLINT
       l_j      LIKE type_file.num5          #No.FUN-680135 SMALLINT
 
LET p_str=p_str.trim()
LET l_j=1
FOR l_i=1 TO p_str.getLength()
    IF p_str.subString(l_i,l_i)!= ' ' THEN
       LET l_cmd = l_cmd,p_str.subString(l_i,l_i)
       LET l_j=l_j+1
    END IF
END FOR
RETURN l_cmd
END FUNCTION
 
 
FUNCTION p_zta_check_pagelock()
DEFINE l_i  LIKE type_file.num5           #No.FUN-680135 SMALLINT
 
   SELECT count(*) INTO l_i
     FROM zta_file a,systables s
    WHERE s.locklevel='P'
      AND s.tabname=a.zta01 AND a.zta02=g_dbs
   RETURN l_i
END FUNCTION
 
 
FUNCTION p_zta_alter_lockmode()
DEFINE l_tabname   LIKE type_file.chr20   #No.FUN-680135 VARCHAR(20)
DEFINE l_sql       STRING
DEFINE l_i         LIKE type_file.num5    #No.FUN-680135 SMALLINT
 
 
    DECLARE p_zta_alter_lockmode_c CURSOR FOR
            SELECT tabname FROM systables WHERE locklevel='P'
    LET l_i=1
    FOREACH p_zta_alter_lockmode_c INTO l_tabname
       LET l_sql="alter table ",l_tabname CLIPPED," modify lock mode(row)"
       EXECUTE IMMEDIATE l_sql
       IF sqlca.sqlcode THEN
          CALL cl_err(l_tabname CLIPPED||':',sqlca.sqlcode,1)
       END IF
    END FOREACH
    CALL fgl_winmessage("Info","Alter Lock Mode Complete",
                        "info")
END FUNCTION
 
 
FUNCTION p_zta_get_oerr_msg(p_sqlerrd2)
     DEFINE p_sqlerrd2  LIKE type_file.num10   #No.FUN-680135 INTEGER
     DEFINE l_ch        base.channel
     DEFINE l_str       STRING
     DEFINE l_tmp       STRING
 
     LET l_ch = base.Channel.create()
     LET l_str="oerr ora ",p_zta_abs(p_sqlerrd2),"|grep '",'"',"'|"
     LET l_str=l_str,"cut -d'",'"',"' -f2"
     CALL l_ch.openPipe(l_str,"r")
     LET l_str=''
     WHILE l_ch.read(l_tmp)
         LET l_str=l_str CLIPPED,l_tmp CLIPPED
     END WHILE
     display "l_str:",l_str
END FUNCTION
 
 
FUNCTION p_zta_abs(p_sqlerrd2)
     DEFINE p_sqlerrd2  LIKE type_file.num10    #No.FUN-680135 INTEGER
 
     IF p_sqlerrd2<0 THEN
        LET p_sqlerrd2=-(p_sqlerrd2)
     END IF
     RETURN p_sqlerrd2
END FUNCTION
 
 
FUNCTION p_zta_klock()
DEFINE readfile_channel   base.channel
DEFINE l_str              STRING
DEFINE l_ze               LIKE ze_file.ze03  #No.FUN-680135 VARCHAR(30)
DEFINE l_pwd              STRING
DEFINE l_tempdir		  STRING             #No.TQC-C20012
 
    #IF g_db_type='IFX' THEN
    CASE g_db_type                                  #FUN-730016
     WHEN "IFX"                                     #FUN-730016 
       LET g_cmd = "p_klock"
       CALL cl_cmdrun(g_cmd)
    
     WHEN "ORA"                                     #FUN-730016 
       SELECT ze03 INTO l_ze FROM ze_file WHERE ze01='zta-030' AND ze02=g_lang
       PROMPT l_ze CLIPPED FOR l_pwd ATTRIBUTE(INVISIBLE)
#TQC-860017 START
          ON IDLE G_IDLE_SECONDS
             CALL CL_ON_IDLE()
       END PROMPT
#TQC-860017 END  
       CALL ui.interface.refresh()
       
       CALL FGL_SETENV("TEMPDIR",os.Path.dirname(FGL_GETENV("FGLPROFILE")))		#NO.TQC-C20012
	   LET l_tempdir=os.Path.dirname(FGL_GETENV("FGLPROFILE"))					#NO.TQC-C20012
 
       RUN "cp $FGLPROFILE $TEMPDIR/fglprofile.sys"
       RUN "chmod 777 $TEMPDIR/fglprofile.sys>/dev/null 2>&1"
 
       LET l_str=l_tempdir CLIPPED,"/fglprofile.script"							#NO.TQC-C20012 g_dir.tempdir => l_tempdir
       LET readfile_channel=base.channel.create()
       CALL readfile_channel.setdelimiter("")
       CALL readfile_channel.openfile(l_str CLIPPED, "w" )
       CALL readfile_channel.write("ex $TEMPDIR/fglprofile.sys <<%%")
       CALL readfile_channel.write("g/ds\.source")
       CALL readfile_channel.write("-1")
       CALL readfile_channel.write("a")
 
       CALL readfile_channel.write('dbi.database.system.source= "`echo ${ORACLE_SID}`" ')
       CALL readfile_channel.write('dbi.database.system.username= "system" ')
       CALL readfile_channel.write('dbi.database.system.password= "'||l_pwd||'"')
       CALL readfile_channel.write('dbi.database.system.schema= "system" ')
       CALL readfile_channel.write('dbi.database.system.ora.prefetch.rows = 1 ')
       CALL readfile_channel.write("")
       CALL readfile_channel.write(".")
       CALL readfile_channel.write("w")
       CALL readfile_channel.write("q")
       CALL readfile_channel.write("%%")
       CALL readfile_channel.close()
       RUN "chmod 777 $TEMPDIR/fglprofile.script>/dev/null 2>&1"
       RUN "$TEMPDIR/fglprofile.script"
       RUN "export FGLPROFILE=$TEMPDIR/fglprofile.sys;$FGLRUN $AZZ/42r/p_klock.42r"
       RUN "rm $TEMPDIR/fglprofile.sys $TEMPDIR/fglprofile.script >/dev/null 2>&1"		#NO.TQC-C20012 ADD $TEMPDIR/fglprofile.script
       CALL FGL_SETENV("TEMPDIR",g_dir.tempdir)											#NO.TQC-C20012	
 
     WHEN "MSV"                                          #FUN-730016
       #No.FUN-A60022---start
       LET g_cmd = "p_klock"
       CALL cl_cmdrun(g_cmd)
       #No.FUN-A60022---end
    END CASE                                             #FUN-730016
END FUNCTION
 
 
FUNCTION p_zta_gen_program()
DEFINE l_str         STRING
DEFINE l_cmd         STRING
DEFINE l_cmd_result  STRING
DEFINE l_filename    STRING
DEFINE l_date        base.StringBuffer
DEFINE l_type        LIKE type_file.chr1    #No.FUN-680135 VARCHAR(1)
DEFINE l_category    LIKE type_file.chr1    #No.FUN-680135 VARCHAR(1)
DEFINE l_name        STRING
DEFINE l_gat06       LIKE gat_file.gat06
DEFINE l_module      LIKE gat_file.gat06
 
 
    OPEN WINDOW p_zta_sel_w AT 5,20
      WITH FORM "azz/42f/p_zta_sel2" ATTRIBUTE(STYLE=g_win_style)

    #No.FUN-A60050 -- start --
    #-----指定combo module的值-------------#
    #LET l_str=''
    #DECLARE p_zta_gen_program_cur1 CURSOR FOR SELECT gao01 FROM gao_file ORDER BY gao01
    #FOREACH p_zta_gen_program_cur1 INTO l_gat06
    #   IF cl_null(l_str) THEN
    #      LET l_str=l_gat06 CLIPPED
    #   ELSE
    #      LET l_str=l_str CLIPPED,",",l_gat06 CLIPPED
    #   END IF
    #END FOREACH
    #CALL cl_set_combo_items("module",l_str,l_str)

    CALL cl_set_combo_items("module",g_zta03_str,g_zta03_str)
    #No.FUN-A60050 -- end --

   #CALL cl_ui_init()
    CALL cl_ui_locale("p_zta_sel2")   #FUN-9C0036
    #-------------------------------------#
    WHILE TRUE
       INPUT l_type,l_module,l_category,l_name WITHOUT DEFAULTS
             FROM type,module,category,name
             AFTER INPUT
                   IF INT_FLAG THEN
                      EXIT INPUT
                   END IF
                   IF l_type is null THEN
                      NEXT FIELD type
                   END IF
                   IF l_module is null THEN
                      NEXT FIELD module
                   END IF
                   IF l_category is null AND l_module!='AZZ' THEN
                      NEXT FIELD category
                   END IF
                   IF l_name is null THEN
                      NEXT FIELD name
                   END IF
 #TQC-860017 start
 
          ON ACTION about
             CALL cl_about()
 
          ON ACTION controlg
             CALL cl_cmdask()
 
          ON ACTION help
             CALL cl_show_help()
 
          ON IDLE g_idle_seconds
             CALL cl_on_idle()
             CONTINUE INPUT
#TQC-860017 end     
       END INPUT
       IF INT_FLAG THEN
          LET INT_FLAG=0
          EXIT WHILE
       END IF
       LET l_filename="$",l_module CLIPPED,"/4gl/",DOWNSHIFT(l_module),
                      DOWNSHIFT(l_category),l_name CLIPPED,".4gl"
       LET l_cmd="ls ",l_filename,">/dev/null 2>&1"
       RUN l_cmd RETURNING l_cmd_result
       IF NOT l_cmd_result THEN
          CALL cl_err(l_filename,"zta-031",1)
          CONTINUE WHILE
       END IF
       CASE l_type
            WHEN 1
                 LET l_cmd="cp $DS4GL/bin/template1 ",l_filename
            WHEN 2
                 LET l_cmd="cp $DS4GL/bin/template2 ",l_filename
            WHEN 3
                 LET l_cmd="cp $DS4GL/bin/template2 ",l_filename
       END CASE
       RUN l_cmd RETURNING l_cmd_result
       IF l_cmd_result THEN
          CALL cl_err(l_filename,"zta-026",1)
          CONTINUE WHILE
       ELSE
          CALL cl_err(l_filename,"zta-032",1)
          EXIT WHILE
       END IF
    END WHILE
    LET l_cmd="sed 's/i010/",DOWNSHIFT(l_category),l_name CLIPPED,"/' ",l_filename CLIPPED," >$TEMPDIR/abc"
    RUN l_cmd
    LET l_date=base.StringBuffer.create()
    CALL l_date.append(g_date)
    CALL l_date.replace('/','\/',0)
    LET l_cmd="sed 's/91\/04\/11 By Lee/",l_date.toString()," By ",g_user,"/' ",l_filename CLIPPED," >$TEMPDIR/abc"
    RUN l_cmd
    LET l_cmd="sed 's/91\\/04\\/11 By Lee/05\\/12\\/20 By qazzaq/' ",l_filename CLIPPED," >$TEMPDIR/abc"
    RUN l_cmd
    CLOSE WINDOW p_zta_sel_w
END FUNCTION
 
#FUN-660178
FUNCTION p_zta_create_synonym()
DEFINE l_zta_o    RECORD LIKE zta_file.*
DEFINE l_gat03    LIKE gat_file.gat03
DEFINE l_welcome  LIKE type_file.chr1000
DEFINE l_n        LIKE type_file.num10
 
    IF NOT p_zta_chk_alt_auth() THEN RETURN END IF    #FUN-990043
 
    #g_MODNO會寫入p_zs裡的蟲號,先檢查g_MODNO是不是Null,若是則跳出小視窗要求輸入
    IF cl_null(g_MODNO) THEN
       PROMPT "input MODNO:" FOR g_MODNO
#TQC-860017 START
          ON IDLE G_IDLE_SECONDS
             CALL CL_ON_IDLE()
       END PROMPT
#TQC-860017 END  
       display g_MODNO
    END IF
 
    OPEN WINDOW p_zta_syn_w AT 5,20
      WITH FORM "azz/42f/p_zta_syn" ATTRIBUTE(STYLE=g_win_style)
 
   #CALL cl_ui_init()
    CALL cl_ui_locale("p_zta_syn")   #FUN-9C0036
 
    LET l_welcome ="Please select DataBase and Table to Create Synonym Table in p_zta."
    MESSAGE " "
    CLEAR FORM                                   # 清螢幕欄位內容
    INITIALIZE g_syn.* TO NULL
    CALL cl_opmsg('a')
    LET g_syn.azp03 = "ds"
    INPUT g_syn.azp03,g_syn.gat01, l_welcome WITHOUT DEFAULTS
          FROM azp03,gat01,formonly.welcome HELP 1
 
        BEFORE FIELD welcome
             IF cl_null(g_syn.gat01) THEN
                NEXT FIELD gat01
             ELSE
                ACCEPT INPUT
             END IF
 
        AFTER FIELD azp03
            IF cl_null(g_syn.azp03) THEN
               NEXT FIELD azp03
            END IF
            #FUN-9C0036 -- start --
            #SELECT COUNT(*) INTO l_n  FROM azp_file WHERE azp03= g_syn.azp03
            #IF l_n = 0 THEN
            #   #CALL cl_err('sel azp:',STATUS,0)  #No.FUN-660081
            #   CALL cl_err3("sel","azp_file",g_syn.azp03 CLIPPED,"",100,"","sel azp",0)   #No.FUN-660081
            #   NEXT FIELD azp03
            #END IF
            #判斷資料是否為 ERP 實體資料庫, 由 zta_file及 azw_file 的設定
            SELECT count(*) INTO l_n from azw_file,zta_file
             WHERE azwacti = 'Y' AND azw05=zta02 AND azw05=azw06
               AND azw05 = g_syn.azp03
            IF l_n = 0 THEN
               CALL cl_err3("sel","azw_file",g_syn.azp03 CLIPPED,"",100,"","sel azw",0)   #No.FUN-660081
               NEXT FIELD azp03
            END IF
            LET l_n = 0
            SELECT COUNT(*) INTO l_n FROM zxy_file,azw_file
             WHERE zxy01 = g_user AND zxy03 = azw01 AND azw05 = g_syn.azp03
            IF l_n = 0 OR cl_null(l_n) THEN
               CALL cl_err(g_user,'sub-118',1)
               NEXT FIELD azp03
            END IF
            #FUN-9C0036 -- end --
 
        AFTER FIELD gat01
            IF cl_null(g_syn.gat01) THEN
               NEXT FIELD gat01
            END IF
            SELECT count(*) INTO l_n FROM zta_file
             WHERE zta01 = g_syn.gat01 AND zta02 = g_syn.azp03
            IF l_n = 0 THEN                
               CALL cl_err3("sel","zta_file",g_syn.gat01 CLIPPED,g_syn.azp03 CLIPPED,100,"","sel zta",0)   #No.FUN-660081
               NEXT FIELD gat01
            END IF
 
        ON ACTION controlp
           CASE
             WHEN INFIELD(azp03)
                # 產生查詢畫面的參數初始化.
                CALL cl_init_qry_var()
               #FUN-9C0036 -- start --
               #LET g_qryparam.form = "q_azp4zta"
                LET g_qryparam.form = "q_azw11"
                LET g_qryparam.construct = 'N'
                LET g_qryparam.default1 = g_syn.azp03
                LET g_qryparam.arg1 = g_user CLIPPED
               #FUN-9C0036 -- end --
                CALL cl_create_qry() RETURNING g_syn.azp03
                DISPLAY g_syn.azp03 TO azp03
                NEXT FIELD azp03
             WHEN INFIELD(gat01)
                # 產生查詢畫面的參數初始化.
                CALL cl_init_qry_var()
                LET g_qryparam.form = "q_zta3"   
                LET g_qryparam.default1 = g_syn.gat01
                LET g_qryparam.default2 = NULL
                LET g_qryparam.arg1 = g_lang CLIPPED
                LET g_qryparam.arg2 = g_syn.azp03 CLIPPED
                CALL cl_create_qry() RETURNING g_syn.gat01,l_gat03
                DISPLAY g_syn.gat01 TO gat01
                NEXT FIELD gat01
           END CASE
 
        ON ACTION locale
           CALL cl_dynamic_locale()
 #TQC-860017 start
 
        ON ACTION about
           CALL cl_about()
 
        ON ACTION controlg
           CALL cl_cmdask()
 
        ON ACTION help
           CALL cl_show_help()
 
        ON IDLE g_idle_seconds
           CALL cl_on_idle()
           CONTINUE INPUT
#TQC-860017 end     
    END INPUT
    CLOSE WINDOW p_zta_syn_w
    IF INT_FLAG THEN
       LET INT_FLAG=0
       RETURN
    END IF
 
 
    CALL p_zta_seldb2("S")   #選擇要 Create 那些資料庫               
 
    LET g_errmsg = ''
    LET g_plant_o = g_plant              
    LET g_dbs_o = g_dbs                  
 
    IF NOT INT_FLAG THEN                                       
 
 
      #組合出 SQL 指令
       SELECT * INTO g_zta.* FROM zta_file 
        WHERE zta01 = g_syn.gat01 AND zta02 = g_syn.azp03
        ORDER BY zta01,zta02
       IF sqlca.sqlcode THEN
          LET g_err="select zta data error(fetch):"
          #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
          CALL cl_err3("sel","zta_file",g_syn.gat01 CLIPPED,g_syn.azp03 CLIPPED,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
          INITIALIZE g_zta.* TO NULL
          RETURN
       END IF
 
       FOR l_ac=1 TO g_cnt1                                    
         IF g_azp1[l_ac].select='Y' THEN                             
           IF g_azp1[l_ac].tab_syn = 'S' THEN                           
              LET g_plant = g_azp1[l_ac].azp01 CLIPPED   #FUN-9C0036                         
              LET g_dbs   = g_azp1[l_ac].azp03 CLIPPED   #FUN-9C0036                      
              CALL p_zta_set_erpdb()                #連結資料庫         
              IF (SQLCA.SQLCODE) THEN CONTINUE FOR END IF               
              #寫入zta_file
              BEGIN WORK
              LET g_zta.zta07 = 'S'
              LET g_zta.zta17 = g_syn.azp03
              LET g_zta.zta05 = g_today
              LET g_zta.zta06 = g_user
              LET g_zta.zta10 = 'N'
              LET g_zta.zta02 = g_azp1[l_ac].azp03
              INSERT INTO zta_file VALUES(g_zta.*)
              IF sqlca.sqlcode THEN
                 LET g_err="insert zta data error(a):",g_zta.zta01
                 #CALL cl_err(g_err CLIPPED,sqlca.sqlcode,0)  #No.FUN-660081
                 CALL cl_err3("ins","zta_file",g_zta.zta01 CLIPPED,g_zta.zta02 CLIPPED,SQLCA.sqlcode,"",g_err,0)   #No.FUN-660081
                 ROLLBACK WORK
              ELSE
                 COMMIT WORK
              END IF
 
              #建立 synonym      
              CALL p_zta_gensql()
              IF g_zta.zta02='ds' THEN
                 #No.FUN-A60022---start
                 IF os.Path.separator() = "/" THEN  
                    ERROR "r.s2 ds"
                    RUN "r.s2 ds" WITHOUT WAITING
                 ELSE
                    ERROR "rs2 ds"
                    RUN "rs2 ds" WITHOUT WAITING
                 END IF
                 #No.FUN-A60022---end
                 CALL p_zta_gsql('S')
              END IF
           END IF  
         END IF
       END FOR
       IF NOT cl_null(g_errmsg) THEN
         LET g_errmsg = g_errmsg CLIPPED ," Create Synonym Success"
         CALL fgl_winmessage("Info",g_errmsg,"info")
       END IF
       LET g_plant = g_plant_o                           
       LET g_dbs   = g_dbs_o   
                                 
       CALL p_zta_select_db("continue")   #No.TQC-6A0036
       CALL p_zta_q("zta01='"||g_syn.gat01 CLIPPED||"'") 
    END IF
END FUNCTION
#END FUN-660178
 
#FUN-7A0029
FUNCTION p_zta_view_key()
DEFINE l_cnt         LIKE type_file.num5
 
    LET l_cnt = g_ztd_fk.getLength()
    DISPLAY ARRAY g_ztd_fk TO s_ref.* ATTRIBUTE(COUNT=l_cnt,UNBUFFERED)
      BEFORE DISPLAY
        IF g_ztd[l_ac_ztd].ztd04 = 'R' THEN
           CALL cl_set_comp_visible("rzad06,rzad07,rtabname,rcolname", TRUE)    
        ELSE
           CALL cl_set_comp_visible("rzad06,rzad07,rtabname,rcolname", FALSE)   
        END IF
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE DISPLAY
    END DISPLAY
 
END FUNCTION
#END FUN-660178
 
#No.TQC-810014
FUNCTION p_zta_gaq_dict(p_lang,p_desc)
DEFINE p_lang  LIKE type_file.chr10 
DEFINE p_desc  LIKE type_file.chr1000
DEFINE l_desc  LIKE type_file.chr1000
DEFINE l_sql   STRING
 
   CASE p_lang
       WHEN "1"
           LET l_sql = "SELECT dic02 FROM ds.dic_file@pdict ",
                       " WHERE dic01 = '",p_desc CLIPPED,"'",
                       "   AND dic06 ='Y'"
       WHEN "2"
           LET l_sql = "SELECT dic04 FROM ds.dic_file@pdict ",
                       " WHERE dic01 = '",p_desc  CLIPPED,"'"
       WHEN "3"
           LET l_sql = "SELECT dic08 FROM ds.dic_file@pdict ",
                       " WHERE dic01 = '",p_desc CLIPPED,"'",
                       "   AND dic10 ='Y'"
       WHEN "4"
           LET l_sql = "SELECT dic09 FROM ds.dic_file@pdict ",
                       " WHERE dic01 = '",p_desc CLIPPED,"'",
                       "   AND dic11 ='Y'"
       OTHERWISE
          LET l_desc = ""
   END CASE
   
   IF NOT cl_null(l_sql) THEN
      PREPARE dic_p1 FROM l_sql
      EXECUTE dic_p1 INTO l_desc
      IF sqlca.sqlcode THEN
         LET l_desc = ""
      END IF
   END IF
 
   RETURN l_desc
END FUNCTION
#END No.TQC-810014
 
#No.FUN-990043 -- start --
FUNCTION p_zta_parse_view(p_tabname,p_flag,p_cmd)
DEFINE p_tabname     LIKE zta_file.zta01          #Table Name
DEFINE p_flag        LIKE type_file.chr1          #a:新增, u:修改, d:刪除
DEFINE p_cmd         STRING                       #Alter 語法
DEFINE l_cnt         LIKE type_file.num5
DEFINE l_i,l_j       LIKE type_file.num5
DEFINE l_sql         STRING
DEFINE l_azw06       DYNAMIC ARRAY OF LIKE azw_file.azw06
DEFINE l_str         STRING
DEFINE l_cmd         STRING
DEFINE l_plant_fld   STRING
DEFINE l_cust        LIKE type_file.chr1
DEFINE l_strbuf      base.StringBuffer 
DEFINE l_local_cnt   LIKE type_file.num5
DEFINE l_zta17       LIKE zta_file.zta17           #FUN-9B0011
DEFINE l_zta07       LIKE zta_file.zta07           #FUN-9B0011
DEFINE l_zta03       LIKE zta_file.zta03           #FUN-A60050
DEFINE l_zta09       LIKE zta_file.zta09           #FUN-A60050
DEFINE l_zta18       LIKE zta_file.zta09           #FUN-A60050
 
   LET p_tabname = p_tabname CLIPPED
   LET g_dbs_t = g_dbs CLIPPED                             #No.FUN-9A0077 #FUN-9C0036
 
   #判斷Table是否具有Plant欄位
   IF cl_null(g_plant_status) OR g_plant_status = 0 THEN
      CALL cl_table_exist_plant(p_tabname) RETURNING g_plant_status
   END IF
   
 
   #判斷是否需要重新建立View 
   SELECT COUNT(*) INTO l_cnt FROM azw_file 
    WHERE azw05 = g_dbs AND azw06 <> azw05
   IF l_cnt > 0 THEN 
     #LET g_dbs_o = g_dbs                                         #No.FUN-9A0077
      #判斷是否有 Local 需求的table
      SELECT COUNT(*) INTO l_local_cnt FROM azy_file 
       WHERE azy01= g_dbs AND azy02 = p_tabname
 
      IF NOT cl_null(FGL_GETENV("TOPLINK")) THEN
         LET l_cust = 'p'
      ELSE 
         LET l_cust = 'c'
      END IF
 
      LET l_sql = "SELECT UNIQUE azw06 FROM azw_file ",
                  " WHERE azw05 = '", g_dbs CLIPPED,"'",
                  "   AND azw06 <> '",g_dbs CLIPPED,"'"
      DECLARE azw_cs CURSOR FROM l_sql
      LET l_cnt = 1
      FOREACH azw_cs INTO l_azw06[l_cnt]
         display "azw06:",l_azw06[l_cnt] CLIPPED
         IF l_cnt = 1 THEN
             LET l_str = l_azw06[l_cnt] CLIPPED
         ELSE
             LET l_str = l_str,',',l_azw06[l_cnt] CLIPPED
         END IF  
         LET l_cnt = l_cnt + 1
      END FOREACH
      LET l_cnt = l_cnt -1

      IF (p_flag = 'a' AND g_action_choice <> "modify") THEN
         #FUN-9B0011  -- start --
         SELECT zta07,zta17,zta03,zta09 INTO l_zta07,l_zta17,l_zta03,l_zta09   #FUN-A60050
           FROM zta_file WHERE zta01=p_tabname AND zta02=g_dbs
         IF l_zta07 = 'T' THEN
            #No.FUN-A60022 -- start --
            IF g_db_type <> "MSV"  THEN
               LET l_cmd = "grant select,insert,update,delete on ",p_tabname CLIPPED," to ",l_str
               EXECUTE IMMEDIATE l_cmd
               IF SQLCA.SQLCODE THEN
                  CALL cl_err("dbs: "||g_dbs CLIPPED|| "  grant ("||p_tabname CLIPPED||") error:",sqlca.sqlcode,1)
                  RETURN
               ELSE
                  IF NOT p_insert_zs_file(g_dbs CLIPPED,p_tabname CLIPPED,l_cmd) THEN 
                     RETURN
                  END IF
               END IF
            END IF
            #No.FUN-A60022 -- end --
         END IF
         #FUN-9B0011  -- end --
      END IF

      LET l_str =  p_tabname CLIPPED
      LET l_plant_fld = l_str.subString(1,l_str.getIndexOf('_file',1)-1),"plant"
 
      FOR l_i = 1 TO l_cnt
         LET g_dbs   = l_azw06[l_i] CLIPPED    #FUN-9C0036
         display "dbs:",g_dbs
         CALL p_zta_set_erpdb()        #連結資料庫        
 
         LET l_cmd = ""
         LET l_zta07 = ""       #FUN-9C0036
         LET l_zta17 = ""       #FUN-9C0036

         IF p_flag = "u" OR p_flag = "d" THEN
            IF g_plant_status > 0 THEN   #View 類的 table
               LET l_cmd = "drop view ",p_tabname CLIPPED
            ELSE               #非 View 類的 table
               IF p_flag = "d" THEN  
                  IF l_local_cnt > 0 THEN  #有 Local 需求的table，應一併 drop 
                       LET l_cmd = "drop table ",p_tabname CLIPPED
                  ELSE
                       LET l_cmd = "drop synonym ",p_tabname CLIPPED
                  END IF
               END IF
            END IF
            IF NOT cl_null(l_cmd) THEN
               EXECUTE IMMEDIATE l_cmd
               display "drop",":",l_cmd
               display "drop sqlca:",sqlca.sqlcode, " ", sqlca.sqlerrd[2] 
               IF NOT sqlca.sqlcode THEN
                  #No.FUN-A60022 -- start --
                  IF NOT p_insert_zs_file(g_dbs CLIPPED,p_tabname CLIPPED,l_cmd) THEN 
                     EXIT FOR
                  END IF
                  #No.FUN-A60022 -- end --
               END IF
               #FUN-9C0036 -- start --
               #刪除 zta_file 資料
               display "view db delete zta_file"
               DELETE FROM zta_file WHERE zta01=p_tabname AND zta02=g_dbs
               #FUN-9C0036 -- end --
            END IF
         END IF
 
         LET l_cmd = ""
         IF p_flag = "a" OR p_flag = "u" THEN
            IF g_plant_status > 0 THEN   #View 類的 table
               #FUN-A60022 -- start --
               CASE g_db_type
                 WHEN "ORA"
                    LET l_cmd = "create view ",p_tabname CLIPPED, " as ",
                                " select * from ",s_dbstring(g_dbs_t),p_tabname CLIPPED,
                                " where ",l_plant_fld," = (select sid02 from sid_file where sid01=(select userenv('SESSIONID') from dual))"  #FUN-9C0036
                 WHEN "MSV"
                    LET l_cmd = "create view ",p_tabname CLIPPED, " as ",
                                " select * from ",s_dbstring(g_dbs_t),p_tabname CLIPPED,
                                " where ",l_plant_fld," = (select sid02 from sid_file where sid01=(SELECT @@SPID))"  #FUN-9C0036
               END CASE
               #FUN-A60022 -- end --
               LET l_str = "create view"
               LET l_zta07 = "V"                       #FUN-9C0036
               LET l_zta17 = g_dbs_t                   #FUN-A80029
            ELSE               #非 View 類的 table
               CASE p_flag 
                 WHEN "a" 
                   LET l_cmd = "create synonym ",p_tabname CLIPPED,
                               " for ",s_dbstring(g_dbs_t),p_tabname CLIPPED
                   LET l_str = "create synonym"
                   LET l_zta07 = "S"                       #FUN-9C0036
                   LET l_zta17 = g_dbs_t                   #FUN-9C0036
                 WHEN "u" 
                  IF l_local_cnt > 0 THEN  #有 Local 需求的table，應一併 alter
                       LET l_cmd = p_cmd
                       LET l_str = "modify table"
                  END IF
               END CASE
            END IF

            IF NOT cl_null(l_cmd) THEN
               EXECUTE IMMEDIATE l_cmd
            display "create:",l_cmd
            display "create sqlca:",sqlca.sqlcode, " ", sqlca.sqlerrd[2] 
               IF SQLCA.SQLCODE THEN
                  CALL cl_err("dbs: "||g_dbs CLIPPED|| "  " ||l_str||"("||p_tabname CLIPPED||") error:",sqlca.sqlcode,1)
                  EXIT FOR
               ELSE
                  #No.FUN-A60022 -- start --
                  IF NOT p_insert_zs_file(g_dbs CLIPPED,p_tabname CLIPPED,l_cmd) THEN 
                     EXIT FOR
                  END IF
                  #No.FUN-A60022 -- end --
               END IF
               #FUN-9C0036 -- start --
               IF NOT cl_null(l_zta07) THEN
                  SELECT zta03,zta09,zta18 INTO l_zta03,l_zta09,l_zta18  
                    FROM zta_file WHERE zta01=p_tabname AND zta02=g_dbs_t  #FUN-A60050
                  #寫入zta_file
                  display "view db insert zta_file"
                  INSERT INTO zta_file(zta01,zta02,zta05,zta06,zta07,zta17,zta10,zta03,zta09,zta18)                #FUN-A60050
                                VALUES(p_tabname,g_dbs,g_date,g_user,l_zta07,l_zta17,'Y',l_zta03,l_zta09,l_zta18)     #FUN-A60050
                  IF sqlca.sqlcode THEN
                     LET g_err="insert zta data error(a):",p_tabname CLIPPED
                     CALL cl_err3("ins","zta_file",p_tabname CLIPPED,g_dbs CLIPPED,SQLCA.sqlcode,"",g_err,1)  
                     ROLLBACK WORK
                  ELSE
                     COMMIT WORK
                  END IF
               END IF
               #FUN-9C0036 -- end --
            END IF
          END IF
      END FOR

      #LET g_plant_status = 0   #FUN-9C0036

   END IF

   #No.FUN-9A0077 -- start --
   IF g_ods_end = TRUE THEN
      LET g_dbs = g_dbs_t
      CALL p_zta_cr_parse_view(p_tabname,p_flag)    
   END IF
   #No.FUN-9A0077 -- end --

   LET g_dbs = g_dbs_t
   display "end:",g_dbs
   CALL p_zta_set_erpdb()        #連結資料庫        
 
   CALL p_zta_cl()                       
END FUNCTION

#檢查是否為實體DB, 登入的資料庫與 Transaction Data DB 不一致，不可異動資料庫! 
FUNCTION p_zta_chk_alt_auth()
DEFINE l_cnt    LIKE type_file.num5
 
   SELECT COUNT(*) INTO l_cnt  
     FROM azw_file WHERE azw05 = g_dbs AND azw06 = g_dbs 
   IF l_cnt > 0 THEN
      RETURN TRUE
   ELSE
      CALL cl_err(g_plant,'zta-041',1)
      RETURN FALSE
   END IF
END FUNCTION
#No.FUN-990043 -- end --

#No.FUN-9A0077 -- start --
FUNCTION p_zta_zta17(p_tabname)
DEFINE p_tabname     LIKE zta_file.zta01
DEFINE l_dbcnt       LIKE type_file.num5     #FUN-9C0036
DEFINE l_syscnt      LIKE type_file.num5     #FUN-9C0036

      #FUN-9C0036 -- start --
      #抓取非 ds 的 DB 個數
      SELECT count(*) INTO l_dbcnt FROM zta_file,azw_file
       WHERE zta01 = p_tabname  AND zta02 <> 'ds'
         AND zta02 = azw05 AND azw05 = azw06 

      #抓取synonym 的 DB 個數
      SELECT count(*) INTO l_syscnt FROM zta_file,azw_file
       WHERE zta01 = p_tabname  AND zta02 <> 'ds'
         AND zta07 = 'S' 
         AND zta02 = azw05 AND azw05 = azw06 

      #全部資料庫synonym ds, ODS 才會建立 synonym ds; 其他狀況, ods 皆建立 view
      IF l_dbcnt = l_syscnt THEN
         SELECT unique zta07,zta17 INTO g_cr_zta07,g_cr_zta17 FROM zta_file,azw_file
          WHERE zta01 = p_tabname  AND zta02 <> 'ds'
            AND zta07 = 'S' 
            AND zta02 = azw05 AND azw05 = azw06 
      END IF
      #FUN-9C0036 -- end --
      display "zta07:",g_cr_zta07
      display "zta17:",g_cr_zta17

     
END FUNCTION

FUNCTION p_zta_cr_parse_view(p_tabname,p_flag)
DEFINE p_tabname     LIKE zta_file.zta01          #Table Name
DEFINE p_flag        LIKE type_file.chr1          #a:新增, u:修改, d:刪除
DEFINE l_cnt         LIKE type_file.num5
DEFINE l_i,l_j       LIKE type_file.num5
DEFINE l_sql         STRING
DEFINE l_azw06       DYNAMIC ARRAY OF LIKE azw_file.azw06
DEFINE l_str         STRING
DEFINE l_cmd         STRING
DEFINE l_cust        LIKE type_file.chr1
DEFINE l_strbuf      base.StringBuffer 
DEFINE l_count_v     LIKE type_file.num5          #計算view筆數      #No.FUN-9C0036 

   #判斷是否有 ods 資料庫，若沒有則不需要處理
   CASE g_db_type      
    WHEN "ORA"                              
       LET l_sql = "SELECT COUNT(*) FROM all_users WHERE lower(username) ='ods'"
    WHEN "MSV"                              
       LET l_sql = "SELECT COUNT(*) FROM sys.databases ",
                   " WHERE name ='",g_mssqlarea CLIPPED,"_ods'"
   END CASE
   DECLARE p_ods_count CURSOR FROM l_sql
   OPEN p_ods_count
   FETCH p_ods_count INTO l_cnt
   IF l_cnt = 0 THEN
      RETURN 
   END IF 
   FREE p_ods_count

   LET p_tabname = p_tabname CLIPPED

   #判斷是否需要重新建立View 
   SELECT COUNT(UNIQUE azw06) INTO l_cnt FROM azw_file 
    WHERE azw05 = g_dbs AND azw06 = g_dbs
   IF l_cnt > 0 THEN 

      IF NOT cl_null(FGL_GETENV("TOPLINK")) THEN
         LET l_cust = 'p'
      ELSE 
         LET l_cust = 'c'
      END IF
 
      IF cl_null(g_cr_zta17) THEN
         CALL p_zta_zta17(p_tabname)     
      END IF

      IF cl_null(g_zta_cnt) THEN 
         SELECT COUNT(*) INTO g_zta_cnt FROM zta_file WHERE zta01=p_tabname
      END IF 
      IF cl_null(g_sys_cnt) THEN 
         SELECT COUNT(*) INTO g_sys_cnt FROM zta_file WHERE zta01 = p_tabname AND zta07 = 'S'
      END IF
 
      #Synonym Table 不需要重新建 synonym
      IF g_cr_zta07 = 'S' AND g_zta_cnt >= g_sys_cnt AND 
         (p_flag = 'u' OR (p_flag='a' AND g_sys_cnt > 1) OR (p_flag='d' AND g_sys_cnt > 0)) 
      THEN
         LET g_ods_end = TRUE
         LET g_sys_cnt = NULL
         LET g_cr_zta17 = NULL
         LET g_cr_zta07= NULL
         LET g_zta_cnt = NULL
         RETURN
      END IF
      IF p_flag = 'a' OR p_flag = 'd' 
      THEN
         IF (p_flag = 'a' AND g_zta_cnt > 1) OR
            (p_flag = 'd' AND g_zta_cnt > 0)
         THEN
            LET p_flag = 'u'
         END IF
      END IF

      #FUN-9C0036 -- start --
      #LET l_sql = "SELECT UNIQUE azw06 FROM azw_file,zta_file ",
      #            " WHERE azw05 = azw06 ",
      #            "   AND azw05 = zta02 " ,
      #            "   AND zta01 = '",p_tabname CLIPPED,"'"
      LET l_sql = "SELECT UNIQUE azwd01 FROM azwd_file,zta_file",
                  " WHERE zta02 = azwd01 ",
                  "   AND zta01 = '",p_tabname CLIPPED,"'",
                  " ORDER BY azwd01"
      #FUN-9C0036 -- end --
 
      DECLARE azw1_cs CURSOR FROM l_sql
      LET l_cnt = 1
      FOREACH azw1_cs INTO l_azw06[l_cnt]
         display "azw06:",l_azw06[l_cnt] CLIPPED
         LET l_cnt = l_cnt + 1
      END FOREACH
      LET l_cnt = l_cnt -1
 
      LET g_dbs   = "ods"
      display "dbs:",g_dbs
      CALL p_zta_set_erpdb()        #連結資料庫        

      #FUN-9C0036 -- start --
      IF p_flag = "a" THEN
         LET l_count_v = 0
         #取得 View 資料筆數
         CASE g_db_type      
          WHEN "IFX"  #GP5.2 沒有 ifx, 暫不處理        
          WHEN "ORA"                              
               LET l_sql="select count(1)",
                         "  from user_views",
                         " WHERE lower(view_name)= '",p_tabname CLIPPED,"'"
          WHEN "MSV"         
         END CASE            
         PREPARE p_zta_ods_v_cnt FROM l_sql
         EXECUTE p_zta_ods_v_cnt INTO l_count_v
         FREE p_zta_ods_v_cnt
         IF p_flag = "a" AND l_count_v > 0 THEN
            LET p_flag = 'u'
         END IF
      END IF
      #FUN-9C0036 -- start --

      LET l_cmd = ""
      IF p_flag = "u" OR p_flag = "d" THEN
         IF g_cr_zta07 = 'S' AND g_sys_cnt = 0  THEN
            LET l_cmd = "drop synonym ",p_tabname CLIPPED
         ELSE
            LET l_cmd = "drop view ",p_tabname CLIPPED
         END IF  
               display l_cmd
               display sqlca.sqlcode
         EXECUTE IMMEDIATE l_cmd
         IF NOT sqlca.sqlcode THEN
            #No.FUN-A60022 -- start --
            IF NOT p_insert_zs_file(g_dbs CLIPPED,p_tabname CLIPPED,l_cmd) THEN 
            END IF
            #No.FUN-A60022 -- end --
         END IF
      END IF
 
      LET l_cmd = ""
      IF p_flag = "a" OR p_flag = "u" THEN
         IF g_cr_zta07 = 'S' AND (g_sys_cnt > 0 OR (g_zta_cnt=1 AND g_sys_cnt=1)) THEN
            LET l_cmd = "create synonym ",p_tabname CLIPPED,
                        " for ",s_dbstring(g_zta.zta17),p_tabname CLIPPED
            LET l_str = "create synonym"
         ELSE
            FOR l_i = 1 TO l_cnt
                IF l_i = 1 THEN     
                   LET l_cmd = "create view ",p_tabname CLIPPED, " as ("
                ELSE
                   LET l_cmd = l_cmd ," union all "
                END IF
                LET l_cmd = l_cmd ," select '",l_azw06[l_i] CLIPPED,"' DBNAME, ",
                            s_dbstring(l_azw06[l_i]),p_tabname CLIPPED,".* from ",
                            s_dbstring(l_azw06[l_i]),p_tabname CLIPPED
            END FOR
            IF NOT cl_null(l_cmd) THEN
                LET l_cmd = l_cmd ,")" 
            END IF
            LET l_str = "create view"
         END IF
      END IF 
      
      display l_cmd
      IF NOT cl_null(l_cmd) THEN
         EXECUTE IMMEDIATE l_cmd
               display "cr:",l_cmd
               display "cr:",sqlca.sqlcode, " ", sqlca.sqlerrd[2]
         IF SQLCA.SQLCODE THEN
            CALL cl_msg_error("dbs: "||g_dbs CLIPPED|| "  " ||l_str||"("||p_tabname CLIPPED||") error:",sqlca.sqlcode,sqlca.sqlerrd[2]) #FUN-9C0036
         ELSE
            #No.FUN-A60022 -- start --
            IF NOT p_insert_zs_file(g_dbs CLIPPED,p_tabname CLIPPED,l_cmd) THEN 
            END IF
            #No.FUN-A60022 -- end --
         END IF
      END IF
      LET g_ods_end = TRUE
      LET g_sys_cnt = NULL
      LET g_zta_cnt = NULL
      IF g_zta.zta07 = 'S' THEN
         LET g_dbs = g_dbs_t
         display "end:",g_dbs
         CALL p_zta_set_erpdb()        #連結資料庫        
         LET g_plant_status = 0
 
         CALL p_zta_cl()                       
      END IF
      LET g_cr_zta07 = NULL
      LET g_cr_zta17 = NULL
   END IF

END FUNCTION
#No.FUN-9A0077 -- end --

#No.FUN-9C0036 -- start --
#選擇登入角色:一般使用者或DBA
FUNCTION p_zta_dba()
DEFINE g_usertype        STRING
DEFINE g_pwd1            STRING
DEFINE g_pwd2            STRING
DEFINE l_user            STRING
DEFINE l_str            STRING
DEFINE l_gae04           LIKE gae_file.gae04


   OPEN WINDOW p_zta_dba_control AT 12,40 WITH FORM "azz/42f/p_zta_dba_control" 
                                                  ATTRIBUTE(STYLE = g_win_style CLIPPED)
   
   CALL cl_ui_locale("p_zta_dba_control")
        
   CALL cl_set_act_visible("accept,cancel", TRUE)
   
   LET g_usertype=1         #Default Common User
   SELECT gae04 INTO l_gae04 FROM gae_file 
    WHERE gae01='p_zta_dba_control' AND gae02='pwd1' AND gae03=g_lang

   INPUT g_usertype, l_user, g_pwd1, g_pwd2 WITHOUT DEFAULTS FROM usertype, name, pwd1, pwd2   #No.FUN-A60022
   BEFORE INPUT 
      #No.FUN-A60022 -- start --
      CALL cl_set_comp_visible("name,pwd1,pwd2",FALSE)
      IF cl_db_get_database_type()='MSV' THEN
         IF cl_null(FGL_GETENV("TOPLINK")) THEN
            LET l_user = "tiptoperp"
         ELSE
            LET l_user = "sa"
         END IF
         #LET l_str = l_user, " ", l_gae04 CLIPPED
         #CALL cl_set_comp_att_text("pwd1",l_str)
         DISPLAY l_user TO name
      ELSE
         LET l_user = "system"
         LET l_str = l_user, " ", l_gae04 CLIPPED,",",
                      "sys    ", l_gae04 CLIPPED
         CALL cl_set_comp_att_text("pwd1,pwd2",l_str)
      END IF
      #No.FUN-A60022 -- end --

   ON CHANGE usertype
      IF g_usertype ="1" THEN
            CALL cl_set_comp_visible("name,pwd1,pwd2",FALSE)  #No.FUN-A60022
      ELSE
            IF cl_db_get_database_type()='MSV' THEN
               CALL cl_set_comp_visible("name,pwd1",TRUE)     #No.FUN-A60022
            ELSE 
               CALL cl_set_comp_visible("pwd1,pwd2",TRUE)
            END IF
            NEXT FIELD pwd1
      END IF
              
   AFTER INPUT
      IF INT_FLAG THEN
         LET g_dba_priv = 0
         EXIT INPUT
      END IF
      IF g_usertype ="1" THEN
         LET g_dba_priv = 0
      ELSE
         #No.FUN-A60022 -- start --
         IF cl_db_get_database_type() = "MSV" AND l_user IS NULL THEN
            NEXT FIELD name
         END IF
         #No.FUN-A60022 -- end --
         IF g_pwd1 IS NULL THEN
            CALL cl_err('','alm-978',0)
            NEXT FIELD  pwd1
         END IF
         IF p_db_psw_check(l_user, g_pwd1)  THEN
            LET g_dba_priv = 1  #密碼檢測 ok          
         ELSE  
            LET g_dba_priv = 0   
            CALL cl_err('','aoo-003',0)
            NEXT FIELD  pwd1
         END IF 
 
         IF cl_db_get_database_type() = "ORA" THEN
            IF g_pwd2 IS NULL THEN
               CALL cl_err('','alm-978',0)
               NEXT FIELD  pwd2
            END IF
            #檢查 SYS 帳號密碼是否正確
            IF p_db_psw_check("sys/SYSDBA", g_pwd2)  THEN
               LET g_dba_priv = 1  #密碼檢測 ok          
            ELSE  
               LET g_dba_priv = 0   
               CALL cl_err('','aoo-003',0)
               NEXT FIELD  pwd2
            END IF  
          END IF
      END IF
   END INPUT      
   CLOSE WINDOW p_zta_dba_control  
END FUNCTION

#選擇資料庫
FUNCTION p_zta_seldb(ps_str)
DEFINE ps_str    STRING                  #No.TQC-6A0036
DEFINE l_zta_o    RECORD LIKE zta_file.*
DEFINE l_gat03    LIKE gat_file.gat03
DEFINE l_welcome  LIKE type_file.chr1000
DEFINE l_n        LIKE type_file.num10
 
 
    OPEN WINDOW p_zta_seldb_w AT 5,20
      WITH FORM "azz/42f/p_zta_db" ATTRIBUTE(STYLE=g_win_style)
 
    CALL cl_ui_init()
 
    LET l_welcome = cl_getmsg("aoo-006",g_lang),g_user CLIPPED, cl_getmsg("aoo-007",g_lang)

    MESSAGE " "
    CLEAR FORM                                   # 清螢幕欄位內容
    CALL cl_opmsg('a')
    LET g_azw06 = g_dbs

    INPUT g_azw06,l_welcome WITHOUT DEFAULTS FROM azw06,formonly.welcome HELP 1
 
        BEFORE FIELD welcome
             IF cl_null(g_azw06) THEN
                NEXT FIELD azw06
             ELSE
                ACCEPT INPUT
             END IF
 
        AFTER FIELD azw06
            IF cl_null(g_azw06) THEN
               NEXT FIELD azw06
            END IF
            #判斷登入資料庫是否由 azw_file 的設定
            SELECT count(*) INTO l_n from azw_file
             WHERE azwacti = 'Y' AND azw06 = g_azw06
            IF l_n = 0 THEN
               CALL cl_err3("sel","azw_file",g_azw06 CLIPPED,"",100,"","sel azw",0)   #No.FUN-660081
               NEXT FIELD azw06
            END IF
            LET l_n = 0
            SELECT COUNT(*) INTO l_n FROM zxy_file,azw_file
             WHERE zxy01 = g_user AND zxy03 = azw01 AND azw06 = g_azw06
            IF l_n = 0 OR cl_null(l_n) THEN
               CALL cl_err(g_user,'sub-118',1)
               NEXT FIELD azw06
            END IF
 
        ON ACTION controlp
           CASE
             WHEN INFIELD(azw06)
                # 產生查詢畫面的參數初始化.
                CALL cl_init_qry_var()
                LET g_qryparam.form = "q_azw11"
                LET g_qryparam.construct = 'N'
                LET g_qryparam.default1 = g_azw06
                LET g_qryparam.arg1 = g_user CLIPPED
                CALL cl_create_qry() RETURNING g_azw06
                DISPLAY g_azw06 TO azw06
                NEXT FIELD azw06
           END CASE
 
        ON ACTION locale
           CALL cl_dynamic_locale()
 
        ON ACTION about
           CALL cl_about()
 
        ON ACTION controlg
           CALL cl_cmdask()
 
        ON ACTION help
           CALL cl_show_help()
 
        ON IDLE g_idle_seconds
           CALL cl_on_idle()
           CONTINUE INPUT

    END INPUT
    CLOSE WINDOW p_zta_seldb_w
    IF INT_FLAG THEN
       LET INT_FLAG=0
       CALL cl_used("p_zta", g_time, 2) RETURNING g_time  #No.FUN-6A0096
       IF ps_str = "close" THEN         #FUN-A60022
          EXIT PROGRAM
       END IF
    END IF
    LET g_dbs = g_azw06 CLIPPED
   
END FUNCTION

FUNCTION p_zta_set_win_title2()
   DEFINE   lc_zo02     LIKE zo_file.zo02,
            lc_zx02     LIKE zx_file.zx02,
            lc_zz02     LIKE zz_file.zz02,
            ls_ze031    LIKE type_file.chr1000,  #No.FUN-680135 VARCHAR(100)
            ls_ze032    LIKE type_file.chr1000,  #No.FUN-680135 VARCHAR(100)
            ls_msg      STRING,
            lwin_curr   ui.Window,
            l_sql       STRING,
            l_ch        base.channel
   DEFINE   ls_tmp      STRING                   #No.FUN-A60022
   
   # 選擇使用者名稱(zx_file.zx02)
   LET l_sql="SELECT zx02 FROM zx_file WHERE zx01='",g_user CLIPPED,"'"

   PREPARE p_zta_set_win_tit_pre7 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre7 INTO lc_zx02
   IF (SQLCA.SQLCODE) THEN
      LET lc_zx02 = g_user
   END IF
   FREE p_zta_set_win_tit_pre7
 
   #呼叫cl_ins_del_sid是要將執行程式時的sid_file資料刪除,但是p_zta並不是要執行ERP程式,所以不需要像一般程式新增sid_file.
   DATABASE g_dbs
   IF (SQLCA.SQLCODE) THEN
      RETURN FALSE
   END IF
   display "DATABASE:",g_dbs

   # 選擇  程式名稱(gaz_file.gaz03)
   LET l_sql="SELECT gaz03 FROM gaz_file WHERE gaz01='",
             g_prog CLIPPED,"' AND gaz02='",g_lang CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre8 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre8 INTO lc_zz02
   FREE p_zta_set_win_tit_pre8
 
   # 選擇  公司對內全名(zo_file.zo02)
   LET l_sql="SELECT zo02 FROM zo_file WHERE zo01='",
             g_lang CLIPPED,"'"
   PREPARE p_zta_set_win_tit_pre9 FROM l_sql
   EXECUTE p_zta_set_win_tit_pre9 INTO lc_zo02
   IF (SQLCA.SQLCODE) THEN
      LET lc_zo02 = "Empty"
   END IF
   FREE p_zta_set_win_tit_pre9
 
   LET ls_ze031=cl_getmsg("lib-035",g_lang)
   LET ls_ze032=cl_getmsg("lib-036",g_lang)

   LET ls_msg = lc_zz02 CLIPPED, "(", g_prog CLIPPED, ")  [", lc_zo02 CLIPPED, "]", "(", g_dbs CLIPPED, ")"
  #LET ls_msg = ls_msg, "  ", ls_ze031 CLIPPED, ":", g_today, "  ", ls_ze032 CLIPPED, ":", lc_zx02 CLIPPED
   LET ls_tmp = "  ", ls_ze032 CLIPPED, ":", lc_zx02 CLIPPED                       #No.FUN-A60022
   LET ls_msg = ls_msg, "  ", ls_ze031 CLIPPED, ":", g_today, ls_tmp.trimRight()   #No.FUN-A60022
 
   LET lwin_curr = ui.Window.getCurrent()
   CALL lwin_curr.setText(ls_msg)
END FUNCTION
#No.FUN-9C0036 -- end --

#No.FUN-A60050 -- start --
#彈出視窗詢問("欄位說明","combobox項目字串")
FUNCTION p_zta_sel(p_text_str,p_combo_str)
DEFINE p_text_str    STRING
DEFINE p_combo_str   STRING
DEFINE l_str         STRING

   #取得欄位 Text
   LET l_str = cl_getmsg(p_text_str,g_lang)
   IF NOT cl_null(l_str) THEN
      LET p_text_str = l_str
   END IF
   
   #取得combobox項目字串
   LET l_str = cl_getmsg(p_combo_str,g_lang)
   IF NOT cl_null(l_str) THEN
      LET p_combo_str = l_str
   END IF

   LET l_str = ""

   OPEN WINDOW p_zta_sel_w AT 5,20
     WITH FORM "azz/42f/p_zta_sel" ATTRIBUTE(STYLE=g_win_style)

   #-----指定combo module的值-------------#
   CALL cl_set_combo_items("module",p_combo_str,p_combo_str)

   CALL cl_ui_locale("p_zta_sel")   #FUN-9C0036
   #-------------------------------------#
   INPUT l_str FROM module
      BEFORE INPUT
        IF NOT cl_null(p_text_str) THEN
           CALL cl_set_comp_att_text('module',p_text_str)
        END IF

      AFTER FIELD module
            IF l_str is null THEN
               NEXT FIELD module
            END IF
 
      ON ACTION about
         CALL cl_about()
 
      ON ACTION controlg
         CALL cl_cmdask()
 
      ON ACTION help
         CALL cl_show_help()
 
      ON IDLE g_idle_seconds
         CALL cl_on_idle()
         CONTINUE INPUT

    END INPUT
    CLOSE WINDOW p_zta_sel_w
    IF INT_FLAG THEN
       RETURN ''
    END IF
    RETURN l_str

END FUNCTION
#No.FUN-A60050 -- end --

#No.FUN-A60022 -- start --
FUNCTION p_zta_impfile_position()
DEFINE l_command    STRING
DEFINE l_str        STRING
   
       
    IF os.Path.separator() = "/" THEN  
       LET l_command = "/u3/top/zta/FUN/zta_impfile_loc"
    ELSE
       LET l_command = "T:\\top\\tiptop\\zta\\FUN\\zta_impfile_loc_msv"
    END IF

    RETURN l_command
END FUNCTION
#No.FUN-A60022 -- end --

#No.FUN-A80029  -- start --
FUNCTION p_zta_get_feldname(p_command)
DEFINE p_command STRING
DEFINE l_x       LIKE type_file.num5
DEFINE l_y       LIKE type_file.num5
DEFINE l_sql     STRING
DEFINE l_fldname STRING

    LET l_x = 0
    IF g_db_type='MSV' THEN
    IF l_x= 0  THEN 
          LET l_sql ='alter column' 
          LET l_x=p_command.getIndexOf(l_sql,1) 
       END IF
       IF l_x= 0  THEN 
          LET l_sql ='add' 
          LET l_x=p_command.getIndexOf(l_sql,1) 
       END IF
       IF l_x= 0  THEN 
          LET l_sql ='drop' 
          LET l_x=p_command.getIndexOf(l_sql,1) 
       END IF
       IF l_x > 0 THEN
          LET l_x = l_x+l_sql.getlength()+1
          LET l_y=p_command.getIndexOf(' ',l_x)
          LET l_fldname=p_command.subString(l_x,l_y-1)
       END IF
    ELSE
       LET l_x=p_command.getIndexOf('(',1)
       LET l_y=p_command.getIndexOf(' ',l_x)
       LET l_fldname=p_command.subString(l_x+1,l_y-1)
    END IF

    RETURN l_fldname
END FUNCTION

FUNCTION p_zta_set_db_type(p_str)
DEFINE p_str    STRING
DEFINE l_str    STRING

    IF cl_null(FGL_GETENV("TOPLINK")) THEN
       RETURN p_str
    END IF

    #回傳資料庫環境代碼
    CASE cl_db_get_database_type()
        WHEN "ORA"
             LET l_str = p_str
        WHEN "MSV"
             LET l_str = p_str,'m'
             RETURN l_str
        WHEN "MSV"
             LET l_str = p_str,'m'
    END CASE
    RETURN l_str

END FUNCTION
#No.FUN-A80029  -- end --

#No.FUN-A90062 --start --
FUNCTION p_zta_msv_errmsg(p_cmd,p_str)
DEFINE p_cmd           STRING
DEFINE p_str           STRING
DEFINE l_str           STRING
DEFINE l_ze01          LIKE ze_file.ze01
DEFINE l_ze03          LIKE type_file.chr1000  
DEFINE l_lang          LIKE type_file.chr6     
DEFINE l_fldname       LIKE gaq_file.gaq01
DEFINE l_con_name      LIKE zs_file.zs06
DEFINE l_start         LIKE type_file.num5     
DEFINE l_end           LIKE type_file.num5     

    LET l_ze01 = p_str USING '<<<<<<<<<<'
    #SQL Server 語言別
    CASE g_lang 
       WHEN '0'
         LET l_lang='1028'
       WHEN '1'
         LET l_lang='1033'
       WHEN '2'
         LET l_lang='2052'
       OTHERWISE
         LET l_lang='1033'
    END CASE
    IF p_str MATCHES '*is related to index*' THEN
       LET l_ze01 ='5074'
    END IF 
         
    LET l_ze03=NULL

    #讀取 SQL Server 錯誤訊息
    SELECT cast(a.text as nvarchar(1000)) into l_ze03 FROM sys.messages a 
     WHERE a.message_id=l_ze01 and a.language_id=l_lang
    IF l_ze03 IS NULL THEN
       LET l_str = "SQLCA.SQLCODE:",l_ze01 CLIPPED
    ELSE
       LET l_str=l_ze03 CLIPPED
    END IF
 
    IF l_ze01='5074' THEN
       #抓取欄位名稱
       IF p_cmd.getIndexOf('add constraint df__',1)>0 THEN
          LET l_fldname = p_cmd.subString(p_cmd.getIndexOf(' for ',1)+5,p_cmd.getLength())
       ELSE
          LET l_start = p_cmd.getIndexOf('column ',1)+7    #No.FUN-A90062
          LET l_end   = p_cmd.getIndexOf(' ',l_start)-1
          IF l_end = -1 THEN
             LET l_end = p_cmd.getLength()
          END IF
   
          LET l_fldname = p_cmd.subString(l_start, l_end)
       END IF

       LET l_con_name = NULL
       #抓取 default 的 constraint 名稱
       SELECT c.name INTO l_con_name
         FROM sys.columns b,sys.objects c, sys.default_constraints d 
        WHERE b.default_object_id=c.object_id and b.default_object_id=d.object_id and b.name=l_fldname
       IF cl_null(l_con_name) THEN
          #抓取 PK 的 constraint 名稱
          SELECT a.name INTO l_con_name FROM sys.objects a 
           WHERE  a.type='PK' AND  
                  a.parent_object_id IN (SELECT c.object_id FROM sys.columns b, sys.objects c 
                                          WHERE b.name=l_fldname and b.object_id= c.object_id )
       END IF
       #將 5074 錯誤訊息「%1! '%2!' 與 %3! '%4!' 相依」 取代為 「物件 'lmv_pk' 與 資料行 'lmv01' 相依」
       LET l_str = cl_replace_str(l_str,"%1",cl_getmsg("zta-053",g_lang))
       LET l_str = cl_replace_str(l_str,"%2",l_con_name CLIPPED)
       LET l_str = cl_replace_str(l_str,"%3",cl_getmsg("zta-054",g_lang))
       LET l_str = cl_replace_str(l_str,"%4",l_fldname CLIPPED)
    END IF

    RETURN l_str

END FUNCTION

#產生 constraint PK 的 alter 語法
FUNCTION p_zta_pk_sql(p_dbs,p_name,p_tabname,p_fldname)
DEFINE p_dbs            STRING
DEFINE p_name           STRING
DEFINE p_tabname        LIKE type_file.chr20
DEFINE p_fldname        LIKE gaq_file.gaq01
DEFINE l_cmd            STRING
DEFINE l_ztd            RECORD 
                             ztd03     LIKE ztd_file.ztd03,
                             ztd04     LIKE ztd_file.ztd04,
                             ztd05     LIKE ztd_file.ztd05,
                             ztd06     LIKE ztd_file.ztd06,
                             ztd07     LIKE ztd_file.ztd07,
                             ztd08     LIKE ztd_file.ztd08,
                             ztd09     LIKE ztd_file.ztd09,
                             ztd10     LIKE ztd_file.ztd10,
                             ztd11     LIKE ztd_file.ztd11,
                             ztd12     LIKE ztd_file.ztd12,
                             ztd13     LIKE ztd_file.ztd13,
                             ztd14     LIKE ztd_file.ztd14,
                             ztd15     LIKE ztd_file.ztd15,
                             ztd16     LIKE ztd_file.ztd16,
                             ztd17     LIKE ztd_file.ztd17
                        END RECORD
DEFINE  l_deferred      LIKE type_file.chr20
DEFINE  l_definition    LIKE type_file.chr100      
DEFINE  l_position      LIKE ztd_file.ztd14
DEFINE  l_column_name   LIKE ztd_file.ztd13
DEFINE  l_sql           STRING

   LET  g_zta.zta01 = p_tabname 
   LET  l_ztd.ztd03 = p_name
   LET  l_ztd.ztd04 = 'P'

   CASE cl_db_get_database_type()
    WHEN "MSV"
      #取得 PrimaryKey Columns 及 position
      LET l_sql = "SELECT c.index_column_id, d.name ",
                  "  FROM ",g_mssqlarea CLIPPED,"_",p_dbs CLIPPED,".sys.objects a,",
                            g_mssqlarea CLIPPED,"_",p_dbs CLIPPED,".sys.indexes b,",
                            g_mssqlarea CLIPPED,"_",p_dbs CLIPPED,".sys.index_columns c ,",
                            g_mssqlarea CLIPPED,"_",p_dbs CLIPPED,".sys.columns d ",
                  " WHERE a.name ='",g_zta.zta01 CLIPPED,"' ",
                  "   AND a.object_id =b.object_id ",
                  "   AND b.object_id =c.object_id ",
                  "   AND c.object_id =d.object_id ",
                  "   AND b.index_id = c.index_id ",
                  "   AND c.column_id =d.column_id ",
                  "   AND b.name='",l_ztd.ztd03 CLIPPED,"' ",
                  " ORDER BY c.index_column_id "
      DECLARE l_ztd_pk_cs CURSOR FROM l_sql
      FOREACH l_ztd_pk_cs INTO l_position,l_column_name
          IF cl_null(l_ztd.ztd13) THEN
             LET l_ztd.ztd13 = l_column_name CLIPPED
          ELSE
             LET l_ztd.ztd13 = l_ztd.ztd13 CLIPPED,",",l_column_name CLIPPED
          END IF
      END FOREACH 

      #取得 Constraint 資料
      LET l_sql = "SELECT c.IS_DEFERRABLE,c.INITIALLY_DEFERRED",
                  "  FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c ",
                  " WHERE c.CONSTRAINT_NAME ='", l_ztd.ztd03 CLIPPED ,"'"

      DECLARE l_ztd1_cs_1 CURSOR FROM l_sql
      FOREACH l_ztd1_cs_1 INTO l_ztd.ztd10,l_deferred  
          CASE l_ztd.ztd10 
              WHEN "N"
                 LET l_ztd.ztd10 = "1"
              OTHERWISE
                 IF l_deferred = "NO" THEN 
                    LET l_ztd.ztd10 = "3"
                 END IF
          END CASE
      END FOREACH 
   END CASE
   LET l_cmd = p_zta_ztd_setsql(l_ztd.*)
   LET l_cmd = l_cmd.subString(1,l_cmd.getLength()-1)
   RETURN l_cmd

END FUNCTION

#產生 index 的 alter 語法
FUNCTION p_zta_idx_sql(p_name,p_tabname,p_unique)
DEFINE p_dbs            STRING
DEFINE p_name           STRING
DEFINE p_unique         STRING
DEFINE p_tabname        LIKE type_file.chr20
DEFINE l_fldname        LIKE gaq_file.gaq01
DEFINE l_cmd            STRING
DEFINE l_sql           STRING

   CASE cl_db_get_database_type()
    WHEN "MSV"
          LET l_sql=" SELECT d.name FROM  sys.objects a,sys.indexes b, ",
                    "                     sys.index_columns c, sys.columns d ",
                    "  WHERE b.name = '", p_name CLIPPED,"'",
                    "    AND a.name = '", p_tabname CLIPPED,"'",
                    "    AND b.object_id = c.object_id ",
                    "    AND c.object_id = d.object_id ",
                    "    AND a.object_id = b.object_id ",
                    "    AND b.index_id = c.index_id ",
                    "    AND c.column_id =d.column_id "
          DECLARE idx_col_cs CURSOR FROM l_sql
          FOREACH idx_col_cs INTO l_fldname
             IF cl_null(l_cmd) THEN
                LET l_cmd = l_fldname CLIPPED
             ELSE
                LET l_cmd = l_cmd CLIPPED,",",l_fldname CLIPPED
             END IF
          END FOREACH
   END CASE
   IF p_unique = '1' THEN
      LET p_unique = " unique "
   ELSE
      LET p_unique = " "
   END IF
   LET l_cmd = "create" ,p_unique, "index ",p_name," on ",p_tabname," (",l_cmd,")"
   RETURN l_cmd

END FUNCTION

#產生 constraint default alter 語法
FUNCTION p_zta_default_sql(p_tabname,p_fldname,p_default)
DEFINE p_tabname       LIKE type_file.chr20
DEFINE p_fldname       LIKE gaq_file.gaq01     
DEFINE p_default       LIKE ztb_file.ztb11  
DEFINE l_default       LIKE ztb_file.ztb11  
DEFINE l_cmd           STRING
DEFINE l_str           STRING
DEFINE l_start         SMALLINT
DEFINE l_end           SMALLINT
DEFINE l_def_str     STRING

   CASE cl_db_get_database_type()
    WHEN "MSV"
         #取得欄位的預設值，alter column後要重建預設值的constraint
         LET l_str =p_default CLIPPED
         LET l_start=l_str.getIndexOf('\'',1) 
         IF l_start > 0 THEN
            LET l_end=l_str.getIndexOf('\'',l_start+1)
            LET l_default=l_str.subString(l_start+1,l_end-1)
         ELSE
            LET l_start=l_str.getIndexOf('((',1) 
            IF l_start > 0 THEN
               LET l_end=l_str.getIndexOf('))',l_start+1)
               LET l_default=l_str.subString(l_start+2,l_end-1)
            ELSE
               LET l_default=p_default
            END IF
         END IF

         #若預設值為' '(單一空白時),應顯示 ' '
         IF l_default IS NOT NULL AND cl_null(l_default) THEN
            LET l_def_str = " "     
         ELSE
            LET l_def_str = l_default CLIPPED
         END IF
 
         IF l_def_str MATCHES 'getdate()' THEN
            LET l_cmd="alter table ",p_tabname CLIPPED," add constraint df__",p_tabname CLIPPED,"__",p_fldname CLIPPED," default ", l_def_str," for ",p_fldname CLIPPED
         ELSE
            LET l_cmd="alter table ",p_tabname CLIPPED," add constraint df__",p_tabname CLIPPED,"__",p_fldname CLIPPED," default '",l_def_str,"' for ",p_fldname CLIPPED
         END IF
   END CASE
   RETURN l_cmd

END FUNCTION
#No.FUN-A90062 --end --
#Patch....NO.TQC-610037 <001> #
#No.FUN-990050 

